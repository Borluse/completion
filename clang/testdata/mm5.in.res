Fields:
	const dispatch_block_t _dispatch_data_destructor_free
	struct dispatch_data_s _dispatch_data_empty
	struct dispatch_queue_s _dispatch_main_q
	struct dispatch_queue_attr_s _dispatch_queue_attr_concurrent
	const struct dispatch_source_type_s _dispatch_source_type_data_add
	const struct dispatch_source_type_s _dispatch_source_type_data_or
	const struct dispatch_source_type_s _dispatch_source_type_mach_recv
	const struct dispatch_source_type_s _dispatch_source_type_mach_send
	const struct dispatch_source_type_s _dispatch_source_type_proc
	const struct dispatch_source_type_s _dispatch_source_type_read
	const struct dispatch_source_type_s _dispatch_source_type_signal
	const struct dispatch_source_type_s _dispatch_source_type_timer
	const struct dispatch_source_type_s _dispatch_source_type_vnode
	const struct dispatch_source_type_s _dispatch_source_type_write
	const struct _xpc_bool_s _xpc_bool_false
	const struct _xpc_bool_s _xpc_bool_true
	struct _xpc_dictionary_s _xpc_error_connection_interrupted
	struct _xpc_dictionary_s _xpc_error_connection_invalid
	const char * _xpc_error_key_description
	struct _xpc_dictionary_s _xpc_error_termination_imminent
	const char * _xpc_event_key_name
	const struct _xpc_type_s _xpc_type_array
	const struct _xpc_type_s _xpc_type_bool
	const struct _xpc_type_s _xpc_type_connection
	const struct _xpc_type_s _xpc_type_data
	const struct _xpc_type_s _xpc_type_date
	const struct _xpc_type_s _xpc_type_dictionary
	const struct _xpc_type_s _xpc_type_double
	const struct _xpc_type_s _xpc_type_endpoint
	const struct _xpc_type_s _xpc_type_error
	const struct _xpc_type_s _xpc_type_fd
	const struct _xpc_type_s _xpc_type_int64
	const struct _xpc_type_s _xpc_type_null
	const struct _xpc_type_s _xpc_type_shmem
	const struct _xpc_type_s _xpc_type_string
	const struct _xpc_type_s _xpc_type_uint64
	const struct _xpc_type_s _xpc_type_uuid
	enum <anonymous> AAPNotCreatedErr
	enum <anonymous> AAPNotFoundErr
	enum <anonymous> abbrevDate
	enum <anonymous> abortErr
	enum <anonymous> ACE2Type
	enum <anonymous> ACE8Type
	acl_perm_t ACL_ADD_FILE
	acl_perm_t ACL_ADD_SUBDIRECTORY
	acl_perm_t ACL_APPEND_DATA
	acl_perm_t ACL_CHANGE_OWNER
	acl_perm_t ACL_DELETE
	acl_perm_t ACL_DELETE_CHILD
	acl_flag_t ACL_ENTRY_DIRECTORY_INHERIT
	acl_flag_t ACL_ENTRY_FILE_INHERIT
	acl_flag_t ACL_ENTRY_INHERITED
	acl_flag_t ACL_ENTRY_LIMIT_INHERIT
	acl_flag_t ACL_ENTRY_ONLY_INHERIT
	acl_perm_t ACL_EXECUTE
	acl_tag_t ACL_EXTENDED_ALLOW
	acl_tag_t ACL_EXTENDED_DENY
	acl_entry_id_t ACL_FIRST_ENTRY
	acl_flag_t ACL_FLAG_DEFER_INHERIT
	acl_flag_t ACL_FLAG_NO_INHERIT
	acl_entry_id_t ACL_LAST_ENTRY
	acl_perm_t ACL_LIST_DIRECTORY
	acl_entry_id_t ACL_NEXT_ENTRY
	acl_perm_t ACL_READ_ATTRIBUTES
	acl_perm_t ACL_READ_DATA
	acl_perm_t ACL_READ_EXTATTRIBUTES
	acl_perm_t ACL_READ_SECURITY
	acl_perm_t ACL_SEARCH
	acl_type_t ACL_TYPE_ACCESS
	acl_type_t ACL_TYPE_AFS
	acl_type_t ACL_TYPE_CODA
	acl_type_t ACL_TYPE_DEFAULT
	acl_type_t ACL_TYPE_EXTENDED
	acl_type_t ACL_TYPE_NTFS
	acl_type_t ACL_TYPE_NWFS
	acl_tag_t ACL_UNDEFINED_TAG
	acl_perm_t ACL_WRITE_ATTRIBUTES
	acl_perm_t ACL_WRITE_DATA
	acl_perm_t ACL_WRITE_EXTATTRIBUTES
	acl_perm_t ACL_WRITE_SECURITY
	enum <anonymous> activDev
	enum <anonymous> acuteUprA
	enum <anonymous> acuteUprI
	enum <anonymous> acuteUprO
	enum <anonymous> acuteUprU
	enum <anonymous> addRefFailed
	enum <anonymous> addResFailed
	enum <anonymous> aeBuildSyntaxBadData
	enum <anonymous> aeBuildSyntaxBadDesc
	enum <anonymous> aeBuildSyntaxBadEOF
	enum <anonymous> aeBuildSyntaxBadHex
	enum <anonymous> aeBuildSyntaxBadNegative
	enum <anonymous> aeBuildSyntaxBadToken
	enum <anonymous> aeBuildSyntaxCoercedList
	enum <anonymous> aeBuildSyntaxMissingQuote
	enum <anonymous> aeBuildSyntaxNoCloseBrace
	enum <anonymous> aeBuildSyntaxNoCloseBracket
	enum <anonymous> aeBuildSyntaxNoCloseHex
	enum <anonymous> aeBuildSyntaxNoCloseParen
	enum <anonymous> aeBuildSyntaxNoCloseString
	enum <anonymous> aeBuildSyntaxNoColon
	enum <anonymous> aeBuildSyntaxNoEOF
	enum <anonymous> aeBuildSyntaxNoErr
	enum <anonymous> aeBuildSyntaxNoKey
	enum <anonymous> aeBuildSyntaxOddHex
	enum <anonymous> aeBuildSyntaxUncoercedDoubleAt
	enum <anonymous> aeBuildSyntaxUncoercedHex
	enum <anonymous> afpAccessDenied
	enum <anonymous> afpAlreadyLoggedInErr
	enum <anonymous> afpAlreadyMounted
	enum <anonymous> afpAuthContinue
	enum <anonymous> afpBadDirIDType
	enum <anonymous> afpBadIDErr
	enum <anonymous> afpBadUAM
	enum <anonymous> afpBadVersNum
	enum <anonymous> afpBitmapErr
	enum <anonymous> afpCallNotAllowed
	enum <anonymous> afpCallNotSupported
	enum <anonymous> afpCantMountMoreSrvre
	enum <anonymous> afpCantMove
	enum <anonymous> afpCantRename
	enum <anonymous> afpCatalogChanged
	enum <anonymous> afpContainsSharedErr
	enum <anonymous> afpDenyConflict
	enum <anonymous> afpDiffVolErr
	enum <anonymous> afpDirNotEmpty
	enum <anonymous> afpDirNotFound
	enum <anonymous> afpDiskFull
	enum <anonymous> afpEofError
	enum <anonymous> afpFileBusy
	enum <anonymous> afpFlatVol
	enum <anonymous> afpIconTypeError
	enum <anonymous> afpIDExists
	enum <anonymous> afpIDNotFound
	enum <anonymous> afpInsideSharedErr
	enum <anonymous> afpInsideTrashErr
	enum <anonymous> afpItemNotFound
	enum <anonymous> afpLockErr
	enum <anonymous> afpMiscErr
	enum <anonymous> afpNoMoreLocks
	enum <anonymous> afpNoServer
	enum <anonymous> afpObjectExists
	enum <anonymous> afpObjectLocked
	enum <anonymous> afpObjectNotFound
	enum <anonymous> afpObjectTypeErr
	enum <anonymous> afpParmErr
	enum <anonymous> afpPwdExpiredErr
	enum <anonymous> afpPwdNeedsChangeErr
	enum <anonymous> afpPwdPolicyErr
	enum <anonymous> afpPwdSameErr
	enum <anonymous> afpPwdTooShortErr
	enum <anonymous> afpRangeNotLocked
	enum <anonymous> afpRangeOverlap
	enum <anonymous> afpSameNodeErr
	enum <anonymous> afpSameObjectErr
	enum <anonymous> afpServerGoingDown
	enum <anonymous> afpSessClosed
	enum <anonymous> afpTooManyFilesOpen
	enum <anonymous> afpUserNotAuth
	enum <anonymous> afpVolLocked
	enum <anonymous> AIFCID
	enum <anonymous> AIFCVersion1
	enum <anonymous> AIFFID
	enum <anonymous> alphaStage
	enum <anonymous> AnnotationID
	enum <anonymous> appIsDaemon
	enum <anonymous> appleLogo
	enum <anonymous> appleMenuFolderIconResource
	enum <anonymous> AppleShareMediaType
	enum <anonymous> ApplicationSpecificID
	enum <anonymous> appMemFullErr
	enum <anonymous> appModeErr
	enum <anonymous> appVersionTooOld
	int argc
	const char ** argv
	enum <anonymous> ASDBadForkErr
	enum <anonymous> ASDBadHeaderErr
	enum <anonymous> ASDEntryNotFoundErr
	enum <anonymous> asiAliasName
	enum <anonymous> asiParentName
	enum <anonymous> asiServerName
	enum <anonymous> asiVolumeName
	enum <anonymous> asiZoneName
	enum <anonymous> aspBadVersNum
	enum <anonymous> aspBufTooSmall
	enum <anonymous> aspNoAck
	enum <anonymous> aspNoMoreSess
	enum <anonymous> aspNoServers
	enum <anonymous> aspParamErr
	enum <anonymous> aspServerBusy
	enum <anonymous> aspSessClosed
	enum <anonymous> aspSizeErr
	enum <anonymous> aspTooMany
	enum <anonymous> atAbsoluteCenter
	enum <anonymous> atBottom
	enum <anonymous> atBottomLeft
	enum <anonymous> atBottomRight
	enum <anonymous> atCenterBottom
	enum <anonymous> atCenterLeft
	enum <anonymous> atCenterRight
	enum <anonymous> atCenterTop
	enum <anonymous> atHorizontalCenter
	enum <anonymous> atLeft
	enum <anonymous> atNone
	enum <anonymous> atomIndexInvalidErr
	enum <anonymous> atomsNotOfSameTypeErr
	enum <anonymous> atpBadRsp
	enum <anonymous> atpLenErr
	enum <anonymous> atRight
	enum <anonymous> atTop
	enum <anonymous> atTopLeft
	enum <anonymous> atTopRight
	enum <anonymous> atVerticalCenter
	enum <anonymous> AudioRecordingID
	enum <anonymous> authFailErr
	enum <anonymous> AuthorID
	enum <anonymous> auxiliaryExportDataUnavailable
	enum <anonymous> bAccessCntl
	enum <anonymous> badATPSkt
	enum <anonymous> badBtSlpErr
	enum <anonymous> badBuffNum
	enum <anonymous> badCallOrderErr
	enum <anonymous> badChannel
	enum <anonymous> badCksmErr
	enum <anonymous> badCodecCharacterizationErr
	enum <anonymous> badComponentInstance
	enum <anonymous> badComponentSelector
	enum <anonymous> badComponentType
	enum <anonymous> badControllerHeight
	enum <anonymous> badDataRefIndex
	enum <anonymous> badDBtSlp
	enum <anonymous> badDCksum
	enum <anonymous> badDelim
	enum <anonymous> badDepthErr
	enum <anonymous> badDictFormat
	enum <anonymous> badDragFlavorErr
	enum <anonymous> badDragItemErr
	enum <anonymous> badDragRefErr
	enum <anonymous> badEditIndex
	enum <anonymous> badEditionFileErr
	enum <anonymous> badEditList
	enum <anonymous> badEnding
	enum <anonymous> badExtResource
	enum <anonymous> badFCBErr
	enum <anonymous> badFidErr
	enum <anonymous> badFileFormat
	enum <anonymous> badFolderDescErr
	enum <anonymous> badFormat
	enum <anonymous> badImageDescription
	enum <anonymous> badImageErr
	enum <anonymous> badImageRgnErr
	enum <anonymous> badInputText
	enum <anonymous> badLocNameErr
	enum <anonymous> badMDBErr
	enum <anonymous> badMovErr
	enum <anonymous> badPasteboardFlavorErr
	enum <anonymous> badPasteboardIndexErr
	enum <anonymous> badPasteboardItemErr
	enum <anonymous> badPasteboardSyncErr
	enum <anonymous> badPortNameErr
	enum <anonymous> badProfileError
	enum <anonymous> badPublicMovieAtom
	enum <anonymous> badReqErr
	enum <anonymous> badRoutingSizeErr
	enum <anonymous> badScrapRefErr
	enum <anonymous> badSectionErr
	enum <anonymous> badServiceMethodErr
	enum <anonymous> badSGChannel
	enum <anonymous> badSubPartErr
	enum <anonymous> badTrackIndex
	enum <anonymous> badTranslationRefErr
	enum <anonymous> badTranslationSpecErr
	enum <anonymous> badUnitErr
	enum <anonymous> bAllowCDiDataHandler
	enum <anonymous> bAncestorModDateChanges
	enum <anonymous> baseDblQuote
	enum <anonymous> baseSingQuote
	enum <anonymous> bdNamErr
	enum <anonymous> bDoNotDisplay
	enum <anonymous> betaStage
	enum <anonymous> bHasBlankAccessPrivileges
	enum <anonymous> bHasBTreeMgr
	enum <anonymous> bHasCatSearch
	enum <anonymous> bHasCopyFile
	enum <anonymous> bHasDesktopMgr
	enum <anonymous> bHasDirectIO
	enum <anonymous> bHasExtFSVol
	enum <anonymous> bHasFileIDs
	enum <anonymous> bHasFolderLock
	enum <anonymous> bHasMoveRename
	enum <anonymous> bHasOpenDeny
	enum <anonymous> bHasPersonalAccessPrivileges
	enum <anonymous> bHasShortName
	enum <anonymous> bHasUserGroupList
	enum <anonymous> bIsAutoMounted
	enum <anonymous> bIsCasePreserving
	enum <anonymous> bIsCaseSensitive
	enum <anonymous> bIsEjectable
	enum <anonymous> bIsOnExternalBus
	enum <anonymous> bIsOnInternalBus
	enum <anonymous> bIsRemovable
	enum <anonymous> bL2PCanMapFileBlocks
	enum <anonymous> bLimitFCBs
	enum <anonymous> bLocalWList
	enum <anonymous> bNoBootBlks
	enum <anonymous> bNoDeskItems
	enum <anonymous> bNoLclSync
	enum <anonymous> bNoMiniFndr
	enum <anonymous> bNoRootTimes
	enum <anonymous> bNoSwitchTo
	enum <anonymous> bNoSysDir
	enum <anonymous> bNoVNEdit
	enum <anonymous> bNoVolumeSizes
	enum <anonymous> bold
	mach_port_t bootstrap_port
	enum <anonymous> bParentModDateChanges
	enum <anonymous> breakRecd
	enum <anonymous> breveMark
	enum <anonymous> bSupports2TBFiles
	enum <anonymous> bSupportsAsyncRequests
	enum <anonymous> bSupportsExclusiveLocks
	enum <anonymous> bSupportsExtendedFileSecurity
	enum <anonymous> bSupportsFSCatalogSearch
	enum <anonymous> bSupportsFSExchangeObjects
	enum <anonymous> bSupportsHFSPlusAPIs
	enum <anonymous> bSupportsJournaling
	enum <anonymous> bSupportsLongNames
	enum <anonymous> bSupportsMultiScriptNames
	enum <anonymous> bSupportsNamedForks
	enum <anonymous> bSupportsSubtreeIterators
	enum <anonymous> bSupportsSymbolicLinks
	enum <anonymous> bSupportsTrashVolumeCache
	enum <anonymous> btDupRecErr
	enum <anonymous> btKeyAttrErr
	enum <anonymous> btKeyLenErr
	enum <anonymous> btNoSpace
	enum <anonymous> btRecNotFnd
	enum <anonymous> bTrshOffLine
	enum <anonymous> buf2SmallErr
	enum <anonymous> bufferIsSmall
	enum <anonymous> buffersTooSmall
	enum <anonymous> bufTooSmall
	enum <anonymous> cADBAddress
	enum <anonymous> cAddressSpec
	enum <anonymous> cAEList
	enum <anonymous> calArabicCivil
	enum <anonymous> calArabicLunar
	enum <anonymous> calCoptic
	enum <anonymous> calGregorian
	enum <anonymous> calJapanese
	enum <anonymous> calJewish
	enum <anonymous> callNotSupportedByNodeErr
	enum <anonymous> calPersian
	enum <anonymous> cannotBeLeafAtomErr
	enum <anonymous> cannotDeferErr
	enum <anonymous> cannotFindAtomErr
	enum <anonymous> cannotMakeContiguousErr
	enum <anonymous> cannotMoveAttachedController
	enum <anonymous> cannotSetWidthOfAttachedController
	enum <anonymous> cantCreatePickerWindow
	enum <anonymous> cantCreateSingleForkFile
	enum <anonymous> CantDecompress
	enum <anonymous> cantDoThatInCurrentMode
	enum <anonymous> cantEnableTrack
	enum <anonymous> cantFindHandler
	enum <anonymous> cantGetFlavorErr
	enum <anonymous> cantLoadPackage
	enum <anonymous> cantLoadPicker
	enum <anonymous> cantLoadPickMethodErr
	enum <anonymous> cantOpenHandler
	enum <anonymous> cantPutPublicMovieAtom
	enum <anonymous> cantReadUtilities
	enum <anonymous> cantReceiveFromSynthesizerOSErr
	enum <anonymous> cantSendToSynthesizerOSErr
	enum <anonymous> cantStepErr
	enum <anonymous> cAppleTalkAddress
	enum <anonymous> cApplication
	enum <anonymous> cArc
	enum <anonymous> catChangedErr
	const CATransform3D CATransform3DIdentity
	enum <anonymous> cbNotFound
	enum <anonymous> cBoolean
	enum <anonymous> cBusAddress
	enum <anonymous> cCell
	enum <anonymous> cChar
	enum <anonymous> cColorTable
	enum <anonymous> cColumn
	enum <anonymous> CDEFNFnd
	enum <anonymous> cDepthErr
	enum <anonymous> cDevErr
	enum <anonymous> cdevGenErr
	enum <anonymous> cdevMemErr
	enum <anonymous> cdevResErr
	enum <anonymous> cDevSpec
	enum <anonymous> cdevUnset
	enum <anonymous> cDocument
	enum <anonymous> cDrawingArea
	__CE_CrlDistributionPointNameType CE_CDNT_FullName
	__CE_CrlDistributionPointNameType CE_CDNT_NameRelativeToCrlIssuer
	enum <anonymous> cedilla
	enum <anonymous> centeredDot
	enum <anonymous> century
	enum <anonymous> cEnumeration
	enum <anonymous> cEthernetAddress
	__CFByteOrder CFByteOrderBigEndian
	__CFByteOrder CFByteOrderLittleEndian
	__CFByteOrder CFByteOrderUnknown
	enum <anonymous> cFile
	enum <anonymous> cFireWireAddress
	enum <anonymous> cFixed
	enum <anonymous> cFixedPoint
	enum <anonymous> cFixedRectangle
	enum <anonymous> CFNotificationSuspensionBehaviorCoalesce
	enum <anonymous> CFNotificationSuspensionBehaviorDeliverImmediately
	enum <anonymous> CFNotificationSuspensionBehaviorDrop
	enum <anonymous> CFNotificationSuspensionBehaviorHold
	enum <anonymous> cfragAbortClosureErr
	enum <anonymous> cfragArchitectureErr
	enum <anonymous> cfragCFMInternalErr
	enum <anonymous> cfragCFMStartupErr
	enum <anonymous> cfragCFragRsrcErr
	enum <anonymous> cfragClosureIDErr
	enum <anonymous> cfragConnectionIDErr
	enum <anonymous> cfragContainerIDErr
	enum <anonymous> cfragContextIDErr
	enum <anonymous> cfragDupRegistrationErr
	enum <anonymous> cfragExecFileRefErr
	enum <anonymous> cfragFileSizeErr
	enum <anonymous> cfragFirstErrCode
	enum <anonymous> cfragFirstReservedCode
	enum <anonymous> cfragFragmentCorruptErr
	enum <anonymous> cfragFragmentFormatErr
	enum <anonymous> cfragFragmentUsageErr
	enum <anonymous> cfragImportTooNewErr
	enum <anonymous> cfragImportTooOldErr
	enum <anonymous> cfragInitAtBootErr
	enum <anonymous> cfragInitFunctionErr
	enum <anonymous> cfragInitLoopErr
	enum <anonymous> cfragInitOrderErr
	enum <anonymous> cfragLastErrCode
	enum <anonymous> cfragLibConnErr
	enum <anonymous> cfragMapFileErr
	enum <anonymous> cfragNoApplicationErr
	enum <anonymous> cfragNoClientMemErr
	enum <anonymous> cfragNoIDsErr
	enum <anonymous> cfragNoLibraryErr
	enum <anonymous> cfragNoPositionErr
	enum <anonymous> cfragNoPrivateMemErr
	enum <anonymous> cfragNoRegistrationErr
	enum <anonymous> cfragNoSectionErr
	enum <anonymous> cfragNoSymbolErr
	enum <anonymous> cfragNotClosureErr
	enum <anonymous> cfragOutputLengthErr
	enum <anonymous> cfragReservedCode_1
	enum <anonymous> cfragReservedCode_2
	enum <anonymous> cfragReservedCode_3
	enum <anonymous> cfragRsrcForkErr
	enum <anonymous> cfragStdFolderErr
	enum <anonymous> cfragUnresolvedErr
	enum <anonymous> cFTPItem
	const CGAffineTransform CGAffineTransformIdentity
	enum <anonymous> CGGlyphMax
	enum <anonymous> CGGlyphMin
	CGPDFDataFormat CGPDFDataFormatJPEG2000
	CGPDFDataFormat CGPDFDataFormatJPEGEncoded
	CGPDFDataFormat CGPDFDataFormatRaw
	const CGPoint CGPointZero
	enum <anonymous> cGraphicLine
	enum <anonymous> cGraphicObject
	enum <anonymous> cGraphicShape
	enum <anonymous> cGraphicText
	const CGRect CGRectInfinite
	CGRectEdge CGRectMaxXEdge
	CGRectEdge CGRectMaxYEdge
	CGRectEdge CGRectMinXEdge
	CGRectEdge CGRectMinYEdge
	const CGRect CGRectNull
	const CGRect CGRectZero
	enum <anonymous> cGroupedGraphic
	const CGSize CGSizeZero
	enum <anonymous> channelBusy
	enum <anonymous> channelNotBusy
	enum <anonymous> cHTML
	enum <anonymous> cInsertionLoc
	enum <anonymous> cInsertionPoint
	enum <anonymous> cInternetAddress
	enum <anonymous> cIntlText
	enum <anonymous> cIntlWritingCode
	enum <anonymous> cIPAddress
	enum <anonymous> circumflex
	enum <anonymous> circumflexUprA
	enum <anonymous> circumflexUprE
	enum <anonymous> circumflexUprI
	enum <anonymous> circumflexUprO
	enum <anonymous> circumflexUprU
	enum <anonymous> cItem
	enum <anonymous> cKeystroke
	enum <anonymous> ckSumErr
	enum <anonymous> clearDev
	enum <anonymous> cLine
	enum <anonymous> clkRdErr
	enum <anonymous> clkWrErr
	enum <anonymous> cLocalTalkAddress
	enum <anonymous> cLongDateTime
	enum <anonymous> cLongFixed
	enum <anonymous> cLongFixedPoint
	enum <anonymous> cLongFixedRectangle
	enum <anonymous> cLongInteger
	enum <anonymous> cLongPoint
	enum <anonymous> cLongRectangle
	enum <anonymous> closeDev
	enum <anonymous> closErr
	enum <anonymous> cm10CLRData
	enum <anonymous> cm11CLRData
	enum <anonymous> cm12CLRData
	enum <anonymous> cm13CLRData
	enum <anonymous> cm14CLRData
	enum <anonymous> cm15CLRData
	enum <anonymous> cm16_8ColorPacking
	enum <anonymous> cm24_8ColorPacking
	enum <anonymous> cm32_16ColorPacking
	enum <anonymous> cm32_32ColorPacking
	enum <anonymous> cm32_8ColorPacking
	enum <anonymous> cm3CLRData
	enum <anonymous> cm40_8ColorPacking
	enum <anonymous> cm48_16ColorPacking
	enum <anonymous> cm48_8ColorPacking
	enum <anonymous> cm4CLRData
	enum <anonymous> cm56_8ColorPacking
	enum <anonymous> cm5CLRData
	enum <anonymous> cm64_16ColorPacking
	enum <anonymous> cm64_8ColorPacking
	enum <anonymous> cm6CLRData
	enum <anonymous> cm7CLRData
	enum <anonymous> cm8_8ColorPacking
	enum <anonymous> cm8CLRData
	enum <anonymous> cm9CLRData
	enum <anonymous> cmAbortWriteAccess
	enum <anonymous> cmAbsoluteColorimetric
	enum <anonymous> cmAbstractClass
	enum <anonymous> cMachineLoc
	enum <anonymous> cmAlphaFirstPacking
	enum <anonymous> cmAlphaLastPacking
	enum <anonymous> cmAlphaPmulSpace
	enum <anonymous> cmAlphaSpace
	enum <anonymous> cmapFontTableTag
	enum <anonymous> cmARGB32PmulSpace
	enum <anonymous> cmARGB32Space
	enum <anonymous> cmARGB64LPmulSpace
	enum <anonymous> cmARGB64LSpace
	enum <anonymous> cmARGB64PmulSpace
	enum <anonymous> cmARGB64Space
	enum <anonymous> cmAsciiData
	enum <anonymous> cMatchErr
	enum <anonymous> cmAToB0Tag
	enum <anonymous> cmAToB1Tag
	enum <anonymous> cmAToB2Tag
	enum <anonymous> cmBeginAccess
	enum <anonymous> cmBestMode
	enum <anonymous> cmBinaryData
	enum <anonymous> cmBlackPointCompensation
	enum <anonymous> cmBlackPointCompensationMask
	enum <anonymous> cmBlueColorantTag
	enum <anonymous> cmBlueTRCTag
	enum <anonymous> cmBradfordChromaticAdaptation
	enum <anonymous> cmBToA0Tag
	enum <anonymous> cmBToA1Tag
	enum <anonymous> cmBToA2Tag
	enum <anonymous> cmBufferBasedProfile
	enum <anonymous> cmCalibrationDateTimeTag
	enum <anonymous> cmCameraDeviceClass
	enum <anonymous> cmCantConcatenateError
	enum <anonymous> cmCantCopyModifiedV1Profile
	enum <anonymous> cmCantDeleteElement
	enum <anonymous> cmCantDeleteProfile
	enum <anonymous> cmCantGamutCheckError
	enum <anonymous> cmCantXYZ
	enum <anonymous> cmCharTargetTag
	enum <anonymous> cmChromaticAdaptationTag
	enum <anonymous> cmCloseAccess
	enum <anonymous> cmCloseSpool
	enum <anonymous> cmCMSReservedFlagsMask
	enum <anonymous> cmCMYData
	enum <anonymous> cmCMYK32Space
	enum <anonymous> cmCMYK64LSpace
	enum <anonymous> cmCMYK64Space
	enum <anonymous> cmCMYKData
	enum <anonymous> cmCMYKSpace
	enum <anonymous> cmColorSpaceAlphaMask
	enum <anonymous> cmColorSpaceClass
	enum <anonymous> cmColorSpaceEncodingMask
	enum <anonymous> cmColorSpacePackingMask
	enum <anonymous> cmColorSpacePremulAlphaMask
	enum <anonymous> cmColorSpaceReservedMask
	enum <anonymous> cmColorSpaceSpaceAndAlphaMask
	enum <anonymous> cmColorSpaceSpaceMask
	enum <anonymous> cmCopyrightTag
	enum <anonymous> cmCreateNewAccess
	enum <anonymous> cmCS1ChromTag
	enum <anonymous> cmCS1CustTag
	enum <anonymous> cmCS1NameTag
	enum <anonymous> cmCS1ProfileVersion
	enum <anonymous> cmCS1TRCTag
	enum <anonymous> cmCS2ProfileVersion
	enum <anonymous> cmCurrentDeviceInfoVersion
	enum <anonymous> cmCurrentProfileInfoVersion
	enum <anonymous> cmCurrentProfileLocationSize
	enum <anonymous> cmCurrentProfileMajorVersion
	enum <anonymous> cmDefaultDeviceID
	enum <anonymous> cmDefaultProfileID
	enum <anonymous> cmDeviceAlreadyRegistered
	enum <anonymous> cmDeviceDBNotFoundErr
	enum <anonymous> cmDeviceInfoVersion1
	enum <anonymous> cmDeviceMfgDescTag
	enum <anonymous> cmDeviceModelDescTag
	enum <anonymous> cmDeviceNotRegistered
	enum <anonymous> cmDeviceProfileInfoVersion1
	enum <anonymous> cmDeviceProfileInfoVersion2
	enum <anonymous> cmDeviceProfilesNotFound
	enum <anonymous> cmDeviceStateAppleRsvdBits
	enum <anonymous> cmDeviceStateBusy
	enum <anonymous> cmDeviceStateDefault
	enum <anonymous> cmDeviceStateDeviceRsvdBits
	enum <anonymous> cmDeviceStateForceNotify
	enum <anonymous> cmDeviceStateOffline
	enum <anonymous> cmDisplayClass
	enum <anonymous> cmDisplayDeviceClass
	enum <anonymous> cmDisplayUse
	enum <anonymous> cmDraftMode
	enum <anonymous> cmElementTagNotFound
	enum <anonymous> cmEmbeddedMask
	enum <anonymous> cmEmbeddedProfile
	enum <anonymous> cmEmbeddedUse
	enum <anonymous> cmEmbeddedUseMask
	enum <anonymous> cmEndAccess
	enum <anonymous> cMenu
	enum <anonymous> cMenuItem
	enum <anonymous> cmErrIncompatibleProfile
	enum <anonymous> cmFatalProfileErr
	enum <anonymous> cmFlare0
	enum <anonymous> cmFlare100
	enum <anonymous> cmGamutCheckingMask
	enum <anonymous> cmGamutResult1Space
	enum <anonymous> cmGamutResultSpace
	enum <anonymous> cmGamutTag
	enum <anonymous> cmGeometry045or450
	enum <anonymous> cmGeometry0dord0
	enum <anonymous> cmGeometryUnknown
	enum <anonymous> cmGlossy
	enum <anonymous> cmGlossyMatteMask
	enum <anonymous> cmGray16LSpace
	enum <anonymous> cmGray16Space
	enum <anonymous> cmGray8Space
	enum <anonymous> cmGrayA16PmulSpace
	enum <anonymous> cmGrayA16Space
	enum <anonymous> cmGrayA32LPmulSpace
	enum <anonymous> cmGrayA32LSpace
	enum <anonymous> cmGrayA32PmulSpace
	enum <anonymous> cmGrayA32Space
	enum <anonymous> cmGrayAPmulSpace
	enum <anonymous> cmGrayASpace
	enum <anonymous> cmGrayData
	enum <anonymous> cmGraySpace
	enum <anonymous> cmGrayTRCTag
	enum <anonymous> cmGreenColorantTag
	enum <anonymous> cmGreenTRCTag
	enum <anonymous> cmHLS32Space
	enum <anonymous> cmHLSData
	enum <anonymous> cmHLSSpace
	enum <anonymous> cmHSV32Space
	enum <anonymous> cmHSVData
	enum <anonymous> cmHSVSpace
	enum <anonymous> cmICCProfileVersion2
	enum <anonymous> cmICCProfileVersion21
	enum <anonymous> cmICCProfileVersion4
	enum <anonymous> cmICCReservedFlagsMask
	enum <anonymous> cmIlluminantA
	enum <anonymous> cmIlluminantD50
	enum <anonymous> cmIlluminantD55
	enum <anonymous> cmIlluminantD65
	enum <anonymous> cmIlluminantD93
	enum <anonymous> cmIlluminantEquiPower
	enum <anonymous> cmIlluminantF2
	enum <anonymous> cmIlluminantF8
	enum <anonymous> cmIlluminantUnknown
	enum <anonymous> cmIndexRangeErr
	enum <anonymous> cmInputClass
	enum <anonymous> cmInputUse
	enum <anonymous> cmInternalCFErr
	enum <anonymous> cmInterpolationMask
	enum <anonymous> cmInvalidColorSpace
	enum <anonymous> cmInvalidDstMap
	enum <anonymous> cmInvalidProfile
	enum <anonymous> cmInvalidProfileComment
	enum <anonymous> cmInvalidProfileLocation
	enum <anonymous> cmInvalidSearch
	enum <anonymous> cmInvalidSrcMap
	enum <anonymous> cmIterateAllDeviceProfiles
	enum <anonymous> cmIterateCurrentDeviceProfiles
	enum <anonymous> cmIterateCustomDeviceProfiles
	enum <anonymous> cmIterateDeviceProfilesMask
	enum <anonymous> cmIterateFactoryDeviceProfiles
	enum <anonymous> cmLAB24Space
	enum <anonymous> cmLAB32Space
	enum <anonymous> cmLAB48LSpace
	enum <anonymous> cmLAB48Space
	enum <anonymous> cmLabData
	enum <anonymous> cmLABSpace
	enum <anonymous> cmLinearChromaticAdaptation
	enum <anonymous> cmLinesPer
	enum <anonymous> cmLinkClass
	enum <anonymous> cmLittleEndianPacking
	enum <anonymous> cmLong10ColorPacking
	enum <anonymous> cmLong8ColorPacking
	enum <anonymous> cmLuminanceTag
	enum <anonymous> cmLUV32Space
	enum <anonymous> cmLuvData
	enum <anonymous> cmLUVSpace
	enum <anonymous> cmMacintosh
	enum <anonymous> cmMagicNumber
	enum <anonymous> cmMakeAndModelTag
	enum <anonymous> cmMCEight8Space
	enum <anonymous> cmMCEightSpace
	enum <anonymous> cmMCFive8Space
	enum <anonymous> cmMCFiveSpace
	enum <anonymous> cmMCH5Data
	enum <anonymous> cmMCH6Data
	enum <anonymous> cmMCH7Data
	enum <anonymous> cmMCH8Data
	enum <anonymous> cmMCSeven8Space
	enum <anonymous> cmMCSevenSpace
	enum <anonymous> cmMCSix8Space
	enum <anonymous> cmMCSixSpace
	enum <anonymous> cmMeasurementTag
	enum <anonymous> cmMediaBlackPointTag
	enum <anonymous> cmMediaWhitePointTag
	enum <anonymous> cmMethodError
	enum <anonymous> cmMethodNotFound
	enum <anonymous> cmMicrosoft
	enum <anonymous> cmNamedColor2Tag
	enum <anonymous> cmNamedColorClass
	enum <anonymous> cmNamedColorNotFound
	enum <anonymous> cmNamedColorTag
	enum <anonymous> cmNamedData
	enum <anonymous> cmNamedIndexed32LSpace
	enum <anonymous> cmNamedIndexed32Space
	enum <anonymous> cmNamedIndexedSpace
	enum <anonymous> cmNativeDisplayInfoTag
	enum <anonymous> cmNoColorPacking
	enum <anonymous> cmNoCurrentProfile
	enum <anonymous> cmNoGDevicesError
	enum <anonymous> cmNoProfileBase
	enum <anonymous> cmNormalMode
	enum <anonymous> cmNoSpace
	enum <anonymous> cmNumHeaderElements
	enum <anonymous> cmOneBitDirectPacking
	enum <anonymous> cmOpenReadAccess
	enum <anonymous> cmOpenReadSpool
	enum <anonymous> cmOpenWriteAccess
	enum <anonymous> cmOpenWriteSpool
	enum <anonymous> cmOriginalProfileLocationSize
	enum <anonymous> cmOutputClass
	enum <anonymous> cmOutputUse
	enum <anonymous> cmpAliasNoFlags
	enum <anonymous> cmpAliasOnlyThisFile
	enum <anonymous> cmParametricType0
	enum <anonymous> cmParametricType1
	enum <anonymous> cmParametricType2
	enum <anonymous> cmParametricType3
	enum <anonymous> cmParametricType4
	enum <anonymous> cmPathBasedProfile
	enum <anonymous> cmPerceptual
	enum <anonymous> cmpIsMissing
	enum <anonymous> cmPrefsSynchError
	enum <anonymous> cmPreview0Tag
	enum <anonymous> cmPreview1Tag
	enum <anonymous> cmPreview2Tag
	enum <anonymous> cmPrinterDeviceClass
	enum <anonymous> cmProfileDescriptionMLTag
	enum <anonymous> cmProfileDescriptionTag
	enum <anonymous> cmProfileError
	enum <anonymous> cmProfileIterateDataVersion1
	enum <anonymous> cmProfileIterateDataVersion2
	enum <anonymous> cmProfileIterateDataVersion3
	enum <anonymous> cmProfileIterateDataVersion4
	enum <anonymous> cmProfileMajorVersionMask
	enum <anonymous> cmProfileNotFound
	enum <anonymous> cmProfileSequenceDescTag
	enum <anonymous> cmProfilesIdentical
	enum <anonymous> cmProofDeviceClass
	enum <anonymous> cmProofUse
	enum <anonymous> cmPrtrDefaultScreens
	enum <anonymous> cmPS2CRD0Tag
	enum <anonymous> cmPS2CRD1Tag
	enum <anonymous> cmPS2CRD2Tag
	enum <anonymous> cmPS2CRD3Tag
	enum <anonymous> cmPS2CRDVMSizeTag
	enum <anonymous> cmPS2CSATag
	enum <anonymous> cmPS2RenderingIntentTag
	enum <anonymous> cmPS7bit
	enum <anonymous> cmPS8bit
	enum <anonymous> cmpThreadSafe
	enum <anonymous> cmpWantsRegisterMessage
	enum <anonymous> cmQualityMask
	enum <anonymous> cmRangeOverFlow
	enum <anonymous> cmReadAccess
	enum <anonymous> cmReadSpool
	enum <anonymous> cmRedColorantTag
	enum <anonymous> cmRedTRCTag
	enum <anonymous> cmReflective
	enum <anonymous> cmReflectiveTransparentMask
	enum <anonymous> cmRelativeColorimetric
	enum <anonymous> cmReservedSpace1
	enum <anonymous> cmReservedSpace2
	enum <anonymous> cmReverseChannelPacking
	enum <anonymous> cmRGB16LSpace
	enum <anonymous> cmRGB16Space
	enum <anonymous> cmRGB24Space
	enum <anonymous> cmRGB32Space
	enum <anonymous> cmRGB48LSpace
	enum <anonymous> cmRGB48Space
	enum <anonymous> cmRGB565LSpace
	enum <anonymous> cmRGB565Space
	enum <anonymous> cmRGBA32PmulSpace
	enum <anonymous> cmRGBA32Space
	enum <anonymous> cmRGBA64LPmulSpace
	enum <anonymous> cmRGBA64LSpace
	enum <anonymous> cmRGBA64PmulSpace
	enum <anonymous> cmRGBA64Space
	enum <anonymous> cmRGBAPmulSpace
	enum <anonymous> cmRGBASpace
	enum <anonymous> cmRGBData
	enum <anonymous> cmRGBSpace
	enum <anonymous> cmSaturation
	enum <anonymous> cmScannerDeviceClass
	enum <anonymous> cmScreeningDescTag
	enum <anonymous> cmScreeningTag
	enum <anonymous> cmSearchError
	enum <anonymous> cmSigCrdInfoType
	enum <anonymous> cmSigCurveType
	enum <anonymous> cmSigDataType
	enum <anonymous> cmSigDateTimeType
	enum <anonymous> cmSigLut16Type
	enum <anonymous> cmSigLut8Type
	enum <anonymous> cmSigMakeAndModelType
	enum <anonymous> cmSigMeasurementType
	enum <anonymous> cmSigMultiFunctA2BType
	enum <anonymous> cmSigMultiFunctB2AType
	enum <anonymous> cmSigMultiLocalizedUniCodeType
	enum <anonymous> cmSigNamedColor2Type
	enum <anonymous> cmSigNamedColorType
	enum <anonymous> cmSigNativeDisplayInfoType
	enum <anonymous> cmSigParametricCurveType
	enum <anonymous> cmSigProfileDescriptionType
	enum <anonymous> cmSigProfileSequenceDescType
	enum <anonymous> cmSigPS2CRDVMSizeType
	enum <anonymous> cmSigS15Fixed16Type
	enum <anonymous> cmSigScreeningType
	enum <anonymous> cmSigSignatureType
	enum <anonymous> cmSigTextType
	enum <anonymous> cmSigU16Fixed16Type
	enum <anonymous> cmSigU1Fixed15Type
	enum <anonymous> cmSigUcrBgType
	enum <anonymous> cmSigUInt16Type
	enum <anonymous> cmSigUInt32Type
	enum <anonymous> cmSigUInt64Type
	enum <anonymous> cmSigUInt8Type
	enum <anonymous> cmSigUnicodeTextType
	enum <anonymous> cmSigVideoCardGammaType
	enum <anonymous> cmSigViewingConditionsType
	enum <anonymous> cmSigXYZType
	enum <anonymous> cmSiliconGraphics
	enum <anonymous> cmSolaris
	enum <anonymous> cmSpotFunctionCross
	enum <anonymous> cmSpotFunctionDefault
	enum <anonymous> cmSpotFunctionDiamond
	enum <anonymous> cmSpotFunctionEllipse
	enum <anonymous> cmSpotFunctionLine
	enum <anonymous> cmSpotFunctionRound
	enum <anonymous> cmSpotFunctionSquare
	enum <anonymous> cmSpotFunctionUnknown
	enum <anonymous> cmSRGB16ChannelEncoding
	enum <anonymous> cmSRGBData
	enum <anonymous> cmStdobs1931TwoDegrees
	enum <anonymous> cmStdobs1964TenDegrees
	enum <anonymous> cmStdobsUnknown
	enum <anonymous> cmTaligent
	enum <anonymous> cmTechnologyAMDisplay
	enum <anonymous> cmTechnologyCRTDisplay
	enum <anonymous> cmTechnologyDigitalCamera
	enum <anonymous> cmTechnologyDyeSublimationPrinter
	enum <anonymous> cmTechnologyElectrophotographicPrinter
	enum <anonymous> cmTechnologyElectrostaticPrinter
	enum <anonymous> cmTechnologyFilmScanner
	enum <anonymous> cmTechnologyFilmWriter
	enum <anonymous> cmTechnologyFlexography
	enum <anonymous> cmTechnologyGravure
	enum <anonymous> cmTechnologyInkJetPrinter
	enum <anonymous> cmTechnologyOffsetLithography
	enum <anonymous> cmTechnologyPhotoCD
	enum <anonymous> cmTechnologyPhotographicPaperPrinter
	enum <anonymous> cmTechnologyPhotoImageSetter
	enum <anonymous> cmTechnologyPMDisplay
	enum <anonymous> cmTechnologyProjectionTelevision
	enum <anonymous> cmTechnologyReflectiveScanner
	enum <anonymous> cmTechnologySilkscreen
	enum <anonymous> cmTechnologyTag
	enum <anonymous> cmTechnologyThermalWaxPrinter
	enum <anonymous> cmTechnologyVideoCamera
	enum <anonymous> cmTechnologyVideoMonitor
	enum <anonymous> cmTextureRGBtoRGBX16
	enum <anonymous> cmTextureRGBtoRGBX8
	enum <anonymous> cmTextureRGBtoRGBXFloat32
	enum <anonymous> cmUcrBgTag
	enum <anonymous> cmUnsupportedDataType
	enum <anonymous> cmUseDefaultChromaticAdaptation
	enum <anonymous> cmVideoCardGammaFormulaType
	enum <anonymous> cmVideoCardGammaTableType
	enum <anonymous> cmVideoCardGammaTag
	enum <anonymous> cmViewingConditionsDescTag
	enum <anonymous> cmViewingConditionsTag
	enum <anonymous> cmVonKriesChromaticAdaptation
	enum <anonymous> cmWord565ColorPacking
	enum <anonymous> cmWord5ColorPacking
	enum <anonymous> cmWriteAccess
	enum <anonymous> cmWriteSpool
	enum <anonymous> cmXYZ24Space
	enum <anonymous> cmXYZ32Space
	enum <anonymous> cmXYZ48LSpace
	enum <anonymous> cmXYZ48Space
	enum <anonymous> cmXYZData
	enum <anonymous> cmXYZSpace
	enum <anonymous> cmYCbCrData
	enum <anonymous> cmYXY32Space
	enum <anonymous> cmYxyData
	enum <anonymous> cmYXYSpace
	enum <anonymous> cNoMemErr
	enum <anonymous> cObject
	enum <anonymous> cObjectSpecifier
	enum <anonymous> codecAbortErr
	enum <anonymous> codecBadDataErr
	enum <anonymous> codecCantQueueErr
	enum <anonymous> codecCantWhenErr
	enum <anonymous> codecConditionErr
	enum <anonymous> codecDataVersErr
	enum <anonymous> codecDisabledErr
	enum <anonymous> codecDroppedFrameErr
	enum <anonymous> codecErr
	enum <anonymous> codecExtensionNotFoundErr
	enum <anonymous> codecImageBufErr
	enum <anonymous> codecNeedAccessKeyErr
	enum <anonymous> codecNeedToFlushChainErr
	enum <anonymous> codecNoMemoryPleaseWaitErr
	enum <anonymous> codecNothingToBlitErr
	enum <anonymous> codecOffscreenFailedErr
	enum <anonymous> codecOffscreenFailedPleaseRetryErr
	enum <anonymous> codecOpenErr
	enum <anonymous> codecParameterDialogConfirm
	enum <anonymous> codecScreenBufErr
	enum <anonymous> codecSizeErr
	enum <anonymous> codecSpoolErr
	enum <anonymous> codecUnimpErr
	enum <anonymous> codecWouldOffscreenErr
	enum <anonymous> collectionIndexRangeErr
	enum <anonymous> collectionItemLockedErr
	enum <anonymous> collectionItemNotFoundErr
	enum <anonymous> collectionVersionErr
	enum <anonymous> colorsRequestedErr
	enum <anonymous> colorSyncNotInstalled
	enum <anonymous> CommentID
	enum <anonymous> CommonID
	enum <anonymous> componentAutoVersionIncludeFlags
	enum <anonymous> componentDllEntryNotFoundErr
	enum <anonymous> componentDllLoadErr
	enum <anonymous> componentDoAutoVersion
	enum <anonymous> componentDontRegister
	enum <anonymous> componentHasMultiplePlatforms
	enum <anonymous> componentLoadResident
	enum <anonymous> componentNotCaptured
	enum <anonymous> componentNotThreadSafeErr
	enum <anonymous> componentWantsUnregister
	enum <anonymous> condense
	enum <anonymous> connectionInvalid
	enum <anonymous> constraintReachedErr
	enum <anonymous> containerAlreadyOpenWrn
	enum <anonymous> containerNotFoundWrn
	enum <anonymous> controlErr
	enum <anonymous> controlHandleInvalidErr
	enum <anonymous> controlInvalidDataVersionErr
	enum <anonymous> controllerBoundsNotExact
	enum <anonymous> controllerHasFixedHeight
	enum <anonymous> controlPanelFolderIconResource
	enum <anonymous> controlPropertyInvalid
	enum <anonymous> controlPropertyNotFoundErr
	enum <anonymous> cOpenableObject
	enum <anonymous> copyDev
	enum <anonymous> CopyrightID
	enum <anonymous> coreFoundationUnknownErr
	enum <anonymous> corErr
	enum <anonymous> couldNotParseSourceFileErr
	enum <anonymous> couldNotResolveDataRef
	enum <anonymous> couldNotUseAnExistingSample
	enum <anonymous> couldntGetRequiredComponent
	enum <anonymous> cOval
	enum <anonymous> cParagraph
	enum <anonymous> cPICT
	enum <anonymous> cPixel
	enum <anonymous> cPixelMap
	enum <anonymous> cPolygon
	enum <anonymous> cProperty
	enum <anonymous> cProtectErr
	enum <anonymous> cQDPoint
	enum <anonymous> cQDRectangle
	enum <anonymous> cRangeErr
	enum <anonymous> crash
	enum <anonymous> cRectangle
	enum <anonymous> cResErr
	enum <anonymous> cRGBColor
	enum <anonymous> cRotation
	enum <anonymous> cRoundedRectangle
	enum <anonymous> cRow
	enum <anonymous> CS_MAX_PATH
	enum <anonymous> cSCSIAddress
	enum <anonymous> cSelection
	enum <anonymous> cShortInteger
	enum <anonymous> CSSM_AC_BASE_AC_ERROR
	enum <anonymous> CSSM_AC_BASE_ERROR
	enum <anonymous> CSSM_AC_PRIVATE_ERROR
	enum <anonymous> CSSM_ACL_AUTHORIZATION_ANY
	enum <anonymous> CSSM_ACL_AUTHORIZATION_CHANGE_ACL
	enum <anonymous> CSSM_ACL_AUTHORIZATION_CHANGE_OWNER
	enum <anonymous> CSSM_ACL_AUTHORIZATION_DB_DELETE
	enum <anonymous> CSSM_ACL_AUTHORIZATION_DB_INSERT
	enum <anonymous> CSSM_ACL_AUTHORIZATION_DB_MODIFY
	enum <anonymous> CSSM_ACL_AUTHORIZATION_DB_READ
	enum <anonymous> CSSM_ACL_AUTHORIZATION_DBS_CREATE
	enum <anonymous> CSSM_ACL_AUTHORIZATION_DBS_DELETE
	enum <anonymous> CSSM_ACL_AUTHORIZATION_DECRYPT
	enum <anonymous> CSSM_ACL_AUTHORIZATION_DELETE
	enum <anonymous> CSSM_ACL_AUTHORIZATION_DERIVE
	enum <anonymous> CSSM_ACL_AUTHORIZATION_ENCRYPT
	enum <anonymous> CSSM_ACL_AUTHORIZATION_EXPORT_CLEAR
	enum <anonymous> CSSM_ACL_AUTHORIZATION_EXPORT_WRAPPED
	enum <anonymous> CSSM_ACL_AUTHORIZATION_GENKEY
	enum <anonymous> CSSM_ACL_AUTHORIZATION_IMPORT_CLEAR
	enum <anonymous> CSSM_ACL_AUTHORIZATION_IMPORT_WRAPPED
	enum <anonymous> CSSM_ACL_AUTHORIZATION_LOGIN
	enum <anonymous> CSSM_ACL_AUTHORIZATION_MAC
	enum <anonymous> CSSM_ACL_AUTHORIZATION_PREAUTH_BASE
	enum <anonymous> CSSM_ACL_AUTHORIZATION_PREAUTH_END
	enum <anonymous> CSSM_ACL_AUTHORIZATION_SIGN
	enum <anonymous> CSSM_ACL_AUTHORIZATION_TAG_VENDOR_DEFINED_START
	enum <anonymous> CSSM_ACL_CODE_SIGNATURE_INVALID
	enum <anonymous> CSSM_ACL_CODE_SIGNATURE_OSX
	enum <anonymous> CSSM_ACL_EDIT_MODE_ADD
	enum <anonymous> CSSM_ACL_EDIT_MODE_DELETE
	enum <anonymous> CSSM_ACL_EDIT_MODE_REPLACE
	enum <anonymous> CSSM_ACL_KEYCHAIN_PROMPT_CURRENT_VERSION
	enum <anonymous> CSSM_ACL_KEYCHAIN_PROMPT_INVALID
	enum <anonymous> CSSM_ACL_KEYCHAIN_PROMPT_INVALID_ACT
	enum <anonymous> CSSM_ACL_KEYCHAIN_PROMPT_REQUIRE_PASSPHRASE
	enum <anonymous> CSSM_ACL_KEYCHAIN_PROMPT_UNSIGNED
	enum <anonymous> CSSM_ACL_KEYCHAIN_PROMPT_UNSIGNED_ACT
	enum <anonymous> CSSM_ACL_MATCH_BITS
	enum <anonymous> CSSM_ACL_MATCH_GID
	enum <anonymous> CSSM_ACL_MATCH_HONOR_ROOT
	enum <anonymous> CSSM_ACL_MATCH_UID
	enum <anonymous> CSSM_ACL_PREAUTH_TRACKING_AUTHORIZED
	enum <anonymous> CSSM_ACL_PREAUTH_TRACKING_BLOCKED
	enum <anonymous> CSSM_ACL_PREAUTH_TRACKING_COUNT_MASK
	enum <anonymous> CSSM_ACL_PREAUTH_TRACKING_UNKNOWN
	enum <anonymous> CSSM_ACL_PROCESS_SELECTOR_CURRENT_VERSION
	enum <anonymous> CSSM_ACL_SUBJECT_TYPE_ANY
	enum <anonymous> CSSM_ACL_SUBJECT_TYPE_ASYMMETRIC_KEY
	enum <anonymous> CSSM_ACL_SUBJECT_TYPE_BIOMETRIC
	enum <anonymous> CSSM_ACL_SUBJECT_TYPE_CODE_SIGNATURE
	enum <anonymous> CSSM_ACL_SUBJECT_TYPE_COMMENT
	enum <anonymous> CSSM_ACL_SUBJECT_TYPE_EXT_PAM_NAME
	enum <anonymous> CSSM_ACL_SUBJECT_TYPE_HASHED_SUBJECT
	enum <anonymous> CSSM_ACL_SUBJECT_TYPE_KEYCHAIN_PROMPT
	enum <anonymous> CSSM_ACL_SUBJECT_TYPE_LOGIN_NAME
	enum <anonymous> CSSM_ACL_SUBJECT_TYPE_PASSWORD
	enum <anonymous> CSSM_ACL_SUBJECT_TYPE_PREAUTH
	enum <anonymous> CSSM_ACL_SUBJECT_TYPE_PREAUTH_SOURCE
	enum <anonymous> CSSM_ACL_SUBJECT_TYPE_PROCESS
	enum <anonymous> CSSM_ACL_SUBJECT_TYPE_PROMPTED_BIOMETRIC
	enum <anonymous> CSSM_ACL_SUBJECT_TYPE_PROMPTED_PASSWORD
	enum <anonymous> CSSM_ACL_SUBJECT_TYPE_PROTECTED_BIOMETRIC
	enum <anonymous> CSSM_ACL_SUBJECT_TYPE_PROTECTED_PASSWORD
	enum <anonymous> CSSM_ACL_SUBJECT_TYPE_PUBLIC_KEY
	enum <anonymous> CSSM_ACL_SUBJECT_TYPE_SYMMETRIC_KEY
	enum <anonymous> CSSM_ACL_SUBJECT_TYPE_THRESHOLD
	enum <anonymous> CSSM_ADDR_CUSTOM
	enum <anonymous> CSSM_ADDR_NAME
	enum <anonymous> CSSM_ADDR_NONE
	enum <anonymous> CSSM_ADDR_SOCKADDR
	enum <anonymous> CSSM_ADDR_URL
	enum <anonymous> CSSM_ALGCLASS_ASYMMETRIC
	enum <anonymous> CSSM_ALGCLASS_CUSTOM
	enum <anonymous> CSSM_ALGCLASS_DERIVEKEY
	enum <anonymous> CSSM_ALGCLASS_DIGEST
	enum <anonymous> CSSM_ALGCLASS_KEYGEN
	enum <anonymous> CSSM_ALGCLASS_MAC
	enum <anonymous> CSSM_ALGCLASS_NONE
	enum <anonymous> CSSM_ALGCLASS_RANDOMGEN
	enum <anonymous> CSSM_ALGCLASS_SIGNATURE
	enum <anonymous> CSSM_ALGCLASS_SYMMETRIC
	enum <anonymous> CSSM_ALGCLASS_UNIQUEGEN
	enum <anonymous> CSSM_ALGID_3DES
	enum <anonymous> CSSM_ALGID_3DES_1KEY
	enum <anonymous> CSSM_ALGID_3DES_1KEY_EEE
	enum <anonymous> CSSM_ALGID_3DES_2KEY
	enum <anonymous> CSSM_ALGID_3DES_2KEY_EDE
	enum <anonymous> CSSM_ALGID_3DES_2KEY_EEE
	enum <anonymous> CSSM_ALGID_3DES_3KEY
	enum <anonymous> CSSM_ALGID_3DES_3KEY_EDE
	enum <anonymous> CSSM_ALGID_3DES_3KEY_EEE
	enum <anonymous> CSSM_ALGID__FIRST_UNUSED
	enum <anonymous> CSSM_ALGID_AES
	enum <anonymous> CSSM_ALGID_APPLE_YARROW
	enum <anonymous> CSSM_ALGID_ASC
	enum <anonymous> CSSM_ALGID_BATON
	enum <anonymous> CSSM_ALGID_BLOWFISH
	enum <anonymous> CSSM_ALGID_CAST
	enum <anonymous> CSSM_ALGID_CAST3
	enum <anonymous> CSSM_ALGID_CAST5
	enum <anonymous> CSSM_ALGID_CDMF
	enum <anonymous> CSSM_ALGID_ConcatBaseAndData
	enum <anonymous> CSSM_ALGID_ConcatBaseAndKey
	enum <anonymous> CSSM_ALGID_ConcatDataAndBase
	enum <anonymous> CSSM_ALGID_ConcatKeyAndBase
	enum <anonymous> CSSM_ALGID_CRAB
	enum <anonymous> CSSM_ALGID_CUSTOM
	enum <anonymous> CSSM_ALGID_DES
	enum <anonymous> CSSM_ALGID_DESRandom
	enum <anonymous> CSSM_ALGID_DESX
	enum <anonymous> CSSM_ALGID_DH
	enum <anonymous> CSSM_ALGID_DSA
	enum <anonymous> CSSM_ALGID_DSA_BSAFE
	enum <anonymous> CSSM_ALGID_ECAES
	enum <anonymous> CSSM_ALGID_ECC
	enum <anonymous> CSSM_ALGID_ECDH
	enum <anonymous> CSSM_ALGID_ECDH_X963_KDF
	enum <anonymous> CSSM_ALGID_ECDSA
	enum <anonymous> CSSM_ALGID_ECDSA_SPECIFIED
	enum <anonymous> CSSM_ALGID_ECES
	enum <anonymous> CSSM_ALGID_ECMQV
	enum <anonymous> CSSM_ALGID_ECNRA
	enum <anonymous> CSSM_ALGID_ElGamal
	enum <anonymous> CSSM_ALGID_ENTROPY_DEFAULT
	enum <anonymous> CSSM_ALGID_ExtractFromKey
	enum <anonymous> CSSM_ALGID_FASTHASH
	enum <anonymous> CSSM_ALGID_FEAL
	enum <anonymous> CSSM_ALGID_FEE
	enum <anonymous> CSSM_ALGID_FEE_MD5
	enum <anonymous> CSSM_ALGID_FEE_SHA1
	enum <anonymous> CSSM_ALGID_FEED
	enum <anonymous> CSSM_ALGID_FEEDEXP
	enum <anonymous> CSSM_ALGID_FIPS186Random
	enum <anonymous> CSSM_ALGID_FortezzaTimestamp
	enum <anonymous> CSSM_ALGID_GenericSecret
	enum <anonymous> CSSM_ALGID_GOST
	enum <anonymous> CSSM_ALGID_HAVAL
	enum <anonymous> CSSM_ALGID_HAVAL3
	enum <anonymous> CSSM_ALGID_HAVAL4
	enum <anonymous> CSSM_ALGID_HAVAL5
	enum <anonymous> CSSM_ALGID_IBCHASH
	enum <anonymous> CSSM_ALGID_IDEA
	enum <anonymous> CSSM_ALGID_IntelPlatformRandom
	enum <anonymous> CSSM_ALGID_JUNIPER
	enum <anonymous> CSSM_ALGID_KEA
	enum <anonymous> CSSM_ALGID_KEYCHAIN_KEY
	enum <anonymous> CSSM_ALGID_KHAFRE
	enum <anonymous> CSSM_ALGID_KHUFU
	enum <anonymous> CSSM_ALGID_LAST
	enum <anonymous> CSSM_ALGID_LOKI
	enum <anonymous> CSSM_ALGID_LUCIFER
	enum <anonymous> CSSM_ALGID_MADRYGA
	enum <anonymous> CSSM_ALGID_MAYFLY
	enum <anonymous> CSSM_ALGID_MD2
	enum <anonymous> CSSM_ALGID_MD2Random
	enum <anonymous> CSSM_ALGID_MD2WithRSA
	enum <anonymous> CSSM_ALGID_MD4
	enum <anonymous> CSSM_ALGID_MD5
	enum <anonymous> CSSM_ALGID_MD5HMAC
	enum <anonymous> CSSM_ALGID_MD5Random
	enum <anonymous> CSSM_ALGID_MD5WithRSA
	enum <anonymous> CSSM_ALGID_MMB
	enum <anonymous> CSSM_ALGID_MQV
	enum <anonymous> CSSM_ALGID_NHASH
	enum <anonymous> CSSM_ALGID_NONE
	enum <anonymous> CSSM_ALGID_NRA
	enum <anonymous> CSSM_ALGID_OPENSSH1
	enum <anonymous> CSSM_ALGID_PBE_OPENSSL_MD5
	enum <anonymous> CSSM_ALGID_PH
	enum <anonymous> CSSM_ALGID_PKCS12_PBE_ENCR
	enum <anonymous> CSSM_ALGID_PKCS12_PBE_MAC
	enum <anonymous> CSSM_ALGID_PKCS12_SHA1_PBE
	enum <anonymous> CSSM_ALGID_PKCS5_PBKDF1_MD2
	enum <anonymous> CSSM_ALGID_PKCS5_PBKDF1_MD5
	enum <anonymous> CSSM_ALGID_PKCS5_PBKDF1_SHA1
	enum <anonymous> CSSM_ALGID_PKCS5_PBKDF2
	enum <anonymous> CSSM_ALGID_RC2
	enum <anonymous> CSSM_ALGID_RC4
	enum <anonymous> CSSM_ALGID_RC5
	enum <anonymous> CSSM_ALGID_RDES
	enum <anonymous> CSSM_ALGID_REDOC
	enum <anonymous> CSSM_ALGID_REDOC3
	enum <anonymous> CSSM_ALGID_RIPEMAC
	enum <anonymous> CSSM_ALGID_RIPEMD
	enum <anonymous> CSSM_ALGID_RSA
	enum <anonymous> CSSM_ALGID_RUNNING_COUNTER
	enum <anonymous> CSSM_ALGID_SAFER
	enum <anonymous> CSSM_ALGID_SEAL
	enum <anonymous> CSSM_ALGID_SECURE_PASSPHRASE
	enum <anonymous> CSSM_ALGID_SHA1
	enum <anonymous> CSSM_ALGID_SHA1HMAC
	enum <anonymous> CSSM_ALGID_SHA1HMAC_LEGACY
	enum <anonymous> CSSM_ALGID_SHA1WithDSA
	enum <anonymous> CSSM_ALGID_SHA1WithECDSA
	enum <anonymous> CSSM_ALGID_SHA1WithECNRA
	enum <anonymous> CSSM_ALGID_SHA1WithRSA
	enum <anonymous> CSSM_ALGID_SHA224
	enum <anonymous> CSSM_ALGID_SHA224WithECDSA
	enum <anonymous> CSSM_ALGID_SHA224WithRSA
	enum <anonymous> CSSM_ALGID_SHA256
	enum <anonymous> CSSM_ALGID_SHA256WithECDSA
	enum <anonymous> CSSM_ALGID_SHA256WithRSA
	enum <anonymous> CSSM_ALGID_SHA384
	enum <anonymous> CSSM_ALGID_SHA384WithECDSA
	enum <anonymous> CSSM_ALGID_SHA384WithRSA
	enum <anonymous> CSSM_ALGID_SHA512
	enum <anonymous> CSSM_ALGID_SHA512WithECDSA
	enum <anonymous> CSSM_ALGID_SHA512WithRSA
	enum <anonymous> CSSM_ALGID_SHARandom
	enum <anonymous> CSSM_ALGID_SKIPJACK
	enum <anonymous> CSSM_ALGID_SSL3KeyAndMacDerive
	enum <anonymous> CSSM_ALGID_SSL3MasterDerive
	enum <anonymous> CSSM_ALGID_SSL3MD5
	enum <anonymous> CSSM_ALGID_SSL3MD5_MAC
	enum <anonymous> CSSM_ALGID_SSL3PreMasterGen
	enum <anonymous> CSSM_ALGID_SSL3SHA1
	enum <anonymous> CSSM_ALGID_SSL3SHA1_MAC
	enum <anonymous> CSSM_ALGID_TIGER
	enum <anonymous> CSSM_ALGID_UTC
	enum <anonymous> CSSM_ALGID_VENDOR_DEFINED
	enum <anonymous> CSSM_ALGID_WrapLynks
	enum <anonymous> CSSM_ALGID_WrapSET_OAEP
	enum <anonymous> CSSM_ALGID_XORBaseAndData
	enum <anonymous> CSSM_ALGMODE_BC
	enum <anonymous> CSSM_ALGMODE_CBC
	enum <anonymous> CSSM_ALGMODE_CBC128
	enum <anonymous> CSSM_ALGMODE_CBC64
	enum <anonymous> CSSM_ALGMODE_CBC_IV8
	enum <anonymous> CSSM_ALGMODE_CBCC
	enum <anonymous> CSSM_ALGMODE_CBCPadIV8
	enum <anonymous> CSSM_ALGMODE_CBCPD
	enum <anonymous> CSSM_ALGMODE_CFB
	enum <anonymous> CSSM_ALGMODE_CFB16
	enum <anonymous> CSSM_ALGMODE_CFB32
	enum <anonymous> CSSM_ALGMODE_CFB8
	enum <anonymous> CSSM_ALGMODE_CFB_IV8
	enum <anonymous> CSSM_ALGMODE_CFBPadIV8
	enum <anonymous> CSSM_ALGMODE_COUNTER
	enum <anonymous> CSSM_ALGMODE_CUSTOM
	enum <anonymous> CSSM_ALGMODE_ECB
	enum <anonymous> CSSM_ALGMODE_ECB128
	enum <anonymous> CSSM_ALGMODE_ECB64
	enum <anonymous> CSSM_ALGMODE_ECB96
	enum <anonymous> CSSM_ALGMODE_ECBPad
	enum <anonymous> CSSM_ALGMODE_ISO_9796
	enum <anonymous> CSSM_ALGMODE_LAST
	enum <anonymous> CSSM_ALGMODE_NONE
	enum <anonymous> CSSM_ALGMODE_OAEP_HASH
	enum <anonymous> CSSM_ALGMODE_OFB
	enum <anonymous> CSSM_ALGMODE_OFB64
	enum <anonymous> CSSM_ALGMODE_OFB_IV8
	enum <anonymous> CSSM_ALGMODE_OFBNLF
	enum <anonymous> CSSM_ALGMODE_OFBPadIV8
	enum <anonymous> CSSM_ALGMODE_PBC
	enum <anonymous> CSSM_ALGMODE_PCBC
	enum <anonymous> CSSM_ALGMODE_PFB
	enum <anonymous> CSSM_ALGMODE_PKCS1_EME_OAEP
	enum <anonymous> CSSM_ALGMODE_PKCS1_EME_V15
	enum <anonymous> CSSM_ALGMODE_PKCS1_EMSA_V15
	enum <anonymous> CSSM_ALGMODE_PRIVATE_KEY
	enum <anonymous> CSSM_ALGMODE_PRIVATE_WRAP
	enum <anonymous> CSSM_ALGMODE_PUBLIC_KEY
	enum <anonymous> CSSM_ALGMODE_RELAYX
	enum <anonymous> CSSM_ALGMODE_SHUFFLE
	enum <anonymous> CSSM_ALGMODE_VENDOR_DEFINED
	enum <anonymous> CSSM_ALGMODE_WRAP
	enum <anonymous> CSSM_ALGMODE_X9_31
	enum <anonymous> CSSM_APPLE_PRIVATE_CSPDL_CODE_10
	enum <anonymous> CSSM_APPLE_PRIVATE_CSPDL_CODE_11
	enum <anonymous> CSSM_APPLE_PRIVATE_CSPDL_CODE_12
	enum <anonymous> CSSM_APPLE_PRIVATE_CSPDL_CODE_13
	enum <anonymous> CSSM_APPLE_PRIVATE_CSPDL_CODE_14
	enum <anonymous> CSSM_APPLE_PRIVATE_CSPDL_CODE_15
	enum <anonymous> CSSM_APPLE_PRIVATE_CSPDL_CODE_16
	enum <anonymous> CSSM_APPLE_PRIVATE_CSPDL_CODE_8
	enum <anonymous> CSSM_APPLE_PRIVATE_CSPDL_CODE_9
	enum <anonymous> CSSM_APPLE_UNLOCK_TYPE_KEY_DIRECT
	enum <anonymous> CSSM_APPLE_UNLOCK_TYPE_WRAPPED_PRIVATE
	enum <anonymous> CSSM_APPLECSP_KEYDIGEST
	enum <anonymous> CSSM_APPLECSPDL_DB_CHANGE_PASSWORD
	enum <anonymous> CSSM_APPLECSPDL_DB_GET_HANDLE
	enum <anonymous> CSSM_APPLECSPDL_DB_GET_SETTINGS
	enum <anonymous> CSSM_APPLECSPDL_DB_IS_LOCKED
	enum <anonymous> CSSM_APPLECSPDL_DB_LOCK
	enum <anonymous> CSSM_APPLECSPDL_DB_SET_SETTINGS
	enum <anonymous> CSSM_APPLECSPDL_DB_UNLOCK
	enum <anonymous> CSSM_APPLEDL_OPEN_PARAMETERS_VERSION
	enum <anonymous> CSSM_APPLEFILEDL_COMMIT
	enum <anonymous> CSSM_APPLEFILEDL_ROLLBACK
	enum <anonymous> CSSM_APPLEFILEDL_TOGGLE_AUTOCOMMIT
	enum <anonymous> CSSM_APPLESCPDL_CSP_GET_KEYHANDLE
	enum <anonymous> CSSM_APPLEX509CL_OBTAIN_CSR
	enum <anonymous> CSSM_APPLEX509CL_VERIFY_CSR
	enum <anonymous> CSSM_ASC_OPTIMIZE_ASCII
	enum <anonymous> CSSM_ASC_OPTIMIZE_DEFAULT
	enum <anonymous> CSSM_ASC_OPTIMIZE_SECURITY
	enum <anonymous> CSSM_ASC_OPTIMIZE_SIZE
	enum <anonymous> CSSM_ASC_OPTIMIZE_TIME
	enum <anonymous> CSSM_ASC_OPTIMIZE_TIME_SIZE
	enum <anonymous> CSSM_ATTACH_READ_ONLY
	enum <anonymous> CSSM_ATTRIBUTE_ACCESS_CREDENTIALS
	enum <anonymous> CSSM_ATTRIBUTE_ALERT_TITLE
	enum <anonymous> CSSM_ATTRIBUTE_ALG_ID
	enum <anonymous> CSSM_ATTRIBUTE_ALG_PARAMS
	enum <anonymous> CSSM_ATTRIBUTE_ASC_OPTIMIZATION
	enum <anonymous> CSSM_ATTRIBUTE_BASE
	enum <anonymous> CSSM_ATTRIBUTE_BLOCK_SIZE
	enum <anonymous> CSSM_ATTRIBUTE_CSP_HANDLE
	enum <anonymous> CSSM_ATTRIBUTE_CUSTOM
	enum <anonymous> CSSM_ATTRIBUTE_DATA_ACCESS_CREDENTIALS
	enum <anonymous> CSSM_ATTRIBUTE_DATA_CRYPTO_DATA
	enum <anonymous> CSSM_ATTRIBUTE_DATA_CSSM_DATA
	enum <anonymous> CSSM_ATTRIBUTE_DATA_DATE
	enum <anonymous> CSSM_ATTRIBUTE_DATA_DL_DB_HANDLE
	enum <anonymous> CSSM_ATTRIBUTE_DATA_KEY
	enum <anonymous> CSSM_ATTRIBUTE_DATA_KR_PROFILE
	enum <anonymous> CSSM_ATTRIBUTE_DATA_NONE
	enum <anonymous> CSSM_ATTRIBUTE_DATA_RANGE
	enum <anonymous> CSSM_ATTRIBUTE_DATA_STRING
	enum <anonymous> CSSM_ATTRIBUTE_DATA_UINT32
	enum <anonymous> CSSM_ATTRIBUTE_DATA_VERSION
	enum <anonymous> CSSM_ATTRIBUTE_DESCRIPTION
	enum <anonymous> CSSM_ATTRIBUTE_DL_DB_HANDLE
	enum <anonymous> CSSM_ATTRIBUTE_EFFECTIVE_BITS
	enum <anonymous> CSSM_ATTRIBUTE_END_DATE
	enum <anonymous> CSSM_ATTRIBUTE_FEE_CURVE_TYPE
	enum <anonymous> CSSM_ATTRIBUTE_FEE_PRIME_TYPE
	enum <anonymous> CSSM_ATTRIBUTE_INIT_VECTOR
	enum <anonymous> CSSM_ATTRIBUTE_ITERATION_COUNT
	enum <anonymous> CSSM_ATTRIBUTE_IV_SIZE
	enum <anonymous> CSSM_ATTRIBUTE_KEY
	enum <anonymous> CSSM_ATTRIBUTE_KEY_LENGTH
	enum <anonymous> CSSM_ATTRIBUTE_KEY_LENGTH_RANGE
	enum <anonymous> CSSM_ATTRIBUTE_KEY_TYPE
	enum <anonymous> CSSM_ATTRIBUTE_KEYATTR
	enum <anonymous> CSSM_ATTRIBUTE_KEYUSAGE
	enum <anonymous> CSSM_ATTRIBUTE_KRPROFILE_LOCAL
	enum <anonymous> CSSM_ATTRIBUTE_KRPROFILE_REMOTE
	enum <anonymous> CSSM_ATTRIBUTE_LABEL
	enum <anonymous> CSSM_ATTRIBUTE_MODE
	enum <anonymous> CSSM_ATTRIBUTE_NONE
	enum <anonymous> CSSM_ATTRIBUTE_OUTPUT_SIZE
	enum <anonymous> CSSM_ATTRIBUTE_PADDING
	enum <anonymous> CSSM_ATTRIBUTE_PARAM_KEY
	enum <anonymous> CSSM_ATTRIBUTE_PASSPHRASE
	enum <anonymous> CSSM_ATTRIBUTE_PRIME
	enum <anonymous> CSSM_ATTRIBUTE_PRIVATE_KEY_FORMAT
	enum <anonymous> CSSM_ATTRIBUTE_PROMPT
	enum <anonymous> CSSM_ATTRIBUTE_PUBLIC_KEY
	enum <anonymous> CSSM_ATTRIBUTE_PUBLIC_KEY_FORMAT
	enum <anonymous> CSSM_ATTRIBUTE_RANDOM
	enum <anonymous> CSSM_ATTRIBUTE_ROUNDS
	enum <anonymous> CSSM_ATTRIBUTE_ROUNDS_RANGE
	enum <anonymous> CSSM_ATTRIBUTE_RSA_BLINDING
	enum <anonymous> CSSM_ATTRIBUTE_SALT
	enum <anonymous> CSSM_ATTRIBUTE_SEED
	enum <anonymous> CSSM_ATTRIBUTE_START_DATE
	enum <anonymous> CSSM_ATTRIBUTE_SUBPRIME
	enum <anonymous> CSSM_ATTRIBUTE_SYMMETRIC_KEY_FORMAT
	enum <anonymous> CSSM_ATTRIBUTE_TYPE_MASK
	enum <anonymous> CSSM_ATTRIBUTE_VENDOR_DEFINED
	enum <anonymous> CSSM_ATTRIBUTE_VERIFY_PASSPHRASE
	enum <anonymous> CSSM_ATTRIBUTE_VERSION
	enum <anonymous> CSSM_ATTRIBUTE_WRAPPED_KEY_FORMAT
	enum <anonymous> CSSM_BASE_ERROR
	enum <anonymous> CSSM_CERT_ACL_ENTRY
	enum <anonymous> CSSM_CERT_BUNDLE_CUSTOM
	enum <anonymous> CSSM_CERT_BUNDLE_ENCODING_BER
	enum <anonymous> CSSM_CERT_BUNDLE_ENCODING_CUSTOM
	enum <anonymous> CSSM_CERT_BUNDLE_ENCODING_DER
	enum <anonymous> CSSM_CERT_BUNDLE_ENCODING_PGP
	enum <anonymous> CSSM_CERT_BUNDLE_ENCODING_SEXPR
	enum <anonymous> CSSM_CERT_BUNDLE_ENCODING_UNKNOWN
	enum <anonymous> CSSM_CERT_BUNDLE_LAST
	enum <anonymous> CSSM_CERT_BUNDLE_PFX
	enum <anonymous> CSSM_CERT_BUNDLE_PGP_KEYRING
	enum <anonymous> CSSM_CERT_BUNDLE_PKCS12
	enum <anonymous> CSSM_CERT_BUNDLE_PKCS7_SIGNED_DATA
	enum <anonymous> CSSM_CERT_BUNDLE_PKCS7_SIGNED_ENVELOPED_DATA
	enum <anonymous> CSSM_CERT_BUNDLE_SPKI_SEQUENCE
	enum <anonymous> CSSM_CERT_BUNDLE_UNKNOWN
	enum <anonymous> CSSM_CERT_ENCODING_BER
	enum <anonymous> CSSM_CERT_ENCODING_CUSTOM
	enum <anonymous> CSSM_CERT_ENCODING_DER
	enum <anonymous> CSSM_CERT_ENCODING_LAST
	enum <anonymous> CSSM_CERT_ENCODING_MULTIPLE
	enum <anonymous> CSSM_CERT_ENCODING_NDR
	enum <anonymous> CSSM_CERT_ENCODING_PGP
	enum <anonymous> CSSM_CERT_ENCODING_SEXPR
	enum <anonymous> CSSM_CERT_ENCODING_UNKNOWN
	enum <anonymous> CSSM_CERT_Intel
	enum <anonymous> CSSM_CERT_LAST
	enum <anonymous> CSSM_CERT_MULTIPLE
	enum <anonymous> CSSM_CERT_PARSE_FORMAT_COMPLEX
	enum <anonymous> CSSM_CERT_PARSE_FORMAT_CUSTOM
	enum <anonymous> CSSM_CERT_PARSE_FORMAT_LAST
	enum <anonymous> CSSM_CERT_PARSE_FORMAT_MULTIPLE
	enum <anonymous> CSSM_CERT_PARSE_FORMAT_NONE
	enum <anonymous> CSSM_CERT_PARSE_FORMAT_OID_NAMED
	enum <anonymous> CSSM_CERT_PARSE_FORMAT_SEXPR
	enum <anonymous> CSSM_CERT_PARSE_FORMAT_TUPLE
	enum <anonymous> CSSM_CERT_PGP
	enum <anonymous> CSSM_CERT_SDSIv1
	enum <anonymous> CSSM_CERT_SPKI
	enum <anonymous> CSSM_CERT_STATUS_EXPIRED
	enum <anonymous> CSSM_CERT_STATUS_IS_FROM_NET
	enum <anonymous> CSSM_CERT_STATUS_IS_IN_ANCHORS
	enum <anonymous> CSSM_CERT_STATUS_IS_IN_INPUT_CERTS
	enum <anonymous> CSSM_CERT_STATUS_IS_ROOT
	enum <anonymous> CSSM_CERT_STATUS_NOT_VALID_YET
	enum <anonymous> CSSM_CERT_STATUS_TRUST_SETTINGS_DENY
	enum <anonymous> CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_ADMIN
	enum <anonymous> CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_SYSTEM
	enum <anonymous> CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_USER
	enum <anonymous> CSSM_CERT_STATUS_TRUST_SETTINGS_IGNORED_ERROR
	enum <anonymous> CSSM_CERT_STATUS_TRUST_SETTINGS_TRUST
	enum <anonymous> CSSM_CERT_TUPLE
	enum <anonymous> CSSM_CERT_UNKNOWN
	enum <anonymous> CSSM_CERT_X9_ATTRIBUTE
	enum <anonymous> CSSM_CERT_X_509_ATTRIBUTE
	enum <anonymous> CSSM_CERT_X_509v1
	enum <anonymous> CSSM_CERT_X_509v2
	enum <anonymous> CSSM_CERT_X_509v3
	enum <anonymous> CSSM_CERTGROUP_CERT_PAIR
	enum <anonymous> CSSM_CERTGROUP_DATA
	enum <anonymous> CSSM_CERTGROUP_ENCODED_CERT
	enum <anonymous> CSSM_CERTGROUP_PARSED_CERT
	enum <anonymous> CSSM_CL_BASE_CL_ERROR
	enum <anonymous> CSSM_CL_BASE_ERROR
	enum <anonymous> CSSM_CL_CUSTOM_CERT_BUNDLE_TYPE
	enum <anonymous> CSSM_CL_CUSTOM_CERT_ENCODING
	enum <anonymous> CSSM_CL_CUSTOM_CERT_PARSE_FORMAT
	enum <anonymous> CSSM_CL_CUSTOM_CERT_TYPE
	enum <anonymous> CSSM_CL_CUSTOM_CRL_PARSE_FORMAT
	enum <anonymous> CSSM_CL_PRIVATE_ERROR
	enum <anonymous> CSSM_CL_TEMPLATE_INTERMEDIATE_CERT
	enum <anonymous> CSSM_CL_TEMPLATE_PKIX_CERTTEMPLATE
	enum <anonymous> CSSM_CONTEXT_EVENT_CREATE
	enum <anonymous> CSSM_CONTEXT_EVENT_DELETE
	enum <anonymous> CSSM_CONTEXT_EVENT_UPDATE
	enum <anonymous> CSSM_CRL_ENCODING_BER
	enum <anonymous> CSSM_CRL_ENCODING_BLOOM
	enum <anonymous> CSSM_CRL_ENCODING_CUSTOM
	enum <anonymous> CSSM_CRL_ENCODING_DER
	enum <anonymous> CSSM_CRL_ENCODING_MULTIPLE
	enum <anonymous> CSSM_CRL_ENCODING_SEXPR
	enum <anonymous> CSSM_CRL_ENCODING_UNKNOWN
	enum <anonymous> CSSM_CRL_PARSE_FORMAT_COMPLEX
	enum <anonymous> CSSM_CRL_PARSE_FORMAT_CUSTOM
	enum <anonymous> CSSM_CRL_PARSE_FORMAT_LAST
	enum <anonymous> CSSM_CRL_PARSE_FORMAT_MULTIPLE
	enum <anonymous> CSSM_CRL_PARSE_FORMAT_NONE
	enum <anonymous> CSSM_CRL_PARSE_FORMAT_OID_NAMED
	enum <anonymous> CSSM_CRL_PARSE_FORMAT_SEXPR
	enum <anonymous> CSSM_CRL_PARSE_FORMAT_TUPLE
	enum <anonymous> CSSM_CRL_TYPE_MULTIPLE
	enum <anonymous> CSSM_CRL_TYPE_SPKI
	enum <anonymous> CSSM_CRL_TYPE_UNKNOWN
	enum <anonymous> CSSM_CRL_TYPE_X_509v1
	enum <anonymous> CSSM_CRL_TYPE_X_509v2
	enum <anonymous> CSSM_CRLGROUP_CRL_PAIR
	enum <anonymous> CSSM_CRLGROUP_DATA
	enum <anonymous> CSSM_CRLGROUP_ENCODED_CRL
	enum <anonymous> CSSM_CRLGROUP_PARSED_CRL
	enum <anonymous> CSSM_CSP_BASE_CSP_ERROR
	enum <anonymous> CSSM_CSP_BASE_ERROR
	enum <anonymous> CSSM_CSP_HARDWARE
	enum <anonymous> CSSM_CSP_HYBRID
	enum <anonymous> CSSM_CSP_PRIVATE_ERROR
	enum <anonymous> CSSM_CSP_RDR_EXISTS
	enum <anonymous> CSSM_CSP_RDR_HW
	enum <anonymous> CSSM_CSP_RDR_TOKENPRESENT
	enum <anonymous> CSSM_CSP_SOFTWARE
	enum <anonymous> CSSM_CSP_STORES_CERTIFICATES
	enum <anonymous> CSSM_CSP_STORES_GENERIC
	enum <anonymous> CSSM_CSP_STORES_PRIVATE_KEYS
	enum <anonymous> CSSM_CSP_STORES_PUBLIC_KEYS
	enum <anonymous> CSSM_CSP_STORES_SESSION_KEYS
	enum <anonymous> CSSM_CSP_TOK_CLOCK_EXISTS
	enum <anonymous> CSSM_CSP_TOK_LOGIN_REQUIRED
	enum <anonymous> CSSM_CSP_TOK_PRIVATE_KEY_PASSWORD
	enum <anonymous> CSSM_CSP_TOK_PROT_AUTHENTICATION
	enum <anonymous> CSSM_CSP_TOK_RNG
	enum <anonymous> CSSM_CSP_TOK_SESSION_KEY_PASSWORD
	enum <anonymous> CSSM_CSP_TOK_USER_PIN_EXPIRED
	enum <anonymous> CSSM_CSP_TOK_USER_PIN_INITIALIZED
	enum <anonymous> CSSM_CSP_TOK_WRITE_PROTECTED
	enum <anonymous> CSSM_CSSM_BASE_CSSM_ERROR
	enum <anonymous> CSSM_CSSM_BASE_ERROR
	enum <anonymous> CSSM_CSSM_PRIVATE_ERROR
	enum <anonymous> CSSM_CUSTOM_COMMON_ERROR_EXTENT
	enum <anonymous> CSSM_DB_ACCESS_PRIVILEGED
	enum <anonymous> CSSM_DB_ACCESS_READ
	enum <anonymous> CSSM_DB_ACCESS_RESET
	enum <anonymous> CSSM_DB_ACCESS_WRITE
	enum <anonymous> CSSM_DB_AND
	enum <anonymous> CSSM_DB_ATTRIBUTE_FORMAT_BIG_NUM
	enum <anonymous> CSSM_DB_ATTRIBUTE_FORMAT_BLOB
	enum <anonymous> CSSM_DB_ATTRIBUTE_FORMAT_COMPLEX
	enum <anonymous> CSSM_DB_ATTRIBUTE_FORMAT_MULTI_UINT32
	enum <anonymous> CSSM_DB_ATTRIBUTE_FORMAT_REAL
	enum <anonymous> CSSM_DB_ATTRIBUTE_FORMAT_SINT32
	enum <anonymous> CSSM_DB_ATTRIBUTE_FORMAT_STRING
	enum <anonymous> CSSM_DB_ATTRIBUTE_FORMAT_TIME_DATE
	enum <anonymous> CSSM_DB_ATTRIBUTE_FORMAT_UINT32
	enum <anonymous> CSSM_DB_ATTRIBUTE_NAME_AS_INTEGER
	enum <anonymous> CSSM_DB_ATTRIBUTE_NAME_AS_OID
	enum <anonymous> CSSM_DB_ATTRIBUTE_NAME_AS_STRING
	enum <anonymous> CSSM_DB_CERT_USE_OWNER
	enum <anonymous> CSSM_DB_CERT_USE_PRIVACY
	enum <anonymous> CSSM_DB_CERT_USE_REVOKED
	enum <anonymous> CSSM_DB_CERT_USE_SIGNING
	enum <anonymous> CSSM_DB_CERT_USE_SYSTEM
	enum <anonymous> CSSM_DB_CERT_USE_TRUSTED
	enum <anonymous> CSSM_DB_CONTAINS
	enum <anonymous> CSSM_DB_CONTAINS_FINAL_SUBSTRING
	enum <anonymous> CSSM_DB_CONTAINS_INITIAL_SUBSTRING
	enum <anonymous> CSSM_DB_DATASTORES_UNKNOWN
	enum <anonymous> CSSM_DB_EQUAL
	enum <anonymous> CSSM_DB_FILESYSTEMSCAN_MODE
	enum <anonymous> CSSM_DB_GREATER_THAN
	enum <anonymous> CSSM_DB_INDEX_NONUNIQUE
	enum <anonymous> CSSM_DB_INDEX_ON_ATTRIBUTE
	enum <anonymous> CSSM_DB_INDEX_ON_RECORD
	enum <anonymous> CSSM_DB_INDEX_ON_UNKNOWN
	enum <anonymous> CSSM_DB_INDEX_UNIQUE
	enum <anonymous> CSSM_DB_LESS_THAN
	enum <anonymous> CSSM_DB_MODIFY_ATTRIBUTE_ADD
	enum <anonymous> CSSM_DB_MODIFY_ATTRIBUTE_DELETE
	enum <anonymous> CSSM_DB_MODIFY_ATTRIBUTE_NONE
	enum <anonymous> CSSM_DB_MODIFY_ATTRIBUTE_REPLACE
	enum <anonymous> CSSM_DB_NONE
	enum <anonymous> CSSM_DB_NOT_EQUAL
	enum <anonymous> CSSM_DB_OR
	enum <anonymous> CSSM_DB_RECORDTYPE_APP_DEFINED_END
	enum <anonymous> CSSM_DB_RECORDTYPE_APP_DEFINED_START
	enum <anonymous> CSSM_DB_RECORDTYPE_OPEN_GROUP_END
	enum <anonymous> CSSM_DB_RECORDTYPE_OPEN_GROUP_START
	enum <anonymous> CSSM_DB_RECORDTYPE_SCHEMA_END
	enum <anonymous> CSSM_DB_RECORDTYPE_SCHEMA_START
	enum <anonymous> CSSM_DB_TRANSACTIONAL_MODE
	enum <anonymous> CSSM_DL_BASE_DL_ERROR
	enum <anonymous> CSSM_DL_BASE_ERROR
	enum <anonymous> CSSM_DL_CUSTOM
	enum <anonymous> CSSM_DL_DB_RECORD_ALL_KEYS
	enum <anonymous> CSSM_DL_DB_RECORD_ANY
	enum <anonymous> CSSM_DL_DB_RECORD_APPLESHARE_PASSWORD
	enum <anonymous> CSSM_DL_DB_RECORD_CERT
	enum <anonymous> CSSM_DL_DB_RECORD_CRL
	enum <anonymous> CSSM_DL_DB_RECORD_EXTENDED_ATTRIBUTE
	enum <anonymous> CSSM_DL_DB_RECORD_GENERIC
	enum <anonymous> CSSM_DL_DB_RECORD_GENERIC_PASSWORD
	enum <anonymous> CSSM_DL_DB_RECORD_INTERNET_PASSWORD
	enum <anonymous> CSSM_DL_DB_RECORD_METADATA
	enum <anonymous> CSSM_DL_DB_RECORD_POLICY
	enum <anonymous> CSSM_DL_DB_RECORD_PRIVATE_KEY
	enum <anonymous> CSSM_DL_DB_RECORD_PUBLIC_KEY
	enum <anonymous> CSSM_DL_DB_RECORD_SYMMETRIC_KEY
	enum <anonymous> CSSM_DL_DB_RECORD_UNLOCK_REFERRAL
	enum <anonymous> CSSM_DL_DB_RECORD_USER_TRUST
	enum <anonymous> CSSM_DL_DB_RECORD_X509_CERTIFICATE
	enum <anonymous> CSSM_DL_DB_RECORD_X509_CRL
	enum <anonymous> CSSM_DL_DB_SCHEMA_ATTRIBUTES
	enum <anonymous> CSSM_DL_DB_SCHEMA_INDEXES
	enum <anonymous> CSSM_DL_DB_SCHEMA_INFO
	enum <anonymous> CSSM_DL_DB_SCHEMA_PARSING_MODULE
	enum <anonymous> CSSM_DL_FFS
	enum <anonymous> CSSM_DL_LDAP
	enum <anonymous> CSSM_DL_MEMORY
	enum <anonymous> CSSM_DL_ODBC
	enum <anonymous> CSSM_DL_PKCS11
	enum <anonymous> CSSM_DL_PRIVATE_ERROR
	enum <anonymous> CSSM_DL_REMOTEDIR
	enum <anonymous> CSSM_DL_UNKNOWN
	enum <anonymous> CSSM_ELAPSED_TIME_COMPLETE
	enum <anonymous> CSSM_ELAPSED_TIME_UNKNOWN
	enum <anonymous> CSSM_ERRCODE_ACL_ADD_FAILED
	enum <anonymous> CSSM_ERRCODE_ACL_BASE_CERTS_NOT_SUPPORTED
	enum <anonymous> CSSM_ERRCODE_ACL_CHALLENGE_CALLBACK_FAILED
	enum <anonymous> CSSM_ERRCODE_ACL_CHANGE_FAILED
	enum <anonymous> CSSM_ERRCODE_ACL_DELETE_FAILED
	enum <anonymous> CSSM_ERRCODE_ACL_ENTRY_TAG_NOT_FOUND
	enum <anonymous> CSSM_ERRCODE_ACL_REPLACE_FAILED
	enum <anonymous> CSSM_ERRCODE_ACL_SUBJECT_TYPE_NOT_SUPPORTED
	enum <anonymous> CSSM_ERRCODE_CRL_ALREADY_SIGNED
	enum <anonymous> CSSM_ERRCODE_DEVICE_FAILED
	enum <anonymous> CSSM_ERRCODE_DEVICE_RESET
	enum <anonymous> CSSM_ERRCODE_FUNCTION_FAILED
	enum <anonymous> CSSM_ERRCODE_FUNCTION_NOT_IMPLEMENTED
	enum <anonymous> CSSM_ERRCODE_IN_DARK_WAKE
	enum <anonymous> CSSM_ERRCODE_INCOMPATIBLE_VERSION
	enum <anonymous> CSSM_ERRCODE_INSUFFICIENT_CLIENT_IDENTIFICATION
	enum <anonymous> CSSM_ERRCODE_INTERNAL_ERROR
	enum <anonymous> CSSM_ERRCODE_INVALID_AC_HANDLE
	enum <anonymous> CSSM_ERRCODE_INVALID_ACCESS_CREDENTIALS
	enum <anonymous> CSSM_ERRCODE_INVALID_ACL_BASE_CERTS
	enum <anonymous> CSSM_ERRCODE_INVALID_ACL_CHALLENGE_CALLBACK
	enum <anonymous> CSSM_ERRCODE_INVALID_ACL_EDIT_MODE
	enum <anonymous> CSSM_ERRCODE_INVALID_ACL_ENTRY_TAG
	enum <anonymous> CSSM_ERRCODE_INVALID_ACL_SUBJECT_VALUE
	enum <anonymous> CSSM_ERRCODE_INVALID_CERT_POINTER
	enum <anonymous> CSSM_ERRCODE_INVALID_CERTGROUP_POINTER
	enum <anonymous> CSSM_ERRCODE_INVALID_CL_HANDLE
	enum <anonymous> CSSM_ERRCODE_INVALID_CONTEXT_HANDLE
	enum <anonymous> CSSM_ERRCODE_INVALID_CRL_POINTER
	enum <anonymous> CSSM_ERRCODE_INVALID_CRYPTO_DATA
	enum <anonymous> CSSM_ERRCODE_INVALID_CSP_HANDLE
	enum <anonymous> CSSM_ERRCODE_INVALID_DATA
	enum <anonymous> CSSM_ERRCODE_INVALID_DB_HANDLE
	enum <anonymous> CSSM_ERRCODE_INVALID_DB_LIST
	enum <anonymous> CSSM_ERRCODE_INVALID_DB_LIST_POINTER
	enum <anonymous> CSSM_ERRCODE_INVALID_DL_HANDLE
	enum <anonymous> CSSM_ERRCODE_INVALID_FIELD_POINTER
	enum <anonymous> CSSM_ERRCODE_INVALID_GUID
	enum <anonymous> CSSM_ERRCODE_INVALID_INPUT_POINTER
	enum <anonymous> CSSM_ERRCODE_INVALID_KR_HANDLE
	enum <anonymous> CSSM_ERRCODE_INVALID_NETWORK_ADDR
	enum <anonymous> CSSM_ERRCODE_INVALID_NEW_ACL_ENTRY
	enum <anonymous> CSSM_ERRCODE_INVALID_NEW_ACL_OWNER
	enum <anonymous> CSSM_ERRCODE_INVALID_NUMBER_OF_FIELDS
	enum <anonymous> CSSM_ERRCODE_INVALID_OUTPUT_POINTER
	enum <anonymous> CSSM_ERRCODE_INVALID_PASSTHROUGH_ID
	enum <anonymous> CSSM_ERRCODE_INVALID_POINTER
	enum <anonymous> CSSM_ERRCODE_INVALID_SAMPLE_VALUE
	enum <anonymous> CSSM_ERRCODE_INVALID_TP_HANDLE
	enum <anonymous> CSSM_ERRCODE_MDS_ERROR
	enum <anonymous> CSSM_ERRCODE_MEMORY_ERROR
	enum <anonymous> CSSM_ERRCODE_MODULE_MANIFEST_VERIFY_FAILED
	enum <anonymous> CSSM_ERRCODE_NO_USER_INTERACTION
	enum <anonymous> CSSM_ERRCODE_OBJECT_ACL_NOT_SUPPORTED
	enum <anonymous> CSSM_ERRCODE_OBJECT_ACL_REQUIRED
	enum <anonymous> CSSM_ERRCODE_OBJECT_MANIP_AUTH_DENIED
	enum <anonymous> CSSM_ERRCODE_OBJECT_USE_AUTH_DENIED
	enum <anonymous> CSSM_ERRCODE_OPERATION_AUTH_DENIED
	enum <anonymous> CSSM_ERRCODE_OS_ACCESS_DENIED
	enum <anonymous> CSSM_ERRCODE_PRIVILEGE_NOT_GRANTED
	enum <anonymous> CSSM_ERRCODE_SAMPLE_VALUE_NOT_SUPPORTED
	enum <anonymous> CSSM_ERRCODE_SELF_CHECK_FAILED
	enum <anonymous> CSSM_ERRCODE_SERVICE_NOT_AVAILABLE
	enum <anonymous> CSSM_ERRCODE_UNKNOWN_FORMAT
	enum <anonymous> CSSM_ERRCODE_UNKNOWN_TAG
	enum <anonymous> CSSM_ERRCODE_USER_CANCELED
	enum <anonymous> CSSM_ERRCODE_VERIFICATION_FAILURE
	enum <anonymous> CSSM_ERRORCODE_COMMON_EXTENT
	enum <anonymous> CSSM_ERRORCODE_CUSTOM_OFFSET
	enum <anonymous> CSSM_ERRORCODE_MODULE_EXTENT
	enum <anonymous> CSSM_ESTIMATED_TIME_UNKNOWN
	enum <anonymous> CSSM_EVIDENCE_FORM_APPLE_CERT_INFO
	enum <anonymous> CSSM_EVIDENCE_FORM_APPLE_CERTGROUP
	enum <anonymous> CSSM_EVIDENCE_FORM_APPLE_HEADER
	enum <anonymous> CSSM_EVIDENCE_FORM_CERT
	enum <anonymous> CSSM_EVIDENCE_FORM_CERT_ID
	enum <anonymous> CSSM_EVIDENCE_FORM_CRL
	enum <anonymous> CSSM_EVIDENCE_FORM_CRL_ID
	enum <anonymous> CSSM_EVIDENCE_FORM_CRL_NEXTTIME
	enum <anonymous> CSSM_EVIDENCE_FORM_CRL_THISTIME
	enum <anonymous> CSSM_EVIDENCE_FORM_POLICYINFO
	enum <anonymous> CSSM_EVIDENCE_FORM_TUPLEGROUP
	enum <anonymous> CSSM_EVIDENCE_FORM_UNSPECIFIC
	enum <anonymous> CSSM_EVIDENCE_FORM_VERIFIER_TIME
	enum <anonymous> CSSM_FALSE
	enum <anonymous> CSSM_FEE_CURVE_TYPE_ANSI_X9_62
	enum <anonymous> CSSM_FEE_CURVE_TYPE_DEFAULT
	enum <anonymous> CSSM_FEE_CURVE_TYPE_MONTGOMERY
	enum <anonymous> CSSM_FEE_CURVE_TYPE_WEIERSTRASS
	enum <anonymous> CSSM_FEE_PRIME_TYPE_DEFAULT
	enum <anonymous> CSSM_FEE_PRIME_TYPE_FEE
	enum <anonymous> CSSM_FEE_PRIME_TYPE_GENERAL
	enum <anonymous> CSSM_FEE_PRIME_TYPE_MERSENNE
	enum <anonymous> CSSM_FIELDVALUE_COMPLEX_DATA_TYPE
	enum <anonymous> CSSM_HINT_ADDRESS_APP
	enum <anonymous> CSSM_HINT_ADDRESS_SP
	enum <anonymous> CSSM_HINT_NONE
	enum <anonymous> CSSM_INVALID_HANDLE
	enum <anonymous> CSSM_KEY_HIERARCHY_EXPORT
	enum <anonymous> CSSM_KEY_HIERARCHY_INTEG
	enum <anonymous> CSSM_KEY_HIERARCHY_NONE
	enum <anonymous> CSSM_KEYATTR_ALWAYS_SENSITIVE
	enum <anonymous> CSSM_KEYATTR_EXTRACTABLE
	enum <anonymous> CSSM_KEYATTR_MODIFIABLE
	enum <anonymous> CSSM_KEYATTR_NEVER_EXTRACTABLE
	enum <anonymous> CSSM_KEYATTR_PARTIAL
	enum <anonymous> CSSM_KEYATTR_PERMANENT
	enum <anonymous> CSSM_KEYATTR_PRIVATE
	enum <anonymous> CSSM_KEYATTR_PUBLIC_KEY_ENCRYPT
	enum <anonymous> CSSM_KEYATTR_RETURN_DATA
	enum <anonymous> CSSM_KEYATTR_RETURN_DEFAULT
	enum <anonymous> CSSM_KEYATTR_RETURN_NONE
	enum <anonymous> CSSM_KEYATTR_RETURN_REF
	enum <anonymous> CSSM_KEYATTR_SENSITIVE
	enum <anonymous> CSSM_KEYBLOB_OTHER
	enum <anonymous> CSSM_KEYBLOB_RAW
	enum <anonymous> CSSM_KEYBLOB_RAW_FORMAT_BSAFE
	enum <anonymous> CSSM_KEYBLOB_RAW_FORMAT_CCA
	enum <anonymous> CSSM_KEYBLOB_RAW_FORMAT_FIPS186
	enum <anonymous> CSSM_KEYBLOB_RAW_FORMAT_MSCAPI
	enum <anonymous> CSSM_KEYBLOB_RAW_FORMAT_NONE
	enum <anonymous> CSSM_KEYBLOB_RAW_FORMAT_OCTET_STRING
	enum <anonymous> CSSM_KEYBLOB_RAW_FORMAT_OPENSSH
	enum <anonymous> CSSM_KEYBLOB_RAW_FORMAT_OPENSSH2
	enum <anonymous> CSSM_KEYBLOB_RAW_FORMAT_OPENSSL
	enum <anonymous> CSSM_KEYBLOB_RAW_FORMAT_OTHER
	enum <anonymous> CSSM_KEYBLOB_RAW_FORMAT_PGP
	enum <anonymous> CSSM_KEYBLOB_RAW_FORMAT_PKCS1
	enum <anonymous> CSSM_KEYBLOB_RAW_FORMAT_PKCS3
	enum <anonymous> CSSM_KEYBLOB_RAW_FORMAT_PKCS8
	enum <anonymous> CSSM_KEYBLOB_RAW_FORMAT_SPKI
	enum <anonymous> CSSM_KEYBLOB_RAW_FORMAT_VENDOR_DEFINED
	enum <anonymous> CSSM_KEYBLOB_RAW_FORMAT_X509
	enum <anonymous> CSSM_KEYBLOB_REF_FORMAT_INTEGER
	enum <anonymous> CSSM_KEYBLOB_REF_FORMAT_OTHER
	enum <anonymous> CSSM_KEYBLOB_REF_FORMAT_SPKI
	enum <anonymous> CSSM_KEYBLOB_REF_FORMAT_STRING
	enum <anonymous> CSSM_KEYBLOB_REFERENCE
	enum <anonymous> CSSM_KEYBLOB_WRAPPED
	enum <anonymous> CSSM_KEYBLOB_WRAPPED_FORMAT_APPLE_CUSTOM
	enum <anonymous> CSSM_KEYBLOB_WRAPPED_FORMAT_MSCAPI
	enum <anonymous> CSSM_KEYBLOB_WRAPPED_FORMAT_NONE
	enum <anonymous> CSSM_KEYBLOB_WRAPPED_FORMAT_OPENSSH1
	enum <anonymous> CSSM_KEYBLOB_WRAPPED_FORMAT_OPENSSL
	enum <anonymous> CSSM_KEYBLOB_WRAPPED_FORMAT_OTHER
	enum <anonymous> CSSM_KEYBLOB_WRAPPED_FORMAT_PKCS7
	enum <anonymous> CSSM_KEYBLOB_WRAPPED_FORMAT_PKCS8
	enum <anonymous> CSSM_KEYCLASS_OTHER
	enum <anonymous> CSSM_KEYCLASS_PRIVATE_KEY
	enum <anonymous> CSSM_KEYCLASS_PUBLIC_KEY
	enum <anonymous> CSSM_KEYCLASS_SECRET_PART
	enum <anonymous> CSSM_KEYCLASS_SESSION_KEY
	enum <anonymous> CSSM_KEYHEADER_VERSION
	enum <anonymous> CSSM_KEYUSE_ANY
	enum <anonymous> CSSM_KEYUSE_DECRYPT
	enum <anonymous> CSSM_KEYUSE_DERIVE
	enum <anonymous> CSSM_KEYUSE_ENCRYPT
	enum <anonymous> CSSM_KEYUSE_SIGN
	enum <anonymous> CSSM_KEYUSE_SIGN_RECOVER
	enum <anonymous> CSSM_KEYUSE_UNWRAP
	enum <anonymous> CSSM_KEYUSE_VERIFY
	enum <anonymous> CSSM_KEYUSE_VERIFY_RECOVER
	enum <anonymous> CSSM_KEYUSE_WRAP
	enum <anonymous> CSSM_KR_BASE_ERROR
	enum <anonymous> CSSM_KR_PRIVATE_ERROR
	enum <anonymous> CSSM_LIST_ELEMENT_DATUM
	enum <anonymous> CSSM_LIST_ELEMENT_SUBLIST
	enum <anonymous> CSSM_LIST_ELEMENT_WORDID
	enum <anonymous> CSSM_LIST_TYPE_CUSTOM
	enum <anonymous> CSSM_LIST_TYPE_SEXPR
	enum <anonymous> CSSM_LIST_TYPE_UNKNOWN
	enum <anonymous> CSSM_MDS_BASE_ERROR
	enum <anonymous> CSSM_MDS_PRIVATE_ERROR
	enum <anonymous> CSSM_MODULE_STRING_SIZE
	enum <anonymous> CSSM_NET_PROTO_CMP
	enum <anonymous> CSSM_NET_PROTO_CMPS
	enum <anonymous> CSSM_NET_PROTO_CUSTOM
	enum <anonymous> CSSM_NET_PROTO_FTP
	enum <anonymous> CSSM_NET_PROTO_FTPS
	enum <anonymous> CSSM_NET_PROTO_LDAP
	enum <anonymous> CSSM_NET_PROTO_LDAPNS
	enum <anonymous> CSSM_NET_PROTO_LDAPS
	enum <anonymous> CSSM_NET_PROTO_NONE
	enum <anonymous> CSSM_NET_PROTO_OCSP
	enum <anonymous> CSSM_NET_PROTO_UNSPECIFIED
	enum <anonymous> CSSM_NET_PROTO_X500DAP
	enum <anonymous> CSSM_NOTIFY_FAULT
	enum <anonymous> CSSM_NOTIFY_INSERT
	enum <anonymous> CSSM_NOTIFY_REMOVE
	enum <anonymous> CSSM_OK
	enum <anonymous> CSSM_PADDING_ALTERNATE
	enum <anonymous> CSSM_PADDING_APPLE_SSLv2
	enum <anonymous> CSSM_PADDING_CIPHERSTEALING
	enum <anonymous> CSSM_PADDING_CUSTOM
	enum <anonymous> CSSM_PADDING_FF
	enum <anonymous> CSSM_PADDING_NONE
	enum <anonymous> CSSM_PADDING_ONE
	enum <anonymous> CSSM_PADDING_PKCS1
	enum <anonymous> CSSM_PADDING_PKCS5
	enum <anonymous> CSSM_PADDING_PKCS7
	enum <anonymous> CSSM_PADDING_RANDOM
	enum <anonymous> CSSM_PADDING_VENDOR_DEFINED
	enum <anonymous> CSSM_PADDING_ZERO
	enum <anonymous> CSSM_PKCS5_PBKDF2_PRF_HMAC_SHA1
	enum <anonymous> CSSM_PKCS_OAEP_MGF1_MD5
	enum <anonymous> CSSM_PKCS_OAEP_MGF1_SHA1
	enum <anonymous> CSSM_PKCS_OAEP_MGF_NONE
	enum <anonymous> CSSM_PKCS_OAEP_PSOURCE_NONE
	enum <anonymous> CSSM_PKCS_OAEP_PSOURCE_Pspecified
	enum <anonymous> CSSM_PRIVILEGE_SCOPE_NONE
	enum <anonymous> CSSM_PRIVILEGE_SCOPE_PROCESS
	enum <anonymous> CSSM_PRIVILEGE_SCOPE_THREAD
	enum <anonymous> CSSM_PVC_APP
	enum <anonymous> CSSM_PVC_NONE
	enum <anonymous> CSSM_PVC_SP
	enum <anonymous> CSSM_QUERY_RETURN_DATA
	enum <anonymous> CSSM_QUERY_SIZELIMIT_NONE
	enum <anonymous> CSSM_QUERY_TIMELIMIT_NONE
	enum <anonymous> CSSM_SAMPLE_TYPE_ASYMMETRIC_KEY
	enum <anonymous> CSSM_SAMPLE_TYPE_BIOMETRIC
	enum <anonymous> CSSM_SAMPLE_TYPE_COMMENT
	enum <anonymous> CSSM_SAMPLE_TYPE_HASHED_PASSWORD
	enum <anonymous> CSSM_SAMPLE_TYPE_KEYCHAIN_CHANGE_LOCK
	enum <anonymous> CSSM_SAMPLE_TYPE_KEYCHAIN_LOCK
	enum <anonymous> CSSM_SAMPLE_TYPE_KEYCHAIN_PROMPT
	enum <anonymous> CSSM_SAMPLE_TYPE_PASSWORD
	enum <anonymous> CSSM_SAMPLE_TYPE_PREAUTH
	enum <anonymous> CSSM_SAMPLE_TYPE_PROCESS
	enum <anonymous> CSSM_SAMPLE_TYPE_PROMPTED_BIOMETRIC
	enum <anonymous> CSSM_SAMPLE_TYPE_PROMPTED_PASSWORD
	enum <anonymous> CSSM_SAMPLE_TYPE_PROTECTED_BIOMETRIC
	enum <anonymous> CSSM_SAMPLE_TYPE_PROTECTED_PASSWORD
	enum <anonymous> CSSM_SAMPLE_TYPE_RETRY_ID
	enum <anonymous> CSSM_SAMPLE_TYPE_SIGNED_NONCE
	enum <anonymous> CSSM_SAMPLE_TYPE_SIGNED_SECRET
	enum <anonymous> CSSM_SAMPLE_TYPE_SYMMETRIC_KEY
	enum <anonymous> CSSM_SAMPLE_TYPE_THRESHOLD
	enum <anonymous> CSSM_SERVICE_AC
	enum <anonymous> CSSM_SERVICE_CL
	enum <anonymous> CSSM_SERVICE_CSP
	enum <anonymous> CSSM_SERVICE_CSSM
	enum <anonymous> CSSM_SERVICE_DL
	enum <anonymous> CSSM_SERVICE_KR
	enum <anonymous> CSSM_SERVICE_TP
	enum <anonymous> CSSM_TP_ACTION_ALLOW_EXPIRED
	enum <anonymous> CSSM_TP_ACTION_ALLOW_EXPIRED_ROOT
	enum <anonymous> CSSM_TP_ACTION_CRL_SUFFICIENT
	enum <anonymous> CSSM_TP_ACTION_DEFAULT
	enum <anonymous> CSSM_TP_ACTION_FETCH_CERT_FROM_NET
	enum <anonymous> CSSM_TP_ACTION_FETCH_CRL_FROM_NET
	enum <anonymous> CSSM_TP_ACTION_IMPLICIT_ANCHORS
	enum <anonymous> CSSM_TP_ACTION_LEAF_IS_CA
	enum <anonymous> CSSM_TP_ACTION_REQUIRE_CRL_IF_PRESENT
	enum <anonymous> CSSM_TP_ACTION_REQUIRE_CRL_PER_CERT
	enum <anonymous> CSSM_TP_ACTION_REQUIRE_REV_PER_CERT
	enum <anonymous> CSSM_TP_ACTION_TRUST_SETTINGS
	enum <anonymous> CSSM_TP_AUTHORITY_REQUEST_CERTISSUE
	enum <anonymous> CSSM_TP_AUTHORITY_REQUEST_CERTNOTARIZE
	enum <anonymous> CSSM_TP_AUTHORITY_REQUEST_CERTRESUME
	enum <anonymous> CSSM_TP_AUTHORITY_REQUEST_CERTREVOKE
	enum <anonymous> CSSM_TP_AUTHORITY_REQUEST_CERTSUSPEND
	enum <anonymous> CSSM_TP_AUTHORITY_REQUEST_CERTUSERECOVER
	enum <anonymous> CSSM_TP_AUTHORITY_REQUEST_CERTVERIFY
	enum <anonymous> CSSM_TP_AUTHORITY_REQUEST_CRLISSUE
	enum <anonymous> CSSM_TP_BASE_ERROR
	enum <anonymous> CSSM_TP_BASE_TP_ERROR
	enum <anonymous> CSSM_TP_CERT_DIR_UPDATE
	enum <anonymous> CSSM_TP_CERT_NOTIFY_RENEW
	enum <anonymous> CSSM_TP_CERT_PUBLISH
	enum <anonymous> CSSM_TP_CERTCHANGE_HOLD
	enum <anonymous> CSSM_TP_CERTCHANGE_NONE
	enum <anonymous> CSSM_TP_CERTCHANGE_NOT_AUTHORIZED
	enum <anonymous> CSSM_TP_CERTCHANGE_OK
	enum <anonymous> CSSM_TP_CERTCHANGE_OKWITHNEWTIME
	enum <anonymous> CSSM_TP_CERTCHANGE_REASON_AFFILIATIONCHANGE
	enum <anonymous> CSSM_TP_CERTCHANGE_REASON_CACOMPROMISE
	enum <anonymous> CSSM_TP_CERTCHANGE_REASON_CEASEOPERATION
	enum <anonymous> CSSM_TP_CERTCHANGE_REASON_HOLDRELEASE
	enum <anonymous> CSSM_TP_CERTCHANGE_REASON_KEYCOMPROMISE
	enum <anonymous> CSSM_TP_CERTCHANGE_REASON_SUPERCEDED
	enum <anonymous> CSSM_TP_CERTCHANGE_REASON_SUSPECTEDCOMPROMISE
	enum <anonymous> CSSM_TP_CERTCHANGE_REASON_UNKNOWN
	enum <anonymous> CSSM_TP_CERTCHANGE_REJECTED
	enum <anonymous> CSSM_TP_CERTCHANGE_RELEASE
	enum <anonymous> CSSM_TP_CERTCHANGE_REVOKE
	enum <anonymous> CSSM_TP_CERTCHANGE_STATUS_UNKNOWN
	enum <anonymous> CSSM_TP_CERTCHANGE_WRONGCA
	enum <anonymous> CSSM_TP_CERTISSUE_NOT_AUTHORIZED
	enum <anonymous> CSSM_TP_CERTISSUE_OK
	enum <anonymous> CSSM_TP_CERTISSUE_OKWITHCERTMODS
	enum <anonymous> CSSM_TP_CERTISSUE_OKWITHSERVICEMODS
	enum <anonymous> CSSM_TP_CERTISSUE_REJECTED
	enum <anonymous> CSSM_TP_CERTISSUE_STATUS_UNKNOWN
	enum <anonymous> CSSM_TP_CERTISSUE_WILL_BE_REVOKED
	enum <anonymous> CSSM_TP_CERTNOTARIZE_NOT_AUTHORIZED
	enum <anonymous> CSSM_TP_CERTNOTARIZE_OK
	enum <anonymous> CSSM_TP_CERTNOTARIZE_OKWITHOUTFIELDS
	enum <anonymous> CSSM_TP_CERTNOTARIZE_OKWITHSERVICEMODS
	enum <anonymous> CSSM_TP_CERTNOTARIZE_REJECTED
	enum <anonymous> CSSM_TP_CERTNOTARIZE_STATUS_UNKNOWN
	enum <anonymous> CSSM_TP_CERTRECLAIM_NOMATCH
	enum <anonymous> CSSM_TP_CERTRECLAIM_NOT_AUTHORIZED
	enum <anonymous> CSSM_TP_CERTRECLAIM_OK
	enum <anonymous> CSSM_TP_CERTRECLAIM_REJECTED
	enum <anonymous> CSSM_TP_CERTRECLAIM_STATUS_UNKNOWN
	enum <anonymous> CSSM_TP_CERTVERIFY_EXPIRED
	enum <anonymous> CSSM_TP_CERTVERIFY_INVALID
	enum <anonymous> CSSM_TP_CERTVERIFY_INVALID_AUTHORITY
	enum <anonymous> CSSM_TP_CERTVERIFY_INVALID_BASIC_CONSTRAINTS
	enum <anonymous> CSSM_TP_CERTVERIFY_INVALID_CERT_VALUE
	enum <anonymous> CSSM_TP_CERTVERIFY_INVALID_CERTGROUP
	enum <anonymous> CSSM_TP_CERTVERIFY_INVALID_CRL_DIST_PT
	enum <anonymous> CSSM_TP_CERTVERIFY_INVALID_NAME_TREE
	enum <anonymous> CSSM_TP_CERTVERIFY_INVALID_POLICY
	enum <anonymous> CSSM_TP_CERTVERIFY_INVALID_POLICY_IDS
	enum <anonymous> CSSM_TP_CERTVERIFY_INVALID_SIGNATURE
	enum <anonymous> CSSM_TP_CERTVERIFY_NOT_VALID_YET
	enum <anonymous> CSSM_TP_CERTVERIFY_REVOKED
	enum <anonymous> CSSM_TP_CERTVERIFY_SUSPENDED
	enum <anonymous> CSSM_TP_CERTVERIFY_UNKNOWN
	enum <anonymous> CSSM_TP_CERTVERIFY_UNKNOWN_CRITICAL_EXT
	enum <anonymous> CSSM_TP_CERTVERIFY_VALID
	enum <anonymous> CSSM_TP_CONFIRM_ACCEPT
	enum <anonymous> CSSM_TP_CONFIRM_REJECT
	enum <anonymous> CSSM_TP_CONFIRM_STATUS_UNKNOWN
	enum <anonymous> CSSM_TP_CRL_DISTRIBUTE
	enum <anonymous> CSSM_TP_CRLISSUE_INVALID_DOMAIN
	enum <anonymous> CSSM_TP_CRLISSUE_NOT_AUTHORIZED
	enum <anonymous> CSSM_TP_CRLISSUE_NOT_CURRENT
	enum <anonymous> CSSM_TP_CRLISSUE_OK
	enum <anonymous> CSSM_TP_CRLISSUE_REJECTED
	enum <anonymous> CSSM_TP_CRLISSUE_STATUS_UNKNOWN
	enum <anonymous> CSSM_TP_CRLISSUE_UNKNOWN_IDENTIFIER
	enum <anonymous> CSSM_TP_FORM_TYPE_GENERIC
	enum <anonymous> CSSM_TP_FORM_TYPE_REGISTRATION
	enum <anonymous> CSSM_TP_KEY_ARCHIVE
	enum <anonymous> CSSM_TP_PRIVATE_ERROR
	enum <anonymous> CSSM_TP_STOP_ON_FIRST_FAIL
	enum <anonymous> CSSM_TP_STOP_ON_FIRST_PASS
	enum <anonymous> CSSM_TP_STOP_ON_NONE
	enum <anonymous> CSSM_TP_STOP_ON_POLICY
	enum <anonymous> CSSM_TRUE
	enum <anonymous> CSSM_USEE_AUTHENTICATION
	enum <anonymous> CSSM_USEE_DOMESTIC
	enum <anonymous> CSSM_USEE_FINANCIAL
	enum <anonymous> CSSM_USEE_INSURANCE
	enum <anonymous> CSSM_USEE_KEYEXCH
	enum <anonymous> CSSM_USEE_KRENT
	enum <anonymous> CSSM_USEE_KRLE
	enum <anonymous> CSSM_USEE_LAST
	enum <anonymous> CSSM_USEE_MEDICAL
	enum <anonymous> CSSM_USEE_NONE
	enum <anonymous> CSSM_USEE_SSL
	enum <anonymous> CSSM_USEE_WEAK
	enum <anonymous> CSSM_VALUE_NOT_AVAILABLE
	enum <anonymous> CSSM_WORDID__FIRST_UNUSED
	enum <anonymous> CSSM_WORDID__NLU_
	enum <anonymous> CSSM_WORDID__RESERVED_1
	enum <anonymous> CSSM_WORDID__STAR_
	enum <anonymous> CSSM_WORDID__UNK_
	enum <anonymous> CSSM_WORDID_A
	enum <anonymous> CSSM_WORDID_ACL
	enum <anonymous> CSSM_WORDID_ALPHA
	enum <anonymous> CSSM_WORDID_ASYMMETRIC_KEY
	enum <anonymous> CSSM_WORDID_B
	enum <anonymous> CSSM_WORDID_BER
	enum <anonymous> CSSM_WORDID_BINARY
	enum <anonymous> CSSM_WORDID_BIOMETRIC
	enum <anonymous> CSSM_WORDID_C
	enum <anonymous> CSSM_WORDID_CANCELED
	enum <anonymous> CSSM_WORDID_CERT
	enum <anonymous> CSSM_WORDID_COMMENT
	enum <anonymous> CSSM_WORDID_CRL
	enum <anonymous> CSSM_WORDID_CUSTOM
	enum <anonymous> CSSM_WORDID_D
	enum <anonymous> CSSM_WORDID_DATE
	enum <anonymous> CSSM_WORDID_DB_DELETE
	enum <anonymous> CSSM_WORDID_DB_EXEC_STORED_QUERY
	enum <anonymous> CSSM_WORDID_DB_INSERT
	enum <anonymous> CSSM_WORDID_DB_MODIFY
	enum <anonymous> CSSM_WORDID_DB_READ
	enum <anonymous> CSSM_WORDID_DBS_CREATE
	enum <anonymous> CSSM_WORDID_DBS_DELETE
	enum <anonymous> CSSM_WORDID_DECRYPT
	enum <anonymous> CSSM_WORDID_DELETE
	enum <anonymous> CSSM_WORDID_DELTA_CRL
	enum <anonymous> CSSM_WORDID_DER
	enum <anonymous> CSSM_WORDID_DERIVE
	enum <anonymous> CSSM_WORDID_DISPLAY
	enum <anonymous> CSSM_WORDID_DO
	enum <anonymous> CSSM_WORDID_DSA
	enum <anonymous> CSSM_WORDID_DSA_SHA1
	enum <anonymous> CSSM_WORDID_E
	enum <anonymous> CSSM_WORDID_ELGAMAL
	enum <anonymous> CSSM_WORDID_ENCRYPT
	enum <anonymous> CSSM_WORDID_ENTRY
	enum <anonymous> CSSM_WORDID_EXPORT_CLEAR
	enum <anonymous> CSSM_WORDID_EXPORT_WRAPPED
	enum <anonymous> CSSM_WORDID_G
	enum <anonymous> CSSM_WORDID_GE
	enum <anonymous> CSSM_WORDID_GENKEY
	enum <anonymous> CSSM_WORDID_HASH
	enum <anonymous> CSSM_WORDID_HASHED_PASSWORD
	enum <anonymous> CSSM_WORDID_HASHED_SUBJECT
	enum <anonymous> CSSM_WORDID_HAVAL
	enum <anonymous> CSSM_WORDID_IBCHASH
	enum <anonymous> CSSM_WORDID_IMPORT_CLEAR
	enum <anonymous> CSSM_WORDID_IMPORT_WRAPPED
	enum <anonymous> CSSM_WORDID_INTEL
	enum <anonymous> CSSM_WORDID_ISSUER
	enum <anonymous> CSSM_WORDID_ISSUER_INFO
	enum <anonymous> CSSM_WORDID_K_OF_N
	enum <anonymous> CSSM_WORDID_KEA
	enum <anonymous> CSSM_WORDID_KEY
	enum <anonymous> CSSM_WORDID_KEYCHAIN_CHANGE_LOCK
	enum <anonymous> CSSM_WORDID_KEYCHAIN_LOCK
	enum <anonymous> CSSM_WORDID_KEYCHAIN_PROMPT
	enum <anonymous> CSSM_WORDID_KEYHOLDER
	enum <anonymous> CSSM_WORDID_L
	enum <anonymous> CSSM_WORDID_LE
	enum <anonymous> CSSM_WORDID_LOGIN
	enum <anonymous> CSSM_WORDID_LOGIN_NAME
	enum <anonymous> CSSM_WORDID_MAC
	enum <anonymous> CSSM_WORDID_MD2
	enum <anonymous> CSSM_WORDID_MD2WITHRSA
	enum <anonymous> CSSM_WORDID_MD4
	enum <anonymous> CSSM_WORDID_MD5
	enum <anonymous> CSSM_WORDID_MD5WITHRSA
	enum <anonymous> CSSM_WORDID_N
	enum <anonymous> CSSM_WORDID_NAME
	enum <anonymous> CSSM_WORDID_NDR
	enum <anonymous> CSSM_WORDID_NHASH
	enum <anonymous> CSSM_WORDID_NOT_AFTER
	enum <anonymous> CSSM_WORDID_NOT_BEFORE
	enum <anonymous> CSSM_WORDID_NULL
	enum <anonymous> CSSM_WORDID_NUMERIC
	enum <anonymous> CSSM_WORDID_OBJECT_HASH
	enum <anonymous> CSSM_WORDID_ONE_TIME
	enum <anonymous> CSSM_WORDID_ONLINE
	enum <anonymous> CSSM_WORDID_OWNER
	enum <anonymous> CSSM_WORDID_P
	enum <anonymous> CSSM_WORDID_PAM_NAME
	enum <anonymous> CSSM_WORDID_PASSWORD
	enum <anonymous> CSSM_WORDID_PGP
	enum <anonymous> CSSM_WORDID_PIN
	enum <anonymous> CSSM_WORDID_PREAUTH
	enum <anonymous> CSSM_WORDID_PREAUTH_SOURCE
	enum <anonymous> CSSM_WORDID_PREFIX
	enum <anonymous> CSSM_WORDID_PRIVATE_KEY
	enum <anonymous> CSSM_WORDID_PROCESS
	enum <anonymous> CSSM_WORDID_PROMPTED_BIOMETRIC
	enum <anonymous> CSSM_WORDID_PROMPTED_PASSWORD
	enum <anonymous> CSSM_WORDID_PROPAGATE
	enum <anonymous> CSSM_WORDID_PROTECTED_BIOMETRIC
	enum <anonymous> CSSM_WORDID_PROTECTED_PASSWORD
	enum <anonymous> CSSM_WORDID_PROTECTED_PIN
	enum <anonymous> CSSM_WORDID_PUBLIC_KEY
	enum <anonymous> CSSM_WORDID_PUBLIC_KEY_FROM_CERT
	enum <anonymous> CSSM_WORDID_Q
	enum <anonymous> CSSM_WORDID_RANGE
	enum <anonymous> CSSM_WORDID_REVAL
	enum <anonymous> CSSM_WORDID_RIPEMAC
	enum <anonymous> CSSM_WORDID_RIPEMD
	enum <anonymous> CSSM_WORDID_RIPEMD160
	enum <anonymous> CSSM_WORDID_RSA
	enum <anonymous> CSSM_WORDID_RSA_ISO9796
	enum <anonymous> CSSM_WORDID_RSA_PKCS
	enum <anonymous> CSSM_WORDID_RSA_PKCS1
	enum <anonymous> CSSM_WORDID_RSA_PKCS1_MD5
	enum <anonymous> CSSM_WORDID_RSA_PKCS1_SHA1
	enum <anonymous> CSSM_WORDID_RSA_PKCS1_SIG
	enum <anonymous> CSSM_WORDID_RSA_PKCS_MD5
	enum <anonymous> CSSM_WORDID_RSA_PKCS_SHA1
	enum <anonymous> CSSM_WORDID_RSA_RAW
	enum <anonymous> CSSM_WORDID_SDSIV1
	enum <anonymous> CSSM_WORDID_SEQUENCE
	enum <anonymous> CSSM_WORDID_SET
	enum <anonymous> CSSM_WORDID_SEXPR
	enum <anonymous> CSSM_WORDID_SHA1
	enum <anonymous> CSSM_WORDID_SHA1WITHDSA
	enum <anonymous> CSSM_WORDID_SHA1WITHECDSA
	enum <anonymous> CSSM_WORDID_SHA1WITHRSA
	enum <anonymous> CSSM_WORDID_SIGN
	enum <anonymous> CSSM_WORDID_SIGNATURE
	enum <anonymous> CSSM_WORDID_SIGNED_NONCE
	enum <anonymous> CSSM_WORDID_SIGNED_SECRET
	enum <anonymous> CSSM_WORDID_SPKI
	enum <anonymous> CSSM_WORDID_SUBJECT
	enum <anonymous> CSSM_WORDID_SUBJECT_INFO
	enum <anonymous> CSSM_WORDID_SYMMETRIC_KEY
	enum <anonymous> CSSM_WORDID_SYSTEM
	enum <anonymous> CSSM_WORDID_TAG
	enum <anonymous> CSSM_WORDID_THRESHOLD
	enum <anonymous> CSSM_WORDID_TIME
	enum <anonymous> CSSM_WORDID_URI
	enum <anonymous> CSSM_WORDID_VENDOR_END
	enum <anonymous> CSSM_WORDID_VENDOR_START
	enum <anonymous> CSSM_WORDID_VERSION
	enum <anonymous> CSSM_WORDID_X509_ATTRIBUTE
	enum <anonymous> CSSM_WORDID_X509V1
	enum <anonymous> CSSM_WORDID_X509V2
	enum <anonymous> CSSM_WORDID_X509V3
	enum <anonymous> CSSM_WORDID_X9_ATTRIBUTE
	extension_data_format CSSM_X509_DATAFORMAT_ENCODED
	extension_data_format CSSM_X509_DATAFORMAT_PAIR
	extension_data_format CSSM_X509_DATAFORMAT_PARSED
	enum <anonymous> CSSMERR_AC_DEVICE_FAILED
	enum <anonymous> CSSMERR_AC_DEVICE_RESET
	enum <anonymous> CSSMERR_AC_FUNCTION_FAILED
	enum <anonymous> CSSMERR_AC_FUNCTION_NOT_IMPLEMENTED
	enum <anonymous> CSSMERR_AC_IN_DARK_WAKE
	enum <anonymous> CSSMERR_AC_INSUFFICIENT_CLIENT_IDENTIFICATION
	enum <anonymous> CSSMERR_AC_INTERNAL_ERROR
	enum <anonymous> CSSMERR_AC_INVALID_BASE_ACLS
	enum <anonymous> CSSMERR_AC_INVALID_CL_HANDLE
	enum <anonymous> CSSMERR_AC_INVALID_CONTEXT_HANDLE
	enum <anonymous> CSSMERR_AC_INVALID_DATA
	enum <anonymous> CSSMERR_AC_INVALID_DB_HANDLE
	enum <anonymous> CSSMERR_AC_INVALID_DB_LIST
	enum <anonymous> CSSMERR_AC_INVALID_DB_LIST_POINTER
	enum <anonymous> CSSMERR_AC_INVALID_DL_HANDLE
	enum <anonymous> CSSMERR_AC_INVALID_ENCODING
	enum <anonymous> CSSMERR_AC_INVALID_INPUT_POINTER
	enum <anonymous> CSSMERR_AC_INVALID_OUTPUT_POINTER
	enum <anonymous> CSSMERR_AC_INVALID_PASSTHROUGH_ID
	enum <anonymous> CSSMERR_AC_INVALID_POINTER
	enum <anonymous> CSSMERR_AC_INVALID_REQUEST_DESCRIPTOR
	enum <anonymous> CSSMERR_AC_INVALID_REQUESTOR
	enum <anonymous> CSSMERR_AC_INVALID_TP_HANDLE
	enum <anonymous> CSSMERR_AC_INVALID_TUPLE_CREDENTIALS
	enum <anonymous> CSSMERR_AC_INVALID_VALIDITY_PERIOD
	enum <anonymous> CSSMERR_AC_MDS_ERROR
	enum <anonymous> CSSMERR_AC_MEMORY_ERROR
	enum <anonymous> CSSMERR_AC_NO_USER_INTERACTION
	enum <anonymous> CSSMERR_AC_OS_ACCESS_DENIED
	enum <anonymous> CSSMERR_AC_SELF_CHECK_FAILED
	enum <anonymous> CSSMERR_AC_SERVICE_NOT_AVAILABLE
	enum <anonymous> CSSMERR_AC_USER_CANCELED
	enum <anonymous> CSSMERR_APPLE_DOTMAC_CSR_VERIFY_FAIL
	enum <anonymous> CSSMERR_APPLE_DOTMAC_FAILED_CONSISTENCY_CHECK
	enum <anonymous> CSSMERR_APPLE_DOTMAC_NO_REQ_PENDING
	enum <anonymous> CSSMERR_APPLE_DOTMAC_REQ_IS_PENDING
	enum <anonymous> CSSMERR_APPLE_DOTMAC_REQ_QUEUED
	enum <anonymous> CSSMERR_APPLE_DOTMAC_REQ_REDIRECT
	enum <anonymous> CSSMERR_APPLE_DOTMAC_REQ_SERVER_ALREADY_EXIST
	enum <anonymous> CSSMERR_APPLE_DOTMAC_REQ_SERVER_AUTH
	enum <anonymous> CSSMERR_APPLE_DOTMAC_REQ_SERVER_ERR
	enum <anonymous> CSSMERR_APPLE_DOTMAC_REQ_SERVER_NOT_AVAIL
	enum <anonymous> CSSMERR_APPLE_DOTMAC_REQ_SERVER_PARAM
	enum <anonymous> CSSMERR_APPLE_DOTMAC_REQ_SERVER_SERVICE_ERROR
	enum <anonymous> CSSMERR_APPLE_DOTMAC_REQ_SERVER_UNIMPL
	enum <anonymous> CSSMERR_APPLEDL_DISK_FULL
	enum <anonymous> CSSMERR_APPLEDL_FILE_TOO_BIG
	enum <anonymous> CSSMERR_APPLEDL_INCOMPATIBLE_DATABASE_BLOB
	enum <anonymous> CSSMERR_APPLEDL_INCOMPATIBLE_KEY_BLOB
	enum <anonymous> CSSMERR_APPLEDL_INVALID_DATABASE_BLOB
	enum <anonymous> CSSMERR_APPLEDL_INVALID_KEY_BLOB
	enum <anonymous> CSSMERR_APPLEDL_INVALID_OPEN_PARAMETERS
	enum <anonymous> CSSMERR_APPLEDL_QUOTA_EXCEEDED
	enum <anonymous> CSSMERR_APPLETP_BAD_CERT_FROM_ISSUER
	enum <anonymous> CSSMERR_APPLETP_CERT_NOT_FOUND_FROM_ISSUER
	enum <anonymous> CSSMERR_APPLETP_CODE_SIGN_DEVELOPMENT
	enum <anonymous> CSSMERR_APPLETP_CRL_BAD_URI
	enum <anonymous> CSSMERR_APPLETP_CRL_EXPIRED
	enum <anonymous> CSSMERR_APPLETP_CRL_INVALID_ANCHOR_CERT
	enum <anonymous> CSSMERR_APPLETP_CRL_NOT_FOUND
	enum <anonymous> CSSMERR_APPLETP_CRL_NOT_TRUSTED
	enum <anonymous> CSSMERR_APPLETP_CRL_NOT_VALID_YET
	enum <anonymous> CSSMERR_APPLETP_CRL_POLICY_FAIL
	enum <anonymous> CSSMERR_APPLETP_CRL_SERVER_DOWN
	enum <anonymous> CSSMERR_APPLETP_CS_BAD_CERT_CHAIN_LENGTH
	enum <anonymous> CSSMERR_APPLETP_CS_BAD_PATH_LENGTH
	enum <anonymous> CSSMERR_APPLETP_CS_NO_BASIC_CONSTRAINTS
	enum <anonymous> CSSMERR_APPLETP_CS_NO_EXTENDED_KEY_USAGE
	enum <anonymous> CSSMERR_APPLETP_EXT_KEYUSAGE_NOT_CRITICAL
	enum <anonymous> CSSMERR_APPLETP_HOSTNAME_MISMATCH
	enum <anonymous> CSSMERR_APPLETP_IDP_FAIL
	enum <anonymous> CSSMERR_APPLETP_INCOMPLETE_REVOCATION_CHECK
	enum <anonymous> CSSMERR_APPLETP_INVALID_AUTHORITY_ID
	enum <anonymous> CSSMERR_APPLETP_INVALID_CA
	enum <anonymous> CSSMERR_APPLETP_INVALID_EMPTY_SUBJECT
	enum <anonymous> CSSMERR_APPLETP_INVALID_EXTENDED_KEY_USAGE
	enum <anonymous> CSSMERR_APPLETP_INVALID_ID_LINKAGE
	enum <anonymous> CSSMERR_APPLETP_INVALID_KEY_USAGE
	enum <anonymous> CSSMERR_APPLETP_INVALID_ROOT
	enum <anonymous> CSSMERR_APPLETP_INVALID_SUBJECT_ID
	enum <anonymous> CSSMERR_APPLETP_MISSING_REQUIRED_EXTENSION
	enum <anonymous> CSSMERR_APPLETP_NETWORK_FAILURE
	enum <anonymous> CSSMERR_APPLETP_NO_BASIC_CONSTRAINTS
	enum <anonymous> CSSMERR_APPLETP_OCSP_BAD_REQUEST
	enum <anonymous> CSSMERR_APPLETP_OCSP_BAD_RESPONSE
	enum <anonymous> CSSMERR_APPLETP_OCSP_INVALID_ANCHOR_CERT
	enum <anonymous> CSSMERR_APPLETP_OCSP_NO_SIGNER
	enum <anonymous> CSSMERR_APPLETP_OCSP_NONCE_MISMATCH
	enum <anonymous> CSSMERR_APPLETP_OCSP_NOT_TRUSTED
	enum <anonymous> CSSMERR_APPLETP_OCSP_RESP_INTERNAL_ERR
	enum <anonymous> CSSMERR_APPLETP_OCSP_RESP_MALFORMED_REQ
	enum <anonymous> CSSMERR_APPLETP_OCSP_RESP_SIG_REQUIRED
	enum <anonymous> CSSMERR_APPLETP_OCSP_RESP_TRY_LATER
	enum <anonymous> CSSMERR_APPLETP_OCSP_RESP_UNAUTHORIZED
	enum <anonymous> CSSMERR_APPLETP_OCSP_SIG_ERROR
	enum <anonymous> CSSMERR_APPLETP_OCSP_STATUS_UNRECOGNIZED
	enum <anonymous> CSSMERR_APPLETP_OCSP_UNAVAILABLE
	enum <anonymous> CSSMERR_APPLETP_PATH_LEN_CONSTRAINT
	enum <anonymous> CSSMERR_APPLETP_RS_BAD_CERT_CHAIN_LENGTH
	enum <anonymous> CSSMERR_APPLETP_RS_BAD_EXTENDED_KEY_USAGE
	enum <anonymous> CSSMERR_APPLETP_SMIME_BAD_EXT_KEY_USE
	enum <anonymous> CSSMERR_APPLETP_SMIME_BAD_KEY_USE
	enum <anonymous> CSSMERR_APPLETP_SMIME_EMAIL_ADDRS_NOT_FOUND
	enum <anonymous> CSSMERR_APPLETP_SMIME_KEYUSAGE_NOT_CRITICAL
	enum <anonymous> CSSMERR_APPLETP_SMIME_NO_EMAIL_ADDRS
	enum <anonymous> CSSMERR_APPLETP_SMIME_SUBJ_ALT_NAME_NOT_CRIT
	enum <anonymous> CSSMERR_APPLETP_SSL_BAD_EXT_KEY_USE
	enum <anonymous> CSSMERR_APPLETP_TRUST_SETTING_DENY
	enum <anonymous> CSSMERR_APPLETP_UNKNOWN_CERT_EXTEN
	enum <anonymous> CSSMERR_APPLETP_UNKNOWN_CRITICAL_EXTEN
	enum <anonymous> CSSMERR_APPLETP_UNKNOWN_CRL_EXTEN
	enum <anonymous> CSSMERR_APPLETP_UNKNOWN_QUAL_CERT_STATEMENT
	enum <anonymous> CSSMERR_CL_CRL_ALREADY_SIGNED
	enum <anonymous> CSSMERR_CL_DEVICE_FAILED
	enum <anonymous> CSSMERR_CL_DEVICE_RESET
	enum <anonymous> CSSMERR_CL_FUNCTION_FAILED
	enum <anonymous> CSSMERR_CL_FUNCTION_NOT_IMPLEMENTED
	enum <anonymous> CSSMERR_CL_IN_DARK_WAKE
	enum <anonymous> CSSMERR_CL_INSUFFICIENT_CLIENT_IDENTIFICATION
	enum <anonymous> CSSMERR_CL_INTERNAL_ERROR
	enum <anonymous> CSSMERR_CL_INVALID_BUNDLE_INFO
	enum <anonymous> CSSMERR_CL_INVALID_BUNDLE_POINTER
	enum <anonymous> CSSMERR_CL_INVALID_CACHE_HANDLE
	enum <anonymous> CSSMERR_CL_INVALID_CERT_POINTER
	enum <anonymous> CSSMERR_CL_INVALID_CERTGROUP_POINTER
	enum <anonymous> CSSMERR_CL_INVALID_CONTEXT_HANDLE
	enum <anonymous> CSSMERR_CL_INVALID_CRL_INDEX
	enum <anonymous> CSSMERR_CL_INVALID_CRL_POINTER
	enum <anonymous> CSSMERR_CL_INVALID_DATA
	enum <anonymous> CSSMERR_CL_INVALID_FIELD_POINTER
	enum <anonymous> CSSMERR_CL_INVALID_INPUT_POINTER
	enum <anonymous> CSSMERR_CL_INVALID_NUMBER_OF_FIELDS
	enum <anonymous> CSSMERR_CL_INVALID_OUTPUT_POINTER
	enum <anonymous> CSSMERR_CL_INVALID_PASSTHROUGH_ID
	enum <anonymous> CSSMERR_CL_INVALID_POINTER
	enum <anonymous> CSSMERR_CL_INVALID_RESULTS_HANDLE
	enum <anonymous> CSSMERR_CL_INVALID_SCOPE
	enum <anonymous> CSSMERR_CL_MDS_ERROR
	enum <anonymous> CSSMERR_CL_MEMORY_ERROR
	enum <anonymous> CSSMERR_CL_NO_FIELD_VALUES
	enum <anonymous> CSSMERR_CL_NO_USER_INTERACTION
	enum <anonymous> CSSMERR_CL_OS_ACCESS_DENIED
	enum <anonymous> CSSMERR_CL_SCOPE_NOT_SUPPORTED
	enum <anonymous> CSSMERR_CL_SELF_CHECK_FAILED
	enum <anonymous> CSSMERR_CL_SERVICE_NOT_AVAILABLE
	enum <anonymous> CSSMERR_CL_UNKNOWN_FORMAT
	enum <anonymous> CSSMERR_CL_UNKNOWN_TAG
	enum <anonymous> CSSMERR_CL_USER_CANCELED
	enum <anonymous> CSSMERR_CL_VERIFICATION_FAILURE
	enum <anonymous> CSSMERR_CSP_ACL_ADD_FAILED
	enum <anonymous> CSSMERR_CSP_ACL_BASE_CERTS_NOT_SUPPORTED
	enum <anonymous> CSSMERR_CSP_ACL_CHALLENGE_CALLBACK_FAILED
	enum <anonymous> CSSMERR_CSP_ACL_CHANGE_FAILED
	enum <anonymous> CSSMERR_CSP_ACL_DELETE_FAILED
	enum <anonymous> CSSMERR_CSP_ACL_ENTRY_TAG_NOT_FOUND
	enum <anonymous> CSSMERR_CSP_ACL_REPLACE_FAILED
	enum <anonymous> CSSMERR_CSP_ACL_SUBJECT_TYPE_NOT_SUPPORTED
	enum <anonymous> CSSMERR_CSP_ALGID_MISMATCH
	enum <anonymous> CSSMERR_CSP_ALREADY_LOGGED_IN
	enum <anonymous> CSSMERR_CSP_APPLE_ADD_APPLICATION_ACL_SUBJECT
	enum <anonymous> CSSMERR_CSP_APPLE_INVALID_KEY_END_DATE
	enum <anonymous> CSSMERR_CSP_APPLE_INVALID_KEY_START_DATE
	enum <anonymous> CSSMERR_CSP_APPLE_PUBLIC_KEY_INCOMPLETE
	enum <anonymous> CSSMERR_CSP_APPLE_SIGNATURE_MISMATCH
	enum <anonymous> CSSMERR_CSP_APPLE_SSLv2_ROLLBACK
	enum <anonymous> CSSMERR_CSP_ATTACH_HANDLE_BUSY
	enum <anonymous> CSSMERR_CSP_BLOCK_SIZE_MISMATCH
	enum <anonymous> CSSMERR_CSP_CRYPTO_DATA_CALLBACK_FAILED
	enum <anonymous> CSSMERR_CSP_DEVICE_ERROR
	enum <anonymous> CSSMERR_CSP_DEVICE_FAILED
	enum <anonymous> CSSMERR_CSP_DEVICE_MEMORY_ERROR
	enum <anonymous> CSSMERR_CSP_DEVICE_RESET
	enum <anonymous> CSSMERR_CSP_DEVICE_VERIFY_FAILED
	enum <anonymous> CSSMERR_CSP_FUNCTION_FAILED
	enum <anonymous> CSSMERR_CSP_FUNCTION_NOT_IMPLEMENTED
	enum <anonymous> CSSMERR_CSP_IN_DARK_WAKE
	enum <anonymous> CSSMERR_CSP_INPUT_LENGTH_ERROR
	enum <anonymous> CSSMERR_CSP_INSUFFICIENT_CLIENT_IDENTIFICATION
	enum <anonymous> CSSMERR_CSP_INTERNAL_ERROR
	enum <anonymous> CSSMERR_CSP_INVALID_ACCESS_CREDENTIALS
	enum <anonymous> CSSMERR_CSP_INVALID_ACL_BASE_CERTS
	enum <anonymous> CSSMERR_CSP_INVALID_ACL_CHALLENGE_CALLBACK
	enum <anonymous> CSSMERR_CSP_INVALID_ACL_EDIT_MODE
	enum <anonymous> CSSMERR_CSP_INVALID_ACL_ENTRY_TAG
	enum <anonymous> CSSMERR_CSP_INVALID_ACL_SUBJECT_VALUE
	enum <anonymous> CSSMERR_CSP_INVALID_ALGORITHM
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_ACCESS_CREDENTIALS
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_ALG_PARAMS
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_BASE
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_BLOCK_SIZE
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_DL_DB_HANDLE
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_EFFECTIVE_BITS
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_END_DATE
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_INIT_VECTOR
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_ITERATION_COUNT
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_KEY
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_KEY_LENGTH
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_KEY_TYPE
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_LABEL
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_MODE
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_OUTPUT_SIZE
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_PADDING
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_PASSPHRASE
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_PRIME
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_PRIVATE_KEY_FORMAT
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_PUBLIC_KEY_FORMAT
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_RANDOM
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_ROUNDS
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_SALT
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_SEED
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_START_DATE
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_SUBPRIME
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_SYMMETRIC_KEY_FORMAT
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_VERSION
	enum <anonymous> CSSMERR_CSP_INVALID_ATTR_WRAPPED_KEY_FORMAT
	enum <anonymous> CSSMERR_CSP_INVALID_CONTEXT
	enum <anonymous> CSSMERR_CSP_INVALID_CONTEXT_HANDLE
	enum <anonymous> CSSMERR_CSP_INVALID_CRYPTO_DATA
	enum <anonymous> CSSMERR_CSP_INVALID_DATA
	enum <anonymous> CSSMERR_CSP_INVALID_DATA_COUNT
	enum <anonymous> CSSMERR_CSP_INVALID_DIGEST_ALGORITHM
	enum <anonymous> CSSMERR_CSP_INVALID_INPUT_POINTER
	enum <anonymous> CSSMERR_CSP_INVALID_INPUT_VECTOR
	enum <anonymous> CSSMERR_CSP_INVALID_KEY
	enum <anonymous> CSSMERR_CSP_INVALID_KEY_CLASS
	enum <anonymous> CSSMERR_CSP_INVALID_KEY_FORMAT
	enum <anonymous> CSSMERR_CSP_INVALID_KEY_LABEL
	enum <anonymous> CSSMERR_CSP_INVALID_KEY_POINTER
	enum <anonymous> CSSMERR_CSP_INVALID_KEY_REFERENCE
	enum <anonymous> CSSMERR_CSP_INVALID_KEYATTR_MASK
	enum <anonymous> CSSMERR_CSP_INVALID_KEYUSAGE_MASK
	enum <anonymous> CSSMERR_CSP_INVALID_LOGIN_NAME
	enum <anonymous> CSSMERR_CSP_INVALID_NEW_ACL_ENTRY
	enum <anonymous> CSSMERR_CSP_INVALID_NEW_ACL_OWNER
	enum <anonymous> CSSMERR_CSP_INVALID_OUTPUT_POINTER
	enum <anonymous> CSSMERR_CSP_INVALID_OUTPUT_VECTOR
	enum <anonymous> CSSMERR_CSP_INVALID_PASSTHROUGH_ID
	enum <anonymous> CSSMERR_CSP_INVALID_POINTER
	enum <anonymous> CSSMERR_CSP_INVALID_SAMPLE_VALUE
	enum <anonymous> CSSMERR_CSP_INVALID_SIGNATURE
	enum <anonymous> CSSMERR_CSP_KEY_BLOB_TYPE_INCORRECT
	enum <anonymous> CSSMERR_CSP_KEY_HEADER_INCONSISTENT
	enum <anonymous> CSSMERR_CSP_KEY_LABEL_ALREADY_EXISTS
	enum <anonymous> CSSMERR_CSP_KEY_USAGE_INCORRECT
	enum <anonymous> CSSMERR_CSP_MDS_ERROR
	enum <anonymous> CSSMERR_CSP_MEMORY_ERROR
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_ACCESS_CREDENTIALS
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_ALG_PARAMS
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_BASE
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_BLOCK_SIZE
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_DL_DB_HANDLE
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_EFFECTIVE_BITS
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_END_DATE
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_INIT_VECTOR
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_ITERATION_COUNT
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_KEY
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_KEY_LENGTH
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_KEY_TYPE
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_LABEL
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_MODE
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_OUTPUT_SIZE
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_PADDING
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_PASSPHRASE
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_PRIME
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_PRIVATE_KEY_FORMAT
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_PUBLIC_KEY_FORMAT
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_RANDOM
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_ROUNDS
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_SALT
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_SEED
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_START_DATE
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_SUBPRIME
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_SYMMETRIC_KEY_FORMAT
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_VERSION
	enum <anonymous> CSSMERR_CSP_MISSING_ATTR_WRAPPED_KEY_FORMAT
	enum <anonymous> CSSMERR_CSP_NO_USER_INTERACTION
	enum <anonymous> CSSMERR_CSP_NOT_LOGGED_IN
	enum <anonymous> CSSMERR_CSP_OBJECT_ACL_NOT_SUPPORTED
	enum <anonymous> CSSMERR_CSP_OBJECT_ACL_REQUIRED
	enum <anonymous> CSSMERR_CSP_OBJECT_MANIP_AUTH_DENIED
	enum <anonymous> CSSMERR_CSP_OBJECT_USE_AUTH_DENIED
	enum <anonymous> CSSMERR_CSP_OPERATION_AUTH_DENIED
	enum <anonymous> CSSMERR_CSP_OS_ACCESS_DENIED
	enum <anonymous> CSSMERR_CSP_OUTPUT_LENGTH_ERROR
	enum <anonymous> CSSMERR_CSP_PRIVATE_KEY_ALREADY_EXISTS
	enum <anonymous> CSSMERR_CSP_PRIVATE_KEY_NOT_FOUND
	enum <anonymous> CSSMERR_CSP_PRIVILEGE_NOT_GRANTED
	enum <anonymous> CSSMERR_CSP_PRIVILEGE_NOT_SUPPORTED
	enum <anonymous> CSSMERR_CSP_PUBLIC_KEY_INCONSISTENT
	enum <anonymous> CSSMERR_CSP_QUERY_SIZE_UNKNOWN
	enum <anonymous> CSSMERR_CSP_SAMPLE_VALUE_NOT_SUPPORTED
	enum <anonymous> CSSMERR_CSP_SELF_CHECK_FAILED
	enum <anonymous> CSSMERR_CSP_SERVICE_NOT_AVAILABLE
	enum <anonymous> CSSMERR_CSP_STAGED_OPERATION_IN_PROGRESS
	enum <anonymous> CSSMERR_CSP_STAGED_OPERATION_NOT_STARTED
	enum <anonymous> CSSMERR_CSP_UNSUPPORTED_KEY_FORMAT
	enum <anonymous> CSSMERR_CSP_UNSUPPORTED_KEY_LABEL
	enum <anonymous> CSSMERR_CSP_UNSUPPORTED_KEY_SIZE
	enum <anonymous> CSSMERR_CSP_UNSUPPORTED_KEYATTR_MASK
	enum <anonymous> CSSMERR_CSP_UNSUPPORTED_KEYUSAGE_MASK
	enum <anonymous> CSSMERR_CSP_USER_CANCELED
	enum <anonymous> CSSMERR_CSP_VECTOR_OF_BUFS_UNSUPPORTED
	enum <anonymous> CSSMERR_CSP_VERIFY_FAILED
	enum <anonymous> CSSMERR_CSPDL_APPLE_DL_CONVERSION_ERROR
	enum <anonymous> CSSMERR_CSSM_ADDIN_AUTHENTICATE_FAILED
	enum <anonymous> CSSMERR_CSSM_ADDIN_LOAD_FAILED
	enum <anonymous> CSSMERR_CSSM_ADDIN_UNLOAD_FAILED
	enum <anonymous> CSSMERR_CSSM_ATTRIBUTE_NOT_IN_CONTEXT
	enum <anonymous> CSSMERR_CSSM_BUFFER_TOO_SMALL
	enum <anonymous> CSSMERR_CSSM_DEVICE_FAILED
	enum <anonymous> CSSMERR_CSSM_DEVICE_RESET
	enum <anonymous> CSSMERR_CSSM_EMM_AUTHENTICATE_FAILED
	enum <anonymous> CSSMERR_CSSM_EMM_LOAD_FAILED
	enum <anonymous> CSSMERR_CSSM_EMM_UNLOAD_FAILED
	enum <anonymous> CSSMERR_CSSM_EVENT_NOTIFICATION_CALLBACK_NOT_FOUND
	enum <anonymous> CSSMERR_CSSM_FUNCTION_FAILED
	enum <anonymous> CSSMERR_CSSM_FUNCTION_INTEGRITY_FAIL
	enum <anonymous> CSSMERR_CSSM_FUNCTION_NOT_IMPLEMENTED
	enum <anonymous> CSSMERR_CSSM_IN_DARK_WAKE
	enum <anonymous> CSSMERR_CSSM_INCOMPATIBLE_VERSION
	enum <anonymous> CSSMERR_CSSM_INSUFFICIENT_CLIENT_IDENTIFICATION
	enum <anonymous> CSSMERR_CSSM_INTERNAL_ERROR
	enum <anonymous> CSSMERR_CSSM_INVALID_ADDIN_FUNCTION_TABLE
	enum <anonymous> CSSMERR_CSSM_INVALID_ADDIN_HANDLE
	enum <anonymous> CSSMERR_CSSM_INVALID_ATTRIBUTE
	enum <anonymous> CSSMERR_CSSM_INVALID_CONTEXT_HANDLE
	enum <anonymous> CSSMERR_CSSM_INVALID_GUID
	enum <anonymous> CSSMERR_CSSM_INVALID_HANDLE_USAGE
	enum <anonymous> CSSMERR_CSSM_INVALID_INPUT_POINTER
	enum <anonymous> CSSMERR_CSSM_INVALID_KEY_HIERARCHY
	enum <anonymous> CSSMERR_CSSM_INVALID_OUTPUT_POINTER
	enum <anonymous> CSSMERR_CSSM_INVALID_POINTER
	enum <anonymous> CSSMERR_CSSM_INVALID_PVC
	enum <anonymous> CSSMERR_CSSM_INVALID_SERVICE_MASK
	enum <anonymous> CSSMERR_CSSM_INVALID_SUBSERVICEID
	enum <anonymous> CSSMERR_CSSM_LIB_REF_NOT_FOUND
	enum <anonymous> CSSMERR_CSSM_MDS_ERROR
	enum <anonymous> CSSMERR_CSSM_MEMORY_ERROR
	enum <anonymous> CSSMERR_CSSM_MODULE_MANAGER_INITIALIZE_FAIL
	enum <anonymous> CSSMERR_CSSM_MODULE_MANAGER_NOT_FOUND
	enum <anonymous> CSSMERR_CSSM_MODULE_MANIFEST_VERIFY_FAILED
	enum <anonymous> CSSMERR_CSSM_MODULE_NOT_LOADED
	enum <anonymous> CSSMERR_CSSM_NO_USER_INTERACTION
	enum <anonymous> CSSMERR_CSSM_NOT_INITIALIZED
	enum <anonymous> CSSMERR_CSSM_OS_ACCESS_DENIED
	enum <anonymous> CSSMERR_CSSM_PRIVILEGE_NOT_GRANTED
	enum <anonymous> CSSMERR_CSSM_PVC_ALREADY_CONFIGURED
	enum <anonymous> CSSMERR_CSSM_PVC_REFERENT_NOT_FOUND
	enum <anonymous> CSSMERR_CSSM_SCOPE_NOT_SUPPORTED
	enum <anonymous> CSSMERR_CSSM_SELF_CHECK_FAILED
	enum <anonymous> CSSMERR_CSSM_SERVICE_NOT_AVAILABLE
	enum <anonymous> CSSMERR_CSSM_USER_CANCELED
	enum <anonymous> CSSMERR_DL_ACL_ADD_FAILED
	enum <anonymous> CSSMERR_DL_ACL_BASE_CERTS_NOT_SUPPORTED
	enum <anonymous> CSSMERR_DL_ACL_CHALLENGE_CALLBACK_FAILED
	enum <anonymous> CSSMERR_DL_ACL_CHANGE_FAILED
	enum <anonymous> CSSMERR_DL_ACL_DELETE_FAILED
	enum <anonymous> CSSMERR_DL_ACL_ENTRY_TAG_NOT_FOUND
	enum <anonymous> CSSMERR_DL_ACL_REPLACE_FAILED
	enum <anonymous> CSSMERR_DL_ACL_SUBJECT_TYPE_NOT_SUPPORTED
	enum <anonymous> CSSMERR_DL_DATABASE_CORRUPT
	enum <anonymous> CSSMERR_DL_DATASTORE_ALREADY_EXISTS
	enum <anonymous> CSSMERR_DL_DATASTORE_DOESNOT_EXIST
	enum <anonymous> CSSMERR_DL_DATASTORE_IS_OPEN
	enum <anonymous> CSSMERR_DL_DB_LOCKED
	enum <anonymous> CSSMERR_DL_DEVICE_FAILED
	enum <anonymous> CSSMERR_DL_DEVICE_RESET
	enum <anonymous> CSSMERR_DL_ENDOFDATA
	enum <anonymous> CSSMERR_DL_FIELD_SPECIFIED_MULTIPLE
	enum <anonymous> CSSMERR_DL_FUNCTION_FAILED
	enum <anonymous> CSSMERR_DL_FUNCTION_NOT_IMPLEMENTED
	enum <anonymous> CSSMERR_DL_IN_DARK_WAKE
	enum <anonymous> CSSMERR_DL_INCOMPATIBLE_FIELD_FORMAT
	enum <anonymous> CSSMERR_DL_INSUFFICIENT_CLIENT_IDENTIFICATION
	enum <anonymous> CSSMERR_DL_INTERNAL_ERROR
	enum <anonymous> CSSMERR_DL_INVALID_ACCESS_CREDENTIALS
	enum <anonymous> CSSMERR_DL_INVALID_ACCESS_REQUEST
	enum <anonymous> CSSMERR_DL_INVALID_ACL_BASE_CERTS
	enum <anonymous> CSSMERR_DL_INVALID_ACL_CHALLENGE_CALLBACK
	enum <anonymous> CSSMERR_DL_INVALID_ACL_EDIT_MODE
	enum <anonymous> CSSMERR_DL_INVALID_ACL_ENTRY_TAG
	enum <anonymous> CSSMERR_DL_INVALID_ACL_SUBJECT_VALUE
	enum <anonymous> CSSMERR_DL_INVALID_CL_HANDLE
	enum <anonymous> CSSMERR_DL_INVALID_CSP_HANDLE
	enum <anonymous> CSSMERR_DL_INVALID_DB_HANDLE
	enum <anonymous> CSSMERR_DL_INVALID_DB_LIST_POINTER
	enum <anonymous> CSSMERR_DL_INVALID_DB_LOCATION
	enum <anonymous> CSSMERR_DL_INVALID_DB_NAME
	enum <anonymous> CSSMERR_DL_INVALID_DL_HANDLE
	enum <anonymous> CSSMERR_DL_INVALID_FIELD_NAME
	enum <anonymous> CSSMERR_DL_INVALID_INDEX_INFO
	enum <anonymous> CSSMERR_DL_INVALID_INPUT_POINTER
	enum <anonymous> CSSMERR_DL_INVALID_MODIFY_MODE
	enum <anonymous> CSSMERR_DL_INVALID_NETWORK_ADDR
	enum <anonymous> CSSMERR_DL_INVALID_NEW_ACL_ENTRY
	enum <anonymous> CSSMERR_DL_INVALID_NEW_ACL_OWNER
	enum <anonymous> CSSMERR_DL_INVALID_NEW_OWNER
	enum <anonymous> CSSMERR_DL_INVALID_OPEN_PARAMETERS
	enum <anonymous> CSSMERR_DL_INVALID_OUTPUT_POINTER
	enum <anonymous> CSSMERR_DL_INVALID_PARSING_MODULE
	enum <anonymous> CSSMERR_DL_INVALID_PASSTHROUGH_ID
	enum <anonymous> CSSMERR_DL_INVALID_POINTER
	enum <anonymous> CSSMERR_DL_INVALID_QUERY
	enum <anonymous> CSSMERR_DL_INVALID_RECORD_INDEX
	enum <anonymous> CSSMERR_DL_INVALID_RECORD_UID
	enum <anonymous> CSSMERR_DL_INVALID_RECORDTYPE
	enum <anonymous> CSSMERR_DL_INVALID_RESULTS_HANDLE
	enum <anonymous> CSSMERR_DL_INVALID_SAMPLE_VALUE
	enum <anonymous> CSSMERR_DL_INVALID_SELECTION_TAG
	enum <anonymous> CSSMERR_DL_INVALID_UNIQUE_INDEX_DATA
	enum <anonymous> CSSMERR_DL_INVALID_VALUE
	enum <anonymous> CSSMERR_DL_MDS_ERROR
	enum <anonymous> CSSMERR_DL_MEMORY_ERROR
	enum <anonymous> CSSMERR_DL_MISSING_VALUE
	enum <anonymous> CSSMERR_DL_MULTIPLE_VALUES_UNSUPPORTED
	enum <anonymous> CSSMERR_DL_NO_USER_INTERACTION
	enum <anonymous> CSSMERR_DL_OBJECT_ACL_NOT_SUPPORTED
	enum <anonymous> CSSMERR_DL_OBJECT_ACL_REQUIRED
	enum <anonymous> CSSMERR_DL_OBJECT_MANIP_AUTH_DENIED
	enum <anonymous> CSSMERR_DL_OBJECT_USE_AUTH_DENIED
	enum <anonymous> CSSMERR_DL_OPERATION_AUTH_DENIED
	enum <anonymous> CSSMERR_DL_OS_ACCESS_DENIED
	enum <anonymous> CSSMERR_DL_RECORD_MODIFIED
	enum <anonymous> CSSMERR_DL_RECORD_NOT_FOUND
	enum <anonymous> CSSMERR_DL_SAMPLE_VALUE_NOT_SUPPORTED
	enum <anonymous> CSSMERR_DL_SELF_CHECK_FAILED
	enum <anonymous> CSSMERR_DL_SERVICE_NOT_AVAILABLE
	enum <anonymous> CSSMERR_DL_STALE_UNIQUE_RECORD
	enum <anonymous> CSSMERR_DL_UNSUPPORTED_FIELD_FORMAT
	enum <anonymous> CSSMERR_DL_UNSUPPORTED_INDEX_INFO
	enum <anonymous> CSSMERR_DL_UNSUPPORTED_LOCALITY
	enum <anonymous> CSSMERR_DL_UNSUPPORTED_NUM_ATTRIBUTES
	enum <anonymous> CSSMERR_DL_UNSUPPORTED_NUM_INDEXES
	enum <anonymous> CSSMERR_DL_UNSUPPORTED_NUM_RECORDTYPES
	enum <anonymous> CSSMERR_DL_UNSUPPORTED_NUM_SELECTION_PREDS
	enum <anonymous> CSSMERR_DL_UNSUPPORTED_OPERATOR
	enum <anonymous> CSSMERR_DL_UNSUPPORTED_QUERY
	enum <anonymous> CSSMERR_DL_UNSUPPORTED_QUERY_LIMITS
	enum <anonymous> CSSMERR_DL_UNSUPPORTED_RECORDTYPE
	enum <anonymous> CSSMERR_DL_USER_CANCELED
	enum <anonymous> CSSMERR_TP_AUTHENTICATION_FAILED
	enum <anonymous> CSSMERR_TP_CERT_EXPIRED
	enum <anonymous> CSSMERR_TP_CERT_NOT_VALID_YET
	enum <anonymous> CSSMERR_TP_CERT_REVOKED
	enum <anonymous> CSSMERR_TP_CERT_SUSPENDED
	enum <anonymous> CSSMERR_TP_CERTGROUP_INCOMPLETE
	enum <anonymous> CSSMERR_TP_CERTIFICATE_CANT_OPERATE
	enum <anonymous> CSSMERR_TP_CRL_ALREADY_SIGNED
	enum <anonymous> CSSMERR_TP_DEVICE_FAILED
	enum <anonymous> CSSMERR_TP_DEVICE_RESET
	enum <anonymous> CSSMERR_TP_FUNCTION_FAILED
	enum <anonymous> CSSMERR_TP_FUNCTION_NOT_IMPLEMENTED
	enum <anonymous> CSSMERR_TP_IN_DARK_WAKE
	enum <anonymous> CSSMERR_TP_INSUFFICIENT_CLIENT_IDENTIFICATION
	enum <anonymous> CSSMERR_TP_INSUFFICIENT_CREDENTIALS
	enum <anonymous> CSSMERR_TP_INTERNAL_ERROR
	enum <anonymous> CSSMERR_TP_INVALID_ACTION
	enum <anonymous> CSSMERR_TP_INVALID_ACTION_DATA
	enum <anonymous> CSSMERR_TP_INVALID_ANCHOR_CERT
	enum <anonymous> CSSMERR_TP_INVALID_AUTHORITY
	enum <anonymous> CSSMERR_TP_INVALID_CALLBACK
	enum <anonymous> CSSMERR_TP_INVALID_CALLERAUTH_CONTEXT_POINTER
	enum <anonymous> CSSMERR_TP_INVALID_CERT_AUTHORITY
	enum <anonymous> CSSMERR_TP_INVALID_CERT_POINTER
	enum <anonymous> CSSMERR_TP_INVALID_CERTGROUP
	enum <anonymous> CSSMERR_TP_INVALID_CERTGROUP_POINTER
	enum <anonymous> CSSMERR_TP_INVALID_CERTIFICATE
	enum <anonymous> CSSMERR_TP_INVALID_CL_HANDLE
	enum <anonymous> CSSMERR_TP_INVALID_CONTEXT_HANDLE
	enum <anonymous> CSSMERR_TP_INVALID_CRL
	enum <anonymous> CSSMERR_TP_INVALID_CRL_AUTHORITY
	enum <anonymous> CSSMERR_TP_INVALID_CRL_ENCODING
	enum <anonymous> CSSMERR_TP_INVALID_CRL_POINTER
	enum <anonymous> CSSMERR_TP_INVALID_CRL_TYPE
	enum <anonymous> CSSMERR_TP_INVALID_CRLGROUP
	enum <anonymous> CSSMERR_TP_INVALID_CRLGROUP_POINTER
	enum <anonymous> CSSMERR_TP_INVALID_CSP_HANDLE
	enum <anonymous> CSSMERR_TP_INVALID_DATA
	enum <anonymous> CSSMERR_TP_INVALID_DB_HANDLE
	enum <anonymous> CSSMERR_TP_INVALID_DB_LIST
	enum <anonymous> CSSMERR_TP_INVALID_DB_LIST_POINTER
	enum <anonymous> CSSMERR_TP_INVALID_DL_HANDLE
	enum <anonymous> CSSMERR_TP_INVALID_FIELD_POINTER
	enum <anonymous> CSSMERR_TP_INVALID_FORM_TYPE
	enum <anonymous> CSSMERR_TP_INVALID_ID
	enum <anonymous> CSSMERR_TP_INVALID_IDENTIFIER
	enum <anonymous> CSSMERR_TP_INVALID_IDENTIFIER_POINTER
	enum <anonymous> CSSMERR_TP_INVALID_INDEX
	enum <anonymous> CSSMERR_TP_INVALID_INPUT_POINTER
	enum <anonymous> CSSMERR_TP_INVALID_KEYCACHE_HANDLE
	enum <anonymous> CSSMERR_TP_INVALID_NAME
	enum <anonymous> CSSMERR_TP_INVALID_NETWORK_ADDR
	enum <anonymous> CSSMERR_TP_INVALID_NUMBER_OF_FIELDS
	enum <anonymous> CSSMERR_TP_INVALID_OUTPUT_POINTER
	enum <anonymous> CSSMERR_TP_INVALID_PASSTHROUGH_ID
	enum <anonymous> CSSMERR_TP_INVALID_POINTER
	enum <anonymous> CSSMERR_TP_INVALID_POLICY_IDENTIFIERS
	enum <anonymous> CSSMERR_TP_INVALID_REASON
	enum <anonymous> CSSMERR_TP_INVALID_REQUEST_INPUTS
	enum <anonymous> CSSMERR_TP_INVALID_RESPONSE_VECTOR
	enum <anonymous> CSSMERR_TP_INVALID_SIGNATURE
	enum <anonymous> CSSMERR_TP_INVALID_STOP_ON_POLICY
	enum <anonymous> CSSMERR_TP_INVALID_TIMESTRING
	enum <anonymous> CSSMERR_TP_INVALID_TUPLE
	enum <anonymous> CSSMERR_TP_INVALID_TUPLEGROUP
	enum <anonymous> CSSMERR_TP_INVALID_TUPLEGROUP_POINTER
	enum <anonymous> CSSMERR_TP_MDS_ERROR
	enum <anonymous> CSSMERR_TP_MEMORY_ERROR
	enum <anonymous> CSSMERR_TP_NO_DEFAULT_AUTHORITY
	enum <anonymous> CSSMERR_TP_NO_USER_INTERACTION
	enum <anonymous> CSSMERR_TP_NOT_SIGNER
	enum <anonymous> CSSMERR_TP_NOT_TRUSTED
	enum <anonymous> CSSMERR_TP_OS_ACCESS_DENIED
	enum <anonymous> CSSMERR_TP_REJECTED_FORM
	enum <anonymous> CSSMERR_TP_REQUEST_LOST
	enum <anonymous> CSSMERR_TP_REQUEST_REJECTED
	enum <anonymous> CSSMERR_TP_SELF_CHECK_FAILED
	enum <anonymous> CSSMERR_TP_SERVICE_NOT_AVAILABLE
	enum <anonymous> CSSMERR_TP_UNKNOWN_FORMAT
	enum <anonymous> CSSMERR_TP_UNKNOWN_TAG
	enum <anonymous> CSSMERR_TP_UNSUPPORTED_ADDR_TYPE
	enum <anonymous> CSSMERR_TP_UNSUPPORTED_SERVICE
	enum <anonymous> CSSMERR_TP_USER_CANCELED
	enum <anonymous> CSSMERR_TP_VERIFICATION_FAILURE
	enum <anonymous> CSSMERR_TP_VERIFY_ACTION_FAILED
	const SecAsn1Oid CSSMOID_AD_CA_ISSUERS
	const SecAsn1Oid CSSMOID_AD_CA_REPOSITORY
	const SecAsn1Oid CSSMOID_AD_OCSP
	const SecAsn1Oid CSSMOID_AD_TIME_STAMPING
	const CSSM_OID CSSMOID_ADC_CERT_POLICY
	const SecAsn1Oid CSSMOID_AliasedEntryName
	const SecAsn1Oid CSSMOID_ANSI_DH_EPHEM
	const SecAsn1Oid CSSMOID_ANSI_DH_EPHEM_SHA1
	const SecAsn1Oid CSSMOID_ANSI_DH_HYBRID1
	const SecAsn1Oid CSSMOID_ANSI_DH_HYBRID1_SHA1
	const SecAsn1Oid CSSMOID_ANSI_DH_HYBRID2
	const SecAsn1Oid CSSMOID_ANSI_DH_HYBRID2_SHA1
	const SecAsn1Oid CSSMOID_ANSI_DH_HYBRID_ONEFLOW
	const SecAsn1Oid CSSMOID_ANSI_DH_ONE_FLOW
	const SecAsn1Oid CSSMOID_ANSI_DH_ONE_FLOW_SHA1
	const SecAsn1Oid CSSMOID_ANSI_DH_PUB_NUMBER
	const SecAsn1Oid CSSMOID_ANSI_DH_STATIC
	const SecAsn1Oid CSSMOID_ANSI_DH_STATIC_SHA1
	const SecAsn1Oid CSSMOID_ANSI_MQV1
	const SecAsn1Oid CSSMOID_ANSI_MQV1_SHA1
	const SecAsn1Oid CSSMOID_ANSI_MQV2
	const SecAsn1Oid CSSMOID_ANSI_MQV2_SHA1
	const SecAsn1Oid CSSMOID_APPLE_ASC
	const CSSM_OID CSSMOID_APPLE_CERT_POLICY
	const SecAsn1Oid CSSMOID_APPLE_ECDSA
	const CSSM_OID CSSMOID_APPLE_EKU_CODE_SIGNING
	const CSSM_OID CSSMOID_APPLE_EKU_CODE_SIGNING_DEV
	const CSSM_OID CSSMOID_APPLE_EKU_ICHAT_ENCRYPTION
	const CSSM_OID CSSMOID_APPLE_EKU_ICHAT_SIGNING
	const CSSM_OID CSSMOID_APPLE_EKU_RESOURCE_SIGNING
	const CSSM_OID CSSMOID_APPLE_EKU_SYSTEM_IDENTITY
	const CSSM_OID CSSMOID_APPLE_EXTENSION
	const CSSM_OID CSSMOID_APPLE_EXTENSION_AAI_INTERMEDIATE
	const CSSM_OID CSSMOID_APPLE_EXTENSION_ADC_APPLE_SIGNING
	const CSSM_OID CSSMOID_APPLE_EXTENSION_ADC_DEV_SIGNING
	const CSSM_OID CSSMOID_APPLE_EXTENSION_APPLE_SIGNING
	const CSSM_OID CSSMOID_APPLE_EXTENSION_APPLEID_INTERMEDIATE
	const CSSM_OID CSSMOID_APPLE_EXTENSION_APPLEID_SHARING
	const CSSM_OID CSSMOID_APPLE_EXTENSION_CODE_SIGNING
	const CSSM_OID CSSMOID_APPLE_EXTENSION_INTERMEDIATE_MARKER
	const CSSM_OID CSSMOID_APPLE_EXTENSION_ITMS_INTERMEDIATE
	const CSSM_OID CSSMOID_APPLE_EXTENSION_MACAPPSTORE_RECEIPT
	const CSSM_OID CSSMOID_APPLE_EXTENSION_WWDR_INTERMEDIATE
	const SecAsn1Oid CSSMOID_APPLE_FEE
	const SecAsn1Oid CSSMOID_APPLE_FEE_MD5
	const SecAsn1Oid CSSMOID_APPLE_FEE_SHA1
	const SecAsn1Oid CSSMOID_APPLE_FEED
	const SecAsn1Oid CSSMOID_APPLE_FEEDEXP
	const SecAsn1Oid CSSMOID_APPLE_ISIGN
	const SecAsn1Oid CSSMOID_APPLE_TP_APPLEID_SHARING
	const SecAsn1Oid CSSMOID_APPLE_TP_CODE_SIGN
	const SecAsn1Oid CSSMOID_APPLE_TP_CODE_SIGNING
	const SecAsn1Oid CSSMOID_APPLE_TP_CSR_GEN
	const SecAsn1Oid CSSMOID_APPLE_TP_EAP
	const SecAsn1Oid CSSMOID_APPLE_TP_ICHAT
	const SecAsn1Oid CSSMOID_APPLE_TP_IP_SEC
	const SecAsn1Oid CSSMOID_APPLE_TP_LOCAL_CERT_GEN
	const SecAsn1Oid CSSMOID_APPLE_TP_MACAPPSTORE_RECEIPT
	const SecAsn1Oid CSSMOID_APPLE_TP_PACKAGE_SIGNING
	const SecAsn1Oid CSSMOID_APPLE_TP_PKINIT_CLIENT
	const SecAsn1Oid CSSMOID_APPLE_TP_PKINIT_SERVER
	const SecAsn1Oid CSSMOID_APPLE_TP_RESOURCE_SIGN
	const SecAsn1Oid CSSMOID_APPLE_TP_REVOCATION_CRL
	const SecAsn1Oid CSSMOID_APPLE_TP_REVOCATION_OCSP
	const SecAsn1Oid CSSMOID_APPLE_TP_SMIME
	const SecAsn1Oid CSSMOID_APPLE_TP_SSL
	const SecAsn1Oid CSSMOID_APPLE_TP_SW_UPDATE_SIGNING
	const SecAsn1Oid CSSMOID_APPLE_TP_TIMESTAMPING
	const SecAsn1Oid CSSMOID_APPLE_X509_BASIC
	const CSSM_OID CSSMOID_APPLEID_CERT_POLICY
	const CSSM_OID CSSMOID_APPLEID_SHARING_CERT_POLICY
	const CSSM_OID CSSMOID_AuthorityInfoAccess
	const CSSM_OID CSSMOID_AuthorityKeyIdentifier
	const SecAsn1Oid CSSMOID_AuthorityRevocationList
	const CSSM_OID CSSMOID_BasicConstraints
	const CSSM_OID CSSMOID_BiometricInfo
	const SecAsn1Oid CSSMOID_BusinessCategory
	const SecAsn1Oid CSSMOID_CACertificate
	const SecAsn1Oid CSSMOID_Certicom
	const SecAsn1Oid CSSMOID_CerticomEllCurve
	const CSSM_OID CSSMOID_CertificatePolicies
	const SecAsn1Oid CSSMOID_CertificateRevocationList
	const CSSM_OID CSSMOID_CertIssuer
	const SecAsn1Oid CSSMOID_ChallengePassword
	const CSSM_OID CSSMOID_ClientAuth
	const SecAsn1Oid CSSMOID_CollectiveFacsimileTelephoneNumber
	const SecAsn1Oid CSSMOID_CollectiveInternationalISDNNumber
	const SecAsn1Oid CSSMOID_CollectiveOrganizationalUnitName
	const SecAsn1Oid CSSMOID_CollectiveOrganizationName
	const SecAsn1Oid CSSMOID_CollectivePhysicalDeliveryOfficeName
	const SecAsn1Oid CSSMOID_CollectivePostalAddress
	const SecAsn1Oid CSSMOID_CollectivePostalCode
	const SecAsn1Oid CSSMOID_CollectivePostOfficeBox
	const SecAsn1Oid CSSMOID_CollectiveStateProvinceName
	const SecAsn1Oid CSSMOID_CollectiveStreetAddress
	const SecAsn1Oid CSSMOID_CollectiveTelephoneNumber
	const SecAsn1Oid CSSMOID_CollectiveTelexNumber
	const SecAsn1Oid CSSMOID_CollectiveTelexTerminalIdentifier
	const SecAsn1Oid CSSMOID_CommonName
	const SecAsn1Oid CSSMOID_ContentType
	const SecAsn1Oid CSSMOID_CounterSignature
	const SecAsn1Oid CSSMOID_CountryName
	const CSSM_OID CSSMOID_CrlDistributionPoints
	const CSSM_OID CSSMOID_CrlNumber
	const CSSM_OID CSSMOID_CrlReason
	const SecAsn1Oid CSSMOID_CrossCertificatePair
	const CSSM_OID CSSMOID_CSSMKeyStruct
	const CSSM_OID CSSMOID_DeltaCrlIndicator
	const SecAsn1Oid CSSMOID_DES_CBC
	const SecAsn1Oid CSSMOID_Description
	const SecAsn1Oid CSSMOID_DestinationIndicator
	const SecAsn1Oid CSSMOID_DH
	const SecAsn1Oid CSSMOID_DistinguishedName
	const SecAsn1Oid CSSMOID_DNQualifier
	const SecAsn1Oid CSSMOID_DomainComponent
	const SecAsn1Oid CSSMOID_DOTMAC_CERT
	const CSSM_OID CSSMOID_DOTMAC_CERT_EMAIL_ENCRYPT
	const CSSM_OID CSSMOID_DOTMAC_CERT_EMAIL_SIGN
	const CSSM_OID CSSMOID_DOTMAC_CERT_EXTENSION
	const CSSM_OID CSSMOID_DOTMAC_CERT_IDENTITY
	const CSSM_OID CSSMOID_DOTMAC_CERT_POLICY
	const SecAsn1Oid CSSMOID_DOTMAC_CERT_REQ
	const SecAsn1Oid CSSMOID_DOTMAC_CERT_REQ_ARCHIVE_FETCH
	const SecAsn1Oid CSSMOID_DOTMAC_CERT_REQ_ARCHIVE_LIST
	const SecAsn1Oid CSSMOID_DOTMAC_CERT_REQ_ARCHIVE_REMOVE
	const SecAsn1Oid CSSMOID_DOTMAC_CERT_REQ_ARCHIVE_STORE
	const SecAsn1Oid CSSMOID_DOTMAC_CERT_REQ_EMAIL_ENCRYPT
	const SecAsn1Oid CSSMOID_DOTMAC_CERT_REQ_EMAIL_SIGN
	const SecAsn1Oid CSSMOID_DOTMAC_CERT_REQ_IDENTITY
	const SecAsn1Oid CSSMOID_DOTMAC_CERT_REQ_SHARED_SERVICES
	const SecAsn1Oid CSSMOID_DOTMAC_CERT_REQ_VALUE_ASYNC
	const SecAsn1Oid CSSMOID_DOTMAC_CERT_REQ_VALUE_HOSTNAME
	const SecAsn1Oid CSSMOID_DOTMAC_CERT_REQ_VALUE_IS_PENDING
	const SecAsn1Oid CSSMOID_DOTMAC_CERT_REQ_VALUE_PASSWORD
	const SecAsn1Oid CSSMOID_DOTMAC_CERT_REQ_VALUE_RENEW
	const SecAsn1Oid CSSMOID_DOTMAC_CERT_REQ_VALUE_USERNAME
	const SecAsn1Oid CSSMOID_DSA
	const SecAsn1Oid CSSMOID_DSA_CMS
	const SecAsn1Oid CSSMOID_DSA_JDK
	const SecAsn1Oid CSSMOID_ECDSA_WithSHA1
	const SecAsn1Oid CSSMOID_ECDSA_WithSHA224
	const SecAsn1Oid CSSMOID_ECDSA_WithSHA256
	const SecAsn1Oid CSSMOID_ECDSA_WithSHA384
	const SecAsn1Oid CSSMOID_ECDSA_WithSHA512
	const SecAsn1Oid CSSMOID_ECDSA_WithSpecified
	const SecAsn1Oid CSSMOID_ecPublicKey
	const CSSM_OID CSSMOID_EKU_IPSec
	const SecAsn1Oid CSSMOID_EmailAddress
	const CSSM_OID CSSMOID_EmailProtection
	const SecAsn1Oid CSSMOID_EnhancedSearchGuide
	const SecAsn1Oid CSSMOID_ETSI_QCS_QC_COMPLIANCE
	const SecAsn1Oid CSSMOID_ETSI_QCS_QC_LIMIT_VALUE
	const SecAsn1Oid CSSMOID_ETSI_QCS_QC_RETENTION
	const SecAsn1Oid CSSMOID_ETSI_QCS_QC_SSCD
	const SecAsn1Oid CSSMOID_ExtendedCertificateAttributes
	const CSSM_OID CSSMOID_ExtendedKeyUsage
	const CSSM_OID CSSMOID_ExtendedKeyUsageAny
	const CSSM_OID CSSMOID_ExtendedUseCodeSigning
	const SecAsn1Oid CSSMOID_FacsimileTelephoneNumber
	const SecAsn1Oid CSSMOID_GenerationQualifier
	const SecAsn1Oid CSSMOID_GivenName
	const CSSM_OID CSSMOID_HoldInstructionCode
	const SecAsn1Oid CSSMOID_HouseIdentifier
	const CSSM_OID CSSMOID_InhibitAnyPolicy
	const SecAsn1Oid CSSMOID_Initials
	const SecAsn1Oid CSSMOID_InternationalISDNNumber
	const CSSM_OID CSSMOID_InvalidityDate
	const CSSM_OID CSSMOID_IssuerAltName
	const CSSM_OID CSSMOID_IssuingDistributionPoint
	const CSSM_OID CSSMOID_IssuingDistributionPoints
	const SecAsn1Oid CSSMOID_KERBv5_PKINIT_AUTH_DATA
	const SecAsn1Oid CSSMOID_KERBv5_PKINIT_DH_KEY_DATA
	const CSSM_OID CSSMOID_KERBv5_PKINIT_KP_CLIENT_AUTH
	const CSSM_OID CSSMOID_KERBv5_PKINIT_KP_KDC
	const SecAsn1Oid CSSMOID_KERBv5_PKINIT_RKEY_DATA
	const CSSM_OID CSSMOID_KeyUsage
	const SecAsn1Oid CSSMOID_KnowledgeInformation
	const SecAsn1Oid CSSMOID_LocalityName
	const CSSM_OID CSSMOID_MACAPPSTORE_CERT_POLICY
	const CSSM_OID CSSMOID_MACAPPSTORE_RECEIPT_CERT_POLICY
	const SecAsn1Oid CSSMOID_MD2
	const SecAsn1Oid CSSMOID_MD2WithRSA
	const SecAsn1Oid CSSMOID_MD4
	const SecAsn1Oid CSSMOID_MD4WithRSA
	const SecAsn1Oid CSSMOID_MD5
	const SecAsn1Oid CSSMOID_MD5WithRSA
	const SecAsn1Oid CSSMOID_Member
	const SecAsn1Oid CSSMOID_MessageDigest
	const CSSM_OID CSSMOID_MicrosoftSGC
	const SecAsn1Oid CSSMOID_Name
	const CSSM_OID CSSMOID_NameConstraints
	const CSSM_OID CSSMOID_NetscapeCertSequence
	const CSSM_OID CSSMOID_NetscapeCertType
	const CSSM_OID CSSMOID_NetscapeSGC
	const SecAsn1Oid CSSMOID_OAEP_ID_PSPECIFIED
	const SecAsn1Oid CSSMOID_OAEP_MGF1
	const SecAsn1Oid CSSMOID_ObjectClass
	const CSSM_OID CSSMOID_OCSPSigning
	const SecAsn1Oid CSSMOID_OID_QCS_SYNTAX_V1
	const SecAsn1Oid CSSMOID_OID_QCS_SYNTAX_V2
	const SecAsn1Oid CSSMOID_OrganizationalUnitName
	const SecAsn1Oid CSSMOID_OrganizationName
	const SecAsn1Oid CSSMOID_Owner
	const SecAsn1Oid CSSMOID_PDA_COUNTRY_CITIZEN
	const SecAsn1Oid CSSMOID_PDA_COUNTRY_RESIDENCE
	const SecAsn1Oid CSSMOID_PDA_DATE_OF_BIRTH
	const SecAsn1Oid CSSMOID_PDA_GENDER
	const SecAsn1Oid CSSMOID_PDA_PLACE_OF_BIRTH
	const SecAsn1Oid CSSMOID_PhysicalDeliveryOfficeName
	const SecAsn1Oid CSSMOID_PKCS12_certBag
	const SecAsn1Oid CSSMOID_PKCS12_crlBag
	const SecAsn1Oid CSSMOID_PKCS12_keyBag
	const SecAsn1Oid CSSMOID_PKCS12_pbeWithSHAAnd128BitRC2CBC
	const SecAsn1Oid CSSMOID_PKCS12_pbeWithSHAAnd128BitRC4
	const SecAsn1Oid CSSMOID_PKCS12_pbeWithSHAAnd2Key3DESCBC
	const SecAsn1Oid CSSMOID_PKCS12_pbeWithSHAAnd3Key3DESCBC
	const SecAsn1Oid CSSMOID_PKCS12_pbewithSHAAnd40BitRC2CBC
	const SecAsn1Oid CSSMOID_PKCS12_pbeWithSHAAnd40BitRC4
	const SecAsn1Oid CSSMOID_PKCS12_safeContentsBag
	const SecAsn1Oid CSSMOID_PKCS12_secretBag
	const SecAsn1Oid CSSMOID_PKCS12_shroudedKeyBag
	const SecAsn1Oid CSSMOID_PKCS3
	const SecAsn1Oid CSSMOID_PKCS5_DES_EDE3_CBC
	const SecAsn1Oid CSSMOID_PKCS5_DIGEST_ALG
	const SecAsn1Oid CSSMOID_PKCS5_ENCRYPT_ALG
	const SecAsn1Oid CSSMOID_PKCS5_HMAC_SHA1
	const SecAsn1Oid CSSMOID_PKCS5_PBES2
	const SecAsn1Oid CSSMOID_PKCS5_pbeWithMD2AndDES
	const SecAsn1Oid CSSMOID_PKCS5_pbeWithMD2AndRC2
	const SecAsn1Oid CSSMOID_PKCS5_pbeWithMD5AndDES
	const SecAsn1Oid CSSMOID_PKCS5_pbeWithMD5AndRC2
	const SecAsn1Oid CSSMOID_PKCS5_pbeWithSHA1AndDES
	const SecAsn1Oid CSSMOID_PKCS5_pbeWithSHA1AndRC2
	const SecAsn1Oid CSSMOID_PKCS5_PBKDF2
	const SecAsn1Oid CSSMOID_PKCS5_PBMAC1
	const SecAsn1Oid CSSMOID_PKCS5_RC2_CBC
	const SecAsn1Oid CSSMOID_PKCS5_RC5_CBC
	const SecAsn1Oid CSSMOID_PKCS7_Data
	const SecAsn1Oid CSSMOID_PKCS7_DataWithAttributes
	const SecAsn1Oid CSSMOID_PKCS7_DigestedData
	const SecAsn1Oid CSSMOID_PKCS7_EncryptedData
	const SecAsn1Oid CSSMOID_PKCS7_EncryptedPrivateKeyInfo
	const SecAsn1Oid CSSMOID_PKCS7_EnvelopedData
	const SecAsn1Oid CSSMOID_PKCS7_SignedAndEnvelopedData
	const SecAsn1Oid CSSMOID_PKCS7_SignedData
	const SecAsn1Oid CSSMOID_PKCS9_CertTypes
	const SecAsn1Oid CSSMOID_PKCS9_CrlTypes
	const SecAsn1Oid CSSMOID_PKCS9_FriendlyName
	const SecAsn1Oid CSSMOID_PKCS9_Id_Ct_TSTInfo
	const SecAsn1Oid CSSMOID_PKCS9_LocalKeyId
	const SecAsn1Oid CSSMOID_PKCS9_SdsiCertificate
	const SecAsn1Oid CSSMOID_PKCS9_TimeStampToken
	const SecAsn1Oid CSSMOID_PKCS9_X509Certificate
	const SecAsn1Oid CSSMOID_PKCS9_X509Crl
	const CSSM_OID CSSMOID_PKIX_OCSP
	const CSSM_OID CSSMOID_PKIX_OCSP_ARCHIVE_CUTOFF
	const CSSM_OID CSSMOID_PKIX_OCSP_BASIC
	const CSSM_OID CSSMOID_PKIX_OCSP_CRL
	const CSSM_OID CSSMOID_PKIX_OCSP_NOCHECK
	const CSSM_OID CSSMOID_PKIX_OCSP_NONCE
	const CSSM_OID CSSMOID_PKIX_OCSP_RESPONSE
	const CSSM_OID CSSMOID_PKIX_OCSP_SERVICE_LOCATOR
	const CSSM_OID CSSMOID_PolicyConstraints
	const CSSM_OID CSSMOID_PolicyMappings
	const SecAsn1Oid CSSMOID_PostalAddress
	const SecAsn1Oid CSSMOID_PostalCode
	const SecAsn1Oid CSSMOID_PostOfficeBox
	const SecAsn1Oid CSSMOID_PreferredDeliveryMethod
	const SecAsn1Oid CSSMOID_PresentationAddress
	const CSSM_OID CSSMOID_PrivateKeyUsagePeriod
	const SecAsn1Oid CSSMOID_ProtocolInformation
	const CSSM_OID CSSMOID_QC_Statements
	const SecAsn1Oid CSSMOID_QT_CPS
	const SecAsn1Oid CSSMOID_QT_UNOTICE
	const SecAsn1Oid CSSMOID_RegisteredAddress
	const SecAsn1Oid CSSMOID_RoleOccupant
	const SecAsn1Oid CSSMOID_RSA
	const SecAsn1Oid CSSMOID_RSAWithOAEP
	const SecAsn1Oid CSSMOID_SearchGuide
	const SecAsn1Oid CSSMOID_secp112r1
	const SecAsn1Oid CSSMOID_secp112r2
	const SecAsn1Oid CSSMOID_secp128r1
	const SecAsn1Oid CSSMOID_secp128r2
	const SecAsn1Oid CSSMOID_secp160k1
	const SecAsn1Oid CSSMOID_secp160r1
	const SecAsn1Oid CSSMOID_secp160r2
	const SecAsn1Oid CSSMOID_secp192k1
	const SecAsn1Oid CSSMOID_secp192r1
	const SecAsn1Oid CSSMOID_secp224k1
	const SecAsn1Oid CSSMOID_secp224r1
	const SecAsn1Oid CSSMOID_secp256k1
	const SecAsn1Oid CSSMOID_secp256r1
	const SecAsn1Oid CSSMOID_secp384r1
	const SecAsn1Oid CSSMOID_secp521r1
	const SecAsn1Oid CSSMOID_sect113r1
	const SecAsn1Oid CSSMOID_sect113r2
	const SecAsn1Oid CSSMOID_sect131r1
	const SecAsn1Oid CSSMOID_sect131r2
	const SecAsn1Oid CSSMOID_sect163k1
	const SecAsn1Oid CSSMOID_sect163r1
	const SecAsn1Oid CSSMOID_sect163r2
	const SecAsn1Oid CSSMOID_sect193r1
	const SecAsn1Oid CSSMOID_sect193r2
	const SecAsn1Oid CSSMOID_sect233k1
	const SecAsn1Oid CSSMOID_sect233r1
	const SecAsn1Oid CSSMOID_sect239k1
	const SecAsn1Oid CSSMOID_sect283k1
	const SecAsn1Oid CSSMOID_sect283r1
	const SecAsn1Oid CSSMOID_sect409k1
	const SecAsn1Oid CSSMOID_sect409r1
	const SecAsn1Oid CSSMOID_sect571k1
	const SecAsn1Oid CSSMOID_sect571r1
	const SecAsn1Oid CSSMOID_SeeAlso
	const SecAsn1Oid CSSMOID_SerialNumber
	const CSSM_OID CSSMOID_ServerAuth
	const SecAsn1Oid CSSMOID_SHA1
	const SecAsn1Oid CSSMOID_SHA1WithDSA
	const SecAsn1Oid CSSMOID_SHA1WithDSA_CMS
	const SecAsn1Oid CSSMOID_SHA1WithDSA_JDK
	const SecAsn1Oid CSSMOID_SHA1WithRSA
	const SecAsn1Oid CSSMOID_SHA1WithRSA_OIW
	const SecAsn1Oid CSSMOID_SHA224
	const SecAsn1Oid CSSMOID_SHA224WithRSA
	const SecAsn1Oid CSSMOID_SHA256
	const SecAsn1Oid CSSMOID_SHA256WithRSA
	const SecAsn1Oid CSSMOID_SHA384
	const SecAsn1Oid CSSMOID_SHA384WithRSA
	const SecAsn1Oid CSSMOID_SHA512
	const SecAsn1Oid CSSMOID_SHA512WithRSA
	const SecAsn1Oid CSSMOID_SigningTime
	const SecAsn1Oid CSSMOID_StateProvinceName
	const SecAsn1Oid CSSMOID_StreetAddress
	const CSSM_OID CSSMOID_SubjectAltName
	const CSSM_OID CSSMOID_SubjectDirectoryAttributes
	const CSSM_OID CSSMOID_SubjectEmailAddress
	const CSSM_OID CSSMOID_SubjectInfoAccess
	const CSSM_OID CSSMOID_SubjectKeyIdentifier
	const CSSM_OID CSSMOID_SubjectPicture
	const CSSM_OID CSSMOID_SubjectSignatureBitmap
	const SecAsn1Oid CSSMOID_SupportedApplicationContext
	const SecAsn1Oid CSSMOID_Surname
	const SecAsn1Oid CSSMOID_TelephoneNumber
	const SecAsn1Oid CSSMOID_TelexNumber
	const SecAsn1Oid CSSMOID_TelexTerminalIdentifier
	const CSSM_OID CSSMOID_TimeStamping
	const SecAsn1Oid CSSMOID_Title
	const SecAsn1Oid CSSMOID_UniqueIdentifier
	const SecAsn1Oid CSSMOID_UniqueMember
	const SecAsn1Oid CSSMOID_UnstructuredAddress
	const SecAsn1Oid CSSMOID_UnstructuredName
	const CSSM_OID CSSMOID_UseExemptions
	const SecAsn1Oid CSSMOID_UserCertificate
	const SecAsn1Oid CSSMOID_UserID
	const SecAsn1Oid CSSMOID_UserPassword
	const CSSM_OID CSSMOID_X509V1CertificateIssuerUniqueId
	const CSSM_OID CSSMOID_X509V1CertificateSubjectUniqueId
	const CSSM_OID CSSMOID_X509V1CRLIssuerNameCStruct
	const CSSM_OID CSSMOID_X509V1CRLIssuerNameLDAP
	const CSSM_OID CSSMOID_X509V1CRLIssuerStruct
	const CSSM_OID CSSMOID_X509V1CRLNextUpdate
	const CSSM_OID CSSMOID_X509V1CRLNumberOfRevokedCertEntries
	const CSSM_OID CSSMOID_X509V1CRLRevokedCertificatesCStruct
	const CSSM_OID CSSMOID_X509V1CRLRevokedCertificatesStruct
	const CSSM_OID CSSMOID_X509V1CRLRevokedEntryCStruct
	const CSSM_OID CSSMOID_X509V1CRLRevokedEntryRevocationDate
	const CSSM_OID CSSMOID_X509V1CRLRevokedEntrySerialNumber
	const CSSM_OID CSSMOID_X509V1CRLRevokedEntryStruct
	const CSSM_OID CSSMOID_X509V1CRLThisUpdate
	const CSSM_OID CSSMOID_X509V1IssuerName
	const CSSM_OID CSSMOID_X509V1IssuerNameCStruct
	const CSSM_OID CSSMOID_X509V1IssuerNameLDAP
	const CSSM_OID CSSMOID_X509V1IssuerNameStd
	const CSSM_OID CSSMOID_X509V1SerialNumber
	const CSSM_OID CSSMOID_X509V1Signature
	const CSSM_OID CSSMOID_X509V1SignatureAlgorithm
	const CSSM_OID CSSMOID_X509V1SignatureAlgorithmParameters
	const CSSM_OID CSSMOID_X509V1SignatureAlgorithmTBS
	const CSSM_OID CSSMOID_X509V1SignatureCStruct
	const CSSM_OID CSSMOID_X509V1SignatureStruct
	const CSSM_OID CSSMOID_X509V1SubjectName
	const CSSM_OID CSSMOID_X509V1SubjectNameCStruct
	const CSSM_OID CSSMOID_X509V1SubjectNameLDAP
	const CSSM_OID CSSMOID_X509V1SubjectNameStd
	const CSSM_OID CSSMOID_X509V1SubjectPublicKey
	const CSSM_OID CSSMOID_X509V1SubjectPublicKeyAlgorithm
	const CSSM_OID CSSMOID_X509V1SubjectPublicKeyAlgorithmParameters
	const CSSM_OID CSSMOID_X509V1SubjectPublicKeyCStruct
	const CSSM_OID CSSMOID_X509V1ValidityNotAfter
	const CSSM_OID CSSMOID_X509V1ValidityNotBefore
	const CSSM_OID CSSMOID_X509V1Version
	const CSSM_OID CSSMOID_X509V2CRLAllExtensionsCStruct
	const CSSM_OID CSSMOID_X509V2CRLAllExtensionsStruct
	const CSSM_OID CSSMOID_X509V2CRLExtensionCritical
	const CSSM_OID CSSMOID_X509V2CRLExtensionId
	const CSSM_OID CSSMOID_X509V2CRLExtensionType
	const CSSM_OID CSSMOID_X509V2CRLNumberOfExtensions
	const CSSM_OID CSSMOID_X509V2CRLRevokedEntryAllExtensionsCStruct
	const CSSM_OID CSSMOID_X509V2CRLRevokedEntryAllExtensionsStruct
	const CSSM_OID CSSMOID_X509V2CRLRevokedEntryExtensionCritical
	const CSSM_OID CSSMOID_X509V2CRLRevokedEntryExtensionId
	const CSSM_OID CSSMOID_X509V2CRLRevokedEntryExtensionType
	const CSSM_OID CSSMOID_X509V2CRLRevokedEntryExtensionValue
	const CSSM_OID CSSMOID_X509V2CRLRevokedEntryNumberOfExtensions
	const CSSM_OID CSSMOID_X509V2CRLRevokedEntrySingleExtensionCStruct
	const CSSM_OID CSSMOID_X509V2CRLRevokedEntrySingleExtensionStruct
	const CSSM_OID CSSMOID_X509V2CRLSignedCrlCStruct
	const CSSM_OID CSSMOID_X509V2CRLSignedCrlStruct
	const CSSM_OID CSSMOID_X509V2CRLSingleExtensionCStruct
	const CSSM_OID CSSMOID_X509V2CRLSingleExtensionStruct
	const CSSM_OID CSSMOID_X509V2CRLTbsCertListCStruct
	const CSSM_OID CSSMOID_X509V2CRLTbsCertListStruct
	const CSSM_OID CSSMOID_X509V2CRLVersion
	const CSSM_OID CSSMOID_X509V3Certificate
	const CSSM_OID CSSMOID_X509V3CertificateCStruct
	const CSSM_OID CSSMOID_X509V3CertificateExtensionCritical
	const CSSM_OID CSSMOID_X509V3CertificateExtensionCStruct
	const CSSM_OID CSSMOID_X509V3CertificateExtensionId
	const CSSM_OID CSSMOID_X509V3CertificateExtensionsCStruct
	const CSSM_OID CSSMOID_X509V3CertificateExtensionsStruct
	const CSSM_OID CSSMOID_X509V3CertificateExtensionStruct
	const CSSM_OID CSSMOID_X509V3CertificateExtensionType
	const CSSM_OID CSSMOID_X509V3CertificateExtensionValue
	const CSSM_OID CSSMOID_X509V3CertificateNumberOfExtensions
	const CSSM_OID CSSMOID_X509V3SignedCertificate
	const CSSM_OID CSSMOID_X509V3SignedCertificateCStruct
	const SecAsn1Oid CSSMOID_X9_62
	const SecAsn1Oid CSSMOID_X9_62_C_TwoCurve
	const SecAsn1Oid CSSMOID_X9_62_EllCurve
	const SecAsn1Oid CSSMOID_X9_62_FieldType
	const SecAsn1Oid CSSMOID_X9_62_PrimeCurve
	const SecAsn1Oid CSSMOID_X9_62_PubKeyType
	const SecAsn1Oid CSSMOID_X9_62_SigType
	const SecAsn1Oid CSSMOID_X_121Address
	enum <anonymous> cTable
	enum <anonymous> cTempMemErr
	enum <anonymous> cText
	enum <anonymous> cTextFlow
	enum <anonymous> cTextStyles
	enum <anonymous> cTokenRingAddress
	enum <anonymous> cType
	enum <anonymous> cURL
	enum <anonymous> curNumberPartsVersion
	enum <anonymous> currentCurLang
	enum <anonymous> currentDefLang
	enum <anonymous> currLeadingZ
	enum <anonymous> currNegSym
	enum <anonymous> currSymLead
	enum <anonymous> currTrailingZ
	enum <anonymous> cursorDev
	enum <anonymous> cUSBAddress
	enum <anonymous> cutDev
	enum <anonymous> cVersion
	enum <anonymous> cWindow
	enum <anonymous> cWord
	enum <anonymous> dataAlreadyClosed
	enum <anonymous> dataAlreadyOpenForWrite
	enum <anonymous> dataNoDataRef
	enum <anonymous> dataNotOpenForRead
	enum <anonymous> dataNotOpenForWrite
	enum <anonymous> dataVerErr
	enum <anonymous> dateStdMask
	enum <anonymous> dateTimeInvalid
	enum <anonymous> dateTimeNotFound
	enum <anonymous> dayField
	enum <anonymous> dayLdingZ
	int daylight
	enum <anonymous> dayMask
	enum <anonymous> dayOfWeekField
	enum <anonymous> dayOfWeekMask
	enum <anonymous> dayOfYearField
	enum <anonymous> dayOfYearMask
	enum <anonymous> dblDagger
	enum <anonymous> dceExtErr
	enum <anonymous> dcmBadDataSizeErr
	enum <anonymous> dcmBadDictionaryErr
	enum <anonymous> dcmBadFeatureErr
	enum <anonymous> dcmBadFieldInfoErr
	enum <anonymous> dcmBadFieldTypeErr
	enum <anonymous> dcmBadFindMethodErr
	enum <anonymous> dcmBadKeyErr
	enum <anonymous> dcmBadPropertyErr
	enum <anonymous> dcmBlockFullErr
	enum <anonymous> dcmBufferOverflowErr
	enum <anonymous> dcmDictionaryBusyErr
	enum <anonymous> dcmDictionaryNotOpenErr
	enum <anonymous> dcmDupRecordErr
	enum <anonymous> dcmIterationCompleteErr
	enum <anonymous> dcmNecessaryFieldErr
	enum <anonymous> dcmNoAccessMethodErr
	enum <anonymous> dcmNoFieldErr
	enum <anonymous> dcmNoRecordErr
	enum <anonymous> dcmNotDictionaryErr
	enum <anonymous> dcmParamErr
	enum <anonymous> dcmPermissionErr
	enum <anonymous> dcmProtectedErr
	enum <anonymous> dcmTooManyKeyErr
	enum <anonymous> ddpLenErr
	enum <anonymous> ddpSktErr
	enum <anonymous> deactivDev
	enum <anonymous> debuggingDuplicateOptionErr
	enum <anonymous> debuggingDuplicateSignatureErr
	enum <anonymous> debuggingExecutionContextErr
	enum <anonymous> debuggingInvalidNameErr
	enum <anonymous> debuggingInvalidOptionErr
	enum <anonymous> debuggingInvalidSignatureErr
	enum <anonymous> debuggingNoCallbackErr
	enum <anonymous> debuggingNoMatchErr
	enum <anonymous> defaultComponentAnyFlags
	enum <anonymous> defaultComponentAnyFlagsAnyManufacturer
	enum <anonymous> defaultComponentAnyFlagsAnyManufacturerAnySubType
	enum <anonymous> defaultComponentAnyManufacturer
	enum <anonymous> defaultComponentAnySubType
	enum <anonymous> defaultComponentIdentical
	enum <anonymous> defaultPhysicalEntryCount
	enum <anonymous> delimPad
	enum <anonymous> descriptorFontTableTag
	enum <anonymous> desktopDamagedErr
	enum <anonymous> desktopIconResource
	enum <anonymous> destPortErr
	enum <anonymous> developStage
	enum <anonymous> deviceCantMeetRequest
	enum <anonymous> diaeresisUprE
	enum <anonymous> diaeresisUprI
	enum <anonymous> diaeresisUprY
	enum <anonymous> dialogNoTimeoutErr
	enum <anonymous> diffVolErr
	enum <anonymous> digiUnimpErr
	enum <anonymous> dInstErr
	enum <anonymous> directXObjectAlreadyExists
	enum <anonymous> dirFulErr
	enum <anonymous> dirNFErr
	enum <anonymous> dmy
	enum <anonymous> dotlessLwrI
	enum <anonymous> doubleAcute
	enum <anonymous> dragNotAcceptedErr
	enum <anonymous> dRemovErr
	enum <anonymous> driverHardwareGoneErr
	enum <anonymous> dropFolderIconResource
	enum <anonymous> drvQType
	enum <anonymous> ds32BitMode
	enum <anonymous> dsAddressErr
	enum <anonymous> dsBadLaunch
	enum <anonymous> dsBadLibrary
	enum <anonymous> dsBadPatch
	enum <anonymous> dsBadPatchHeader
	enum <anonymous> dsBadSANEOpcode
	enum <anonymous> dsBadSlotInt
	enum <anonymous> dsBadStartupDisk
	enum <anonymous> dsBufPtrTooLow
	enum <anonymous> dsBusError
	enum <anonymous> dsCantHoldSystemHeap
	enum <anonymous> dsCDEFNotFound
	enum <anonymous> dsChkErr
	enum <anonymous> dsCoreErr
	enum <anonymous> dsDirtyDisk
	enum <anonymous> dsDisassemblerInstalled
	enum <anonymous> dsExtensionsDisabled
	enum <anonymous> dsFinderErr
	enum <anonymous> dsForcedQuit
	enum <anonymous> dsFPErr
	enum <anonymous> dsFSErr
	enum <anonymous> dsGibblyMovedToDisabledFolder
	enum <anonymous> dsGreeting
	enum <anonymous> dsHD20Installed
	enum <anonymous> dsHMenuFindErr
	enum <anonymous> dsIllInstErr
	enum <anonymous> dsIOCoreErr
	enum <anonymous> dsIrqErr
	enum <anonymous> dskFulErr
	enum <anonymous> dsLineAErr
	enum <anonymous> dsLineFErr
	enum <anonymous> dsLoadErr
	enum <anonymous> dsLostConnectionToNetworkDisk
	enum <anonymous> dsMacOSROMVersionTooOld
	enum <anonymous> dsMacsBugInstalled
	enum <anonymous> dsMBarNFnd
	enum <anonymous> dsMBATAPISysError
	enum <anonymous> dsMBATASysError
	enum <anonymous> dsMBExternFlpySysError
	enum <anonymous> dsMBFlpySysError
	enum <anonymous> dsMBSysError
	enum <anonymous> dsMDEFNotFound
	enum <anonymous> dsMemFullErr
	enum <anonymous> dsMiscErr
	enum <anonymous> dsMixedModeFailure
	enum <anonymous> dsMustUseFCBAccessors
	enum <anonymous> dsNeedToWriteBootBlocks
	enum <anonymous> dsNoExtsDisassembler
	enum <anonymous> dsNoExtsMacsBug
	enum <anonymous> dsNoFPU
	enum <anonymous> dsNoPackErr
	enum <anonymous> dsNoPatch
	enum <anonymous> dsNoPk1
	enum <anonymous> dsNoPk2
	enum <anonymous> dsNoPk3
	enum <anonymous> dsNoPk4
	enum <anonymous> dsNoPk5
	enum <anonymous> dsNoPk6
	enum <anonymous> dsNoPk7
	enum <anonymous> dsNotEnoughRAMToBoot
	enum <anonymous> dsNotThe1
	enum <anonymous> dsOldSystem
	enum <anonymous> dsOvflowErr
	enum <anonymous> dsParityErr
	enum <anonymous> dsPCCardATASysError
	enum <anonymous> dsPrivErr
	enum <anonymous> dsRAMDiskTooBig
	enum <anonymous> dsReinsert
	enum <anonymous> dsRemoveDisk
	enum <anonymous> dsSCSIWarn
	enum <anonymous> dsShutDownOrRestart
	enum <anonymous> dsShutDownOrResume
	enum <anonymous> dsStknHeap
	enum <anonymous> dsSwitchOffOrRestart
	enum <anonymous> dsSysErr
	enum <anonymous> dsSystemFileErr
	enum <anonymous> dsSystemRequiresPowerPC
	enum <anonymous> dsTraceErr
	enum <anonymous> dsUnBootableSystem
	enum <anonymous> dsVMBadBackingStore
	enum <anonymous> dsVMDeferredFuncTableFull
	enum <anonymous> dsWDEFNotFound
	enum <anonymous> dsWriteToSupervisorStackGuardPage
	enum <anonymous> dsZeroDivErr
	__CE_DataType DT_AuthorityInfoAccess
	__CE_DataType DT_AuthorityKeyID
	__CE_DataType DT_BasicConstraints
	__CE_DataType DT_CertPolicies
	__CE_DataType DT_CrlDistributionPoints
	__CE_DataType DT_CrlNumber
	__CE_DataType DT_CrlReason
	__CE_DataType DT_DeltaCrl
	__CE_DataType DT_ExtendedKeyUsage
	__CE_DataType DT_InhibitAnyPolicy
	__CE_DataType DT_IssuerAltName
	__CE_DataType DT_IssuingDistributionPoint
	__CE_DataType DT_KeyUsage
	__CE_DataType DT_NameConstraints
	__CE_DataType DT_NetscapeCertType
	__CE_DataType DT_Other
	__CE_DataType DT_PolicyConstraints
	__CE_DataType DT_PolicyMappings
	__CE_DataType DT_QC_Statements
	__CE_DataType DT_SubjectAltName
	__CE_DataType DT_SubjectKeyID
	enum <anonymous> dtQType
	enum <anonymous> dummyType
	enum <anonymous> dupFNErr
	enum <anonymous> duplicateAtomTypeAndIDErr
	enum <anonymous> duplicateFlavorErr
	enum <anonymous> duplicateFolderDescErr
	enum <anonymous> duplicateHandlerErr
	enum <anonymous> duplicatePasteboardFlavorErr
	enum <anonymous> duplicateRoutingErr
	enum <anonymous> duplicateScrapFlavorErr
	enum <anonymous> durationDay
	enum <anonymous> durationForever
	enum <anonymous> durationHour
	enum <anonymous> durationMicrosecond
	enum <anonymous> durationMillisecond
	enum <anonymous> durationMinute
	enum <anonymous> durationNoWait
	enum <anonymous> durationSecond
	enum <anonymous> dym
	enum <anonymous> eADB
	enum <anonymous> eAddressSpec
	enum <anonymous> eAnalogAudio
	enum <anonymous> eAppleTalk
	enum <anonymous> eAudioLineIn
	enum <anonymous> eAudioLineOut
	enum <anonymous> eAudioOut
	enum <anonymous> eBus
	enum <anonymous> eCapsLockDown
	enum <anonymous> eCDROM
	enum <anonymous> eClearKey
	enum <anonymous> eCommandDown
	enum <anonymous> eCommSlot
	enum <anonymous> eConduit
	enum <anonymous> eControlDown
	enum <anonymous> eDeleteKey
	enum <anonymous> eDeviceType
	enum <anonymous> eDigitalAudio
	enum <anonymous> eDisplay
	enum <anonymous> editingNotAllowed
	enum <anonymous> editionMgrInitErr
	enum <anonymous> eDownArrowKey
	enum <anonymous> eDVD
	enum <anonymous> eEndKey
	enum <anonymous> eEnterKey
	enum <anonymous> eEscapeKey
	enum <anonymous> eEthernet
	enum <anonymous> eF10Key
	enum <anonymous> eF11Key
	enum <anonymous> eF12Key
	enum <anonymous> eF13Key
	enum <anonymous> eF14Key
	enum <anonymous> eF15Key
	enum <anonymous> eF1Key
	enum <anonymous> eF2Key
	enum <anonymous> eF3Key
	enum <anonymous> eF4Key
	enum <anonymous> eF5Key
	enum <anonymous> eF6Key
	enum <anonymous> eF7Key
	enum <anonymous> eF8Key
	enum <anonymous> eF9Key
	enum <anonymous> eFireWire
	enum <anonymous> eFloppy
	enum <anonymous> eForwardDelKey
	enum <anonymous> eHD
	enum <anonymous> eHelpKey
	enum <anonymous> eHomeKey
	enum <anonymous> eInfrared
	enum <anonymous> eIP
	enum <anonymous> eIrDA
	enum <anonymous> eIRTalk
	enum <anonymous> eKeyboard
	enum <anonymous> eKeyKind
	enum <anonymous> eLCD
	enum <anonymous> eLeftArrowKey
	enum <anonymous> eLenErr
	enum <anonymous> eLocalTalk
	enum <anonymous> eMacIP
	enum <anonymous> eMacVideo
	enum <anonymous> eMicrophone
	enum <anonymous> eModem
	enum <anonymous> eModemPort
	enum <anonymous> eModemPrinterPort
	enum <anonymous> eModifiers
	enum <anonymous> eMonitorOut
	enum <anonymous> eMouse
	enum <anonymous> emptyPathErr
	enum <anonymous> eMultiErr
	enum <anonymous> endOfDataReached
	enum <anonymous> eNuBus
	enum <anonymous> eNuBusCard
	enum <anonymous> enumArrows
	enum <anonymous> enumJustification
	enum <anonymous> enumKeyForm
	enum <anonymous> enumPosition
	enum <anonymous> enumProtection
	enum <anonymous> enumQuality
	enum <anonymous> enumSaveOptions
	enum <anonymous> enumStyle
	enum <anonymous> enumTransferMode
	enum <anonymous> envBadVers
	enum <anonymous> envNotPresent
	enum <anonymous> envVersTooBig
	enum <anonymous> eofErr
	enum <anonymous> eOptionDown
	enum <anonymous> ePageDownKey
	enum <anonymous> ePageUpKey
	enum <anonymous> ePCcard
	enum <anonymous> ePCIbus
	enum <anonymous> ePCIcard
	enum <anonymous> ePDScard
	enum <anonymous> ePDSslot
	enum <anonymous> ePointingDevice
	enum <anonymous> ePostScript
	enum <anonymous> ePPP
	enum <anonymous> ePrinter
	enum <anonymous> ePrinterPort
	enum <anonymous> eProtocol
	enum <anonymous> EQUALTO
	enum <anonymous> eraField
	enum <anonymous> eraMask
	enum <anonymous> eReturnKey
	enum <anonymous> eRightArrowKey
	enum <anonymous> errAborted
	enum <anonymous> errAEAccessorNotFound
	enum <anonymous> errAEBadKeyForm
	enum <anonymous> errAEBadListItem
	enum <anonymous> errAEBadTestKey
	enum <anonymous> errAEBufferTooSmall
	enum <anonymous> errAEBuildSyntaxError
	enum <anonymous> errAECantHandleClass
	enum <anonymous> errAECantPutThatThere
	enum <anonymous> errAECantSupplyType
	enum <anonymous> errAECantUndo
	enum <anonymous> errAECoercionFail
	enum <anonymous> errAECorruptData
	enum <anonymous> errAEDescIsNull
	enum <anonymous> errAEDescNotFound
	enum <anonymous> errAEDuplicateHandler
	enum <anonymous> errAEEmptyListContainer
	enum <anonymous> errAEEventFailed
	enum <anonymous> errAEEventFiltered
	enum <anonymous> errAEEventNotHandled
	enum <anonymous> errAEEventNotPermitted
	enum <anonymous> errAEHandlerNotFound
	enum <anonymous> errAEIllegalIndex
	enum <anonymous> errAEImpossibleRange
	enum <anonymous> errAEIndexTooLarge
	enum <anonymous> errAEInTransaction
	enum <anonymous> errAELocalOnly
	enum <anonymous> errAENegativeCount
	enum <anonymous> errAENewerVersion
	enum <anonymous> errAENoSuchLogical
	enum <anonymous> errAENoSuchObject
	enum <anonymous> errAENoSuchTransaction
	enum <anonymous> errAENotAEDesc
	enum <anonymous> errAENotAnElement
	enum <anonymous> errAENotAnEnumMember
	enum <anonymous> errAENotAnObjSpec
	enum <anonymous> errAENotAppleEvent
	enum <anonymous> errAENotASingleObject
	enum <anonymous> errAENotASpecialFunction
	enum <anonymous> errAENotModifiable
	enum <anonymous> errAENoUserInteraction
	enum <anonymous> errAENoUserSelection
	enum <anonymous> errAEParamMissed
	enum <anonymous> errAEPrivilegeError
	enum <anonymous> errAEPropertiesClash
	enum <anonymous> errAEReadDenied
	enum <anonymous> errAEReceiveEscapeCurrent
	enum <anonymous> errAEReceiveTerminate
	enum <anonymous> errAERecordingIsAlreadyOn
	enum <anonymous> errAEReplyNotArrived
	enum <anonymous> errAEReplyNotValid
	enum <anonymous> errAEStreamAlreadyConverted
	enum <anonymous> errAEStreamBadNesting
	enum <anonymous> errAETargetAddressNotPermitted
	enum <anonymous> errAETimeout
	enum <anonymous> errAETypeError
	enum <anonymous> errAEUnknownAddressType
	enum <anonymous> errAEUnknownObjectType
	enum <anonymous> errAEUnknownSendMode
	enum <anonymous> errAEWaitCanceled
	enum <anonymous> errAEWriteDenied
	enum <anonymous> errAEWrongDataType
	enum <anonymous> errAEWrongNumberArgs
	enum <anonymous> errAlreadyInImagingMode
	enum <anonymous> errASCantCompareMoreThan32k
	enum <anonymous> errASCantConsiderAndIgnore
	enum <anonymous> errASIllegalFormalParameter
	enum <anonymous> errASInconsistentNames
	enum <anonymous> errASNoResultReturned
	enum <anonymous> errASParameterNotForEvent
	enum <anonymous> errASTerminologyNestingTooDeep
	enum <anonymous> errAttention
	enum <anonymous> errAuthorizationBadAddress
	enum <anonymous> errAuthorizationCanceled
	enum <anonymous> errAuthorizationDenied
	enum <anonymous> errAuthorizationExternalizeNotAllowed
	enum <anonymous> errAuthorizationInteractionNotAllowed
	enum <anonymous> errAuthorizationInternal
	enum <anonymous> errAuthorizationInternalizeNotAllowed
	enum <anonymous> errAuthorizationInvalidFlags
	enum <anonymous> errAuthorizationInvalidPointer
	enum <anonymous> errAuthorizationInvalidRef
	enum <anonymous> errAuthorizationInvalidSet
	enum <anonymous> errAuthorizationInvalidTag
	enum <anonymous> errAuthorizationSuccess
	enum <anonymous> errAuthorizationToolEnvironmentError
	enum <anonymous> errAuthorizationToolExecuteFailure
	enum <anonymous> errCanNotInsertWhileWalkProcInProgress
	enum <anonymous> errCannotUndo
	enum <anonymous> errCantEmbedIntoSelf
	enum <anonymous> errCantEmbedRoot
	enum <anonymous> errControlDoesntSupportFocus
	enum <anonymous> errControlHiddenOrDisabled
	enum <anonymous> errControlIsNotEmbedder
	enum <anonymous> errControlsAlreadyExist
	enum <anonymous> errCoreEndianDataDoesNotMatchFormat
	enum <anonymous> errCoreEndianDataTooLongForFormat
	enum <anonymous> errCoreEndianDataTooShortForFormat
	enum <anonymous> errCorruptWindowDescription
	enum <anonymous> errCouldntSetFocus
	enum <anonymous> errCppbad_alloc
	enum <anonymous> errCppbad_cast
	enum <anonymous> errCppbad_exception
	enum <anonymous> errCppbad_typeid
	enum <anonymous> errCppdomain_error
	enum <anonymous> errCppGeneral
	enum <anonymous> errCppinvalid_argument
	enum <anonymous> errCppios_base_failure
	enum <anonymous> errCppLastSystemDefinedError
	enum <anonymous> errCppLastUserDefinedError
	enum <anonymous> errCpplength_error
	enum <anonymous> errCpplogic_error
	enum <anonymous> errCppout_of_range
	enum <anonymous> errCppoverflow_error
	enum <anonymous> errCpprange_error
	enum <anonymous> errCppruntime_error
	enum <anonymous> errCppunderflow_error
	enum <anonymous> errDataNotSupported
	enum <anonymous> errDataSizeMismatch
	enum <anonymous> errDSPQueueSize
	enum <anonymous> errEmptyScrap
	enum <anonymous> errEndOfBody
	enum <anonymous> errEndOfDocument
	enum <anonymous> errEngineNotFound
	enum <anonymous> errFloatingWindowsNotInitialized
	enum <anonymous> errFSAttributeNotFound
	enum <anonymous> errFSBadAllocFlags
	enum <anonymous> errFSBadBuffer
	enum <anonymous> errFSBadForkName
	enum <anonymous> errFSBadForkRef
	enum <anonymous> errFSBadFSRef
	enum <anonymous> errFSBadInfoBitmap
	enum <anonymous> errFSBadItemCount
	enum <anonymous> errFSBadIteratorFlags
	enum <anonymous> errFSBadPosMode
	enum <anonymous> errFSBadSearchParams
	enum <anonymous> errFSForkExists
	enum <anonymous> errFSForkNotFound
	enum <anonymous> errFSIteratorNotFound
	enum <anonymous> errFSIteratorNotSupported
	enum <anonymous> errFSMissingCatInfo
	enum <anonymous> errFSMissingName
	enum <anonymous> errFSNameTooLong
	enum <anonymous> errFSNoMoreItems
	enum <anonymous> errFSNotAFolder
	enum <anonymous> errFSNotEnoughSpaceForOperation
	enum <anonymous> errFSOperationNotSupported
	enum <anonymous> errFSPropertyNotValid
	enum <anonymous> errFSQuotaExceeded
	enum <anonymous> errFSRefsDifferent
	enum <anonymous> errFSUnknownCall
	enum <anonymous> errFwdReset
	enum <anonymous> errIAAllocationErr
	enum <anonymous> errIABufferTooSmall
	enum <anonymous> errIACanceled
	enum <anonymous> errIAEndOfTextRun
	enum <anonymous> errIAInvalidDocument
	enum <anonymous> errIANoErr
	enum <anonymous> errIANoMoreItems
	enum <anonymous> errIAParamErr
	enum <anonymous> errIATextExtractionErr
	enum <anonymous> errIAUnknownErr
	enum <anonymous> errInvalidPartCode
	enum <anonymous> errInvalidRange
	enum <anonymous> errInvalidWindowProperty
	enum <anonymous> errInvalidWindowPtr
	enum <anonymous> errInvalidWindowRef
	enum <anonymous> errItemAlreadyInTree
	enum <anonymous> errItemNotControl
	enum <anonymous> errItemNotFoundInTree
	enum <anonymous> errIteratorReachedEnd
	enum <anonymous> errKCAuthFailed
	enum <anonymous> errKCBufferTooSmall
	enum <anonymous> errKCCreateChainFailed
	enum <anonymous> errKCDataNotAvailable
	enum <anonymous> errKCDataNotModifiable
	enum <anonymous> errKCDataTooLarge
	enum <anonymous> errKCDuplicateCallback
	enum <anonymous> errKCDuplicateItem
	enum <anonymous> errKCDuplicateKeychain
	enum <anonymous> errKCInteractionNotAllowed
	enum <anonymous> errKCInteractionRequired
	enum <anonymous> errKCInvalidCallback
	enum <anonymous> errKCInvalidItemRef
	enum <anonymous> errKCInvalidKeychain
	enum <anonymous> errKCInvalidSearchRef
	enum <anonymous> errKCItemNotFound
	enum <anonymous> errKCKeySizeNotAllowed
	enum <anonymous> errKCNoCertificateModule
	enum <anonymous> errKCNoDefaultKeychain
	enum <anonymous> errKCNoPolicyModule
	enum <anonymous> errKCNoStorageModule
	enum <anonymous> errKCNoSuchAttr
	enum <anonymous> errKCNoSuchClass
	enum <anonymous> errKCNoSuchKeychain
	enum <anonymous> errKCNotAvailable
	enum <anonymous> errKCReadOnly
	enum <anonymous> errKCReadOnlyAttr
	enum <anonymous> errKCWrongKCVersion
	enum <anonymous> errMarginWilllNotFit
	enum <anonymous> errMessageNotSupported
	enum <anonymous> errNoHiliteText
	enum <anonymous> errNonContiuousAttribute
	enum <anonymous> errNoRootControl
	enum <anonymous> errNotInImagingMode
	enum <anonymous> errNotValidTree
	enum <anonymous> errOffsetInvalid
	enum <anonymous> errOffsetIsOutsideOfView
	enum <anonymous> errOffsetNotOnElementBounday
	enum <anonymous> errOpenDenied
	enum <anonymous> errOpening
	enum <anonymous> errOSAAppNotHighLevelEventAware
	enum <anonymous> errOSABadSelector
	enum <anonymous> errOSABadStorageType
	enum <anonymous> errOSACantAccess
	enum <anonymous> errOSACantAssign
	enum <anonymous> errOSACantCoerce
	enum <anonymous> errOSACantCreate
	enum <anonymous> errOSACantGetTerminology
	enum <anonymous> errOSACantLaunch
	enum <anonymous> errOSACantOpenComponent
	enum <anonymous> errOSAComponentMismatch
	enum <anonymous> errOSACorruptData
	enum <anonymous> errOSACorruptTerminology
	enum <anonymous> errOSADataBlockTooLarge
	enum <anonymous> errOSADataFormatObsolete
	enum <anonymous> errOSADataFormatTooNew
	enum <anonymous> errOSADivideByZero
	enum <anonymous> errOSAGeneralError
	enum <anonymous> errOSAInternalTableOverflow
	enum <anonymous> errOSAInvalidID
	enum <anonymous> errOSANoSuchDialect
	enum <anonymous> errOSANumericOverflow
	enum <anonymous> errOSARecordingIsAlreadyOn
	enum <anonymous> errOSAScriptError
	enum <anonymous> errOSASourceNotAvailable
	enum <anonymous> errOSAStackOverflow
	enum <anonymous> errOSASystemError
	enum <anonymous> errOSATypeError
	enum <anonymous> errReadOnlyText
	enum <anonymous> errRefNum
	enum <anonymous> errRootAlreadyExists
	enum <anonymous> errSecACLAddFailed
	enum <anonymous> errSecACLChangeFailed
	enum <anonymous> errSecACLDeleteFailed
	enum <anonymous> errSecACLNotSimple
	enum <anonymous> errSecACLReplaceFailed
	enum <anonymous> errSecAddinLoadFailed
	enum <anonymous> errSecAddinUnloadFailed
	enum <anonymous> errSecAlgorithmMismatch
	enum <anonymous> errSecAllocate
	enum <anonymous> errSecAlreadyLoggedIn
	enum <anonymous> errSecAppleAddAppACLSubject
	enum <anonymous> errSecAppleInvalidKeyEndDate
	enum <anonymous> errSecAppleInvalidKeyStartDate
	enum <anonymous> errSecApplePublicKeyIncomplete
	enum <anonymous> errSecAppleSignatureMismatch
	enum <anonymous> errSecAppleSSLv2Rollback
	enum <anonymous> errSecAttachHandleBusy
	enum <anonymous> errSecAttributeNotInContext
	enum <anonymous> errSecAuthFailed
	enum <anonymous> errSecBlockSizeMismatch
	enum <anonymous> errSecBufferTooSmall
	enum <anonymous> errSecCallbackFailed
	enum <anonymous> errSecCertificateCannotOperate
	enum <anonymous> errSecCertificateExpired
	enum <anonymous> errSecCertificateNotValidYet
	enum <anonymous> errSecCertificateRevoked
	enum <anonymous> errSecCertificateSuspended
	enum <anonymous> errSecCodeSigningBadCertChainLength
	enum <anonymous> errSecCodeSigningBadPathLengthConstraint
	enum <anonymous> errSecCodeSigningDevelopment
	enum <anonymous> errSecCodeSigningNoBasicConstraints
	enum <anonymous> errSecCodeSigningNoExtendedKeyUsage
	enum <anonymous> errSecConversionError
	enum <anonymous> errSecCreateChainFailed
	enum <anonymous> errSecCRLAlreadySigned
	enum <anonymous> errSecCRLBadURI
	enum <anonymous> errSecCRLExpired
	enum <anonymous> errSecCRLNotFound
	enum <anonymous> errSecCRLNotTrusted
	enum <anonymous> errSecCRLNotValidYet
	enum <anonymous> errSecCRLPolicyFailed
	enum <anonymous> errSecCRLServerDown
	enum <anonymous> errSecCSBadBundleFormat
	enum <anonymous> errSecCSBadDictionaryFormat
	enum <anonymous> errSecCSBadObjectFormat
	enum <anonymous> errSecCSBadResource
	enum <anonymous> errSecCSCMSTooLarge
	enum <anonymous> errSecCSDBAccess
	enum <anonymous> errSecCSDbCorrupt
	enum <anonymous> errSecCSDBDenied
	enum <anonymous> errSecCSFileHardQuarantined
	enum <anonymous> errSecCSGuestInvalid
	enum <anonymous> errSecCSHostProtocolContradiction
	enum <anonymous> errSecCSHostProtocolDedicationError
	enum <anonymous> errSecCSHostProtocolInvalidAttribute
	enum <anonymous> errSecCSHostProtocolInvalidHash
	enum <anonymous> errSecCSHostProtocolNotProxy
	enum <anonymous> errSecCSHostProtocolRelativePath
	enum <anonymous> errSecCSHostProtocolStateError
	enum <anonymous> errSecCSHostProtocolUnrelated
	enum <anonymous> errSecCSHostReject
	enum <anonymous> errSecCSInfoPlistFailed
	enum <anonymous> errSecCSInternalError
	enum <anonymous> errSecCSInvalidAttributeValues
	enum <anonymous> errSecCSInvalidFlags
	enum <anonymous> errSecCSInvalidObjectRef
	enum <anonymous> errSecCSMultipleGuests
	enum <anonymous> errSecCSNoMainExecutable
	enum <anonymous> errSecCSNoMatches
	enum <anonymous> errSecCSNoSuchCode
	enum <anonymous> errSecCSNotAHost
	enum <anonymous> errSecCSNotSupported
	enum <anonymous> errSecCSObjectRequired
	enum <anonymous> errSecCSOutdated
	enum <anonymous> errSecCSReqFailed
	enum <anonymous> errSecCSReqInvalid
	enum <anonymous> errSecCSReqUnsupported
	enum <anonymous> errSecCSResourceRulesInvalid
	enum <anonymous> errSecCSResourcesInvalid
	enum <anonymous> errSecCSResourcesNotFound
	enum <anonymous> errSecCSResourcesNotSealed
	enum <anonymous> errSecCSSigDBAccess
	enum <anonymous> errSecCSSigDBDenied
	enum <anonymous> errSecCSSignatureFailed
	enum <anonymous> errSecCSSignatureInvalid
	enum <anonymous> errSecCSSignatureNotVerifiable
	enum <anonymous> errSecCSSignatureUnsupported
	enum <anonymous> errSecCSStaticCodeChanged
	enum <anonymous> errSecCSStaticCodeNotFound
	enum <anonymous> errSecCSUnimplemented
	enum <anonymous> errSecCSUnsigned
	enum <anonymous> errSecCSUnsupportedGuestAttributes
	enum <anonymous> errSecDatabaseLocked
	enum <anonymous> errSecDataNotAvailable
	enum <anonymous> errSecDataNotModifiable
	enum <anonymous> errSecDatastoreIsOpen
	enum <anonymous> errSecDataTooLarge
	enum <anonymous> errSecDecode
	enum <anonymous> errSecDeviceError
	enum <anonymous> errSecDeviceFailed
	enum <anonymous> errSecDeviceReset
	enum <anonymous> errSecDeviceVerifyFailed
	enum <anonymous> errSecDiskFull
	enum <anonymous> errSecDuplicateCallback
	enum <anonymous> errSecDuplicateItem
	enum <anonymous> errSecDuplicateKeychain
	enum <anonymous> errSecEMMLoadFailed
	enum <anonymous> errSecEMMUnloadFailed
	enum <anonymous> errSecEndOfData
	enum <anonymous> errSecEventNotificationCallbackNotFound
	enum <anonymous> errSecExtendedKeyUsageNotCritical
	enum <anonymous> errSecFieldSpecifiedMultiple
	enum <anonymous> errSecFileTooBig
	enum <anonymous> errSecFunctionFailed
	enum <anonymous> errSecFunctionIntegrityFail
	enum <anonymous> errSecHostNameMismatch
	enum <anonymous> errSecIDPFailure
	enum <anonymous> errSecIncompatibleDatabaseBlob
	enum <anonymous> errSecIncompatibleFieldFormat
	enum <anonymous> errSecIncompatibleKeyBlob
	enum <anonymous> errSecIncompatibleVersion
	enum <anonymous> errSecIncompleteCertRevocationCheck
	enum <anonymous> errSecInDarkWake
	enum <anonymous> errSecInputLengthError
	enum <anonymous> errSecInsufficientClientID
	enum <anonymous> errSecInsufficientCredentials
	enum <anonymous> errSecInteractionNotAllowed
	enum <anonymous> errSecInteractionRequired
	enum <anonymous> errSecInternalError
	enum <anonymous> errSecInvaldCRLAuthority
	enum <anonymous> errSecInvalidAccessCredentials
	enum <anonymous> errSecInvalidAccessRequest
	enum <anonymous> errSecInvalidACL
	enum <anonymous> errSecInvalidAction
	enum <anonymous> errSecInvalidAddinFunctionTable
	enum <anonymous> errSecInvalidAlgorithm
	enum <anonymous> errSecInvalidAlgorithmParms
	enum <anonymous> errSecInvalidAttributeAccessCredentials
	enum <anonymous> errSecInvalidAttributeBase
	enum <anonymous> errSecInvalidAttributeBlockSize
	enum <anonymous> errSecInvalidAttributeDLDBHandle
	enum <anonymous> errSecInvalidAttributeEffectiveBits
	enum <anonymous> errSecInvalidAttributeEndDate
	enum <anonymous> errSecInvalidAttributeInitVector
	enum <anonymous> errSecInvalidAttributeIterationCount
	enum <anonymous> errSecInvalidAttributeKey
	enum <anonymous> errSecInvalidAttributeKeyLength
	enum <anonymous> errSecInvalidAttributeKeyType
	enum <anonymous> errSecInvalidAttributeLabel
	enum <anonymous> errSecInvalidAttributeMode
	enum <anonymous> errSecInvalidAttributeOutputSize
	enum <anonymous> errSecInvalidAttributePadding
	enum <anonymous> errSecInvalidAttributePassphrase
	enum <anonymous> errSecInvalidAttributePrime
	enum <anonymous> errSecInvalidAttributePrivateKeyFormat
	enum <anonymous> errSecInvalidAttributePublicKeyFormat
	enum <anonymous> errSecInvalidAttributeRandom
	enum <anonymous> errSecInvalidAttributeRounds
	enum <anonymous> errSecInvalidAttributeSalt
	enum <anonymous> errSecInvalidAttributeSeed
	enum <anonymous> errSecInvalidAttributeStartDate
	enum <anonymous> errSecInvalidAttributeSubprime
	enum <anonymous> errSecInvalidAttributeSymmetricKeyFormat
	enum <anonymous> errSecInvalidAttributeVersion
	enum <anonymous> errSecInvalidAttributeWrappedKeyFormat
	enum <anonymous> errSecInvalidAuthority
	enum <anonymous> errSecInvalidAuthorityKeyID
	enum <anonymous> errSecInvalidBaseACLs
	enum <anonymous> errSecInvalidBundleInfo
	enum <anonymous> errSecInvalidCallback
	enum <anonymous> errSecInvalidCertAuthority
	enum <anonymous> errSecInvalidCertificateGroup
	enum <anonymous> errSecInvalidCertificateRef
	enum <anonymous> errSecInvalidContext
	enum <anonymous> errSecInvalidCRL
	enum <anonymous> errSecInvalidCRLEncoding
	enum <anonymous> errSecInvalidCRLGroup
	enum <anonymous> errSecInvalidCRLIndex
	enum <anonymous> errSecInvalidCRLType
	enum <anonymous> errSecInvalidData
	enum <anonymous> errSecInvalidDatabaseBlob
	enum <anonymous> errSecInvalidDBList
	enum <anonymous> errSecInvalidDBLocation
	enum <anonymous> errSecInvalidDigestAlgorithm
	enum <anonymous> errSecInvalidEncoding
	enum <anonymous> errSecInvalidExtendedKeyUsage
	enum <anonymous> errSecInvalidFormType
	enum <anonymous> errSecInvalidGUID
	enum <anonymous> errSecInvalidHandle
	enum <anonymous> errSecInvalidHandleUsage
	enum <anonymous> errSecInvalidID
	enum <anonymous> errSecInvalidIdentifier
	enum <anonymous> errSecInvalidIDLinkage
	enum <anonymous> errSecInvalidIndex
	enum <anonymous> errSecInvalidIndexInfo
	enum <anonymous> errSecInvalidInputVector
	enum <anonymous> errSecInvalidItemRef
	enum <anonymous> errSecInvalidKeyAttributeMask
	enum <anonymous> errSecInvalidKeyBlob
	enum <anonymous> errSecInvalidKeychain
	enum <anonymous> errSecInvalidKeyFormat
	enum <anonymous> errSecInvalidKeyHierarchy
	enum <anonymous> errSecInvalidKeyLabel
	enum <anonymous> errSecInvalidKeyRef
	enum <anonymous> errSecInvalidKeyUsageForPolicy
	enum <anonymous> errSecInvalidKeyUsageMask
	enum <anonymous> errSecInvalidLoginName
	enum <anonymous> errSecInvalidModifyMode
	enum <anonymous> errSecInvalidName
	enum <anonymous> errSecInvalidNetworkAddress
	enum <anonymous> errSecInvalidNewOwner
	enum <anonymous> errSecInvalidNumberOfFields
	enum <anonymous> errSecInvalidOutputVector
	enum <anonymous> errSecInvalidOwnerEdit
	enum <anonymous> errSecInvalidParsingModule
	enum <anonymous> errSecInvalidPassthroughID
	enum <anonymous> errSecInvalidPasswordRef
	enum <anonymous> errSecInvalidPointer
	enum <anonymous> errSecInvalidPolicyIdentifiers
	enum <anonymous> errSecInvalidPrefsDomain
	enum <anonymous> errSecInvalidPVC
	enum <anonymous> errSecInvalidQuery
	enum <anonymous> errSecInvalidReason
	enum <anonymous> errSecInvalidRecord
	enum <anonymous> errSecInvalidRequestInputs
	enum <anonymous> errSecInvalidRequestor
	enum <anonymous> errSecInvalidResponseVector
	enum <anonymous> errSecInvalidRoot
	enum <anonymous> errSecInvalidSampleValue
	enum <anonymous> errSecInvalidScope
	enum <anonymous> errSecInvalidSearchRef
	enum <anonymous> errSecInvalidServiceMask
	enum <anonymous> errSecInvalidSignature
	enum <anonymous> errSecInvalidStopOnPolicy
	enum <anonymous> errSecInvalidSubjectKeyID
	enum <anonymous> errSecInvalidSubjectName
	enum <anonymous> errSecInvalidSubServiceID
	enum <anonymous> errSecInvalidTimeString
	enum <anonymous> errSecInvalidTrustSetting
	enum <anonymous> errSecInvalidTrustSettings
	enum <anonymous> errSecInvalidTuple
	enum <anonymous> errSecInvalidTupleCredendtials
	enum <anonymous> errSecInvalidTupleGroup
	enum <anonymous> errSecInvalidValidityPeriod
	enum <anonymous> errSecInvalidValue
	enum <anonymous> errSecItemNotFound
	enum <anonymous> errSecKeyBlobTypeIncorrect
	enum <anonymous> errSecKeyHeaderInconsistent
	enum <anonymous> errSecKeyIsSensitive
	enum <anonymous> errSecKeySizeNotAllowed
	enum <anonymous> errSecKeyUsageIncorrect
	enum <anonymous> errSecLibraryReferenceNotFound
	enum <anonymous> errSecMDSError
	enum <anonymous> errSecMemoryError
	enum <anonymous> errSecMissingAlgorithmParms
	enum <anonymous> errSecMissingAttributeAccessCredentials
	enum <anonymous> errSecMissingAttributeBase
	enum <anonymous> errSecMissingAttributeBlockSize
	enum <anonymous> errSecMissingAttributeDLDBHandle
	enum <anonymous> errSecMissingAttributeEffectiveBits
	enum <anonymous> errSecMissingAttributeEndDate
	enum <anonymous> errSecMissingAttributeInitVector
	enum <anonymous> errSecMissingAttributeIterationCount
	enum <anonymous> errSecMissingAttributeKey
	enum <anonymous> errSecMissingAttributeKeyLength
	enum <anonymous> errSecMissingAttributeKeyType
	enum <anonymous> errSecMissingAttributeLabel
	enum <anonymous> errSecMissingAttributeMode
	enum <anonymous> errSecMissingAttributeOutputSize
	enum <anonymous> errSecMissingAttributePadding
	enum <anonymous> errSecMissingAttributePassphrase
	enum <anonymous> errSecMissingAttributePrime
	enum <anonymous> errSecMissingAttributePrivateKeyFormat
	enum <anonymous> errSecMissingAttributePublicKeyFormat
	enum <anonymous> errSecMissingAttributeRandom
	enum <anonymous> errSecMissingAttributeRounds
	enum <anonymous> errSecMissingAttributeSalt
	enum <anonymous> errSecMissingAttributeSeed
	enum <anonymous> errSecMissingAttributeStartDate
	enum <anonymous> errSecMissingAttributeSubprime
	enum <anonymous> errSecMissingAttributeSymmetricKeyFormat
	enum <anonymous> errSecMissingAttributeVersion
	enum <anonymous> errSecMissingAttributeWrappedKeyFormat
	enum <anonymous> errSecMissingRequiredExtension
	enum <anonymous> errSecMissingValue
	enum <anonymous> errSecMobileMeCSRVerifyFailure
	enum <anonymous> errSecMobileMeFailedConsistencyCheck
	enum <anonymous> errSecMobileMeNoRequestPending
	enum <anonymous> errSecMobileMeRequestAlreadyPending
	enum <anonymous> errSecMobileMeRequestQueued
	enum <anonymous> errSecMobileMeRequestRedirected
	enum <anonymous> errSecMobileMeServerAlreadyExists
	enum <anonymous> errSecMobileMeServerError
	enum <anonymous> errSecMobileMeServerNotAvailable
	enum <anonymous> errSecMobileMeServerServiceErr
	enum <anonymous> errSecModuleManagerInitializeFailed
	enum <anonymous> errSecModuleManagerNotFound
	enum <anonymous> errSecModuleManifestVerifyFailed
	enum <anonymous> errSecModuleNotLoaded
	enum <anonymous> errSecMultiplePrivKeys
	enum <anonymous> errSecMultipleValuesUnsupported
	enum <anonymous> errSecNetworkFailure
	enum <anonymous> errSecNoAccessForItem
	enum <anonymous> errSecNoBasicConstraints
	enum <anonymous> errSecNoBasicConstraintsCA
	enum <anonymous> errSecNoCertificateModule
	enum <anonymous> errSecNoDefaultAuthority
	enum <anonymous> errSecNoDefaultKeychain
	enum <anonymous> errSecNoFieldValues
	enum <anonymous> errSecNoPolicyModule
	enum <anonymous> errSecNoStorageModule
	enum <anonymous> errSecNoSuchAttr
	enum <anonymous> errSecNoSuchClass
	enum <anonymous> errSecNoSuchKeychain
	enum <anonymous> errSecNotAvailable
	enum <anonymous> errSecNotInitialized
	enum <anonymous> errSecNotLoggedIn
	enum <anonymous> errSecNoTrustSettings
	enum <anonymous> errSecNotSigner
	enum <anonymous> errSecNotTrusted
	enum <anonymous> errSecOCSPBadRequest
	enum <anonymous> errSecOCSPBadResponse
	enum <anonymous> errSecOCSPNoSigner
	enum <anonymous> errSecOCSPNotTrustedToAnchor
	enum <anonymous> errSecOCSPResponderInternalError
	enum <anonymous> errSecOCSPResponderMalformedReq
	enum <anonymous> errSecOCSPResponderSignatureRequired
	enum <anonymous> errSecOCSPResponderTryLater
	enum <anonymous> errSecOCSPResponderUnauthorized
	enum <anonymous> errSecOCSPResponseNonceMismatch
	enum <anonymous> errSecOCSPSignatureError
	enum <anonymous> errSecOCSPStatusUnrecognized
	enum <anonymous> errSecOCSPUnavailable
	enum <anonymous> errSecOutputLengthError
	enum <anonymous> errSecParam
	enum <anonymous> errSecPassphraseRequired
	enum <anonymous> errSecPathLengthConstraintExceeded
	enum <anonymous> errSecPkcs12VerifyFailure
	enum <anonymous> errSecPolicyNotFound
	enum <anonymous> errSecPrivilegeNotGranted
	enum <anonymous> errSecPrivilegeNotSupported
	enum <anonymous> errSecPublicKeyInconsistent
	enum <anonymous> errSecPVCAlreadyConfigured
	enum <anonymous> errSecPVCReferentNotFound
	enum <anonymous> errSecQuerySizeUnknown
	enum <anonymous> errSecQuotaExceeded
	enum <anonymous> errSecReadOnly
	enum <anonymous> errSecReadOnlyAttr
	enum <anonymous> errSecRecordModified
	enum <anonymous> errSecRejectedForm
	enum <anonymous> errSecRequestDescriptor
	enum <anonymous> errSecRequestLost
	enum <anonymous> errSecRequestRejected
	enum <anonymous> errSecResourceSignBadCertChainLength
	enum <anonymous> errSecResourceSignBadExtKeyUsage
	enum <anonymous> errSecSelfCheckFailed
	enum <anonymous> errSecServiceNotAvailable
	enum <anonymous> errSecSigningTimeMissing
	enum <anonymous> errSecSMIMEBadExtendedKeyUsage
	enum <anonymous> errSecSMIMEBadKeyUsage
	enum <anonymous> errSecSMIMEEmailAddressesNotFound
	enum <anonymous> errSecSMIMEKeyUsageNotCritical
	enum <anonymous> errSecSMIMENoEmailAddress
	enum <anonymous> errSecSMIMESubjAltNameNotCritical
	enum <anonymous> errSecSSLBadExtendedKeyUsage
	enum <anonymous> errSecStagedOperationInProgress
	enum <anonymous> errSecStagedOperationNotStarted
	enum <anonymous> errSecSuccess
	enum <anonymous> errSecTagNotFound
	enum <anonymous> errSecTimestampAddInfoNotAvailable
	enum <anonymous> errSecTimestampBadAlg
	enum <anonymous> errSecTimestampBadDataFormat
	enum <anonymous> errSecTimestampBadRequest
	enum <anonymous> errSecTimestampInvalid
	enum <anonymous> errSecTimestampMissing
	enum <anonymous> errSecTimestampNotTrusted
	enum <anonymous> errSecTimestampRejection
	enum <anonymous> errSecTimestampRevocationNotification
	enum <anonymous> errSecTimestampRevocationWarning
	enum <anonymous> errSecTimestampServiceNotAvailable
	enum <anonymous> errSecTimestampSystemFailure
	enum <anonymous> errSecTimestampTimeNotAvailable
	enum <anonymous> errSecTimestampUnacceptedExtension
	enum <anonymous> errSecTimestampUnacceptedPolicy
	enum <anonymous> errSecTimestampWaiting
	enum <anonymous> errSecTrustNotAvailable
	enum <anonymous> errSecTrustSettingDeny
	enum <anonymous> errSecUnimplemented
	enum <anonymous> errSecUnknownCertExtension
	enum <anonymous> errSecUnknownCriticalExtensionFlag
	enum <anonymous> errSecUnknownCRLExtension
	enum <anonymous> errSecUnknownFormat
	enum <anonymous> errSecUnknownQualifiedCertStatement
	enum <anonymous> errSecUnknownTag
	enum <anonymous> errSecUnsupportedAddressType
	enum <anonymous> errSecUnsupportedFieldFormat
	enum <anonymous> errSecUnsupportedFormat
	enum <anonymous> errSecUnsupportedIndexInfo
	enum <anonymous> errSecUnsupportedKeyAttributeMask
	enum <anonymous> errSecUnsupportedKeyFormat
	enum <anonymous> errSecUnsupportedKeyLabel
	enum <anonymous> errSecUnsupportedKeySize
	enum <anonymous> errSecUnsupportedKeyUsageMask
	enum <anonymous> errSecUnsupportedLocality
	enum <anonymous> errSecUnsupportedNumAttributes
	enum <anonymous> errSecUnsupportedNumIndexes
	enum <anonymous> errSecUnsupportedNumRecordTypes
	enum <anonymous> errSecUnsupportedNumSelectionPreds
	enum <anonymous> errSecUnsupportedOperator
	enum <anonymous> errSecUnsupportedQueryLimits
	enum <anonymous> errSecUnsupportedService
	enum <anonymous> errSecUnsupportedVectorOfBuffers
	enum <anonymous> errSecVerificationFailure
	enum <anonymous> errSecVerifyActionFailed
	enum <anonymous> errSecVerifyFailed
	enum <anonymous> errSecWrongSecVersion
	enum <anonymous> errSSLBadCert
	enum <anonymous> errSSLBadCipherSuite
	enum <anonymous> errSSLBadConfiguration
	enum <anonymous> errSSLBadRecordMac
	enum <anonymous> errSSLBufferOverflow
	enum <anonymous> errSSLCertExpired
	enum <anonymous> errSSLCertNotYetValid
	enum <anonymous> errSSLClientCertRequested
	enum <anonymous> errSSLClosedAbort
	enum <anonymous> errSSLClosedGraceful
	enum <anonymous> errSSLClosedNoNotify
	enum <anonymous> errSSLConnectionRefused
	enum <anonymous> errSSLCrypto
	enum <anonymous> errSSLDecryptionFail
	enum <anonymous> errSSLFatalAlert
	enum <anonymous> errSSLHostNameMismatch
	enum <anonymous> errSSLIllegalParam
	enum <anonymous> errSSLInternal
	enum <anonymous> errSSLLast
	enum <anonymous> errSSLModuleAttach
	enum <anonymous> errSSLNegotiation
	enum <anonymous> errSSLNoRootCert
	enum <anonymous> errSSLPeerAccessDenied
	enum <anonymous> errSSLPeerAuthCompleted
	enum <anonymous> errSSLPeerBadCert
	enum <anonymous> errSSLPeerBadRecordMac
	enum <anonymous> errSSLPeerCertExpired
	enum <anonymous> errSSLPeerCertRevoked
	enum <anonymous> errSSLPeerCertUnknown
	enum <anonymous> errSSLPeerDecodeError
	enum <anonymous> errSSLPeerDecompressFail
	enum <anonymous> errSSLPeerDecryptError
	enum <anonymous> errSSLPeerDecryptionFail
	enum <anonymous> errSSLPeerExportRestriction
	enum <anonymous> errSSLPeerHandshakeFail
	enum <anonymous> errSSLPeerInsufficientSecurity
	enum <anonymous> errSSLPeerInternalError
	enum <anonymous> errSSLPeerNoRenegotiation
	enum <anonymous> errSSLPeerProtocolVersion
	enum <anonymous> errSSLPeerRecordOverflow
	enum <anonymous> errSSLPeerUnexpectedMsg
	enum <anonymous> errSSLPeerUnknownCA
	enum <anonymous> errSSLPeerUnsupportedCert
	enum <anonymous> errSSLPeerUserCancelled
	enum <anonymous> errSSLProtocol
	enum <anonymous> errSSLRecordOverflow
	enum <anonymous> errSSLSessionNotFound
	enum <anonymous> errSSLUnknownRootCert
	enum <anonymous> errSSLWouldBlock
	enum <anonymous> errSSLXCertChainInvalid
	enum <anonymous> errState
	enum <anonymous> errTaskNotFound
	enum <anonymous> errTopOfBody
	enum <anonymous> errTopOfDocument
	enum <anonymous> errTreeIsLocked
	enum <anonymous> errUnknownAttributeTag
	enum <anonymous> errUnknownControl
	enum <anonymous> errUnknownElement
	enum <anonymous> errUnrecognizedWindowClass
	enum <anonymous> errUnsupportedWindowAttributesForClass
	enum <anonymous> errUserWantsToDragWindow
	enum <anonymous> errWindowDoesNotFitOnscreen
	enum <anonymous> errWindowDoesNotHaveProxy
	enum <anonymous> errWindowDoesntSupportFocus
	enum <anonymous> errWindowNotFound
	enum <anonymous> errWindowPropertyNotFound
	enum <anonymous> errWindowRegionCodeInvalid
	enum <anonymous> errWindowsAlreadyInitialized
	enum <anonymous> errWSInternalError
	enum <anonymous> errWSParseError
	enum <anonymous> errWSTimeoutError
	enum <anonymous> errWSTransportError
	enum <anonymous> eScheme
	enum <anonymous> eSCSI
	enum <anonymous> eSerial
	enum <anonymous> eShiftDown
	enum <anonymous> eSpeakers
	enum <anonymous> eStorageDevice
	enum <anonymous> eSVGA
	enum <anonymous> eSvideo
	enum <anonymous> eTabKey
	enum <anonymous> eTokenRing
	enum <anonymous> eTrackball
	enum <anonymous> eTrackpad
	enum <anonymous> eUpArrowKey
	enum <anonymous> eurlAFP
	enum <anonymous> eurlAT
	enum <anonymous> eurlEPPC
	enum <anonymous> eurlFile
	enum <anonymous> eurlFTP
	enum <anonymous> eurlGopher
	enum <anonymous> eurlHTTP
	enum <anonymous> eurlHTTPS
	enum <anonymous> eurlIMAP
	enum <anonymous> eurlLaunch
	enum <anonymous> eurlLDAP
	enum <anonymous> eurlMail
	enum <anonymous> eurlMailbox
	enum <anonymous> eurlMessage
	enum <anonymous> eurlMulti
	enum <anonymous> eurlNews
	enum <anonymous> eurlNFS
	enum <anonymous> eurlNNTP
	enum <anonymous> eurlPOP
	enum <anonymous> eurlRTSP
	enum <anonymous> eurlSNews
	enum <anonymous> eurlTelnet
	enum <anonymous> eurlUnknown
	enum <anonymous> eUSB
	EvCmd EVHIDE
	enum <anonymous> eVideoIn
	enum <anonymous> eVideoMonitor
	enum <anonymous> eVideoOut
	EvCmd EVLEVEL
	EvCmd EVMOVE
	EvCmd EVNOP
	EvCmd EVSHOW
	enum <anonymous> evtNotEnb
	enum <anonymous> evType
	WSTypeID eWSArrayType
	WSTypeID eWSBooleanType
	WSTypeID eWSDataType
	WSTypeID eWSDateType
	WSTypeID eWSDictionaryType
	WSTypeID eWSDoubleType
	WSTypeID eWSIntegerType
	WSTypeID eWSNullType
	WSTypeID eWSStringType
	WSTypeID eWSUnknownType
	enum <anonymous> excessCollsns
	enum <anonymous> extend
	enum <anonymous> extendedBlock
	enum <anonymous> extendedBlockLen
	enum <anonymous> extensionsFolderIconResource
	enum <anonymous> extFSErr
	enum <anonymous> extractErr
	enum <anonymous> extraneousStrings
	enum <anonymous> exUserBreak
	enum <anonymous> false32b
	enum <anonymous> fatalDateTime
	enum <anonymous> fBadPartsTable
	enum <anonymous> fBestGuess
	enum <anonymous> fBsyErr
	enum <anonymous> fDesktop
	enum <anonymous> fDisk
	enum <anonymous> featureFontTableTag
	enum <anonymous> featureUnsupported
	enum <anonymous> fEmptyFormatString
	enum <anonymous> fetchReference
	enum <anonymous> fExtraDecimal
	enum <anonymous> fExtraExp
	enum <anonymous> fExtraPercent
	enum <anonymous> fExtraSeparator
	enum <anonymous> fFormatOK
	enum <anonymous> fFormatOverflow
	enum <anonymous> fFormStrIsNAN
	enum <anonymous> fHasBundle
	enum <anonymous> fidExists
	enum <anonymous> fidNotFound
	enum <anonymous> fieldOrderNotIntl
	enum <anonymous> fileBoundsErr
	enum <anonymous> fileOffsetTooBigErr
	filesec_property_t FILESEC_ACL
	filesec_property_t FILESEC_ACL_ALLOCSIZE
	filesec_property_t FILESEC_ACL_RAW
	filesec_property_t FILESEC_GROUP
	filesec_property_t FILESEC_GRPUUID
	filesec_property_t FILESEC_MODE
	filesec_property_t FILESEC_OWNER
	filesec_property_t FILESEC_UUID
	enum <anonymous> fiLigature
	enum <anonymous> finalStage
	enum <anonymous> fInvisible
	enum <anonymous> firstDskErr
	enum <anonymous> firstPickerError
	enum <anonymous> fLckdErr
	enum <anonymous> flLigature
	enum <anonymous> floppyIconResource
	enum <anonymous> fMissingDelimiter
	enum <anonymous> fMissingLiteral
	enum <anonymous> fmt1Err
	enum <anonymous> fmt2Err
	enum <anonymous> fNegative
	enum <anonymous> fnfErr
	enum <anonymous> fnOpnErr
	enum <anonymous> fOnDesk
	enum <anonymous> fontDecError
	enum <anonymous> fontNotDeclared
	enum <anonymous> fontNotOutlineErr
	enum <anonymous> fontsFolderIconResource
	enum <anonymous> fontSubErr
	enum <anonymous> forceReadBit
	enum <anonymous> forceReadMask
	enum <anonymous> formAbsolutePosition
	enum <anonymous> FormatVersionID
	enum <anonymous> FORMID
	enum <anonymous> formName
	enum <anonymous> formPropertyID
	enum <anonymous> formRange
	enum <anonymous> formRelativePosition
	enum <anonymous> formTest
	enum <anonymous> formUniqueID
	enum <anonymous> formWhose
	enum <anonymous> ForwardBackwardLooping
	enum <anonymous> ForwardLooping
	enum <anonymous> fOutOfSynch
	enum <anonymous> fPositive
	enum <anonymous> fraction
	enum <anonymous> fsAtMark
	enum <anonymous> fsCurPerm
	enum <anonymous> fsDataTooBigErr
	enum <anonymous> fsDSIntErr
	enum <anonymous> fsFromLEOF
	enum <anonymous> fsFromMark
	enum <anonymous> fsFromStart
	enum <anonymous> fsmBadFFSNameErr
	enum <anonymous> fsmBadFSDLenErr
	enum <anonymous> fsmBadFSDVersionErr
	enum <anonymous> fsmBusyFFSErr
	enum <anonymous> fsmDuplicateFSIDErr
	enum <anonymous> fsmFFSNotFoundErr
	enum <anonymous> fsmNoAlternateStackErr
	enum <anonymous> fsmUnknownFSMMessageErr
	enum <anonymous> fSpuriousChars
	enum <anonymous> fsQType
	enum <anonymous> fsRdAccessPerm
	enum <anonymous> fsRdDenyPerm
	enum <anonymous> fsRdPerm
	enum <anonymous> fsRdWrPerm
	enum <anonymous> fsRdWrShPerm
	enum <anonymous> fsRnErr
	enum <anonymous> fsRtDirID
	enum <anonymous> fsRtParID
	enum <anonymous> fsSBAccessDate
	enum <anonymous> fsSBAccessDateBit
	enum <anonymous> fsSBAttributeModDate
	enum <anonymous> fsSBAttributeModDateBit
	enum <anonymous> fsSBDrBkDat
	enum <anonymous> fsSBDrBkDatBit
	enum <anonymous> fsSBDrCrDat
	enum <anonymous> fsSBDrCrDatBit
	enum <anonymous> fsSBDrFndrInfo
	enum <anonymous> fsSBDrFndrInfoBit
	enum <anonymous> fsSBDrMdDat
	enum <anonymous> fsSBDrMdDatBit
	enum <anonymous> fsSBDrNmFls
	enum <anonymous> fsSBDrNmFlsBit
	enum <anonymous> fsSBDrParID
	enum <anonymous> fsSBDrParIDBit
	enum <anonymous> fsSBDrUsrWds
	enum <anonymous> fsSBDrUsrWdsBit
	enum <anonymous> fsSBFlAttrib
	enum <anonymous> fsSBFlAttribBit
	enum <anonymous> fsSBFlBkDat
	enum <anonymous> fsSBFlBkDatBit
	enum <anonymous> fsSBFlCrDat
	enum <anonymous> fsSBFlCrDatBit
	enum <anonymous> fsSBFlFndrInfo
	enum <anonymous> fsSBFlFndrInfoBit
	enum <anonymous> fsSBFlLgLen
	enum <anonymous> fsSBFlLgLenBit
	enum <anonymous> fsSBFlMdDat
	enum <anonymous> fsSBFlMdDatBit
	enum <anonymous> fsSBFlParID
	enum <anonymous> fsSBFlParIDBit
	enum <anonymous> fsSBFlPyLen
	enum <anonymous> fsSBFlPyLenBit
	enum <anonymous> fsSBFlRLgLen
	enum <anonymous> fsSBFlRLgLenBit
	enum <anonymous> fsSBFlRPyLen
	enum <anonymous> fsSBFlRPyLenBit
	enum <anonymous> fsSBFlXFndrInfo
	enum <anonymous> fsSBFlXFndrInfoBit
	enum <anonymous> fsSBFullName
	enum <anonymous> fsSBFullNameBit
	enum <anonymous> fsSBGroupID
	enum <anonymous> fsSBGroupIDBit
	enum <anonymous> fsSBNegate
	enum <anonymous> fsSBNegateBit
	enum <anonymous> fsSBNodeID
	enum <anonymous> fsSBNodeIDBit
	enum <anonymous> fsSBPartialName
	enum <anonymous> fsSBPartialNameBit
	enum <anonymous> fsSBPermissions
	enum <anonymous> fsSBPermissionsBit
	enum <anonymous> fsSBSkipHiddenItems
	enum <anonymous> fsSBSkipHiddenItemsBit
	enum <anonymous> fsSBSkipPackageContents
	enum <anonymous> fsSBSkipPackageContentsBit
	enum <anonymous> fsSBUserID
	enum <anonymous> fsSBUserIDBit
	enum <anonymous> fsUnixPriv
	enum <anonymous> fsWrAccessPerm
	enum <anonymous> fsWrDenyPerm
	enum <anonymous> fsWrPerm
	enum <anonymous> fTrash
	enum <anonymous> fullTrashIconResource
	enum <anonymous> fVNumber
	enum <anonymous> fZero
	enum <anonymous> gcrOnMFMErr
	enum <anonymous> genCdevRangeBit
	enum <anonymous> genericApplicationIconResource
	enum <anonymous> genericCDROMIconResource
	enum <anonymous> genericDeskAccessoryIconResource
	enum <anonymous> genericDocumentIconResource
	enum <anonymous> genericEditionFileIconResource
	enum <anonymous> genericExtensionIconResource
	enum <anonymous> genericFileServerIconResource
	enum <anonymous> genericFolderIconResource
	enum <anonymous> genericHardDiskIconResource
	enum <anonymous> genericMoverObjectIconResource
	enum <anonymous> genericPreferencesIconResource
	enum <anonymous> genericQueryDocumentIconResource
	enum <anonymous> genericRAMDiskIconResource
	enum <anonymous> genericStationeryIconResource
	enum <anonymous> genericSuitcaseIconResource
	enum <anonymous> gestalt16BitAudioSupport
	enum <anonymous> gestalt16BitSoundIO
	enum <anonymous> gestalt20thAnniversary
	enum <anonymous> gestalt32BitAddressing
	enum <anonymous> gestalt32BitCapable
	enum <anonymous> gestalt32BitQD
	enum <anonymous> gestalt32BitQD11
	enum <anonymous> gestalt32BitQD12
	enum <anonymous> gestalt32BitQD13
	enum <anonymous> gestalt32BitSysZone
	enum <anonymous> gestalt68000
	enum <anonymous> gestalt68010
	enum <anonymous> gestalt68020
	enum <anonymous> gestalt68030
	enum <anonymous> gestalt68030MMU
	enum <anonymous> gestalt68040
	enum <anonymous> gestalt68040FPU
	enum <anonymous> gestalt68040MMU
	enum <anonymous> gestalt68851
	enum <anonymous> gestalt68881
	enum <anonymous> gestalt68882
	enum <anonymous> gestalt68k
	enum <anonymous> gestalt8BitQD
	enum <anonymous> gestaltADBISOKbdII
	enum <anonymous> gestaltADBKbdII
	enum <anonymous> gestaltAddressingModeAttr
	enum <anonymous> gestaltAdminFeaturesFlagsAttr
	enum <anonymous> gestaltAFPClient
	enum <anonymous> gestaltAFPClient3_5
	enum <anonymous> gestaltAFPClient3_6
	enum <anonymous> gestaltAFPClient3_6_1
	enum <anonymous> gestaltAFPClient3_6_2
	enum <anonymous> gestaltAFPClient3_6_3
	enum <anonymous> gestaltAFPClient3_7
	enum <anonymous> gestaltAFPClient3_7_2
	enum <anonymous> gestaltAFPClient3_8
	enum <anonymous> gestaltAFPClient3_8_1
	enum <anonymous> gestaltAFPClient3_8_3
	enum <anonymous> gestaltAFPClient3_8_4
	enum <anonymous> gestaltAFPClientAttributeMask
	enum <anonymous> gestaltAFPClientCfgRsrc
	enum <anonymous> gestaltAFPClientMultiReq
	enum <anonymous> gestaltAFPClientSupportsIP
	enum <anonymous> gestaltAFPClientVersionMask
	enum <anonymous> gestaltAFPClientVMUI
	enum <anonymous> gestaltAliasMgrAttr
	enum <anonymous> gestaltAliasMgrFollowsAliasesWhenResolving
	enum <anonymous> gestaltAliasMgrPrefersPath
	enum <anonymous> gestaltAliasMgrPresent
	enum <anonymous> gestaltAliasMgrRequiresAccessors
	enum <anonymous> gestaltAliasMgrResolveAliasFileWithMountOptions
	enum <anonymous> gestaltAliasMgrSupportsAOCEKeychain
	enum <anonymous> gestaltAliasMgrSupportsExtendedCalls
	enum <anonymous> gestaltAliasMgrSupportsFSCalls
	enum <anonymous> gestaltAliasMgrSupportsRemoteAppletalk
	enum <anonymous> gestaltAllegroQD
	enum <anonymous> gestaltAllegroQDText
	enum <anonymous> gestaltALMAttr
	enum <anonymous> gestaltALMHasCFMSupport
	enum <anonymous> gestaltALMHasRescanNotifiers
	enum <anonymous> gestaltALMHasSFGroup
	enum <anonymous> gestaltALMHasSFLocation
	enum <anonymous> gestaltALMPresent
	enum <anonymous> gestaltALMVers
	enum <anonymous> gestaltAltivecRegistersSwappedCorrectlyBit
	enum <anonymous> gestaltAMU
	enum <anonymous> gestaltAntiAliasedTextAvailable
	enum <anonymous> gestaltAppearanceAttr
	enum <anonymous> gestaltAppearanceCompatMode
	enum <anonymous> gestaltAppearanceExists
	enum <anonymous> gestaltAppearanceVersion
	enum <anonymous> gestaltAppleAdjustADBKbd
	enum <anonymous> gestaltAppleAdjustISOKbd
	enum <anonymous> gestaltAppleAdjustKeypad
	enum <anonymous> gestaltAppleEventsAttr
	enum <anonymous> gestaltAppleEventsPresent
	enum <anonymous> gestaltAppleGuideIsDebug
	enum <anonymous> gestaltAppleGuidePresent
	enum <anonymous> gestaltAppleScriptAttr
	enum <anonymous> gestaltAppleScriptPowerPCSupport
	enum <anonymous> gestaltAppleScriptPresent
	enum <anonymous> gestaltAppleScriptVersion
	enum <anonymous> gestaltAppleTalkVersion
	enum <anonymous> gestaltArbitorAttr
	enum <anonymous> gestaltAsyncSCSI
	enum <anonymous> gestaltAsyncSCSIINROM
	enum <anonymous> gestaltATAAttr
	enum <anonymous> gestaltATalkVersion
	enum <anonymous> gestaltATAPresent
	enum <anonymous> gestaltATSUAscentDescentControlsFeature
	enum <anonymous> gestaltATSUBatchBreakLinesFeature
	enum <anonymous> gestaltATSUBiDiCursorPositionFeature
	enum <anonymous> gestaltATSUByCharacterClusterFeature
	enum <anonymous> gestaltATSUDecimalTabFeature
	enum <anonymous> gestaltATSUDirectAccess
	enum <anonymous> gestaltATSUDropShadowStyleFeature
	enum <anonymous> gestaltATSUFallbacksFeature
	enum <anonymous> gestaltATSUFallbacksObjFeatures
	enum <anonymous> gestaltATSUFeatures
	enum <anonymous> gestaltATSUGlyphBoundsFeature
	enum <anonymous> gestaltATSUHighlightColorControlFeature
	enum <anonymous> gestaltATSUHighlightInactiveTextFeature
	enum <anonymous> gestaltATSUIgnoreLeadingFeature
	enum <anonymous> gestaltATSULayoutCacheClearFeature
	enum <anonymous> gestaltATSULayoutCreateAndCopyFeature
	enum <anonymous> gestaltATSULineControlFeature
	enum <anonymous> gestaltATSULowLevelOrigFeatures
	enum <anonymous> gestaltATSUMemoryFeature
	enum <anonymous> gestaltATSUNearestCharLineBreakFeature
	enum <anonymous> gestaltATSUPositionToCursorFeature
	enum <anonymous> gestaltATSUStrikeThroughStyleFeature
	enum <anonymous> gestaltATSUTabSupportFeature
	enum <anonymous> gestaltATSUTextLocatorUsageFeature
	enum <anonymous> gestaltATSUTrackingFeature
	enum <anonymous> gestaltATSUUnderlineOptionsStyleFeature
	enum <anonymous> gestaltATSUUpdate1
	enum <anonymous> gestaltATSUUpdate2
	enum <anonymous> gestaltATSUUpdate3
	enum <anonymous> gestaltATSUUpdate4
	enum <anonymous> gestaltATSUUpdate5
	enum <anonymous> gestaltATSUUpdate6
	enum <anonymous> gestaltATSUUpdate7
	enum <anonymous> gestaltATSUVersion
	enum <anonymous> gestaltAUXVersion
	enum <anonymous> gestaltAVLTreeAttr
	enum <anonymous> gestaltAVLTreePresentBit
	enum <anonymous> gestaltAVLTreeSupportsHandleBasedTreeBit
	enum <anonymous> gestaltAVLTreeSupportsTreeLockingBit
	enum <anonymous> gestaltAWS6150_60
	enum <anonymous> gestaltAWS6150_66
	enum <anonymous> gestaltAWS8150_110
	enum <anonymous> gestaltAWS8150_80
	enum <anonymous> gestaltAWS8550
	enum <anonymous> gestaltAWS9150_120
	enum <anonymous> gestaltAWS9150_80
	enum <anonymous> gestaltBuiltInSoundInput
	enum <anonymous> gestaltBusClkSpeed
	enum <anonymous> gestaltBusClkSpeedMHz
	enum <anonymous> gestaltCanStartDragInFloatWindow
	enum <anonymous> gestaltCanUseCGTextRendering
	enum <anonymous> gestaltCarbonVersion
	enum <anonymous> gestaltCardServicesPresent
	enum <anonymous> gestaltCFM99Present
	enum <anonymous> gestaltCFM99PresentMask
	enum <anonymous> gestaltCFMAttr
	enum <anonymous> gestaltCFMPresent
	enum <anonymous> gestaltCFMPresentMask
	enum <anonymous> gestaltClassic
	enum <anonymous> gestaltClassicII
	enum <anonymous> gestaltCloseViewAttr
	enum <anonymous> gestaltCloseViewDisplayMgrFriendly
	enum <anonymous> gestaltCloseViewEnabled
	enum <anonymous> gestaltCollectionMgrVersion
	enum <anonymous> gestaltColorMatchingAttr
	enum <anonymous> gestaltColorMatchingLibLoaded
	enum <anonymous> gestaltColorMatchingVersion
	enum <anonymous> gestaltColorPicker
	enum <anonymous> gestaltColorPickerVersion
	enum <anonymous> gestaltColorSync10
	enum <anonymous> gestaltColorSync104
	enum <anonymous> gestaltColorSync105
	enum <anonymous> gestaltColorSync11
	enum <anonymous> gestaltColorSync20
	enum <anonymous> gestaltColorSync21
	enum <anonymous> gestaltColorSync211
	enum <anonymous> gestaltColorSync212
	enum <anonymous> gestaltColorSync213
	enum <anonymous> gestaltColorSync25
	enum <anonymous> gestaltColorSync26
	enum <anonymous> gestaltColorSync261
	enum <anonymous> gestaltColorSync30
	enum <anonymous> gestaltComponentMgr
	enum <anonymous> gestaltComponentPlatform
	enum <anonymous> gestaltCompressionMgr
	enum <anonymous> gestaltConnMgrAttr
	enum <anonymous> gestaltConnMgrCMSearchFix
	enum <anonymous> gestaltConnMgrErrorString
	enum <anonymous> gestaltConnMgrMultiAsyncIO
	enum <anonymous> gestaltConnMgrPresent
	enum <anonymous> gestaltControlMgrAttr
	enum <anonymous> gestaltControlMgrPresent
	enum <anonymous> gestaltControlMgrPresentBit
	enum <anonymous> gestaltControlMgrVersion
	enum <anonymous> gestaltControlMsgPresentMask
	enum <anonymous> gestaltControlStripAttr
	enum <anonymous> gestaltControlStripExists
	enum <anonymous> gestaltControlStripUserFont
	enum <anonymous> gestaltControlStripUserHotKey
	enum <anonymous> gestaltControlStripVersion
	enum <anonymous> gestaltControlStripVersionFixed
	enum <anonymous> gestaltCountOfCPUs
	enum <anonymous> gestaltCPU486
	enum <anonymous> gestaltCPU601
	enum <anonymous> gestaltCPU603
	enum <anonymous> gestaltCPU603e
	enum <anonymous> gestaltCPU603ev
	enum <anonymous> gestaltCPU604
	enum <anonymous> gestaltCPU604e
	enum <anonymous> gestaltCPU604ev
	enum <anonymous> gestaltCPU68000
	enum <anonymous> gestaltCPU68010
	enum <anonymous> gestaltCPU68020
	enum <anonymous> gestaltCPU68030
	enum <anonymous> gestaltCPU68040
	enum <anonymous> gestaltCPU750
	enum <anonymous> gestaltCPU750FX
	enum <anonymous> gestaltCPU970
	enum <anonymous> gestaltCPU970FX
	enum <anonymous> gestaltCPU970MP
	enum <anonymous> gestaltCPUApollo
	enum <anonymous> gestaltCPUG4
	enum <anonymous> gestaltCPUG47447
	enum <anonymous> gestaltCPUG47450
	enum <anonymous> gestaltCPUPentium
	enum <anonymous> gestaltCPUPentium4
	enum <anonymous> gestaltCPUPentiumII
	enum <anonymous> gestaltCPUPentiumPro
	enum <anonymous> gestaltCPUX86
	enum <anonymous> gestaltCreatesAliasFontRsrc
	enum <anonymous> gestaltCRMAttr
	enum <anonymous> gestaltCRMPersistentFix
	enum <anonymous> gestaltCRMPresent
	enum <anonymous> gestaltCRMToolRsrcCalls
	enum <anonymous> gestaltCTBVersion
	enum <anonymous> gestaltCurrentGraphicsVersion
	enum <anonymous> gestaltDBAccessMgrAttr
	enum <anonymous> gestaltDBAccessMgrPresent
	enum <anonymous> gestaltDesktopPicturesAttr
	enum <anonymous> gestaltDesktopPicturesDisplayed
	enum <anonymous> gestaltDesktopPicturesInstalled
	enum <anonymous> gestaltDesktopSpeechRecognition
	enum <anonymous> gestaltDialogMgrAttr
	enum <anonymous> gestaltDialogMgrHasAquaAlertBit
	enum <anonymous> gestaltDialogMgrHasAquaAlertMask
	enum <anonymous> gestaltDialogMgrPresent
	enum <anonymous> gestaltDialogMgrPresentBit
	enum <anonymous> gestaltDialogMgrPresentMask
	enum <anonymous> gestaltDialogMsgPresentMask
	enum <anonymous> gestaltDictionaryMgrAttr
	enum <anonymous> gestaltDictionaryMgrPresent
	enum <anonymous> gestaltDigitalSignatureVersion
	enum <anonymous> gestaltDiskCacheSize
	enum <anonymous> gestaltDisplayMgrAttr
	enum <anonymous> gestaltDisplayMgrCanConfirm
	enum <anonymous> gestaltDisplayMgrCanSwitchMirrored
	enum <anonymous> gestaltDisplayMgrColorSyncAware
	enum <anonymous> gestaltDisplayMgrGeneratesProfiles
	enum <anonymous> gestaltDisplayMgrPresent
	enum <anonymous> gestaltDisplayMgrSetDepthNotifies
	enum <anonymous> gestaltDisplayMgrSleepNotifies
	enum <anonymous> gestaltDisplayMgrVers
	enum <anonymous> gestaltDITLExtAttr
	enum <anonymous> gestaltDITLExtPresent
	enum <anonymous> gestaltDITLExtSupportsIctb
	enum <anonymous> gestaltDragMgrAttr
	enum <anonymous> gestaltDragMgrFloatingWind
	enum <anonymous> gestaltDragMgrHasImageSupport
	enum <anonymous> gestaltDragMgrPresent
	enum <anonymous> gestaltDrawSprocketVersion
	enum <anonymous> gestaltDTMgrSupportsFSM
	enum <anonymous> gestaltDTPFeatures
	enum <anonymous> gestaltDTPInfo
	enum <anonymous> gestaltDupSelectorErr
	enum <anonymous> gestaltEasyAccessAttr
	enum <anonymous> gestaltEasyAccessLocked
	enum <anonymous> gestaltEasyAccessOff
	enum <anonymous> gestaltEasyAccessOn
	enum <anonymous> gestaltEasyAccessSticky
	enum <anonymous> gestaltEditionMgrAttr
	enum <anonymous> gestaltEditionMgrPresent
	enum <anonymous> gestaltEditionMgrTranslationAware
	enum <anonymous> gestaltEMMU1
	enum <anonymous> gestaltExtADBKbd
	enum <anonymous> gestaltExtendedTimeMgr
	enum <anonymous> gestaltExtendedWindowAttributes
	enum <anonymous> gestaltExtendedWindowAttributesBit
	enum <anonymous> gestaltExtendedWindowAttributesMask
	enum <anonymous> gestaltExtensionTableVersion
	enum <anonymous> gestaltExtISOADBKbd
	enum <anonymous> gestaltExtToolboxTable
	enum <anonymous> gestaltFBCCurrentVersion
	enum <anonymous> gestaltFBCindexingCritical
	enum <anonymous> gestaltFBCindexingSafe
	enum <anonymous> gestaltFBCIndexingState
	enum <anonymous> gestaltFBCVersion
	enum <anonymous> gestaltFileAllocationZeroedBlocksBit
	enum <anonymous> gestaltFileMappingAttr
	enum <anonymous> gestaltFileMappingMultipleFilesFix
	enum <anonymous> gestaltFileMappingPresent
	enum <anonymous> gestaltFinderAttr
	enum <anonymous> gestaltFinderCallsAEProcess
	enum <anonymous> gestaltFinderDropEvent
	enum <anonymous> gestaltFinderFloppyRootComments
	enum <anonymous> gestaltFinderFullDragManagerSupport
	enum <anonymous> gestaltFinderHasClippings
	enum <anonymous> gestaltFinderLargeAndNotSavedFlavorsOK
	enum <anonymous> gestaltFinderMagicPlacement
	enum <anonymous> gestaltFinderSupports4GBVolumes
	enum <anonymous> gestaltFinderUnderstandsRedirectedDesktopFolder
	enum <anonymous> gestaltFinderUsesExtensibleFolderManager
	enum <anonymous> gestaltFinderUsesSpecialOpenFoldersFile
	enum <anonymous> gestaltFindFolderAttr
	enum <anonymous> gestaltFindFolderPresent
	enum <anonymous> gestaltFindFolderRedirectionAttr
	enum <anonymous> gestaltFirstSlotNumber
	enum <anonymous> gestaltFloppyAttr
	enum <anonymous> gestaltFloppyIsManualEject
	enum <anonymous> gestaltFloppyIsMFMOnly
	enum <anonymous> gestaltFloppyUsesDiskInPlace
	enum <anonymous> gestaltFolderDescSupport
	enum <anonymous> gestaltFolderMgrFollowsAliasesWhenResolving
	enum <anonymous> gestaltFolderMgrSupportsDomains
	enum <anonymous> gestaltFolderMgrSupportsExtendedCalls
	enum <anonymous> gestaltFolderMgrSupportsFSCalls
	enum <anonymous> gestaltFontMgrAttr
	enum <anonymous> gestaltFPUType
	enum <anonymous> gestaltFrontWindowMayBeHiddenBit
	enum <anonymous> gestaltFrontWindowMayBeHiddenMask
	enum <anonymous> gestaltFSAllowsConcurrentAsyncIO
	enum <anonymous> gestaltFSAttr
	enum <anonymous> gestaltFSIncompatibleDFA82
	enum <anonymous> gestaltFSMDoesDynamicLoad
	enum <anonymous> gestaltFSMVersion
	enum <anonymous> gestaltFSNoMFSVols
	enum <anonymous> gestaltFSSupports2TBVols
	enum <anonymous> gestaltFSSupports4GBVols
	enum <anonymous> gestaltFSSupportsDirectIO
	enum <anonymous> gestaltFSSupportsExclusiveLocks
	enum <anonymous> gestaltFSSupportsHardLinkDetection
	enum <anonymous> gestaltFSSupportsHFSPlusVols
	enum <anonymous> gestaltFSUsesPOSIXPathsForConversion
	enum <anonymous> gestaltFullExtFSDispatching
	enum <anonymous> gestaltFXfrMgrAsync
	enum <anonymous> gestaltFXfrMgrAttr
	enum <anonymous> gestaltFXfrMgrErrorString
	enum <anonymous> gestaltFXfrMgrMultiFile
	enum <anonymous> gestaltFXfrMgrPresent
	enum <anonymous> gestaltGraphicsAttr
	enum <anonymous> gestaltGraphicsIsDebugging
	enum <anonymous> gestaltGraphicsIsLoaded
	enum <anonymous> gestaltGraphicsIsPowerPC
	enum <anonymous> gestaltGraphicsVersion
	enum <anonymous> gestaltGXPrintingMgrVersion
	enum <anonymous> gestaltGXVersion
	enum <anonymous> gestaltHardwareAttr
	enum <anonymous> gestaltHardwareVendorApple
	enum <anonymous> gestaltHardwareVendorCode
	enum <anonymous> gestaltHasASC
	enum <anonymous> gestaltHasColor
	enum <anonymous> gestaltHasDeepGWorlds
	enum <anonymous> gestaltHasDirectPixMaps
	enum <anonymous> gestaltHasEnhancedLtalk
	enum <anonymous> gestaltHasExtendedDiskInit
	enum <anonymous> gestaltHasFileSystemManager
	enum <anonymous> gestaltHasFloatingWindows
	enum <anonymous> gestaltHasFloatingWindowsBit
	enum <anonymous> gestaltHasFloatingWindowsMask
	enum <anonymous> gestaltHasFMTuner
	enum <anonymous> gestaltHasFSSpecCalls
	enum <anonymous> gestaltHasGPIaToDCDa
	enum <anonymous> gestaltHasGPIaToRTxCa
	enum <anonymous> gestaltHasGPIbToDCDb
	enum <anonymous> gestaltHasGrayishTextOr
	enum <anonymous> gestaltHasHFSPlusAPIs
	enum <anonymous> gestaltHasHWClosedCaptioning
	enum <anonymous> gestaltHasIRRemote
	enum <anonymous> gestaltHasParityCapability
	enum <anonymous> gestaltHasResourceOverrides
	enum <anonymous> gestaltHasSCC
	enum <anonymous> gestaltHasSCSI
	enum <anonymous> gestaltHasSCSI961
	enum <anonymous> gestaltHasSCSI962
	enum <anonymous> gestaltHasSerialFader
	enum <anonymous> gestaltHasSingleWindowModeBit
	enum <anonymous> gestaltHasSingleWindowModeMask
	enum <anonymous> gestaltHasSoftPowerOff
	enum <anonymous> gestaltHasSoundFader
	enum <anonymous> gestaltHasSoundInputDevice
	enum <anonymous> gestaltHasStereoDecoder
	enum <anonymous> gestaltHasSystemIRFunction
	enum <anonymous> gestaltHasTVTuner
	enum <anonymous> gestaltHasUniversalROM
	enum <anonymous> gestaltHasVIA1
	enum <anonymous> gestaltHasVIA2
	enum <anonymous> gestaltHasVidDecoderScaler
	enum <anonymous> gestaltHasWindowBuffering
	enum <anonymous> gestaltHasWindowBufferingBit
	enum <anonymous> gestaltHasWindowBufferingMask
	enum <anonymous> gestaltHasWindowShadowsBit
	enum <anonymous> gestaltHasWindowShadowsMask
	enum <anonymous> gestaltHasZoomedVideo
	enum <anonymous> gestaltHelpMgrAttr
	enum <anonymous> gestaltHelpMgrExtensions
	enum <anonymous> gestaltHelpMgrPresent
	enum <anonymous> gestaltHidePortA
	enum <anonymous> gestaltHidePortB
	enum <anonymous> gestaltHighLevelMatching
	enum <anonymous> gestaltIconUtilitiesAttr
	enum <anonymous> gestaltIconUtilitiesHas32BitIcons
	enum <anonymous> gestaltIconUtilitiesHas48PixelIcons
	enum <anonymous> gestaltIconUtilitiesHas8BitDeepMasks
	enum <anonymous> gestaltIconUtilitiesHasIconServices
	enum <anonymous> gestaltIconUtilitiesPresent
	enum <anonymous> gestaltINeedIRPowerOffConfirm
	enum <anonymous> gestaltInitHeapZerosOutHeapsBit
	enum <anonymous> gestaltIntel
	enum <anonymous> gestaltInternalDisplay
	enum <anonymous> gestaltIPCSupport
	enum <anonymous> gestaltIRDisabled
	enum <anonymous> gestaltJapanAdjustADBKbd
	enum <anonymous> gestaltKeyboardType
	enum <anonymous> gestaltLaunchCanReturn
	enum <anonymous> gestaltLaunchControl
	enum <anonymous> gestaltLaunchFullFileSpec
	enum <anonymous> gestaltLineLevelInput
	enum <anonymous> gestaltLocationErr
	enum <anonymous> gestaltLogicalPageSize
	enum <anonymous> gestaltLogicalRAMSize
	enum <anonymous> gestaltLowMemorySize
	enum <anonymous> gestaltMac512KE
	enum <anonymous> gestaltMacAndPad
	enum <anonymous> gestaltMacCentris610
	enum <anonymous> gestaltMacCentris650
	enum <anonymous> gestaltMacCentris660AV
	enum <anonymous> gestaltMacClassic
	enum <anonymous> gestaltMacColorClassic
	enum <anonymous> gestaltMachineIcon
	enum <anonymous> gestaltMachineType
	enum <anonymous> gestaltMacII
	enum <anonymous> gestaltMacIIci
	enum <anonymous> gestaltMacIIcx
	enum <anonymous> gestaltMacIIfx
	enum <anonymous> gestaltMacIIsi
	enum <anonymous> gestaltMacIIvi
	enum <anonymous> gestaltMacIIvm
	enum <anonymous> gestaltMacIIvx
	enum <anonymous> gestaltMacIIx
	enum <anonymous> gestaltMacKbd
	enum <anonymous> gestaltMacLC
	enum <anonymous> gestaltMacLC475
	enum <anonymous> gestaltMacLC520
	enum <anonymous> gestaltMacLC575
	enum <anonymous> gestaltMacLC580
	enum <anonymous> gestaltMacLCII
	enum <anonymous> gestaltMacLCIII
	enum <anonymous> gestaltMacOSCompatibility
	enum <anonymous> gestaltMacOSCompatibilityBoxAttr
	enum <anonymous> gestaltMacOSCompatibilityBoxHasSerial
	enum <anonymous> gestaltMacOSCompatibilityBoxless
	enum <anonymous> gestaltMacOSCompatibilityBoxPresent
	enum <anonymous> gestaltMacOSXQD
	enum <anonymous> gestaltMacOSXQDText
	enum <anonymous> gestaltMacPlus
	enum <anonymous> gestaltMacPlusKbd
	enum <anonymous> gestaltMacQuadra605
	enum <anonymous> gestaltMacQuadra610
	enum <anonymous> gestaltMacQuadra630
	enum <anonymous> gestaltMacQuadra650
	enum <anonymous> gestaltMacQuadra660AV
	enum <anonymous> gestaltMacQuadra700
	enum <anonymous> gestaltMacQuadra800
	enum <anonymous> gestaltMacQuadra840AV
	enum <anonymous> gestaltMacQuadra900
	enum <anonymous> gestaltMacQuadra950
	enum <anonymous> gestaltMacSE
	enum <anonymous> gestaltMacSE030
	enum <anonymous> gestaltMacTV
	enum <anonymous> gestaltMacXL
	enum <anonymous> gestaltMBLegacy
	enum <anonymous> gestaltMBMultipleBays
	enum <anonymous> gestaltMBSingleBay
	enum <anonymous> gestaltMediaBay
	enum <anonymous> gestaltMemoryMapAttr
	enum <anonymous> gestaltMemoryMapSparse
	enum <anonymous> gestaltMenuMgrAquaLayoutBit
	enum <anonymous> gestaltMenuMgrAquaLayoutMask
	enum <anonymous> gestaltMenuMgrAttr
	enum <anonymous> gestaltMenuMgrCGImageMenuTitleBit
	enum <anonymous> gestaltMenuMgrCGImageMenuTitleMask
	enum <anonymous> gestaltMenuMgrMoreThanFiveMenusDeepBit
	enum <anonymous> gestaltMenuMgrMoreThanFiveMenusDeepMask
	enum <anonymous> gestaltMenuMgrMultipleItemsWithCommandIDBit
	enum <anonymous> gestaltMenuMgrMultipleItemsWithCommandIDMask
	enum <anonymous> gestaltMenuMgrPresent
	enum <anonymous> gestaltMenuMgrPresentBit
	enum <anonymous> gestaltMenuMgrPresentMask
	enum <anonymous> gestaltMenuMgrRetainsIconRefBit
	enum <anonymous> gestaltMenuMgrRetainsIconRefMask
	enum <anonymous> gestaltMenuMgrSendsMenuBoundsToDefProcBit
	enum <anonymous> gestaltMenuMgrSendsMenuBoundsToDefProcMask
	enum <anonymous> gestaltMessageMgrVersion
	enum <anonymous> gestaltMiscAttr
	enum <anonymous> gestaltMixedModeAttr
	enum <anonymous> gestaltMixedModeCFM68K
	enum <anonymous> gestaltMixedModeCFM68KHasState
	enum <anonymous> gestaltMixedModeCFM68KHasTrap
	enum <anonymous> gestaltMixedModePowerPC
	enum <anonymous> gestaltMixedModeVersion
	enum <anonymous> gestaltMMUType
	enum <anonymous> gestaltMPCallableAPIsAttr
	enum <anonymous> gestaltMPDeviceManager
	enum <anonymous> gestaltMPFileManager
	enum <anonymous> gestaltMPTrapCalls
	enum <anonymous> gestaltMultiChannels
	enum <anonymous> gestaltMultipleUsersState
	enum <anonymous> gestaltMustUseFCBAccessors
	enum <anonymous> gestaltNameRegistryVersion
	enum <anonymous> gestaltNativeCPUfamily
	enum <anonymous> gestaltNativeCPUtype
	enum <anonymous> gestaltNativeProcessMgrBit
	enum <anonymous> gestaltNativeTimeMgr
	enum <anonymous> gestaltNativeType1FontSupport
	enum <anonymous> gestaltNewHandleReturnsZeroedMemoryBit
	enum <anonymous> gestaltNewPtrReturnsZeroedMemoryBit
	enum <anonymous> gestaltNoFPU
	enum <anonymous> gestaltNoMMU
	enum <anonymous> gestaltNotificationMgrAttr
	enum <anonymous> gestaltNotificationPresent
	enum <anonymous> gestaltNuBusConnectors
	enum <anonymous> gestaltNuBusPresent
	enum <anonymous> gestaltNuBusSlotCount
	enum <anonymous> gestaltOCESFServerAvailable
	enum <anonymous> gestaltOCETB
	enum <anonymous> gestaltOCETBAvailable
	enum <anonymous> gestaltOCETBNativeGlueAvailable
	enum <anonymous> gestaltOCETBPresent
	enum <anonymous> gestaltOCEToolboxAttr
	enum <anonymous> gestaltOCEToolboxVersion
	enum <anonymous> gestaltOFA2available
	enum <anonymous> gestaltOpenFirmwareInfo
	enum <anonymous> gestaltOpenTpt
	enum <anonymous> gestaltOpenTptAppleTalkLoadedBit
	enum <anonymous> gestaltOpenTptAppleTalkLoadedMask
	enum <anonymous> gestaltOpenTptAppleTalkPresentBit
	enum <anonymous> gestaltOpenTptAppleTalkPresentMask
	enum <anonymous> gestaltOpenTptARAPPresent
	enum <anonymous> gestaltOpenTptIPXSPXLoadedBit
	enum <anonymous> gestaltOpenTptIPXSPXLoadedMask
	enum <anonymous> gestaltOpenTptIPXSPXPresentBit
	enum <anonymous> gestaltOpenTptIPXSPXPresentMask
	enum <anonymous> gestaltOpenTptLoadedBit
	enum <anonymous> gestaltOpenTptLoadedMask
	enum <anonymous> gestaltOpenTptNetworkSetup
	enum <anonymous> gestaltOpenTptNetworkSetupLegacyExport
	enum <anonymous> gestaltOpenTptNetworkSetupLegacyImport
	enum <anonymous> gestaltOpenTptNetworkSetupSupportsMultihoming
	enum <anonymous> gestaltOpenTptNetworkSetupVersion
	enum <anonymous> gestaltOpenTptPPPPresent
	enum <anonymous> gestaltOpenTptPresentBit
	enum <anonymous> gestaltOpenTptPresentMask
	enum <anonymous> gestaltOpenTptRemoteAccess
	enum <anonymous> gestaltOpenTptRemoteAccessClientOnly
	enum <anonymous> gestaltOpenTptRemoteAccessLoaded
	enum <anonymous> gestaltOpenTptRemoteAccessMPServer
	enum <anonymous> gestaltOpenTptRemoteAccessPresent
	enum <anonymous> gestaltOpenTptRemoteAccessPServer
	enum <anonymous> gestaltOpenTptRemoteAccessVersion
	enum <anonymous> gestaltOpenTptTCPLoadedBit
	enum <anonymous> gestaltOpenTptTCPLoadedMask
	enum <anonymous> gestaltOpenTptTCPPresentBit
	enum <anonymous> gestaltOpenTptTCPPresentMask
	enum <anonymous> gestaltOpenTptVersions
	enum <anonymous> gestaltOriginalATSUVersion
	enum <anonymous> gestaltOriginalQD
	enum <anonymous> gestaltOriginalQDText
	enum <anonymous> gestaltOSAttr
	enum <anonymous> gestaltOSLCompliantFinder
	enum <anonymous> gestaltOSLInSystem
	enum <anonymous> gestaltOSTable
	enum <anonymous> gestaltOSXFBCCurrentVersion
	enum <anonymous> gestaltOutlineFonts
	enum <anonymous> gestaltParityAttr
	enum <anonymous> gestaltParityEnabled
	enum <anonymous> gestaltPartialRsrcs
	enum <anonymous> gestaltPCCard
	enum <anonymous> gestaltPCCardFamilyPresent
	enum <anonymous> gestaltPCCardHasPowerControl
	enum <anonymous> gestaltPCCardSupportsCardBus
	enum <anonymous> gestaltPCXAttr
	enum <anonymous> gestaltPCXHas8and16BitFAT
	enum <anonymous> gestaltPCXHasProDOS
	enum <anonymous> gestaltPCXNewUI
	enum <anonymous> gestaltPCXUseICMapping
	enum <anonymous> gestaltPerforma250
	enum <anonymous> gestaltPerforma450
	enum <anonymous> gestaltPerforma46x
	enum <anonymous> gestaltPerforma47x
	enum <anonymous> gestaltPerforma5300
	enum <anonymous> gestaltPerforma550
	enum <anonymous> gestaltPerforma580
	enum <anonymous> gestaltPerforma600
	enum <anonymous> gestaltPerforma6300
	enum <anonymous> gestaltPerforma6360
	enum <anonymous> gestaltPerforma6400
	enum <anonymous> gestaltPhysicalRAMSize
	enum <anonymous> gestaltPhysicalRAMSizeInMegabytes
	enum <anonymous> gestaltPlayAndRecord
	enum <anonymous> gestaltPMgrCPUIdle
	enum <anonymous> gestaltPMgrDispatchExists
	enum <anonymous> gestaltPMgrExists
	enum <anonymous> gestaltPMgrSCC
	enum <anonymous> gestaltPMgrSound
	enum <anonymous> gestaltPMgrSupportsAVPowerStateAtSleepWake
	enum <anonymous> gestaltPopupAttr
	enum <anonymous> gestaltPopupPresent
	enum <anonymous> gestaltPortable
	enum <anonymous> gestaltPortable2001ANSIKbd
	enum <anonymous> gestaltPortable2001ISOKbd
	enum <anonymous> gestaltPortable2001JISKbd
	enum <anonymous> gestaltPortableSlotPresent
	enum <anonymous> gestaltPortableUSBANSIKbd
	enum <anonymous> gestaltPortableUSBISOKbd
	enum <anonymous> gestaltPortableUSBJISKbd
	enum <anonymous> gestaltPortADisabled
	enum <anonymous> gestaltPortBDisabled
	enum <anonymous> gestaltPowerBook100
	enum <anonymous> gestaltPowerBook140
	enum <anonymous> gestaltPowerBook1400
	enum <anonymous> gestaltPowerBook145
	enum <anonymous> gestaltPowerBook150
	enum <anonymous> gestaltPowerBook160
	enum <anonymous> gestaltPowerBook165
	enum <anonymous> gestaltPowerBook165c
	enum <anonymous> gestaltPowerBook170
	enum <anonymous> gestaltPowerBook180
	enum <anonymous> gestaltPowerBook180c
	enum <anonymous> gestaltPowerBook190
	enum <anonymous> gestaltPowerBook2400
	enum <anonymous> gestaltPowerBook3400
	enum <anonymous> gestaltPowerBook500PPCUpgrade
	enum <anonymous> gestaltPowerBook520
	enum <anonymous> gestaltPowerBook520c
	enum <anonymous> gestaltPowerBook5300
	enum <anonymous> gestaltPowerBook540
	enum <anonymous> gestaltPowerBook540c
	enum <anonymous> gestaltPowerBookDuo210
	enum <anonymous> gestaltPowerBookDuo230
	enum <anonymous> gestaltPowerBookDuo2300
	enum <anonymous> gestaltPowerBookDuo250
	enum <anonymous> gestaltPowerBookDuo270c
	enum <anonymous> gestaltPowerBookDuo280
	enum <anonymous> gestaltPowerBookDuo280c
	enum <anonymous> gestaltPowerBookG3
	enum <anonymous> gestaltPowerBookG3Series
	enum <anonymous> gestaltPowerBookG3Series2
	enum <anonymous> gestaltPowerMac4400
	enum <anonymous> gestaltPowerMac4400_160
	enum <anonymous> gestaltPowerMac5200
	enum <anonymous> gestaltPowerMac5260
	enum <anonymous> gestaltPowerMac5400
	enum <anonymous> gestaltPowerMac5500
	enum <anonymous> gestaltPowerMac6100_60
	enum <anonymous> gestaltPowerMac6100_66
	enum <anonymous> gestaltPowerMac6200
	enum <anonymous> gestaltPowerMac6400
	enum <anonymous> gestaltPowerMac6500
	enum <anonymous> gestaltPowerMac7100_66
	enum <anonymous> gestaltPowerMac7100_80
	enum <anonymous> gestaltPowerMac7200
	enum <anonymous> gestaltPowerMac7300
	enum <anonymous> gestaltPowerMac7500
	enum <anonymous> gestaltPowerMac7600
	enum <anonymous> gestaltPowerMac8100_100
	enum <anonymous> gestaltPowerMac8100_110
	enum <anonymous> gestaltPowerMac8100_120
	enum <anonymous> gestaltPowerMac8100_80
	enum <anonymous> gestaltPowerMac8500
	enum <anonymous> gestaltPowerMac8600
	enum <anonymous> gestaltPowerMac9500
	enum <anonymous> gestaltPowerMac9600
	enum <anonymous> gestaltPowerMacCentris610
	enum <anonymous> gestaltPowerMacCentris650
	enum <anonymous> gestaltPowerMacG3
	enum <anonymous> gestaltPowerMacLC475
	enum <anonymous> gestaltPowerMacLC575
	enum <anonymous> gestaltPowerMacLC630
	enum <anonymous> gestaltPowerMacNewWorld
	enum <anonymous> gestaltPowerMacPerforma47x
	enum <anonymous> gestaltPowerMacPerforma57x
	enum <anonymous> gestaltPowerMacPerforma63x
	enum <anonymous> gestaltPowerMacQuadra610
	enum <anonymous> gestaltPowerMacQuadra630
	enum <anonymous> gestaltPowerMacQuadra650
	enum <anonymous> gestaltPowerMacQuadra700
	enum <anonymous> gestaltPowerMacQuadra800
	enum <anonymous> gestaltPowerMacQuadra900
	enum <anonymous> gestaltPowerMacQuadra950
	enum <anonymous> gestaltPowerMgrAttr
	enum <anonymous> gestaltPowerMgrVers
	enum <anonymous> gestaltPowerPC
	enum <anonymous> gestaltPowerPCASArchitecture
	enum <anonymous> gestaltPowerPCAware
	enum <anonymous> gestaltPowerPCHas64BitSupport
	enum <anonymous> gestaltPowerPCHasDataStreams
	enum <anonymous> gestaltPowerPCHasDCBAInstruction
	enum <anonymous> gestaltPowerPCHasDCBTStreams
	enum <anonymous> gestaltPowerPCHasGraphicsInstructions
	enum <anonymous> gestaltPowerPCHasSquareRootInstructions
	enum <anonymous> gestaltPowerPCHasSTFIWXInstruction
	enum <anonymous> gestaltPowerPCHasVectorInstructions
	enum <anonymous> gestaltPowerPCIgnoresDCBST
	enum <anonymous> gestaltPowerPCProcessorFeatures
	enum <anonymous> gestaltPPCDragLibPresent
	enum <anonymous> gestaltPPCQuickTimeLibPresent
	enum <anonymous> gestaltPPCSupportsIncoming
	enum <anonymous> gestaltPPCSupportsIncomingAppleTalk
	enum <anonymous> gestaltPPCSupportsIncomingTCP_IP
	enum <anonymous> gestaltPPCSupportsOutGoing
	enum <anonymous> gestaltPPCSupportsOutgoingAppleTalk
	enum <anonymous> gestaltPPCSupportsOutgoingTCP_IP
	enum <anonymous> gestaltPPCSupportsRealTime
	enum <anonymous> gestaltPPCSupportsTCP_IP
	enum <anonymous> gestaltPPCToolboxAttr
	enum <anonymous> gestaltPPCToolboxPresent
	enum <anonymous> gestaltProcClkSpeed
	enum <anonymous> gestaltProcClkSpeedMHz
	enum <anonymous> gestaltProcessorCacheLineSize
	enum <anonymous> gestaltProcessorType
	enum <anonymous> gestaltProF16ANSIKbd
	enum <anonymous> gestaltProF16ISOKbd
	enum <anonymous> gestaltProF16JISKbd
	enum <anonymous> gestaltPrtblADBKbd
	enum <anonymous> gestaltPrtblISOKbd
	enum <anonymous> gestaltPS2Keyboard
	enum <anonymous> gestaltPwrBk99JISKbd
	enum <anonymous> gestaltPwrBkEKDomKbd
	enum <anonymous> gestaltPwrBkEKISOKbd
	enum <anonymous> gestaltPwrBkEKJISKbd
	enum <anonymous> gestaltPwrBkExtADBKbd
	enum <anonymous> gestaltPwrBkExtISOKbd
	enum <anonymous> gestaltPwrBkExtJISKbd
	enum <anonymous> gestaltPwrBkSubDomKbd
	enum <anonymous> gestaltPwrBkSubISOKbd
	enum <anonymous> gestaltPwrBkSubJISKbd
	enum <anonymous> gestaltPwrBookADBKbd
	enum <anonymous> gestaltPwrBookISOADBKbd
	enum <anonymous> gestaltQD3D
	enum <anonymous> gestaltQD3DPresent
	enum <anonymous> gestaltQD3DVersion
	enum <anonymous> gestaltQD3DViewer
	enum <anonymous> gestaltQD3DViewerPresent
	enum <anonymous> gestaltQDHasLongRowBytes
	enum <anonymous> gestaltQDTextFeatures
	enum <anonymous> gestaltQDTextVersion
	enum <anonymous> gestaltQTVRCubicPanosPresent
	enum <anonymous> gestaltQTVRCylinderPanosPresent
	enum <anonymous> gestaltQTVRMgrAttr
	enum <anonymous> gestaltQTVRMgrPresent
	enum <anonymous> gestaltQTVRMgrVers
	enum <anonymous> gestaltQTVRObjMoviesPresent
	enum <anonymous> gestaltQuadra605
	enum <anonymous> gestaltQuadra610
	enum <anonymous> gestaltQuadra630
	enum <anonymous> gestaltQuadra650
	enum <anonymous> gestaltQuadra660AV
	enum <anonymous> gestaltQuadra700
	enum <anonymous> gestaltQuadra800
	enum <anonymous> gestaltQuadra840AV
	enum <anonymous> gestaltQuadra900
	enum <anonymous> gestaltQuadra950
	enum <anonymous> gestaltQuickdrawFeatures
	enum <anonymous> gestaltQuickdrawVersion
	enum <anonymous> gestaltQuickTime
	enum <anonymous> gestaltQuickTimeConferencing
	enum <anonymous> gestaltQuickTimeConferencingInfo
	enum <anonymous> gestaltQuickTimeFeatures
	enum <anonymous> gestaltQuickTimeStreamingFeatures
	enum <anonymous> gestaltQuickTimeStreamingVersion
	enum <anonymous> gestaltQuickTimeThreadSafeFeaturesAttr
	enum <anonymous> gestaltQuickTimeThreadSafeGraphicsExport
	enum <anonymous> gestaltQuickTimeThreadSafeGraphicsImport
	enum <anonymous> gestaltQuickTimeThreadSafeICM
	enum <anonymous> gestaltQuickTimeThreadSafeMovieExport
	enum <anonymous> gestaltQuickTimeThreadSafeMovieImport
	enum <anonymous> gestaltQuickTimeThreadSafeMoviePlayback
	enum <anonymous> gestaltQuickTimeThreadSafeMovieToolbox
	enum <anonymous> gestaltQuickTimeVersion
	enum <anonymous> gestaltRBVAddr
	enum <anonymous> gestaltRealTempMemory
	enum <anonymous> gestaltRealtimeMgrAttr
	enum <anonymous> gestaltRealtimeMgrPresent
	enum <anonymous> gestaltResourceMgrAttr
	enum <anonymous> gestaltResourceMgrBugFixesAttrs
	enum <anonymous> gestaltRevisedTimeMgr
	enum <anonymous> gestaltRMFakeAppleMenuItemsRolledIn
	enum <anonymous> gestaltRMForceSysHeapRolledIn
	enum <anonymous> gestaltRMSupportsFSCalls
	enum <anonymous> gestaltRMTypeIndexOrderingReverse
	enum <anonymous> gestaltROMSize
	enum <anonymous> gestaltROMVersion
	enum <anonymous> gestaltSafeOFAttr
	enum <anonymous> gestaltSanityCheckResourceFiles
	enum <anonymous> gestaltSbitFontSupport
	enum <anonymous> gestaltSCCReadAddr
	enum <anonymous> gestaltSCCWriteAddr
	enum <anonymous> gestaltScrapMgrAttr
	enum <anonymous> gestaltScrapMgrTranslationAware
	enum <anonymous> gestaltScreenCaptureDir
	enum <anonymous> gestaltScreenCaptureMain
	enum <anonymous> gestaltScriptCount
	enum <anonymous> gestaltScriptingSupport
	enum <anonymous> gestaltScriptMgrVersion
	enum <anonymous> gestaltScrollingThrottle
	enum <anonymous> gestaltSCSI
	enum <anonymous> gestaltSCSIPollSIH
	enum <anonymous> gestaltSCSISlotBoot
	enum <anonymous> gestaltSDPFindVersion
	enum <anonymous> gestaltSDPPromptVersion
	enum <anonymous> gestaltSDPStandardDirectoryVersion
	enum <anonymous> gestaltSE30SlotPresent
	enum <anonymous> gestaltSerialArbitrationExists
	enum <anonymous> gestaltSerialAttr
	enum <anonymous> gestaltSESlotPresent
	enum <anonymous> gestaltSetDragImageUpdates
	enum <anonymous> gestaltSFServer
	enum <anonymous> gestaltSheetsAreWindowModalBit
	enum <anonymous> gestaltSheetsAreWindowModalMask
	enum <anonymous> gestaltShutdownAttributes
	enum <anonymous> gestaltShutdownHassdOnBootVolUnmount
	enum <anonymous> gestaltSlotAttr
	enum <anonymous> gestaltSlotMgrExists
	enum <anonymous> gestaltSMPMailerVersion
	enum <anonymous> gestaltSMPSPSendLetterVersion
	enum <anonymous> gestaltSndPlayDoubleBuffer
	enum <anonymous> gestaltSoftwareVendorApple
	enum <anonymous> gestaltSoftwareVendorCode
	enum <anonymous> gestaltSoftwareVendorLicensee
	enum <anonymous> gestaltSoundAttr
	enum <anonymous> gestaltSoundIOMgrPresent
	enum <anonymous> gestaltSpecificMatchSupport
	enum <anonymous> gestaltSpeechAttr
	enum <anonymous> gestaltSpeechHasPPCGlue
	enum <anonymous> gestaltSpeechMgrPresent
	enum <anonymous> gestaltSpeechRecognitionAttr
	enum <anonymous> gestaltSpeechRecognitionVersion
	enum <anonymous> gestaltSplitOSAttr
	enum <anonymous> gestaltSplitOSAware
	enum <anonymous> gestaltSplitOSBootDriveIsNetworkVolume
	enum <anonymous> gestaltSplitOSEnablerVolumeIsDifferentFromBootVolume
	enum <anonymous> gestaltSplitOSMachineNameSetToNetworkNameTemp
	enum <anonymous> gestaltSplitOSMachineNameStartupDiskIsNonPersistent
	enum <anonymous> gestaltSquareMenuBar
	enum <anonymous> gestaltStandardFile58
	enum <anonymous> gestaltStandardFileAttr
	enum <anonymous> gestaltStandardFileHasColorIcons
	enum <anonymous> gestaltStandardFileHasDynamicVolumeAllocation
	enum <anonymous> gestaltStandardFileTranslationAware
	enum <anonymous> gestaltStandardFileUseGenericIcons
	enum <anonymous> gestaltStandardTimeMgr
	enum <anonymous> gestaltStdADBKbd
	enum <anonymous> gestaltStdISOADBKbd
	enum <anonymous> gestaltStdNBPAttr
	enum <anonymous> gestaltStdNBPPresent
	enum <anonymous> gestaltStdNBPSupportsAutoPosition
	enum <anonymous> gestaltStereoCapability
	enum <anonymous> gestaltStereoInput
	enum <anonymous> gestaltStereoMixing
	enum <anonymous> gestaltSupportsApplicationURL
	enum <anonymous> gestaltSupportsFSpResourceFileAlreadyOpenBit
	enum <anonymous> gestaltSupportsMirroring
	enum <anonymous> gestaltSysArchitecture
	enum <anonymous> gestaltSysDebuggerSupport
	enum <anonymous> gestaltSystemUpdateVersion
	enum <anonymous> gestaltSystemVersion
	enum <anonymous> gestaltSystemVersionBugFix
	enum <anonymous> gestaltSystemVersionMajor
	enum <anonymous> gestaltSystemVersionMinor
	enum <anonymous> gestaltSysZoneGrowable
	enum <anonymous> gestaltTE1
	enum <anonymous> gestaltTE2
	enum <anonymous> gestaltTE3
	enum <anonymous> gestaltTE4
	enum <anonymous> gestaltTE5
	enum <anonymous> gestaltTE6
	enum <anonymous> gestaltTEAttr
	enum <anonymous> gestaltTEHasGetHiliteRgn
	enum <anonymous> gestaltTEHasWhiteBackground
	enum <anonymous> gestaltTeleMgrAttr
	enum <anonymous> gestaltTeleMgrAutoAnswer
	enum <anonymous> gestaltTeleMgrIndHandset
	enum <anonymous> gestaltTeleMgrNewTELNewSupport
	enum <anonymous> gestaltTeleMgrPowerPCSupport
	enum <anonymous> gestaltTeleMgrPresent
	enum <anonymous> gestaltTeleMgrSilenceDetect
	enum <anonymous> gestaltTeleMgrSoundStreams
	enum <anonymous> gestaltTelephoneSpeechRecognition
	enum <anonymous> gestaltTempMemSupport
	enum <anonymous> gestaltTempMemTracked
	enum <anonymous> gestaltTermMgrAttr
	enum <anonymous> gestaltTermMgrErrorString
	enum <anonymous> gestaltTermMgrPresent
	enum <anonymous> gestaltTESupportsInlineInput
	enum <anonymous> gestaltTESupportsTextObjects
	enum <anonymous> gestaltTextEditVersion
	enum <anonymous> gestaltThirdPartyANSIKbd
	enum <anonymous> gestaltThirdPartyISOKbd
	enum <anonymous> gestaltThirdPartyJISKbd
	enum <anonymous> gestaltThreadMgrAttr
	enum <anonymous> gestaltThreadMgrPresent
	enum <anonymous> gestaltThreadsLibraryPresent
	enum <anonymous> gestaltTimeMgrVersion
	enum <anonymous> gestaltToolboxTable
	enum <anonymous> gestaltTranslationAttr
	enum <anonymous> gestaltTranslationGetPathAPIAvail
	enum <anonymous> gestaltTranslationMgrExists
	enum <anonymous> gestaltTranslationMgrHintOrder
	enum <anonymous> gestaltTranslationPPCAvail
	enum <anonymous> gestaltTSMDisplayMgrAwareBit
	enum <anonymous> gestaltTSMdoesTSMTEBit
	enum <anonymous> gestaltTSMgr15
	enum <anonymous> gestaltTSMgr20
	enum <anonymous> gestaltTSMgr22
	enum <anonymous> gestaltTSMgr23
	enum <anonymous> gestaltTSMgrAttr
	enum <anonymous> gestaltTSMgrVersion
	enum <anonymous> gestaltTSMTE
	enum <anonymous> gestaltTSMTE1
	enum <anonymous> gestaltTSMTE15
	enum <anonymous> gestaltTSMTE152
	enum <anonymous> gestaltTSMTEAttr
	enum <anonymous> gestaltTSMTEPresent
	enum <anonymous> gestaltTSMTEVersion
	enum <anonymous> gestaltTVAttr
	enum <anonymous> gestaltUDFSupport
	enum <anonymous> gestaltUndefSelectorErr
	enum <anonymous> gestaltUnknownErr
	enum <anonymous> gestaltUnknownThirdPartyKbd
	enum <anonymous> gestaltUSBAndyANSIKbd
	enum <anonymous> gestaltUSBAndyISOKbd
	enum <anonymous> gestaltUSBAndyJISKbd
	enum <anonymous> gestaltUSBAttr
	enum <anonymous> gestaltUSBCosmoANSIKbd
	enum <anonymous> gestaltUSBCosmoISOKbd
	enum <anonymous> gestaltUSBCosmoJISKbd
	enum <anonymous> gestaltUSBHasIsoch
	enum <anonymous> gestaltUSBPresent
	enum <anonymous> gestaltUSBPrinterSharingAttr
	enum <anonymous> gestaltUSBPrinterSharingAttrBooted
	enum <anonymous> gestaltUSBPrinterSharingAttrMask
	enum <anonymous> gestaltUSBPrinterSharingAttrRunning
	enum <anonymous> gestaltUSBPrinterSharingVersion
	enum <anonymous> gestaltUSBPrinterSharingVersionMask
	enum <anonymous> gestaltUSBProF16ANSIKbd
	enum <anonymous> gestaltUSBProF16ISOKbd
	enum <anonymous> gestaltUSBProF16JISKbd
	enum <anonymous> gestaltUSBVersion
	enum <anonymous> gestaltUserVisibleMachineName
	enum <anonymous> gestaltValueImplementedVers
	enum <anonymous> gestaltVersion
	enum <anonymous> gestaltVIA1Addr
	enum <anonymous> gestaltVIA2Addr
	enum <anonymous> gestaltVMAttr
	enum <anonymous> gestaltVMBackingStoreFileRefNum
	enum <anonymous> gestaltVMFilemappingOn
	enum <anonymous> gestaltVMHasLockMemoryForOutput
	enum <anonymous> gestaltVMHasPagingControl
	enum <anonymous> gestaltVMInfoNoneType
	enum <anonymous> gestaltVMInfoSimpleType
	enum <anonymous> gestaltVMInfoSizeStorageType
	enum <anonymous> gestaltVMInfoSizeType
	enum <anonymous> gestaltVMInfoType
	enum <anonymous> gestaltVMPresent
	enum <anonymous> gestaltVMZerosPagesBit
	enum <anonymous> gestaltWindowLiveResizeBit
	enum <anonymous> gestaltWindowLiveResizeMask
	enum <anonymous> gestaltWindowMgrAttr
	enum <anonymous> gestaltWindowMgrPresent
	enum <anonymous> gestaltWindowMgrPresentBit
	enum <anonymous> gestaltWindowMgrPresentMask
	enum <anonymous> gestaltWindowMinimizeToDockBit
	enum <anonymous> gestaltWindowMinimizeToDockMask
	enum <anonymous> gestaltWorldScriptIIAttr
	enum <anonymous> gestaltWorldScriptIIVersion
	enum <anonymous> gestaltWSIICanPrintWithoutPrGeneralBit
	enum <anonymous> gestaltWSIISupport
	enum <anonymous> gestaltX86AdditionalFeatures
	enum <anonymous> gestaltX86Features
	enum <anonymous> gestaltX86HasAPIC
	enum <anonymous> gestaltX86HasCID
	enum <anonymous> gestaltX86HasCLFSH
	enum <anonymous> gestaltX86HasCMOV
	enum <anonymous> gestaltX86HasCX16
	enum <anonymous> gestaltX86HasCX8
	enum <anonymous> gestaltX86HasDE
	enum <anonymous> gestaltX86HasDS
	enum <anonymous> gestaltX86HasDSCPL
	enum <anonymous> gestaltX86HasEST
	enum <anonymous> gestaltX86HasFPU
	enum <anonymous> gestaltX86HasFXSR
	enum <anonymous> gestaltX86HasHTT
	enum <anonymous> gestaltX86HasMCA
	enum <anonymous> gestaltX86HasMCE
	enum <anonymous> gestaltX86HasMMX
	enum <anonymous> gestaltX86HasMONITOR
	enum <anonymous> gestaltX86HasMSR
	enum <anonymous> gestaltX86HasMTRR
	enum <anonymous> gestaltX86HasPAE
	enum <anonymous> gestaltX86HasPAT
	enum <anonymous> gestaltX86HasPGE
	enum <anonymous> gestaltX86HasPSE
	enum <anonymous> gestaltX86HasPSE36
	enum <anonymous> gestaltX86HasPSN
	enum <anonymous> gestaltX86HasSEP
	enum <anonymous> gestaltX86HasSMX
	enum <anonymous> gestaltX86HasSS
	enum <anonymous> gestaltX86HasSSE
	enum <anonymous> gestaltX86HasSSE2
	enum <anonymous> gestaltX86HasSSE3
	enum <anonymous> gestaltX86HasSupplementalSSE3
	enum <anonymous> gestaltX86HasTM
	enum <anonymous> gestaltX86HasTM2
	enum <anonymous> gestaltX86HasTSC
	enum <anonymous> gestaltX86HasVME
	enum <anonymous> gestaltX86HasVMX
	enum <anonymous> gestaltX86HasxTPR
	enum <anonymous> gestaltX86ResACPI
	enum <anonymous> gestaltX86Serviced20
	int getdate_err
	enum <anonymous> gfpErr
	const CSSM_GUID gGuidAppleCSP
	const CSSM_GUID gGuidAppleCSPDL
	const CSSM_GUID gGuidAppleDotMacDL
	const CSSM_GUID gGuidAppleDotMacTP
	const CSSM_GUID gGuidAppleFileDL
	const CSSM_GUID gGuidAppleLDAPDL
	const CSSM_GUID gGuidAppleSdCSPDL
	const CSSM_GUID gGuidAppleX509CL
	const CSSM_GUID gGuidAppleX509TP
	const CSSM_GUID gGuidCssm
	__CE_GeneralNameType GNT_DirectoryName
	__CE_GeneralNameType GNT_DNSName
	__CE_GeneralNameType GNT_EdiPartyName
	__CE_GeneralNameType GNT_IPAddress
	__CE_GeneralNameType GNT_OtherName
	__CE_GeneralNameType GNT_RegisteredID
	__CE_GeneralNameType GNT_RFC822Name
	__CE_GeneralNameType GNT_URI
	__CE_GeneralNameType GNT_X400Address
	enum <anonymous> grabTimeComplete
	enum <anonymous> graveUprE
	enum <anonymous> graveUprI
	enum <anonymous> graveUprO
	enum <anonymous> graveUprU
	enum <anonymous> GREATERTHAN
	enum <anonymous> guestNotAllowedErr
	enum <anonymous> gWorldsNotSameDepthAndSizeErr
	enum <anonymous> hachek
	enum <anonymous> handlerNotFoundErr
	enum <anonymous> hardwareConfigErr
	enum <anonymous> HDActivity
	enum <anonymous> hitDev
	enum <anonymous> hmBalloonAborted
	enum <anonymous> hmCloseViewActive
	enum <anonymous> hMenuFindErr
	enum <anonymous> hmHelpDisabled
	enum <anonymous> hmHelpManagerNotInited
	enum <anonymous> hmNoBalloonUp
	enum <anonymous> hmOperationUnsupported
	enum <anonymous> hmSameAsLastBalloon
	enum <anonymous> hmSkippedBalloon
	enum <anonymous> hmUnknownHelpType
	enum <anonymous> hmWrongVersion
	enum <anonymous> hourField
	enum <anonymous> hourMask
	enum <anonymous> hrHTMLRenderingLibNotInstalledErr
	enum <anonymous> hrLeadingZ
	enum <anonymous> hrMiscellaneousExceptionErr
	enum <anonymous> hrUnableToResizeHandleErr
	enum <anonymous> hrURLNotHandledErr
	enum <anonymous> hwParamErr
	enum <anonymous> icConfigInappropriateErr
	enum <anonymous> icConfigNotFoundErr
	enum <anonymous> icInternalErr
	enum <anonymous> icNoMoreWritersErr
	enum <anonymous> icNoPerm
	enum <anonymous> icNothingToOverrideErr
	enum <anonymous> icNoURLErr
	enum <anonymous> icPermErr
	enum <anonymous> icPrefDataErr
	enum <anonymous> icPrefNotFoundErr
	enum <anonymous> icProfileNotFoundErr
	enum <anonymous> icReadOnlyPerm
	enum <anonymous> icReadWritePerm
	enum <anonymous> icTooManyProfilesErr
	enum <anonymous> icTruncatedErr
	enum <anonymous> IdleActivity
	enum <anonymous> iIOAbort
	enum <anonymous> iIOAbortErr
	enum <anonymous> illegalChannelOSErr
	enum <anonymous> illegalControllerOSErr
	enum <anonymous> illegalInstrumentOSErr
	enum <anonymous> illegalKnobOSErr
	enum <anonymous> illegalKnobValueOSErr
	enum <anonymous> illegalNoteChannelOSErr
	enum <anonymous> illegalPartOSErr
	enum <anonymous> illegalScrapFlavorFlagsErr
	enum <anonymous> illegalScrapFlavorSizeErr
	enum <anonymous> illegalScrapFlavorTypeErr
	enum <anonymous> illegalVoiceAllocationOSErr
	enum <anonymous> iMemFullErr
	enum <anonymous> incompatibleVoice
	enum <anonymous> initDev
	enum <anonymous> initIWMErr
	enum <anonymous> inputOutOfBounds
	enum <anonymous> InstrumentID
	enum <anonymous> insufficientStackErr
	enum <anonymous> intArabic
	enum <anonymous> internalComponentErr
	enum <anonymous> internalQuickTimeError
	enum <anonymous> internalScrapErr
	enum <anonymous> interruptsMaskedErr
	enum <anonymous> intEuropean
	enum <anonymous> intJapanese
	enum <anonymous> intlCurrency
	enum <anonymous> intOutputMask
	enum <anonymous> intRoman
	enum <anonymous> intWestern
	enum <anonymous> invalidAtomContainerErr
	enum <anonymous> invalidAtomErr
	enum <anonymous> invalidAtomTypeErr
	enum <anonymous> invalidChunkCache
	enum <anonymous> invalidChunkNum
	enum <anonymous> invalidComponentID
	enum <anonymous> invalidDataRef
	enum <anonymous> invalidDataRefContainer
	enum <anonymous> invalidDuration
	enum <anonymous> invalidEditState
	enum <anonymous> invalidFolderTypeErr
	enum <anonymous> invalidHandler
	enum <anonymous> invalidHotSpotIDErr
	enum <anonymous> invalidIconRefErr
	enum <anonymous> invalidImageIndexErr
	enum <anonymous> invalidIndexErr
	enum <anonymous> invalidMedia
	enum <anonymous> invalidMovie
	enum <anonymous> invalidNodeFormatErr
	enum <anonymous> invalidNodeIDErr
	enum <anonymous> invalidPickerType
	enum <anonymous> invalidRect
	enum <anonymous> invalidSampleDescIndex
	enum <anonymous> invalidSampleDescription
	enum <anonymous> invalidSampleNum
	enum <anonymous> invalidSampleTable
	enum <anonymous> invalidSpriteIDErr
	enum <anonymous> invalidSpriteIndexErr
	enum <anonymous> invalidSpritePropertyErr
	enum <anonymous> invalidSpriteWorldPropertyErr
	enum <anonymous> invalidTime
	enum <anonymous> invalidTrack
	enum <anonymous> invalidTranslationPathErr
	enum <anonymous> invalidViewStateErr
	enum <anonymous> ioDirFlg
	enum <anonymous> ioDirMask
	enum <anonymous> ioErr
	enum <anonymous> ioQType
	enum <anonymous> italic
	enum <anonymous> itlcDisableKeyScriptSync
	enum <anonymous> itlcDisableKeyScriptSyncMask
	enum <anonymous> itlcDualCaret
	enum <anonymous> itlcShowIcon
	enum <anonymous> itlcSysDirection
	enum <anonymous> iuCurrentCurLang
	enum <anonymous> iuCurrentDefLang
	enum <anonymous> iuCurrentScript
	enum <anonymous> iuNumberPartsTable
	enum <anonymous> iuScriptCurLang
	enum <anonymous> iuScriptDefLang
	enum <anonymous> iuSystemCurLang
	enum <anonymous> iuSystemDefLang
	enum <anonymous> iuSystemScript
	enum <anonymous> iuUnTokenTable
	enum <anonymous> iuWhiteSpaceList
	enum <anonymous> iuWordSelectTable
	enum <anonymous> iuWordWrapTable
	enum <anonymous> k16BE555PixelFormat
	enum <anonymous> k16BE565PixelFormat
	enum <anonymous> k16BitCardErr
	enum <anonymous> k16LE5551PixelFormat
	enum <anonymous> k16LE555PixelFormat
	enum <anonymous> k16LE565PixelFormat
	enum <anonymous> k1IndexedGrayPixelFormat
	enum <anonymous> k1MonochromePixelFormat
	enum <anonymous> k24BGRPixelFormat
	enum <anonymous> k24RGBPixelFormat
	enum <anonymous> k2IndexedGrayPixelFormat
	enum <anonymous> k2IndexedPixelFormat
	enum <anonymous> k2vuyPixelFormat
	enum <anonymous> k32ABGRPixelFormat
	enum <anonymous> k32ARGBPixelFormat
	enum <anonymous> k32BGRAPixelFormat
	enum <anonymous> k32BitHeap
	enum <anonymous> k32RGBAPixelFormat
	enum <anonymous> k4IndexedGrayPixelFormat
	enum <anonymous> k4IndexedPixelFormat
	enum <anonymous> k68kInterruptLevelMask
	enum <anonymous> k8IndexedGrayPixelFormat
	enum <anonymous> k8IndexedPixelFormat
	enum <anonymous> kAbbrevSquaredLigaturesOffSelector
	enum <anonymous> kAbbrevSquaredLigaturesOnSelector
	enum <anonymous> kAccessException
	enum <anonymous> kAccountKCItemAttr
	enum <anonymous> kAddKCEvent
	enum <anonymous> kAddKCEventMask
	enum <anonymous> kAddressKCItemAttr
	enum <anonymous> kadministratorUser
	enum <anonymous> kAEAbout
	enum <anonymous> kAEActivate
	enum <anonymous> kAEAfter
	enum <anonymous> kAEAliasSelection
	enum <anonymous> kAEAll
	enum <anonymous> kAEAllCaps
	enum <anonymous> kAEAlwaysInteract
	enum <anonymous> kAEAND
	enum <anonymous> kAEAnswer
	enum <anonymous> kAEAny
	enum <anonymous> kAEApplicationClass
	enum <anonymous> kAEApplicationDied
	enum <anonymous> kAEArrowAtEnd
	enum <anonymous> kAEArrowAtStart
	enum <anonymous> kAEArrowBothEnds
	enum <anonymous> kAEAsk
	enum <anonymous> kAEAutoDown
	enum <anonymous> kAEBefore
	enum <anonymous> kAEBeginning
	enum <anonymous> kAEBeginsWith
	enum <anonymous> kAEBeginTransaction
	enum <anonymous> kAEBold
	enum <anonymous> kAECanInteract
	enum <anonymous> kAECanSwitchLayer
	enum <anonymous> kAECaseSensEquals
	enum <anonymous> kAECentered
	enum <anonymous> kAEChangeView
	enum <anonymous> kAEClone
	enum <anonymous> kAEClose
	enum <anonymous> kAECommandClass
	enum <anonymous> kAECondensed
	enum <anonymous> kAEContains
	enum <anonymous> kAECopy
	enum <anonymous> kAECoreSuite
	enum <anonymous> kAECountElements
	enum <anonymous> kAECreateElement
	enum <anonymous> kAECreatePublisher
	enum <anonymous> kAECut
	enum <anonymous> kAEDataArray
	enum <anonymous> kAEDeactivate
	enum <anonymous> kAEDebugPOSTHeader
	enum <anonymous> kAEDebugReplyHeader
	enum <anonymous> kAEDebugXMLDebugAll
	enum <anonymous> kAEDebugXMLRequest
	enum <anonymous> kAEDebugXMLResponse
	enum <anonymous> kAEDefaultTimeout
	enum <anonymous> kAEDelete
	enum <anonymous> kAEDescArray
	enum <anonymous> kAEDescListFactorNone
	enum <anonymous> kAEDescListFactorType
	enum <anonymous> kAEDescListFactorTypeAndSize
	enum <anonymous> kAEDirectCall
	enum <anonymous> kAEDiskEvent
	enum <anonymous> kAEDoNotAutomaticallyAddAnnotationsToEvent
	enum <anonymous> kAEDontExecute
	enum <anonymous> kAEDontReconnect
	enum <anonymous> kAEDontRecord
	enum <anonymous> kAEDoObjectsExist
	enum <anonymous> kAEDoScript
	enum <anonymous> kAEDown
	enum <anonymous> kAEDrag
	enum <anonymous> kAEDuplicateSelection
	enum <anonymous> kAEEditGraphic
	enum <anonymous> kAEEmptyTrash
	enum <anonymous> kAEEnd
	enum <anonymous> kAEEndsWith
	enum <anonymous> kAEEndTransaction
	enum <anonymous> kAEEquals
	enum <anonymous> kAEExpanded
	enum <anonymous> kAEFast
	enum <anonymous> kAEFetchURL
	enum <anonymous> kAEFinderEvents
	enum <anonymous> kAEFirst
	enum <anonymous> kAEFormulaProtect
	enum <anonymous> kAEFullyJustified
	enum <anonymous> kAEGetClassInfo
	enum <anonymous> kAEGetData
	enum <anonymous> kAEGetDataSize
	enum <anonymous> kAEGetEventInfo
	enum <anonymous> kAEGetInfoSelection
	enum <anonymous> kAEGetPrivilegeSelection
	enum <anonymous> kAEGetSuiteInfo
	enum <anonymous> kAEGetURL
	enum <anonymous> kAEGreaterThan
	enum <anonymous> kAEGreaterThanEquals
	enum <anonymous> kAEGrow
	enum <anonymous> kAEHandleArray
	enum <anonymous> kAEHandleSimpleRanges
	enum <anonymous> kAEHidden
	enum <anonymous> kAEHighLevel
	enum <anonymous> kAEHighPriority
	enum <anonymous> kAEHiQuality
	enum <anonymous> kAEHTTPProxyHostAttr
	enum <anonymous> kAEHTTPProxyPortAttr
	enum <anonymous> kAEIDoMarking
	enum <anonymous> kAEIDoMinimum
	enum <anonymous> kAEIDoWhose
	enum <anonymous> kAEImageGraphic
	enum <anonymous> kAEInfo
	enum <anonymous> kAEInternetSuite
	enum <anonymous> kAEISAction
	enum <anonymous> kAEISActionPath
	enum <anonymous> kAEISClientAddress
	enum <anonymous> kAEISClientIP
	enum <anonymous> kAEISContentType
	enum <anonymous> kAEISFromUser
	enum <anonymous> kAEISFullRequest
	enum <anonymous> kAEISGetURL
	enum <anonymous> KAEISHandleCGI
	enum <anonymous> kAEISHTTPSearchArgs
	enum <anonymous> kAEISMethod
	enum <anonymous> kAEISPassword
	enum <anonymous> kAEISPostArgs
	enum <anonymous> kAEISReferrer
	enum <anonymous> kAEISScriptName
	enum <anonymous> kAEISServerName
	enum <anonymous> kAEISServerPort
	enum <anonymous> kAEIsUniform
	enum <anonymous> kAEISUserAgent
	enum <anonymous> kAEISUserName
	enum <anonymous> kAEISWebStarSuite
	enum <anonymous> kAEItalic
	enum <anonymous> kAEKeyClass
	enum <anonymous> kAEKeyDescArray
	enum <anonymous> kAEKeyDown
	enum <anonymous> kAELast
	enum <anonymous> kAELeftJustified
	enum <anonymous> kAELessThan
	enum <anonymous> kAELessThanEquals
	enum <anonymous> kAELocalProcess
	enum <anonymous> kAELogOut
	enum <anonymous> kAELowercase
	enum <anonymous> kAEMain
	enum <anonymous> kAEMakeObjectsVisible
	enum <anonymous> kAEMenuClass
	enum <anonymous> kAEMenuSelect
	enum <anonymous> kAEMiddle
	enum <anonymous> kAEMiscStandards
	enum <anonymous> kAEModifiable
	enum <anonymous> kAEMouseClass
	enum <anonymous> kAEMouseDown
	enum <anonymous> kAEMouseDownInBack
	enum <anonymous> kAEMove
	enum <anonymous> kAEMoved
	enum <anonymous> kAENavigationKey
	enum <anonymous> kAENeverInteract
	enum <anonymous> kAENext
	enum <anonymous> kAENo
	enum <anonymous> kAENoArrow
	enum <anonymous> kAENonmodifiable
	enum <anonymous> kAENoReply
	enum <anonymous> kAENormalPriority
	enum <anonymous> kAENOT
	enum <anonymous> kAENotifyRecording
	enum <anonymous> kAENotifyStartRecording
	enum <anonymous> kAENotifyStopRecording
	enum <anonymous> kAENullEvent
	enum <anonymous> kAEOpen
	enum <anonymous> kAEOpenApplication
	enum <anonymous> kAEOpenContents
	enum <anonymous> kAEOpenDocuments
	enum <anonymous> kAEOpenSelection
	enum <anonymous> kAEOR
	enum <anonymous> kAEOSAXSizeResource
	enum <anonymous> kAEOutline
	enum <anonymous> kAEPackedArray
	enum <anonymous> kAEPageSetup
	enum <anonymous> kAEPassSubDescs
	enum <anonymous> kAEPaste
	enum <anonymous> kAEPlain
	enum <anonymous> kAEPrevious
	enum <anonymous> kAEPrint
	enum <anonymous> kAEPrintDocuments
	enum <anonymous> kAEPrintSelection
	enum <anonymous> kAEPrintWindow
	enum <anonymous> kAEProcessNonReplyEvents
	enum <anonymous> kAEPromise
	enum <anonymous> kAEPutAwaySelection
	enum <anonymous> kAEQDAddOver
	enum <anonymous> kAEQDAddPin
	enum <anonymous> kAEQDAdMax
	enum <anonymous> kAEQDAdMin
	enum <anonymous> kAEQDBic
	enum <anonymous> kAEQDBlend
	enum <anonymous> kAEQDCopy
	enum <anonymous> kAEQDNotBic
	enum <anonymous> kAEQDNotCopy
	enum <anonymous> kAEQDNotOr
	enum <anonymous> kAEQDNotXor
	enum <anonymous> kAEQDOr
	enum <anonymous> kAEQDSubOver
	enum <anonymous> kAEQDSubPin
	enum <anonymous> kAEQDSupplementalSuite
	enum <anonymous> kAEQDXor
	enum <anonymous> kAEQueueReply
	enum <anonymous> kAEQuickdrawSuite
	enum <anonymous> kAEQuitAll
	enum <anonymous> kAEQuitApplication
	enum <anonymous> kAEQuitPreserveState
	enum <anonymous> kAEQuitReason
	enum <anonymous> kAERawKey
	enum <anonymous> kAEReallyLogOut
	enum <anonymous> kAERedo
	enum <anonymous> kAERegular
	enum <anonymous> kAERemoteProcess
	const CFStringRef kAERemoteProcessNameKey
	const CFStringRef kAERemoteProcessProcessIDKey
	const CFStringRef kAERemoteProcessURLKey
	const CFStringRef kAERemoteProcessUserIDKey
	enum <anonymous> kAEReopenApplication
	enum <anonymous> kAEReplace
	enum <anonymous> kAERequiredSuite
	enum <anonymous> kAEResized
	enum <anonymous> kAEResolveNestedLists
	enum <anonymous> kAERestart
	enum <anonymous> kAEResume
	enum <anonymous> kAERevealSelection
	enum <anonymous> kAERevert
	enum <anonymous> kAERightJustified
	enum <anonymous> kAERPCClass
	enum <anonymous> kAESameProcess
	enum <anonymous> kAESave
	enum <anonymous> kAEScrapEvent
	enum <anonymous> kAEScriptingSizeResource
	enum <anonymous> kAESelect
	enum <anonymous> kAESetData
	enum <anonymous> kAESetPosition
	enum <anonymous> kAEShadow
	enum <anonymous> kAESharedScriptHandler
	enum <anonymous> kAESharing
	enum <anonymous> kAEShowClipboard
	enum <anonymous> kAEShowPreferences
	enum <anonymous> kAEShowRestartDialog
	enum <anonymous> kAEShowShutdownDialog
	enum <anonymous> kAEShutDown
	enum <anonymous> kAESleep
	enum <anonymous> kAESmallCaps
	enum <anonymous> kAESOAPScheme
	enum <anonymous> kAESocks4Protocol
	enum <anonymous> kAESocks5Protocol
	enum <anonymous> kAESocksHostAttr
	enum <anonymous> kAESocksPasswordAttr
	enum <anonymous> kAESocksPortAttr
	enum <anonymous> kAESocksProxyAttr
	enum <anonymous> kAESocksUserAttr
	enum <anonymous> kAESpecialClassProperties
	enum <anonymous> kAEStartRecording
	enum <anonymous> kAEStoppedMoving
	enum <anonymous> kAEStopRecording
	enum <anonymous> kAEStrikethrough
	enum <anonymous> kAESubscript
	enum <anonymous> kAESuperscript
	enum <anonymous> kAESuspend
	enum <anonymous> kAETableSuite
	enum <anonymous> kAETerminologyExtension
	enum <anonymous> kAETextSuite
	enum <anonymous> kAETransactionTerminated
	enum <anonymous> kAEUnderline
	enum <anonymous> kAEUndo
	enum <anonymous> kAEUnknownSource
	enum <anonymous> kAEUp
	enum <anonymous> kAEUpdate
	enum <anonymous> kAEUseHTTPProxyAttr
	enum <anonymous> kAEUseRelativeIterators
	enum <anonymous> kAEUserTerminology
	enum <anonymous> kAEUseSocksAttr
	enum <anonymous> kAEUTApostrophe
	enum <anonymous> kAEUTChangesState
	enum <anonymous> kAEUTDirectParamIsReference
	enum <anonymous> kAEUTEnumerated
	enum <anonymous> kAEUTEnumListIsExclusive
	enum <anonymous> kAEUTEnumsAreTypes
	enum <anonymous> kAEUTFeminine
	enum <anonymous> kAEUTHasReturningParam
	enum <anonymous> kAEUTlistOfItems
	enum <anonymous> kAEUTMasculine
	enum <anonymous> kAEUTNotDirectParamIsTarget
	enum <anonymous> kAEUTOptional
	enum <anonymous> kAEUTParamIsReference
	enum <anonymous> kAEUTParamIsTarget
	enum <anonymous> kAEUTPlural
	enum <anonymous> kAEUTPropertyIsReference
	enum <anonymous> kAEUTReadWrite
	enum <anonymous> kAEUTReplyIsReference
	enum <anonymous> kAEUTTightBindingFunction
	enum <anonymous> kAEVirtualKey
	enum <anonymous> kAEWaitReply
	enum <anonymous> kAEWakeUpEvent
	enum <anonymous> kAEWantReceipt
	enum <anonymous> kAEWholeWordEquals
	enum <anonymous> kAEWindowClass
	enum <anonymous> kAEXMLRPCScheme
	enum <anonymous> kAEYes
	enum <anonymous> kAEZoom
	enum <anonymous> kAEZoomIn
	enum <anonymous> kAEZoomOut
	enum <anonymous> kAFPExtendedFlagsAlternateAddressMask
	enum <anonymous> kAFPServerIcon
	enum <anonymous> kAFPTagLengthDDP
	enum <anonymous> kAFPTagLengthIP
	enum <anonymous> kAFPTagLengthIPPort
	enum <anonymous> kAFPTagTypeDDP
	enum <anonymous> kAFPTagTypeDNS
	enum <anonymous> kAFPTagTypeIP
	enum <anonymous> kAFPTagTypeIPPort
	enum <anonymous> kAlertCautionBadgeIcon
	enum <anonymous> kAlertCautionIcon
	enum <anonymous> kAlertNoteIcon
	enum <anonymous> kAlertStopIcon
	enum <anonymous> kAliasBadgeIcon
	enum <anonymous> kAlignAbsoluteCenter
	enum <anonymous> kAlignBottom
	enum <anonymous> kAlignBottomLeft
	enum <anonymous> kAlignBottomRight
	enum <anonymous> kAlignCenterBottom
	enum <anonymous> kAlignCenterLeft
	enum <anonymous> kAlignCenterRight
	enum <anonymous> kAlignCenterTop
	enum <anonymous> kAlignHorizontalCenter
	enum <anonymous> kAlignLeft
	enum <anonymous> kAlignNone
	enum <anonymous> kAlignRight
	enum <anonymous> kAlignTop
	enum <anonymous> kAlignTopLeft
	enum <anonymous> kAlignTopRight
	enum <anonymous> kAlignVerticalCenter
	enum <anonymous> kAllCapsSelector
	enum <anonymous> kAllLowerCaseSelector
	enum <anonymous> kAllPPDDomains
	enum <anonymous> kAllTypeFeaturesOffSelector
	enum <anonymous> kAllTypeFeaturesOnSelector
	enum <anonymous> kAllTypographicFeaturesType
	enum <anonymous> kALMDeferSwitchErr
	enum <anonymous> kALMDuplicateModuleErr
	enum <anonymous> kALMGroupNotFoundErr
	enum <anonymous> kALMInstallationErr
	enum <anonymous> kALMInternalErr
	enum <anonymous> kALMLocationNotFoundErr
	enum <anonymous> kALMLocationsFolderType
	enum <anonymous> kALMModuleCommunicationErr
	enum <anonymous> kALMModulesFolderType
	enum <anonymous> kALMNoSuchModuleErr
	enum <anonymous> kALMPreferencesFolderType
	enum <anonymous> kALMRebootFlagsLevelErr
	enum <anonymous> kAlreadySavedStateErr
	enum <anonymous> kAlternateHorizKanaOffSelector
	enum <anonymous> kAlternateHorizKanaOnSelector
	enum <anonymous> kAlternateKanaType
	enum <anonymous> kAlternateVertKanaOffSelector
	enum <anonymous> kAlternateVertKanaOnSelector
	enum <anonymous> kAltHalfWidthTextSelector
	enum <anonymous> kAltProportionalTextSelector
	SSLAuthenticate kAlwaysAuthenticate
	enum <anonymous> kAlwaysSendSubject
	enum <anonymous> kAndConnections
	enum <anonymous> kANKRCurrentVersion
	enum <anonymous> kAnnotationType
	enum <anonymous> kAnyAuthType
	enum <anonymous> kAnyComponentFlagsMask
	enum <anonymous> kAnyComponentManufacturer
	enum <anonymous> kAnyComponentSubType
	enum <anonymous> kAnyComponentType
	enum <anonymous> kAnyPort
	enum <anonymous> kAnyProtocol
	enum <anonymous> kAnyTransactionID
	enum <anonymous> kAppearanceFolderIcon
	enum <anonymous> kAppearanceFolderType
	enum <anonymous> kAppleExtrasFolderIcon
	enum <anonymous> kAppleExtrasFolderType
	enum <anonymous> kAppleJapaneseDictionarySignature
	enum <anonymous> kAppleLogoIcon
	enum <anonymous> kAppleManufacturer
	enum <anonymous> kAppleMenuFolderAliasType
	enum <anonymous> kAppleMenuFolderIcon
	enum <anonymous> kAppleMenuFolderIconResource
	enum <anonymous> kAppleMenuFolderType
	enum <anonymous> kAppleMenuIcon
	enum <anonymous> kAppleScriptBadgeIcon
	enum <anonymous> kAppleShareAuthenticationFolderType
	enum <anonymous> kAppleshareAutomountServerAliasesFolderType
	enum <anonymous> kAppleSharePasswordKCItemClass
	enum <anonymous> kAppleShareSupportFolderType
	enum <anonymous> kAppleTalkIcon
	enum <anonymous> kAppleTalkZoneIcon
	enum <anonymous> kApplicationAliasType
	enum <anonymous> kApplicationCPAliasType
	enum <anonymous> kApplicationDAAliasType
	enum <anonymous> kApplicationsFolderIcon
	enum <anonymous> kApplicationsFolderType
	enum <anonymous> kApplicationSupportFolderIcon
	enum <anonymous> kApplicationSupportFolderType
	enum <anonymous> kApplicationThreadID
	enum <anonymous> kAppPackageAliasType
	enum <anonymous> kARMMountVol
	enum <anonymous> kARMMultVols
	enum <anonymous> kARMNoUI
	enum <anonymous> kARMSearch
	enum <anonymous> kARMSearchMore
	enum <anonymous> kARMSearchRelFirst
	enum <anonymous> kARMTryFileIDFirst
	enum <anonymous> kAssistantsFolderIcon
	enum <anonymous> kAssistantsFolderType
	enum <anonymous> kAsteriskToMultiplyOffSelector
	enum <anonymous> kAsteriskToMultiplyOnSelector
	enum <anonymous> kAsyncEjectComplete
	enum <anonymous> kAsyncEjectInProgress
	enum <anonymous> kAsyncMountComplete
	enum <anonymous> kAsyncMountInProgress
	enum <anonymous> kAsyncUnmountComplete
	enum <anonymous> kAsyncUnmountInProgress
	enum <anonymous> kATSBoldQDStretch
	enum <anonymous> kATSCubicCurveType
	enum <anonymous> kATSDeletedGlyphcode
	ATSFontFilterSelector kATSFileReferenceFilterSelector
	enum <anonymous> kATSFlatDataUstlCurrentVersion
	enum <anonymous> kATSFlatDataUstlVersion0
	enum <anonymous> kATSFlatDataUstlVersion1
	enum <anonymous> kATSFlatDataUstlVersion2
	enum <anonymous> kATSFlattenedFontSpecifierRawNameData
	enum <anonymous> kATSFontAutoActivationAsk
	enum <anonymous> kATSFontAutoActivationDefault
	enum <anonymous> kATSFontAutoActivationDisabled
	enum <anonymous> kATSFontAutoActivationEnabled
	enum <anonymous> kATSFontContainerRefUnspecified
	enum <anonymous> kATSFontContextGlobal
	enum <anonymous> kATSFontContextLocal
	enum <anonymous> kATSFontContextUnspecified
	enum <anonymous> kATSFontFamilyRefUnspecified
	enum <anonymous> kATSFontFilterCurrentVersion
	ATSFontFilterSelector kATSFontFilterSelectorFontApplierFunction
	ATSFontFilterSelector kATSFontFilterSelectorFontFamily
	ATSFontFilterSelector kATSFontFilterSelectorFontFamilyApplierFunction
	ATSFontFilterSelector kATSFontFilterSelectorGeneration
	ATSFontFilterSelector kATSFontFilterSelectorUnspecified
	enum <anonymous> kATSFontFormatUnspecified
	ATSFontNotifyAction kATSFontNotifyActionDirectoriesChanged
	ATSFontNotifyAction kATSFontNotifyActionFontsChanged
	ATSFontNotifyOption kATSFontNotifyOptionDefault
	ATSFontNotifyOption kATSFontNotifyOptionReceiveWhileSuspended
	enum <anonymous> kATSFontRefUnspecified
	enum <anonymous> kATSGenerationUnspecified
	enum <anonymous> kATSGlyphInfoAppleReserved
	enum <anonymous> kATSGlyphInfoByteSizeMask
	enum <anonymous> kATSGlyphInfoHasImposedWidth
	enum <anonymous> kATSGlyphInfoIsAttachment
	enum <anonymous> kATSGlyphInfoIsLTHanger
	enum <anonymous> kATSGlyphInfoIsRBHanger
	enum <anonymous> kATSGlyphInfoIsWhiteSpace
	enum <anonymous> kATSGlyphInfoTerminatorGlyph
	enum <anonymous> kATSInvalidFontAccess
	enum <anonymous> kATSInvalidFontContainerAccess
	enum <anonymous> kATSInvalidFontFamilyAccess
	enum <anonymous> kATSInvalidFontTableAccess
	enum <anonymous> kATSInvalidGlyphAccess
	enum <anonymous> kATSItalicQDSkew
	enum <anonymous> kATSIterationCompleted
	enum <anonymous> kATSIterationScopeModified
	enum <anonymous> kATSLineAppleReserved
	enum <anonymous> kATSLineApplyAntiAliasing
	enum <anonymous> kATSLineBreakToNearestCharacter
	enum <anonymous> kATSLineDisableAllBaselineAdjustments
	enum <anonymous> kATSLineDisableAllGlyphMorphing
	enum <anonymous> kATSLineDisableAllJustification
	enum <anonymous> kATSLineDisableAllKerningAdjustments
	enum <anonymous> kATSLineDisableAllLayoutOperations
	enum <anonymous> kATSLineDisableAllTrackingAdjustments
	enum <anonymous> kATSLineDisableAutoAdjustDisplayPos
	enum <anonymous> kATSLineDisableNegativeJustification
	enum <anonymous> kATSLineFillOutToWidth
	enum <anonymous> kATSLineFractDisable
	enum <anonymous> kATSLineHasNoHangers
	enum <anonymous> kATSLineHasNoOpticalAlignment
	enum <anonymous> kATSLineIgnoreFontLeading
	enum <anonymous> kATSLineImposeNoAngleForEnds
	enum <anonymous> kATSLineIsDisplayOnly
	enum <anonymous> kATSLineKeepSpacesOutOfMargin
	enum <anonymous> kATSLineLastNoJustification
	enum <anonymous> kATSLineNoAntiAliasing
	enum <anonymous> kATSLineNoLayoutOptions
	enum <anonymous> kATSLineNoSpecialJustification
	enum <anonymous> kATSLineTabAdjustEnabled
	enum <anonymous> kATSLineUseDeviceMetrics
	enum <anonymous> kATSLineUseQDRendering
	enum <anonymous> kATSNoTracking
	enum <anonymous> kATSOptionFlagsActivateDisabled
	enum <anonymous> kATSOptionFlagsComposeFontPostScriptName
	enum <anonymous> kATSOptionFlagsDefault
	enum <anonymous> kATSOptionFlagsDefaultScope
	enum <anonymous> kATSOptionFlagsDoNotNotify
	enum <anonymous> kATSOptionFlagsIncludeDisabledMask
	enum <anonymous> kATSOptionFlagsIterateByPrecedenceMask
	enum <anonymous> kATSOptionFlagsIterationScopeMask
	enum <anonymous> kATSOptionFlagsProcessSubdirectories
	enum <anonymous> kATSOptionFlagsRecordPersistently
	enum <anonymous> kATSOptionFlagsRestrictedScope
	enum <anonymous> kATSOptionFlagsUnRestrictedScope
	enum <anonymous> kATSOptionFlagsUseDataFork
	enum <anonymous> kATSOptionFlagsUseDataForkAsResourceFork
	enum <anonymous> kATSOptionFlagsUseResourceFork
	enum <anonymous> kATSOtherCurveType
	enum <anonymous> kATSQuadCurveType
	ATSFontQueryMessageID kATSQueryActivateFontMessage
	enum <anonymous> kATSRadiansFactor
	enum <anonymous> kATSStyleAppleReserved
	enum <anonymous> kATSStyleApplyAntiAliasing
	enum <anonymous> kATSStyleApplyHints
	enum <anonymous> kATSStyleNoAntiAliasing
	enum <anonymous> kATSStyleNoHinting
	enum <anonymous> kATSStyleNoOptions
	enum <anonymous> kATSUAfterWithStreamShiftTag
	enum <anonymous> kATSUAscentTag
	enum <anonymous> kATSUBackgroundCallback
	enum <anonymous> kATSUBackgroundColor
	enum <anonymous> kATSUBadStreamErr
	enum <anonymous> kATSUBaselineClassTag
	enum <anonymous> kATSUBeforeWithStreamShiftTag
	enum <anonymous> kATSUBusyObjectErr
	enum <anonymous> kATSUByCharacter
	enum <anonymous> kATSUByCharacterCluster
	enum <anonymous> kATSUByCluster
	enum <anonymous> kATSUByTypographicCluster
	enum <anonymous> kATSUByWord
	enum <anonymous> kATSUCenterTab
	enum <anonymous> kATSUCGContextTag
	enum <anonymous> kATSUClearAll
	enum <anonymous> kATSUColorTag
	enum <anonymous> kATSUCoordinateOverflowErr
	enum <anonymous> kATSUCrossStreamShiftTag
	enum <anonymous> kATSUDataStreamUnicodeStyledText
	enum <anonymous> kATSUDecimalTab
	enum <anonymous> kATSUDecompositionFactorTag
	enum <anonymous> kATSUDefaultFontFallbacks
	enum <anonymous> kATSUDescentTag
	enum <anonymous> kATSUDirectDataAdvanceDeltaFixedArray
	enum <anonymous> kATSUDirectDataBaselineDeltaFixedArray
	enum <anonymous> kATSUDirectDataDeviceDeltaSInt16Array
	enum <anonymous> kATSUDirectDataLayoutRecordATSLayoutRecordCurrent
	enum <anonymous> kATSUDirectDataLayoutRecordATSLayoutRecordVersion1
	enum <anonymous> kATSUDirectDataStyleIndexUInt16Array
	enum <anonymous> kATSUDirectDataStyleSettingATSUStyleSettingRefArray
	enum <anonymous> kATSUFlattenOptionNoOptionsMask
	enum <anonymous> kATSUFontMatrixTag
	enum <anonymous> kATSUFontsMatched
	enum <anonymous> kATSUFontsNotMatched
	enum <anonymous> kATSUFontTag
	enum <anonymous> kATSUForceHangingTag
	enum <anonymous> kATSUFromFollowingLayout
	enum <anonymous> kATSUFromPreviousLayout
	enum <anonymous> kATSUFromTextBeginning
	enum <anonymous> kATSUGlyphSelectorTag
	enum <anonymous> kATSUHangingInhibitFactorTag
	enum <anonymous> kATSUImposeWidthTag
	enum <anonymous> kATSUInvalidAttributeSizeErr
	enum <anonymous> kATSUInvalidAttributeTagErr
	enum <anonymous> kATSUInvalidAttributeValueErr
	enum <anonymous> kATSUInvalidCacheErr
	enum <anonymous> kATSUInvalidCallInsideCallbackErr
	enum <anonymous> kATSUInvalidFontErr
	enum <anonymous> kATSUInvalidFontFallbacksErr
	enum <anonymous> kATSUInvalidFontID
	enum <anonymous> kATSUInvalidStyleErr
	enum <anonymous> kATSUInvalidTextLayoutErr
	enum <anonymous> kATSUInvalidTextRangeErr
	enum <anonymous> kATSUKerningInhibitFactorTag
	enum <anonymous> kATSULangRegionTag
	enum <anonymous> kATSULanguageTag
	enum <anonymous> kATSULastErr
	enum <anonymous> kATSULastResortOnlyFallback
	enum <anonymous> kATSULayoutOperationAppleReserved
	enum <anonymous> kATSULayoutOperationBaselineAdjustment
	enum <anonymous> kATSULayoutOperationCallbackStatusContinue
	enum <anonymous> kATSULayoutOperationCallbackStatusHandled
	enum <anonymous> kATSULayoutOperationJustification
	enum <anonymous> kATSULayoutOperationKerningAdjustment
	enum <anonymous> kATSULayoutOperationMorph
	enum <anonymous> kATSULayoutOperationNone
	enum <anonymous> kATSULayoutOperationOverrideTag
	enum <anonymous> kATSULayoutOperationPostLayoutAdjustment
	enum <anonymous> kATSULayoutOperationTrackingAdjustment
	enum <anonymous> kATSULeadingTag
	enum <anonymous> kATSULeftTab
	enum <anonymous> kATSULeftToRightBaseDirection
	enum <anonymous> kATSULineAscentTag
	enum <anonymous> kATSULineBaselineValuesTag
	enum <anonymous> kATSULineBreakInWord
	enum <anonymous> kATSULineDecimalTabCharacterTag
	enum <anonymous> kATSULineDescentTag
	enum <anonymous> kATSULineDirectionTag
	enum <anonymous> kATSULineFlushFactorTag
	enum <anonymous> kATSULineFontFallbacksTag
	enum <anonymous> kATSULineHighlightCGColorTag
	enum <anonymous> kATSULineJustificationFactorTag
	enum <anonymous> kATSULineLangRegionTag
	enum <anonymous> kATSULineLanguageTag
	enum <anonymous> kATSULineLayoutOptionsTag
	enum <anonymous> kATSULineRotationTag
	enum <anonymous> kATSULineTextLocatorTag
	enum <anonymous> kATSULineTruncationTag
	enum <anonymous> kATSULineWidthTag
	enum <anonymous> kATSULowLevelErr
	enum <anonymous> kATSUMaxATSUITagValue
	enum <anonymous> kATSUMaxLineTag
	enum <anonymous> kATSUMaxStyleTag
	enum <anonymous> kATSUNoCaretAngleTag
	enum <anonymous> kATSUNoCorrespondingFontErr
	enum <anonymous> kATSUNoFontCmapAvailableErr
	enum <anonymous> kATSUNoFontNameErr
	enum <anonymous> kATSUNoFontScalerAvailableErr
	enum <anonymous> kATSUNoLigatureSplitTag
	enum <anonymous> kATSUNoOpticalAlignmentTag
	enum <anonymous> kATSUNoSelector
	enum <anonymous> kATSUNoSpecialJustificationTag
	enum <anonymous> kATSUNoStyleRunsAssignedErr
	enum <anonymous> kATSUNotSetErr
	enum <anonymous> kATSUNumberTabTypes
	enum <anonymous> kATSUOutputBufferTooSmallErr
	enum <anonymous> kATSUPriorityJustOverrideTag
	enum <anonymous> kATSUQDBoldfaceTag
	enum <anonymous> kATSUQDCondensedTag
	enum <anonymous> kATSUQDExtendedTag
	enum <anonymous> kATSUQDItalicTag
	enum <anonymous> kATSUQDUnderlineTag
	enum <anonymous> kATSUQuickDrawTextErr
	enum <anonymous> kATSURGBAlphaColorTag
	enum <anonymous> kATSURightTab
	enum <anonymous> kATSURightToLeftBaseDirection
	enum <anonymous> kATSUseCaretOrigins
	enum <anonymous> kATSUseDeviceOrigins
	enum <anonymous> kATSUseFractionalOrigins
	enum <anonymous> kATSUseGlyphAdvance
	enum <anonymous> kATSUseLineHeight
	enum <anonymous> kATSUseOriginFlags
	enum <anonymous> kATSUSequentialFallbacksExclusive
	enum <anonymous> kATSUSequentialFallbacksPreferred
	enum <anonymous> kATSUSizeTag
	enum <anonymous> kATSUStronglyHorizontal
	enum <anonymous> kATSUStronglyVertical
	enum <anonymous> kATSUStyleContainedBy
	enum <anonymous> kATSUStyleContains
	enum <anonymous> kATSUStyleDoubleLineCount
	enum <anonymous> kATSUStyleDropShadowBlurOptionTag
	enum <anonymous> kATSUStyleDropShadowColorOptionTag
	enum <anonymous> kATSUStyleDropShadowOffsetOptionTag
	enum <anonymous> kATSUStyleDropShadowTag
	enum <anonymous> kATSUStyleEquals
	enum <anonymous> kATSUStyleRenderingOptionsTag
	enum <anonymous> kATSUStyleSingleLineCount
	enum <anonymous> kATSUStyleStrikeThroughColorOptionTag
	enum <anonymous> kATSUStyleStrikeThroughCountOptionTag
	enum <anonymous> kATSUStyleStrikeThroughTag
	enum <anonymous> kATSUStyleTextLocatorTag
	enum <anonymous> kATSUStyleUnderlineColorOptionTag
	enum <anonymous> kATSUStyleUnderlineCountOptionTag
	enum <anonymous> kATSUStyleUnequal
	enum <anonymous> kATSUSuppressCrossKerningTag
	enum <anonymous> kATSUToTextEnd
	enum <anonymous> kATSUTrackingTag
	enum <anonymous> kATSUTruncateEnd
	enum <anonymous> kATSUTruncateMiddle
	enum <anonymous> kATSUTruncateNone
	enum <anonymous> kATSUTruncateSpecificationMask
	enum <anonymous> kATSUTruncateStart
	enum <anonymous> kATSUTruncFeatNoSquishing
	enum <anonymous> kATSUUnFlattenOptionNoOptionsMask
	enum <anonymous> kATSUUnsupportedStreamFormatErr
	enum <anonymous> kATSUUseGrafPortPenLoc
	enum <anonymous> kATSUUseLineControlWidth
	enum <anonymous> kATSUVerticalCharacterTag
	enum <anonymous> kAttemptDupCardEntryErr
	enum <anonymous> kAudioAlertSoundsFolderType
	enum <anonymous> kAudioComponentsFolderType
	enum <anonymous> kAudioDigidesignFolderType
	enum <anonymous> kAudioPlugInsFolderType
	enum <anonymous> kAudioPresetsFolderType
	enum <anonymous> kAudioSoundBanksFolderType
	enum <anonymous> kAudioSoundsFolderType
	enum <anonymous> kAudioSupportFolderType
	enum <anonymous> kAudioUnitProperty_SpeechChannel
	enum <anonymous> kAudioUnitProperty_Voice
	enum <anonymous> kAudioUnitSubType_SpeechSynthesis
	enum <anonymous> kAudioVSTFolderType
	enum <anonymous> kAuthorizationExternalFormLength
	enum <anonymous> kAuthorizationFlagCanNotPreAuthorize
	enum <anonymous> kAuthorizationFlagDefaults
	enum <anonymous> kAuthorizationFlagDestroyRights
	enum <anonymous> kAuthorizationFlagExtendRights
	enum <anonymous> kAuthorizationFlagInteractionAllowed
	enum <anonymous> kAuthorizationFlagNoData
	enum <anonymous> kAuthorizationFlagPartialRights
	enum <anonymous> kAuthorizationFlagPreAuthorize
	enum <anonymous> kAuthTypeKCItemAttr
	enum <anonymous> kAutoGenerateReturnID
	enum <anonymous> kAutomatorWorkflowsFolderType
	enum <anonymous> kAutosaveInformationFolderType
	enum <anonymous> kAVLInOrder
	enum <anonymous> kAVLIsLeaf
	enum <anonymous> kAVLIsLeftBranch
	enum <anonymous> kAVLIsRightBranch
	enum <anonymous> kAVLIsTree
	enum <anonymous> kAVLNullNode
	enum <anonymous> kAVLPostOrder
	enum <anonymous> kAVLPreOrder
	CFStringRef kAXAttachmentTextAttribute
	CFStringRef kAXAutocorrectedTextAttribute
	CFStringRef kAXBackgroundColorTextAttribute
	enum <anonymous> kAXCopyMultipleAttributeOptionStopOnError
	enum <anonymous> kAXErrorActionUnsupported
	enum <anonymous> kAXErrorAPIDisabled
	enum <anonymous> kAXErrorAttributeUnsupported
	enum <anonymous> kAXErrorCannotComplete
	enum <anonymous> kAXErrorFailure
	enum <anonymous> kAXErrorIllegalArgument
	enum <anonymous> kAXErrorInvalidUIElement
	enum <anonymous> kAXErrorInvalidUIElementObserver
	enum <anonymous> kAXErrorNotEnoughPrecision
	enum <anonymous> kAXErrorNotificationAlreadyRegistered
	enum <anonymous> kAXErrorNotificationNotRegistered
	enum <anonymous> kAXErrorNotificationUnsupported
	enum <anonymous> kAXErrorNotImplemented
	enum <anonymous> kAXErrorNoValue
	enum <anonymous> kAXErrorParameterizedAttributeUnsupported
	enum <anonymous> kAXErrorSuccess
	CFStringRef kAXFontFamilyKey
	CFStringRef kAXFontNameKey
	CFStringRef kAXFontSizeKey
	CFStringRef kAXFontTextAttribute
	CFStringRef kAXForegoundColorTextAttribute
	CFStringRef kAXForegroundColorTextAttribute
	CFStringRef kAXLinkTextAttribute
	CFStringRef kAXMisspelledTextAttribute
	CFStringRef kAXNaturalLanguageTextAttribute
	CFStringRef kAXReplacementStringTextAttribute
	CFStringRef kAXShadowTextAttribute
	CFStringRef kAXStrikethroughColorTextAttribute
	CFStringRef kAXStrikethroughTextAttribute
	CFStringRef kAXSuperscriptTextAttribute
	CFStringRef kAXUnderlineColorTextAttribute
	enum <anonymous> kAXUnderlineStyleDouble
	enum <anonymous> kAXUnderlineStyleNone
	enum <anonymous> kAXUnderlineStyleSingle
	enum <anonymous> kAXUnderlineStyleThick
	CFStringRef kAXUnderlineTextAttribute
	AXValueType kAXValueAXErrorType
	AXValueType kAXValueCFRangeType
	AXValueType kAXValueCGPointType
	AXValueType kAXValueCGRectType
	AXValueType kAXValueCGSizeType
	AXValueType kAXValueIllegalType
	CFStringRef kAXVisibleNameKey
	enum <anonymous> kBackwardArrowIcon
	enum <anonymous> kBadAdapterErr
	enum <anonymous> kBadArgLengthErr
	enum <anonymous> kBadArgsErr
	enum <anonymous> kBadAttributeErr
	enum <anonymous> kBadBaseErr
	enum <anonymous> kBadCISErr
	enum <anonymous> kBadCustomIFIDErr
	enum <anonymous> kBadDeviceErr
	enum <anonymous> kBadEDCErr
	enum <anonymous> kBadHandleErr
	enum <anonymous> kBadIRQErr
	enum <anonymous> kBadLinkErr
	enum <anonymous> kBadOffsetErr
	enum <anonymous> kBadPageErr
	enum <anonymous> kBadSizeErr
	enum <anonymous> kBadSocketErr
	enum <anonymous> kBadSpeedErr
	enum <anonymous> kBadTupleDataErr
	enum <anonymous> kBadTypeErr
	enum <anonymous> kBadVccErr
	enum <anonymous> kBadVppErr
	enum <anonymous> kBadWindowErr
	enum <anonymous> kBig5_BasicVariant
	enum <anonymous> kBig5_DOSVariant
	enum <anonymous> kBig5_ETenVariant
	enum <anonymous> kBig5_StandardVariant
	enum <anonymous> kBlessedBusErrorBait
	enum <anonymous> kBlessedFolder
	enum <anonymous> kBLibTag2
	enum <anonymous> kBootTimeStartupItemsFolderType
	enum <anonymous> kBoxAnnotationSelector
	enum <anonymous> kBridgeSoftwareRunningCantSleep
	enum <anonymous> kBSLNControlPointFormatNoMap
	enum <anonymous> kBSLNControlPointFormatWithMap
	enum <anonymous> kBSLNCurrentVersion
	enum <anonymous> kBSLNDistanceFormatNoMap
	enum <anonymous> kBSLNDistanceFormatWithMap
	enum <anonymous> kBSLNHangingBaseline
	enum <anonymous> kBSLNIdeographicCenterBaseline
	enum <anonymous> kBSLNIdeographicLowBaseline
	enum <anonymous> kBSLNLastBaseline
	enum <anonymous> kBSLNMathBaseline
	enum <anonymous> kBSLNNoBaselineOverride
	enum <anonymous> kBSLNNumBaselineClasses
	enum <anonymous> kBSLNRomanBaseline
	enum <anonymous> kBSLNTag
	enum <anonymous> kBTBadCloseMask
	enum <anonymous> kBTBigKeysMask
	enum <anonymous> kBTHeaderNode
	enum <anonymous> kBTIndexNode
	enum <anonymous> kBTLeafNode
	enum <anonymous> kBTMapNode
	enum <anonymous> kBTVariableIndexKeysMask
	enum <anonymous> kBurningIcon
	enum <anonymous> kBusyErr
	enum <anonymous> kByCommentView
	enum <anonymous> kByDateView
	enum <anonymous> kByIconView
	enum <anonymous> kByKindView
	enum <anonymous> kByLabelView
	enum <anonymous> kByNameView
	enum <anonymous> kBySizeView
	enum <anonymous> kBySmallIcon
	enum <anonymous> kByVersionView
	enum <anonymous> kCachedDataFolderType
	NSString *const kCAFillModeBackwards
	NSString *const kCAFillModeBoth
	NSString *const kCAFillModeForwards
	NSString *const kCAFillModeFrozen
	NSString *const kCAFillModeRemoved
	NSString *const kCAFilterLinear
	NSString *const kCAFilterNearest
	NSString *const kCAFilterTrilinear
	NSString *const kCAGravityBottom
	NSString *const kCAGravityBottomLeft
	NSString *const kCAGravityBottomRight
	NSString *const kCAGravityCenter
	NSString *const kCAGravityLeft
	NSString *const kCAGravityResize
	NSString *const kCAGravityResizeAspect
	NSString *const kCAGravityResizeAspectFill
	NSString *const kCAGravityRight
	NSString *const kCAGravityTop
	NSString *const kCAGravityTopLeft
	NSString *const kCAGravityTopRight
	CAEdgeAntialiasingMask kCALayerBottomEdge
	CAAutoresizingMask kCALayerHeightSizable
	CAEdgeAntialiasingMask kCALayerLeftEdge
	CAAutoresizingMask kCALayerMaxXMargin
	CAAutoresizingMask kCALayerMaxYMargin
	CAAutoresizingMask kCALayerMinXMargin
	CAAutoresizingMask kCALayerMinYMargin
	CAAutoresizingMask kCALayerNotSizable
	CAEdgeAntialiasingMask kCALayerRightEdge
	CAEdgeAntialiasingMask kCALayerTopEdge
	CAAutoresizingMask kCALayerWidthSizable
	enum <anonymous> kCallingConventionMask
	enum <anonymous> kCallingConventionPhase
	enum <anonymous> kCallingConventionWidth
	enum <anonymous> kCanonicalCompositionOffSelector
	enum <anonymous> kCanonicalCompositionOnSelector
	enum <anonymous> kCantConfigureCardErr
	enum <anonymous> kCantReportProcessorTemperatureErr
	NSString *const kCAOnOrderIn
	NSString *const kCAOnOrderOut
	enum <anonymous> kCarbonLibraryFolderType
	enum <anonymous> kCardBusCardErr
	enum <anonymous> kCardPowerOffErr
	enum <anonymous> kCaseSensitiveLayoutOffSelector
	enum <anonymous> kCaseSensitiveLayoutOnSelector
	enum <anonymous> kCaseSensitiveLayoutType
	enum <anonymous> kCaseSensitiveSpacingOffSelector
	enum <anonymous> kCaseSensitiveSpacingOnSelector
	NSString *const kCATransition
	enum <anonymous> kCCRegisterCBit
	enum <anonymous> kCCRegisterNBit
	enum <anonymous> kCCRegisterVBit
	enum <anonymous> kCCRegisterXBit
	enum <anonymous> kCCRegisterZBit
	enum <anonymous> kCertificateKCItemClass
	enum <anonymous> kCertSearchAny
	enum <anonymous> kCertSearchDecryptAllowed
	enum <anonymous> kCertSearchDecryptDisallowed
	enum <anonymous> kCertSearchDecryptIgnored
	enum <anonymous> kCertSearchDecryptMask
	enum <anonymous> kCertSearchEncryptAllowed
	enum <anonymous> kCertSearchEncryptDisallowed
	enum <anonymous> kCertSearchEncryptIgnored
	enum <anonymous> kCertSearchEncryptMask
	enum <anonymous> kCertSearchPrivKeyRequired
	enum <anonymous> kCertSearchShift
	enum <anonymous> kCertSearchSigningAllowed
	enum <anonymous> kCertSearchSigningDisallowed
	enum <anonymous> kCertSearchSigningIgnored
	enum <anonymous> kCertSearchSigningMask
	enum <anonymous> kCertSearchUnwrapAllowed
	enum <anonymous> kCertSearchUnwrapDisallowed
	enum <anonymous> kCertSearchUnwrapIgnored
	enum <anonymous> kCertSearchUnwrapMask
	enum <anonymous> kCertSearchVerifyAllowed
	enum <anonymous> kCertSearchVerifyDisallowed
	enum <anonymous> kCertSearchVerifyIgnored
	enum <anonymous> kCertSearchVerifyMask
	enum <anonymous> kCertSearchWrapAllowed
	enum <anonymous> kCertSearchWrapDisallowed
	enum <anonymous> kCertSearchWrapIgnored
	enum <anonymous> kCertSearchWrapMask
	enum <anonymous> kCertUsageAllAdd
	enum <anonymous> kCertUsageDecryptAdd
	enum <anonymous> kCertUsageDecryptAskAndAdd
	enum <anonymous> kCertUsageEncryptAdd
	enum <anonymous> kCertUsageEncryptAskAndAdd
	enum <anonymous> kCertUsageKeyExchAdd
	enum <anonymous> kCertUsageKeyExchAskAndAdd
	enum <anonymous> kCertUsageRootAdd
	enum <anonymous> kCertUsageRootAskAndAdd
	enum <anonymous> kCertUsageShift
	enum <anonymous> kCertUsageSigningAdd
	enum <anonymous> kCertUsageSigningAskAndAdd
	enum <anonymous> kCertUsageSSLAdd
	enum <anonymous> kCertUsageSSLAskAndAdd
	enum <anonymous> kCertUsageVerifyAdd
	enum <anonymous> kCertUsageVerifyAskAndAdd
	const CFTimeInterval kCFAbsoluteTimeIntervalSince1904
	const CFTimeInterval kCFAbsoluteTimeIntervalSince1970
	const CFAllocatorRef kCFAllocatorDefault
	const CFAllocatorRef kCFAllocatorMalloc
	const CFAllocatorRef kCFAllocatorMallocZone
	const CFAllocatorRef kCFAllocatorNull
	const CFAllocatorRef kCFAllocatorSystemDefault
	const CFAllocatorRef kCFAllocatorUseContext
	enum <anonymous> kCFBookmarkResolutionWithoutMountingMask
	enum <anonymous> kCFBookmarkResolutionWithoutUIMask
	const CFBooleanRef kCFBooleanFalse
	const CFBooleanRef kCFBooleanTrue
	const CFStringRef kCFBuddhistCalendar
	const CFStringRef kCFBundleDevelopmentRegionKey
	enum <anonymous> kCFBundleExecutableArchitectureI386
	enum <anonymous> kCFBundleExecutableArchitecturePPC
	enum <anonymous> kCFBundleExecutableArchitecturePPC64
	enum <anonymous> kCFBundleExecutableArchitectureX86_64
	const CFStringRef kCFBundleExecutableKey
	const CFStringRef kCFBundleIdentifierKey
	const CFStringRef kCFBundleInfoDictionaryVersionKey
	const CFStringRef kCFBundleLocalizationsKey
	const CFStringRef kCFBundleNameKey
	const CFStringRef kCFBundleVersionKey
	enum <anonymous> kCFCalendarComponentsWrap
	enum <anonymous> kCFCalendarUnitDay
	enum <anonymous> kCFCalendarUnitEra
	enum <anonymous> kCFCalendarUnitHour
	enum <anonymous> kCFCalendarUnitMinute
	enum <anonymous> kCFCalendarUnitMonth
	enum <anonymous> kCFCalendarUnitQuarter
	enum <anonymous> kCFCalendarUnitSecond
	enum <anonymous> kCFCalendarUnitWeek
	enum <anonymous> kCFCalendarUnitWeekday
	enum <anonymous> kCFCalendarUnitWeekdayOrdinal
	enum <anonymous> kCFCalendarUnitWeekOfMonth
	enum <anonymous> kCFCalendarUnitWeekOfYear
	enum <anonymous> kCFCalendarUnitYear
	enum <anonymous> kCFCalendarUnitYearForWeekOfYear
	enum <anonymous> kCFCharacterSetAlphaNumeric
	enum <anonymous> kCFCharacterSetCapitalizedLetter
	enum <anonymous> kCFCharacterSetControl
	enum <anonymous> kCFCharacterSetDecimalDigit
	enum <anonymous> kCFCharacterSetDecomposable
	enum <anonymous> kCFCharacterSetIllegal
	enum <anonymous> kCFCharacterSetLetter
	enum <anonymous> kCFCharacterSetLowercaseLetter
	enum <anonymous> kCFCharacterSetNewline
	enum <anonymous> kCFCharacterSetNonBase
	enum <anonymous> kCFCharacterSetPunctuation
	enum <anonymous> kCFCharacterSetSymbol
	enum <anonymous> kCFCharacterSetUppercaseLetter
	enum <anonymous> kCFCharacterSetWhitespace
	enum <anonymous> kCFCharacterSetWhitespaceAndNewline
	const CFStringRef kCFChineseCalendar
	enum <anonymous> kCFCompareAnchored
	enum <anonymous> kCFCompareBackwards
	enum <anonymous> kCFCompareCaseInsensitive
	enum <anonymous> kCFCompareDiacriticInsensitive
	enum <anonymous> kCFCompareEqualTo
	enum <anonymous> kCFCompareForcedOrdering
	enum <anonymous> kCFCompareGreaterThan
	enum <anonymous> kCFCompareLessThan
	enum <anonymous> kCFCompareLocalized
	enum <anonymous> kCFCompareNonliteral
	enum <anonymous> kCFCompareNumerically
	enum <anonymous> kCFCompareWidthInsensitive
	const CFBagCallBacks kCFCopyStringBagCallBacks
	const CFDictionaryKeyCallBacks kCFCopyStringDictionaryKeyCallBacks
	const CFSetCallBacks kCFCopyStringSetCallBacks
	double kCFCoreFoundationVersionNumber
	enum <anonymous> kCFDataSearchAnchored
	enum <anonymous> kCFDataSearchBackwards
	const CFStringRef kCFDateFormatterAMSymbol
	const CFStringRef kCFDateFormatterCalendar
	const CFStringRef kCFDateFormatterCalendarName
	const CFStringRef kCFDateFormatterDefaultDate
	const CFStringRef kCFDateFormatterDefaultFormat
	const CFStringRef kCFDateFormatterDoesRelativeDateFormattingKey
	const CFStringRef kCFDateFormatterEraSymbols
	enum <anonymous> kCFDateFormatterFullStyle
	const CFStringRef kCFDateFormatterGregorianStartDate
	const CFStringRef kCFDateFormatterIsLenient
	const CFStringRef kCFDateFormatterLongEraSymbols
	enum <anonymous> kCFDateFormatterLongStyle
	enum <anonymous> kCFDateFormatterMediumStyle
	const CFStringRef kCFDateFormatterMonthSymbols
	enum <anonymous> kCFDateFormatterNoStyle
	const CFStringRef kCFDateFormatterPMSymbol
	const CFStringRef kCFDateFormatterQuarterSymbols
	const CFStringRef kCFDateFormatterShortMonthSymbols
	const CFStringRef kCFDateFormatterShortQuarterSymbols
	const CFStringRef kCFDateFormatterShortStandaloneMonthSymbols
	const CFStringRef kCFDateFormatterShortStandaloneQuarterSymbols
	const CFStringRef kCFDateFormatterShortStandaloneWeekdaySymbols
	enum <anonymous> kCFDateFormatterShortStyle
	const CFStringRef kCFDateFormatterShortWeekdaySymbols
	const CFStringRef kCFDateFormatterStandaloneMonthSymbols
	const CFStringRef kCFDateFormatterStandaloneQuarterSymbols
	const CFStringRef kCFDateFormatterStandaloneWeekdaySymbols
	const CFStringRef kCFDateFormatterTimeZone
	const CFStringRef kCFDateFormatterTwoDigitStartDate
	const CFStringRef kCFDateFormatterVeryShortMonthSymbols
	const CFStringRef kCFDateFormatterVeryShortStandaloneMonthSymbols
	const CFStringRef kCFDateFormatterVeryShortStandaloneWeekdaySymbols
	const CFStringRef kCFDateFormatterVeryShortWeekdaySymbols
	const CFStringRef kCFDateFormatterWeekdaySymbols
	const CFStringRef kCFDNSServiceFailureKey
	const CFStringRef kCFErrorDescriptionKey
	const CFStringRef kCFErrorDomainCFNetwork
	const CFStringRef kCFErrorDomainCGImageMetadata
	const CFStringRef kCFErrorDomainCocoa
	const CFStringRef kCFErrorDomainMach
	const CFStringRef kCFErrorDomainOSStatus
	const CFStringRef kCFErrorDomainPOSIX
	const CFStringRef kCFErrorDomainWinSock
	const CFStringRef kCFErrorFilePathKey
	CFNetworkErrors kCFErrorHTTPAuthenticationTypeUnsupported
	CFNetworkErrors kCFErrorHTTPBadCredentials
	CFNetworkErrors kCFErrorHTTPBadProxyCredentials
	CFNetworkErrors kCFErrorHTTPBadURL
	CFNetworkErrors kCFErrorHTTPConnectionLost
	CFNetworkErrors kCFErrorHTTPParseFailure
	CFNetworkErrors kCFErrorHTTPProxyConnectionFailure
	CFNetworkErrors kCFErrorHTTPRedirectionLoopDetected
	CFNetworkErrors kCFErrorHTTPSProxyConnectionFailure
	const CFStringRef kCFErrorLocalizedDescriptionKey
	const CFStringRef kCFErrorLocalizedFailureReasonKey
	const CFStringRef kCFErrorLocalizedRecoverySuggestionKey
	CFNetworkErrors kCFErrorPACFileAuth
	CFNetworkErrors kCFErrorPACFileError
	const CFStringRef kCFErrorUnderlyingErrorKey
	const CFStringRef kCFErrorURLKey
	enum <anonymous> kCFFileDescriptorReadCallBack
	enum <anonymous> kCFFileDescriptorWriteCallBack
	enum <anonymous> kCFFileSecurityClearAccessControlList
	enum <anonymous> kCFFileSecurityClearGroup
	enum <anonymous> kCFFileSecurityClearGroupUUID
	enum <anonymous> kCFFileSecurityClearMode
	enum <anonymous> kCFFileSecurityClearOwner
	enum <anonymous> kCFFileSecurityClearOwnerUUID
	CFNetworkErrors kCFFTPErrorUnexpectedStatusCode
	const CFStringRef kCFFTPResourceGroup
	const CFStringRef kCFFTPResourceLink
	const CFStringRef kCFFTPResourceModDate
	const CFStringRef kCFFTPResourceMode
	const CFStringRef kCFFTPResourceName
	const CFStringRef kCFFTPResourceOwner
	const CFStringRef kCFFTPResourceSize
	const CFStringRef kCFFTPResourceType
	const CFStringRef kCFFTPStatusCodeKey
	const CFStringRef kCFGetAddrInfoFailureKey
	enum <anonymous> kCFGregorianAllUnits
	const CFStringRef kCFGregorianCalendar
	enum <anonymous> kCFGregorianUnitsDays
	enum <anonymous> kCFGregorianUnitsHours
	enum <anonymous> kCFGregorianUnitsMinutes
	enum <anonymous> kCFGregorianUnitsMonths
	enum <anonymous> kCFGregorianUnitsSeconds
	enum <anonymous> kCFGregorianUnitsYears
	const CFStringRef kCFHebrewCalendar
	CFHostInfoType kCFHostAddresses
	CFNetworkErrors kCFHostErrorHostNotFound
	CFNetworkErrors kCFHostErrorUnknown
	CFHostInfoType kCFHostNames
	CFHostInfoType kCFHostReachability
	const CFStringRef kCFHTTPAuthenticationAccountDomain
	const CFStringRef kCFHTTPAuthenticationPassword
	const CFStringRef kCFHTTPAuthenticationSchemeBasic
	const CFStringRef kCFHTTPAuthenticationSchemeDigest
	const CFStringRef kCFHTTPAuthenticationSchemeKerberos
	const CFStringRef kCFHTTPAuthenticationSchemeNegotiate
	const CFStringRef kCFHTTPAuthenticationSchemeNegotiate2
	const CFStringRef kCFHTTPAuthenticationSchemeNTLM
	const CFStringRef kCFHTTPAuthenticationSchemeXMobileMeAuthToken
	const CFStringRef kCFHTTPAuthenticationUsername
	CFNetworkErrors kCFHTTPCookieCannotParseCookieFile
	const CFStringRef kCFHTTPVersion1_0
	const CFStringRef kCFHTTPVersion1_1
	const CFStringRef kCFIndianCalendar
	const CFStringRef kCFIslamicCalendar
	const CFStringRef kCFIslamicCivilCalendar
	const CFStringRef kCFISO8601Calendar
	const CFStringRef kCFJapaneseCalendar
	const CFStringRef kCFLocaleAlternateQuotationBeginDelimiterKey
	const CFStringRef kCFLocaleAlternateQuotationEndDelimiterKey
	const CFStringRef kCFLocaleCalendar
	const CFStringRef kCFLocaleCalendarIdentifier
	const CFStringRef kCFLocaleCollationIdentifier
	const CFStringRef kCFLocaleCollatorIdentifier
	const CFStringRef kCFLocaleCountryCode
	const CFStringRef kCFLocaleCurrencyCode
	const CFStringRef kCFLocaleCurrencySymbol
	const CFStringRef kCFLocaleCurrentLocaleDidChangeNotification
	const CFStringRef kCFLocaleDecimalSeparator
	const CFStringRef kCFLocaleExemplarCharacterSet
	const CFStringRef kCFLocaleGroupingSeparator
	const CFStringRef kCFLocaleIdentifier
	const CFStringRef kCFLocaleLanguageCode
	enum <anonymous> kCFLocaleLanguageDirectionBottomToTop
	enum <anonymous> kCFLocaleLanguageDirectionLeftToRight
	enum <anonymous> kCFLocaleLanguageDirectionRightToLeft
	enum <anonymous> kCFLocaleLanguageDirectionTopToBottom
	enum <anonymous> kCFLocaleLanguageDirectionUnknown
	const CFStringRef kCFLocaleMeasurementSystem
	const CFStringRef kCFLocaleQuotationBeginDelimiterKey
	const CFStringRef kCFLocaleQuotationEndDelimiterKey
	const CFStringRef kCFLocaleScriptCode
	const CFStringRef kCFLocaleUsesMetricSystem
	const CFStringRef kCFLocaleVariantCode
	enum <anonymous> kCFM68kRTA
	enum <anonymous> kCFMessagePortBecameInvalidError
	enum <anonymous> kCFMessagePortIsInvalid
	enum <anonymous> kCFMessagePortReceiveTimeout
	enum <anonymous> kCFMessagePortSendTimeout
	enum <anonymous> kCFMessagePortSuccess
	enum <anonymous> kCFMessagePortTransportError
	CFNetDiagnosticStatusValues kCFNetDiagnosticConnectionDown
	CFNetDiagnosticStatusValues kCFNetDiagnosticConnectionIndeterminate
	CFNetDiagnosticStatusValues kCFNetDiagnosticConnectionUp
	CFNetDiagnosticStatusValues kCFNetDiagnosticErr
	CFNetDiagnosticStatusValues kCFNetDiagnosticNoErr
	CFNetworkErrors kCFNetServiceErrorBadArgument
	CFNetworkErrors kCFNetServiceErrorCancel
	CFNetworkErrors kCFNetServiceErrorCollision
	CFNetworkErrors kCFNetServiceErrorDNSServiceFailure
	CFNetworkErrors kCFNetServiceErrorInProgress
	CFNetworkErrors kCFNetServiceErrorInvalid
	CFNetworkErrors kCFNetServiceErrorNotFound
	CFNetworkErrors kCFNetServiceErrorTimeout
	CFNetworkErrors kCFNetServiceErrorUnknown
	enum <anonymous> kCFNetServiceFlagIsDefault
	enum <anonymous> kCFNetServiceFlagIsDomain
	enum <anonymous> kCFNetServiceFlagIsRegistrationDomain
	enum <anonymous> kCFNetServiceFlagMoreComing
	enum <anonymous> kCFNetServiceFlagNoAutoRename
	enum <anonymous> kCFNetServiceFlagRemove
	CFNetServiceMonitorType kCFNetServiceMonitorTXT
	CFNetServicesError kCFNetServicesErrorBadArgument
	CFNetServicesError kCFNetServicesErrorCancel
	CFNetServicesError kCFNetServicesErrorCollision
	CFNetServicesError kCFNetServicesErrorInProgress
	CFNetServicesError kCFNetServicesErrorInvalid
	CFNetServicesError kCFNetServicesErrorNotFound
	CFNetServicesError kCFNetServicesErrorTimeout
	CFNetServicesError kCFNetServicesErrorUnknown
	const CFStringRef kCFNetworkProxiesExceptionsList
	const CFStringRef kCFNetworkProxiesExcludeSimpleHostnames
	const CFStringRef kCFNetworkProxiesFTPEnable
	const CFStringRef kCFNetworkProxiesFTPPassive
	const CFStringRef kCFNetworkProxiesFTPPort
	const CFStringRef kCFNetworkProxiesFTPProxy
	const CFStringRef kCFNetworkProxiesGopherEnable
	const CFStringRef kCFNetworkProxiesGopherPort
	const CFStringRef kCFNetworkProxiesGopherProxy
	const CFStringRef kCFNetworkProxiesHTTPEnable
	const CFStringRef kCFNetworkProxiesHTTPPort
	const CFStringRef kCFNetworkProxiesHTTPProxy
	const CFStringRef kCFNetworkProxiesHTTPSEnable
	const CFStringRef kCFNetworkProxiesHTTPSPort
	const CFStringRef kCFNetworkProxiesHTTPSProxy
	const CFStringRef kCFNetworkProxiesProxyAutoConfigEnable
	const CFStringRef kCFNetworkProxiesProxyAutoConfigJavaScript
	const CFStringRef kCFNetworkProxiesProxyAutoConfigURLString
	const CFStringRef kCFNetworkProxiesProxyAutoDiscoveryEnable
	const CFStringRef kCFNetworkProxiesRTSPEnable
	const CFStringRef kCFNetworkProxiesRTSPPort
	const CFStringRef kCFNetworkProxiesRTSPProxy
	const CFStringRef kCFNetworkProxiesSOCKSEnable
	const CFStringRef kCFNetworkProxiesSOCKSPort
	const CFStringRef kCFNetworkProxiesSOCKSProxy
	enum <anonymous> kCFNotFound
	enum <anonymous> kCFNotificationDeliverImmediately
	enum <anonymous> kCFNotificationPostToAllSessions
	const CFNullRef kCFNull
	enum <anonymous> kCFNumberCFIndexType
	enum <anonymous> kCFNumberCGFloatType
	enum <anonymous> kCFNumberCharType
	enum <anonymous> kCFNumberDoubleType
	enum <anonymous> kCFNumberFloat32Type
	enum <anonymous> kCFNumberFloat64Type
	enum <anonymous> kCFNumberFloatType
	const CFStringRef kCFNumberFormatterAlwaysShowDecimalSeparator
	const CFStringRef kCFNumberFormatterCurrencyCode
	const CFStringRef kCFNumberFormatterCurrencyDecimalSeparator
	const CFStringRef kCFNumberFormatterCurrencyGroupingSeparator
	enum <anonymous> kCFNumberFormatterCurrencyStyle
	const CFStringRef kCFNumberFormatterCurrencySymbol
	const CFStringRef kCFNumberFormatterDecimalSeparator
	enum <anonymous> kCFNumberFormatterDecimalStyle
	const CFStringRef kCFNumberFormatterDefaultFormat
	const CFStringRef kCFNumberFormatterExponentSymbol
	const CFStringRef kCFNumberFormatterFormatWidth
	const CFStringRef kCFNumberFormatterGroupingSeparator
	const CFStringRef kCFNumberFormatterGroupingSize
	const CFStringRef kCFNumberFormatterInfinitySymbol
	const CFStringRef kCFNumberFormatterInternationalCurrencySymbol
	const CFStringRef kCFNumberFormatterIsLenient
	const CFStringRef kCFNumberFormatterMaxFractionDigits
	const CFStringRef kCFNumberFormatterMaxIntegerDigits
	const CFStringRef kCFNumberFormatterMaxSignificantDigits
	const CFStringRef kCFNumberFormatterMinFractionDigits
	const CFStringRef kCFNumberFormatterMinIntegerDigits
	const CFStringRef kCFNumberFormatterMinSignificantDigits
	const CFStringRef kCFNumberFormatterMinusSign
	const CFStringRef kCFNumberFormatterMultiplier
	const CFStringRef kCFNumberFormatterNaNSymbol
	const CFStringRef kCFNumberFormatterNegativePrefix
	const CFStringRef kCFNumberFormatterNegativeSuffix
	enum <anonymous> kCFNumberFormatterNoStyle
	enum <anonymous> kCFNumberFormatterPadAfterPrefix
	enum <anonymous> kCFNumberFormatterPadAfterSuffix
	enum <anonymous> kCFNumberFormatterPadBeforePrefix
	enum <anonymous> kCFNumberFormatterPadBeforeSuffix
	const CFStringRef kCFNumberFormatterPaddingCharacter
	const CFStringRef kCFNumberFormatterPaddingPosition
	enum <anonymous> kCFNumberFormatterParseIntegersOnly
	enum <anonymous> kCFNumberFormatterPercentStyle
	const CFStringRef kCFNumberFormatterPercentSymbol
	const CFStringRef kCFNumberFormatterPerMillSymbol
	const CFStringRef kCFNumberFormatterPlusSign
	const CFStringRef kCFNumberFormatterPositivePrefix
	const CFStringRef kCFNumberFormatterPositiveSuffix
	enum <anonymous> kCFNumberFormatterRoundCeiling
	enum <anonymous> kCFNumberFormatterRoundDown
	enum <anonymous> kCFNumberFormatterRoundFloor
	enum <anonymous> kCFNumberFormatterRoundHalfDown
	enum <anonymous> kCFNumberFormatterRoundHalfEven
	enum <anonymous> kCFNumberFormatterRoundHalfUp
	const CFStringRef kCFNumberFormatterRoundingIncrement
	const CFStringRef kCFNumberFormatterRoundingMode
	enum <anonymous> kCFNumberFormatterRoundUp
	enum <anonymous> kCFNumberFormatterScientificStyle
	const CFStringRef kCFNumberFormatterSecondaryGroupingSize
	enum <anonymous> kCFNumberFormatterSpellOutStyle
	const CFStringRef kCFNumberFormatterUseGroupingSeparator
	const CFStringRef kCFNumberFormatterUseSignificantDigits
	const CFStringRef kCFNumberFormatterZeroSymbol
	enum <anonymous> kCFNumberIntType
	enum <anonymous> kCFNumberLongLongType
	enum <anonymous> kCFNumberLongType
	enum <anonymous> kCFNumberMaxType
	const CFNumberRef kCFNumberNaN
	const CFNumberRef kCFNumberNegativeInfinity
	enum <anonymous> kCFNumberNSIntegerType
	const CFNumberRef kCFNumberPositiveInfinity
	enum <anonymous> kCFNumberShortType
	enum <anonymous> kCFNumberSInt16Type
	enum <anonymous> kCFNumberSInt32Type
	enum <anonymous> kCFNumberSInt64Type
	enum <anonymous> kCFNumberSInt8Type
	const CFStringRef kCFPersianCalendar
	const CFStringRef kCFPlugInDynamicRegisterFunctionKey
	const CFStringRef kCFPlugInDynamicRegistrationKey
	const CFStringRef kCFPlugInFactoriesKey
	const CFStringRef kCFPlugInTypesKey
	const CFStringRef kCFPlugInUnloadFunctionKey
	const CFStringRef kCFPreferencesAnyApplication
	const CFStringRef kCFPreferencesAnyHost
	const CFStringRef kCFPreferencesAnyUser
	const CFStringRef kCFPreferencesCurrentApplication
	const CFStringRef kCFPreferencesCurrentHost
	const CFStringRef kCFPreferencesCurrentUser
	enum <anonymous> kCFPropertyListBinaryFormat_v1_0
	enum <anonymous> kCFPropertyListImmutable
	enum <anonymous> kCFPropertyListMutableContainers
	enum <anonymous> kCFPropertyListMutableContainersAndLeaves
	enum <anonymous> kCFPropertyListOpenStepFormat
	enum <anonymous> kCFPropertyListReadCorruptError
	enum <anonymous> kCFPropertyListReadStreamError
	enum <anonymous> kCFPropertyListReadUnknownVersionError
	enum <anonymous> kCFPropertyListWriteStreamError
	enum <anonymous> kCFPropertyListXMLFormat_v1_0
	const CFStringRef kCFProxyAutoConfigurationHTTPResponseKey
	const CFStringRef kCFProxyAutoConfigurationJavaScriptKey
	const CFStringRef kCFProxyAutoConfigurationURLKey
	const CFStringRef kCFProxyHostNameKey
	const CFStringRef kCFProxyPasswordKey
	const CFStringRef kCFProxyPortNumberKey
	const CFStringRef kCFProxyTypeAutoConfigurationJavaScript
	const CFStringRef kCFProxyTypeAutoConfigurationURL
	const CFStringRef kCFProxyTypeFTP
	const CFStringRef kCFProxyTypeHTTP
	const CFStringRef kCFProxyTypeHTTPS
	const CFStringRef kCFProxyTypeKey
	const CFStringRef kCFProxyTypeNone
	const CFStringRef kCFProxyTypeSOCKS
	const CFStringRef kCFProxyUsernameKey
	const CFStringRef kCFRepublicOfChinaCalendar
	enum <anonymous> kCFRunLoopAfterWaiting
	enum <anonymous> kCFRunLoopAllActivities
	enum <anonymous> kCFRunLoopBeforeSources
	enum <anonymous> kCFRunLoopBeforeTimers
	enum <anonymous> kCFRunLoopBeforeWaiting
	const CFStringRef kCFRunLoopCommonModes
	const CFStringRef kCFRunLoopDefaultMode
	enum <anonymous> kCFRunLoopEntry
	enum <anonymous> kCFRunLoopExit
	enum <anonymous> kCFRunLoopRunFinished
	enum <anonymous> kCFRunLoopRunHandledSource
	enum <anonymous> kCFRunLoopRunStopped
	enum <anonymous> kCFRunLoopRunTimedOut
	enum <anonymous> kCFSocketAcceptCallBack
	enum <anonymous> kCFSocketAutomaticallyReenableAcceptCallBack
	enum <anonymous> kCFSocketAutomaticallyReenableDataCallBack
	enum <anonymous> kCFSocketAutomaticallyReenableReadCallBack
	enum <anonymous> kCFSocketAutomaticallyReenableWriteCallBack
	enum <anonymous> kCFSocketCloseOnInvalidate
	const CFStringRef kCFSocketCommandKey
	enum <anonymous> kCFSocketConnectCallBack
	enum <anonymous> kCFSocketDataCallBack
	enum <anonymous> kCFSocketError
	const CFStringRef kCFSocketErrorKey
	enum <anonymous> kCFSocketLeaveErrors
	const CFStringRef kCFSocketNameKey
	enum <anonymous> kCFSocketNoCallBack
	enum <anonymous> kCFSocketReadCallBack
	const CFStringRef kCFSocketRegisterCommand
	const CFStringRef kCFSocketResultKey
	const CFStringRef kCFSocketRetrieveCommand
	enum <anonymous> kCFSocketSuccess
	enum <anonymous> kCFSocketTimeout
	const CFStringRef kCFSocketValueKey
	enum <anonymous> kCFSocketWriteCallBack
	CFNetworkErrors kCFSOCKS4ErrorIdConflict
	CFNetworkErrors kCFSOCKS4ErrorIdentdFailed
	CFNetworkErrors kCFSOCKS4ErrorRequestFailed
	CFNetworkErrors kCFSOCKS4ErrorUnknownStatusCode
	CFNetworkErrors kCFSOCKS5ErrorBadCredentials
	CFNetworkErrors kCFSOCKS5ErrorBadResponseAddr
	CFNetworkErrors kCFSOCKS5ErrorBadState
	CFNetworkErrors kCFSOCKS5ErrorNoAcceptableMethod
	CFNetworkErrors kCFSOCKS5ErrorUnsupportedNegotiationMethod
	CFNetworkErrors kCFSOCKSErrorUnknownClientVersion
	CFNetworkErrors kCFSOCKSErrorUnsupportedServerVersion
	const CFStringRef kCFSOCKSNegotiationMethodKey
	const CFStringRef kCFSOCKSStatusCodeKey
	const CFStringRef kCFSOCKSVersionKey
	enum <anonymous> kCFStreamErrorDomainCustom
	const SInt32 kCFStreamErrorDomainFTP
	const SInt32 kCFStreamErrorDomainHTTP
	const SInt32 kCFStreamErrorDomainMach
	enum <anonymous> kCFStreamErrorDomainMacOSStatus
	const SInt32 kCFStreamErrorDomainNetDB
	const SInt32 kCFStreamErrorDomainNetServices
	enum <anonymous> kCFStreamErrorDomainPOSIX
	const int kCFStreamErrorDomainSOCKS
	const int kCFStreamErrorDomainSSL
	const SInt32 kCFStreamErrorDomainSystemConfiguration
	const CFIndex kCFStreamErrorDomainWinSock
	CFStreamErrorHTTPAuthentication kCFStreamErrorHTTPAuthenticationBadPassword
	CFStreamErrorHTTPAuthentication kCFStreamErrorHTTPAuthenticationBadUserName
	CFStreamErrorHTTPAuthentication kCFStreamErrorHTTPAuthenticationTypeUnsupported
	CFStreamErrorHTTP kCFStreamErrorHTTPBadURL
	CFStreamErrorHTTP kCFStreamErrorHTTPParseFailure
	CFStreamErrorHTTP kCFStreamErrorHTTPRedirectionLoop
	CFNetworkErrors kCFStreamErrorHTTPSProxyFailureUnexpectedResponseToCONNECTMethod
	enum <anonymous> kCFStreamErrorSOCKS4IdConflict
	enum <anonymous> kCFStreamErrorSOCKS4IdentdFailed
	enum <anonymous> kCFStreamErrorSOCKS4RequestFailed
	enum <anonymous> kCFStreamErrorSOCKS4SubDomainResponse
	enum <anonymous> kCFStreamErrorSOCKS5BadResponseAddr
	enum <anonymous> kCFStreamErrorSOCKS5BadState
	enum <anonymous> kCFStreamErrorSOCKS5SubDomainMethod
	enum <anonymous> kCFStreamErrorSOCKS5SubDomainResponse
	enum <anonymous> kCFStreamErrorSOCKS5SubDomainUserPass
	enum <anonymous> kCFStreamErrorSOCKSSubDomainNone
	enum <anonymous> kCFStreamErrorSOCKSSubDomainVersionCode
	enum <anonymous> kCFStreamErrorSOCKSUnknownClientVersion
	enum <anonymous> kCFStreamEventCanAcceptBytes
	enum <anonymous> kCFStreamEventEndEncountered
	enum <anonymous> kCFStreamEventErrorOccurred
	enum <anonymous> kCFStreamEventHasBytesAvailable
	enum <anonymous> kCFStreamEventNone
	enum <anonymous> kCFStreamEventOpenCompleted
	const CFStringRef kCFStreamNetworkServiceType
	const CFStringRef kCFStreamNetworkServiceTypeBackground
	const CFStringRef kCFStreamNetworkServiceTypeVideo
	const CFStringRef kCFStreamNetworkServiceTypeVoice
	const CFStringRef kCFStreamNetworkServiceTypeVoIP
	const CFStringRef kCFStreamPropertyAppendToFile
	const CFStringRef kCFStreamPropertyConnectionIsCellular
	const CFStringRef kCFStreamPropertyDataWritten
	const CFStringRef kCFStreamPropertyFileCurrentOffset
	const CFStringRef kCFStreamPropertyFTPAttemptPersistentConnection
	const CFStringRef kCFStreamPropertyFTPFetchResourceInfo
	const CFStringRef kCFStreamPropertyFTPFileTransferOffset
	const CFStringRef kCFStreamPropertyFTPPassword
	const CFStringRef kCFStreamPropertyFTPProxy
	const CFStringRef kCFStreamPropertyFTPProxyHost
	const CFStringRef kCFStreamPropertyFTPProxyPassword
	const CFStringRef kCFStreamPropertyFTPProxyPort
	const CFStringRef kCFStreamPropertyFTPProxyUser
	const CFStringRef kCFStreamPropertyFTPResourceSize
	const CFStringRef kCFStreamPropertyFTPUsePassiveMode
	const CFStringRef kCFStreamPropertyFTPUserName
	const CFStringRef kCFStreamPropertyHTTPAttemptPersistentConnection
	const CFStringRef kCFStreamPropertyHTTPFinalRequest
	const CFStringRef kCFStreamPropertyHTTPFinalURL
	const CFStringRef kCFStreamPropertyHTTPProxy
	const CFStringRef kCFStreamPropertyHTTPProxyHost
	const CFStringRef kCFStreamPropertyHTTPProxyPort
	const CFStringRef kCFStreamPropertyHTTPRequestBytesWrittenCount
	const CFStringRef kCFStreamPropertyHTTPResponseHeader
	const CFStringRef kCFStreamPropertyHTTPShouldAutoredirect
	const CFStringRef kCFStreamPropertyHTTPSProxyHost
	const CFStringRef kCFStreamPropertyHTTPSProxyPort
	const CFStringRef kCFStreamPropertyNoCellular
	const CFStringRef kCFStreamPropertyProxyLocalBypass
	const CFStringRef kCFStreamPropertyShouldCloseNativeSocket
	const CFStringRef kCFStreamPropertySocketNativeHandle
	const CFStringRef kCFStreamPropertySocketRemoteHost
	const CFStringRef kCFStreamPropertySocketRemoteHostName
	const CFStringRef kCFStreamPropertySocketRemoteNetService
	const CFStringRef kCFStreamPropertySocketRemotePortNumber
	const CFStringRef kCFStreamPropertySocketSecurityLevel
	const CFStringRef kCFStreamPropertySOCKSPassword
	const CFStringRef kCFStreamPropertySOCKSProxy
	const CFStringRef kCFStreamPropertySOCKSProxyHost
	const CFStringRef kCFStreamPropertySOCKSProxyPort
	const CFStringRef kCFStreamPropertySOCKSUser
	const CFStringRef kCFStreamPropertySOCKSVersion
	const CFStringRef kCFStreamPropertySSLContext
	const CFStringRef kCFStreamPropertySSLPeerCertificates
	const CFStringRef kCFStreamPropertySSLPeerTrust
	const CFStringRef kCFStreamPropertySSLSettings
	const CFStringRef kCFStreamSocketSecurityLevelNegotiatedSSL
	const CFStringRef kCFStreamSocketSecurityLevelNone
	const CFStringRef kCFStreamSocketSecurityLevelSSLv2
	const CFStringRef kCFStreamSocketSecurityLevelSSLv3
	const CFStringRef kCFStreamSocketSecurityLevelTLSv1
	CFStreamSocketSecurityProtocol kCFStreamSocketSecurityNone
	CFStreamSocketSecurityProtocol kCFStreamSocketSecuritySSLv2
	CFStreamSocketSecurityProtocol kCFStreamSocketSecuritySSLv23
	CFStreamSocketSecurityProtocol kCFStreamSocketSecuritySSLv3
	CFStreamSocketSecurityProtocol kCFStreamSocketSecurityTLSv1
	const CFStringRef kCFStreamSocketSOCKSVersion4
	const CFStringRef kCFStreamSocketSOCKSVersion5
	const CFStringRef kCFStreamSSLAllowsAnyRoot
	const CFStringRef kCFStreamSSLAllowsExpiredCertificates
	const CFStringRef kCFStreamSSLAllowsExpiredRoots
	const CFStringRef kCFStreamSSLCertificates
	const CFStringRef kCFStreamSSLIsServer
	const CFStringRef kCFStreamSSLLevel
	const CFStringRef kCFStreamSSLPeerName
	const CFStringRef kCFStreamSSLValidatesCertificateChain
	enum <anonymous> kCFStreamStatusAtEnd
	enum <anonymous> kCFStreamStatusClosed
	enum <anonymous> kCFStreamStatusError
	enum <anonymous> kCFStreamStatusNotOpen
	enum <anonymous> kCFStreamStatusOpen
	enum <anonymous> kCFStreamStatusOpening
	enum <anonymous> kCFStreamStatusReading
	enum <anonymous> kCFStreamStatusWriting
	const CFBinaryHeapCallBacks kCFStringBinaryHeapCallBacks
	enum <anonymous> kCFStringEncodingANSEL
	enum <anonymous> kCFStringEncodingASCII
	enum <anonymous> kCFStringEncodingBig5
	enum <anonymous> kCFStringEncodingBig5_E
	enum <anonymous> kCFStringEncodingBig5_HKSCS_1999
	enum <anonymous> kCFStringEncodingCNS_11643_92_P1
	enum <anonymous> kCFStringEncodingCNS_11643_92_P2
	enum <anonymous> kCFStringEncodingCNS_11643_92_P3
	enum <anonymous> kCFStringEncodingDOSArabic
	enum <anonymous> kCFStringEncodingDOSBalticRim
	enum <anonymous> kCFStringEncodingDOSCanadianFrench
	enum <anonymous> kCFStringEncodingDOSChineseSimplif
	enum <anonymous> kCFStringEncodingDOSChineseTrad
	enum <anonymous> kCFStringEncodingDOSCyrillic
	enum <anonymous> kCFStringEncodingDOSGreek
	enum <anonymous> kCFStringEncodingDOSGreek1
	enum <anonymous> kCFStringEncodingDOSGreek2
	enum <anonymous> kCFStringEncodingDOSHebrew
	enum <anonymous> kCFStringEncodingDOSIcelandic
	enum <anonymous> kCFStringEncodingDOSJapanese
	enum <anonymous> kCFStringEncodingDOSKorean
	enum <anonymous> kCFStringEncodingDOSLatin1
	enum <anonymous> kCFStringEncodingDOSLatin2
	enum <anonymous> kCFStringEncodingDOSLatinUS
	enum <anonymous> kCFStringEncodingDOSNordic
	enum <anonymous> kCFStringEncodingDOSPortuguese
	enum <anonymous> kCFStringEncodingDOSRussian
	enum <anonymous> kCFStringEncodingDOSThai
	enum <anonymous> kCFStringEncodingDOSTurkish
	enum <anonymous> kCFStringEncodingEBCDIC_CP037
	enum <anonymous> kCFStringEncodingEBCDIC_US
	enum <anonymous> kCFStringEncodingEUC_CN
	enum <anonymous> kCFStringEncodingEUC_JP
	enum <anonymous> kCFStringEncodingEUC_KR
	enum <anonymous> kCFStringEncodingEUC_TW
	enum <anonymous> kCFStringEncodingGB_18030_2000
	enum <anonymous> kCFStringEncodingGB_2312_80
	enum <anonymous> kCFStringEncodingGBK_95
	enum <anonymous> kCFStringEncodingHZ_GB_2312
	enum <anonymous> kCFStringEncodingISO_2022_CN
	enum <anonymous> kCFStringEncodingISO_2022_CN_EXT
	enum <anonymous> kCFStringEncodingISO_2022_JP
	enum <anonymous> kCFStringEncodingISO_2022_JP_1
	enum <anonymous> kCFStringEncodingISO_2022_JP_2
	enum <anonymous> kCFStringEncodingISO_2022_JP_3
	enum <anonymous> kCFStringEncodingISO_2022_KR
	enum <anonymous> kCFStringEncodingISOLatin1
	enum <anonymous> kCFStringEncodingISOLatin10
	enum <anonymous> kCFStringEncodingISOLatin2
	enum <anonymous> kCFStringEncodingISOLatin3
	enum <anonymous> kCFStringEncodingISOLatin4
	enum <anonymous> kCFStringEncodingISOLatin5
	enum <anonymous> kCFStringEncodingISOLatin6
	enum <anonymous> kCFStringEncodingISOLatin7
	enum <anonymous> kCFStringEncodingISOLatin8
	enum <anonymous> kCFStringEncodingISOLatin9
	enum <anonymous> kCFStringEncodingISOLatinArabic
	enum <anonymous> kCFStringEncodingISOLatinCyrillic
	enum <anonymous> kCFStringEncodingISOLatinGreek
	enum <anonymous> kCFStringEncodingISOLatinHebrew
	enum <anonymous> kCFStringEncodingISOLatinThai
	enum <anonymous> kCFStringEncodingJIS_C6226_78
	enum <anonymous> kCFStringEncodingJIS_X0201_76
	enum <anonymous> kCFStringEncodingJIS_X0208_83
	enum <anonymous> kCFStringEncodingJIS_X0208_90
	enum <anonymous> kCFStringEncodingJIS_X0212_90
	enum <anonymous> kCFStringEncodingKOI8_R
	enum <anonymous> kCFStringEncodingKOI8_U
	enum <anonymous> kCFStringEncodingKSC_5601_87
	enum <anonymous> kCFStringEncodingKSC_5601_92_Johab
	enum <anonymous> kCFStringEncodingMacArabic
	enum <anonymous> kCFStringEncodingMacArmenian
	enum <anonymous> kCFStringEncodingMacBengali
	enum <anonymous> kCFStringEncodingMacBurmese
	enum <anonymous> kCFStringEncodingMacCeltic
	enum <anonymous> kCFStringEncodingMacCentralEurRoman
	enum <anonymous> kCFStringEncodingMacChineseSimp
	enum <anonymous> kCFStringEncodingMacChineseTrad
	enum <anonymous> kCFStringEncodingMacCroatian
	enum <anonymous> kCFStringEncodingMacCyrillic
	enum <anonymous> kCFStringEncodingMacDevanagari
	enum <anonymous> kCFStringEncodingMacDingbats
	enum <anonymous> kCFStringEncodingMacEthiopic
	enum <anonymous> kCFStringEncodingMacExtArabic
	enum <anonymous> kCFStringEncodingMacFarsi
	enum <anonymous> kCFStringEncodingMacGaelic
	enum <anonymous> kCFStringEncodingMacGeorgian
	enum <anonymous> kCFStringEncodingMacGreek
	enum <anonymous> kCFStringEncodingMacGujarati
	enum <anonymous> kCFStringEncodingMacGurmukhi
	enum <anonymous> kCFStringEncodingMacHebrew
	enum <anonymous> kCFStringEncodingMacHFS
	enum <anonymous> kCFStringEncodingMacIcelandic
	enum <anonymous> kCFStringEncodingMacInuit
	enum <anonymous> kCFStringEncodingMacJapanese
	enum <anonymous> kCFStringEncodingMacKannada
	enum <anonymous> kCFStringEncodingMacKhmer
	enum <anonymous> kCFStringEncodingMacKorean
	enum <anonymous> kCFStringEncodingMacLaotian
	enum <anonymous> kCFStringEncodingMacMalayalam
	enum <anonymous> kCFStringEncodingMacMongolian
	enum <anonymous> kCFStringEncodingMacOriya
	enum <anonymous> kCFStringEncodingMacRoman
	enum <anonymous> kCFStringEncodingMacRomanian
	enum <anonymous> kCFStringEncodingMacRomanLatin1
	enum <anonymous> kCFStringEncodingMacSinhalese
	enum <anonymous> kCFStringEncodingMacSymbol
	enum <anonymous> kCFStringEncodingMacTamil
	enum <anonymous> kCFStringEncodingMacTelugu
	enum <anonymous> kCFStringEncodingMacThai
	enum <anonymous> kCFStringEncodingMacTibetan
	enum <anonymous> kCFStringEncodingMacTurkish
	enum <anonymous> kCFStringEncodingMacUkrainian
	enum <anonymous> kCFStringEncodingMacVietnamese
	enum <anonymous> kCFStringEncodingMacVT100
	enum <anonymous> kCFStringEncodingNextStepJapanese
	enum <anonymous> kCFStringEncodingNextStepLatin
	enum <anonymous> kCFStringEncodingNonLossyASCII
	enum <anonymous> kCFStringEncodingShiftJIS
	enum <anonymous> kCFStringEncodingShiftJIS_X0213
	enum <anonymous> kCFStringEncodingShiftJIS_X0213_00
	enum <anonymous> kCFStringEncodingShiftJIS_X0213_MenKuTen
	enum <anonymous> kCFStringEncodingUnicode
	enum <anonymous> kCFStringEncodingUTF16
	enum <anonymous> kCFStringEncodingUTF16BE
	enum <anonymous> kCFStringEncodingUTF16LE
	enum <anonymous> kCFStringEncodingUTF32
	enum <anonymous> kCFStringEncodingUTF32BE
	enum <anonymous> kCFStringEncodingUTF32LE
	enum <anonymous> kCFStringEncodingUTF7
	enum <anonymous> kCFStringEncodingUTF7_IMAP
	enum <anonymous> kCFStringEncodingUTF8
	enum <anonymous> kCFStringEncodingVISCII
	enum <anonymous> kCFStringEncodingWindowsArabic
	enum <anonymous> kCFStringEncodingWindowsBalticRim
	enum <anonymous> kCFStringEncodingWindowsCyrillic
	enum <anonymous> kCFStringEncodingWindowsGreek
	enum <anonymous> kCFStringEncodingWindowsHebrew
	enum <anonymous> kCFStringEncodingWindowsKoreanJohab
	enum <anonymous> kCFStringEncodingWindowsLatin1
	enum <anonymous> kCFStringEncodingWindowsLatin2
	enum <anonymous> kCFStringEncodingWindowsLatin5
	enum <anonymous> kCFStringEncodingWindowsVietnamese
	enum <anonymous> kCFStringNormalizationFormC
	enum <anonymous> kCFStringNormalizationFormD
	enum <anonymous> kCFStringNormalizationFormKC
	enum <anonymous> kCFStringNormalizationFormKD
	enum <anonymous> kCFStringTokenizerAttributeLanguage
	enum <anonymous> kCFStringTokenizerAttributeLatinTranscription
	enum <anonymous> kCFStringTokenizerTokenHasDerivedSubTokensMask
	enum <anonymous> kCFStringTokenizerTokenHasHasNumbersMask
	enum <anonymous> kCFStringTokenizerTokenHasNonLettersMask
	enum <anonymous> kCFStringTokenizerTokenHasSubTokensMask
	enum <anonymous> kCFStringTokenizerTokenIsCJWordMask
	enum <anonymous> kCFStringTokenizerTokenNone
	enum <anonymous> kCFStringTokenizerTokenNormal
	enum <anonymous> kCFStringTokenizerUnitLineBreak
	enum <anonymous> kCFStringTokenizerUnitParagraph
	enum <anonymous> kCFStringTokenizerUnitSentence
	enum <anonymous> kCFStringTokenizerUnitWord
	enum <anonymous> kCFStringTokenizerUnitWordBoundary
	const CFStringRef kCFStringTransformFullwidthHalfwidth
	const CFStringRef kCFStringTransformHiraganaKatakana
	const CFStringRef kCFStringTransformLatinArabic
	const CFStringRef kCFStringTransformLatinCyrillic
	const CFStringRef kCFStringTransformLatinGreek
	const CFStringRef kCFStringTransformLatinHangul
	const CFStringRef kCFStringTransformLatinHebrew
	const CFStringRef kCFStringTransformLatinHiragana
	const CFStringRef kCFStringTransformLatinKatakana
	const CFStringRef kCFStringTransformLatinThai
	const CFStringRef kCFStringTransformMandarinLatin
	const CFStringRef kCFStringTransformStripCombiningMarks
	const CFStringRef kCFStringTransformStripDiacritics
	const CFStringRef kCFStringTransformToLatin
	const CFStringRef kCFStringTransformToUnicodeName
	const CFStringRef kCFStringTransformToXMLHex
	enum <anonymous> kCFTimeZoneNameStyleDaylightSaving
	enum <anonymous> kCFTimeZoneNameStyleGeneric
	enum <anonymous> kCFTimeZoneNameStyleShortDaylightSaving
	enum <anonymous> kCFTimeZoneNameStyleShortGeneric
	enum <anonymous> kCFTimeZoneNameStyleShortStandard
	enum <anonymous> kCFTimeZoneNameStyleStandard
	const CFStringRef kCFTimeZoneSystemTimeZoneDidChangeNotification
	const CFArrayCallBacks kCFTypeArrayCallBacks
	const CFBagCallBacks kCFTypeBagCallBacks
	const CFDictionaryKeyCallBacks kCFTypeDictionaryKeyCallBacks
	const CFDictionaryValueCallBacks kCFTypeDictionaryValueCallBacks
	const CFSetCallBacks kCFTypeSetCallBacks
	const CFStringRef kCFURLAttributeModificationDateKey
	enum <anonymous> kCFURLBookmarkCreationMinimalBookmarkMask
	enum <anonymous> kCFURLBookmarkCreationPreferFileIDResolutionMask
	enum <anonymous> kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess
	enum <anonymous> kCFURLBookmarkCreationSuitableForBookmarkFile
	enum <anonymous> kCFURLBookmarkCreationWithSecurityScope
	enum <anonymous> kCFURLBookmarkResolutionWithSecurityScope
	enum <anonymous> kCFURLComponentFragment
	enum <anonymous> kCFURLComponentHost
	enum <anonymous> kCFURLComponentNetLocation
	enum <anonymous> kCFURLComponentParameterString
	enum <anonymous> kCFURLComponentPassword
	enum <anonymous> kCFURLComponentPath
	enum <anonymous> kCFURLComponentPort
	enum <anonymous> kCFURLComponentQuery
	enum <anonymous> kCFURLComponentResourceSpecifier
	enum <anonymous> kCFURLComponentScheme
	enum <anonymous> kCFURLComponentUser
	enum <anonymous> kCFURLComponentUserInfo
	const CFStringRef kCFURLContentAccessDateKey
	const CFStringRef kCFURLContentModificationDateKey
	const CFStringRef kCFURLCreationDateKey
	const CFStringRef kCFURLCustomIconKey
	const CFStringRef kCFURLEffectiveIconKey
	enum <anonymous> kCFURLEnumeratorDefaultBehavior
	enum <anonymous> kCFURLEnumeratorDescendRecursively
	enum <anonymous> kCFURLEnumeratorDirectoryPostOrderSuccess
	enum <anonymous> kCFURLEnumeratorEnd
	enum <anonymous> kCFURLEnumeratorError
	enum <anonymous> kCFURLEnumeratorGenerateFileReferenceURLs
	enum <anonymous> kCFURLEnumeratorIncludeDirectoriesPostOrder
	enum <anonymous> kCFURLEnumeratorIncludeDirectoriesPreOrder
	enum <anonymous> kCFURLEnumeratorSkipInvisibles
	enum <anonymous> kCFURLEnumeratorSkipPackageContents
	enum <anonymous> kCFURLEnumeratorSuccess
	CFNetworkErrors kCFURLErrorBadServerResponse
	CFNetworkErrors kCFURLErrorBadURL
	CFNetworkErrors kCFURLErrorCallIsActive
	CFNetworkErrors kCFURLErrorCancelled
	CFNetworkErrors kCFURLErrorCannotCloseFile
	CFNetworkErrors kCFURLErrorCannotConnectToHost
	CFNetworkErrors kCFURLErrorCannotCreateFile
	CFNetworkErrors kCFURLErrorCannotDecodeContentData
	CFNetworkErrors kCFURLErrorCannotDecodeRawData
	CFNetworkErrors kCFURLErrorCannotFindHost
	CFNetworkErrors kCFURLErrorCannotLoadFromNetwork
	CFNetworkErrors kCFURLErrorCannotMoveFile
	CFNetworkErrors kCFURLErrorCannotOpenFile
	CFNetworkErrors kCFURLErrorCannotParseResponse
	CFNetworkErrors kCFURLErrorCannotRemoveFile
	CFNetworkErrors kCFURLErrorCannotWriteToFile
	CFNetworkErrors kCFURLErrorClientCertificateRejected
	CFNetworkErrors kCFURLErrorClientCertificateRequired
	CFNetworkErrors kCFURLErrorDataLengthExceedsMaximum
	CFNetworkErrors kCFURLErrorDataNotAllowed
	CFNetworkErrors kCFURLErrorDNSLookupFailed
	CFNetworkErrors kCFURLErrorDownloadDecodingFailedMidStream
	CFNetworkErrors kCFURLErrorDownloadDecodingFailedToComplete
	const CFStringRef kCFURLErrorFailingURLErrorKey
	const CFStringRef kCFURLErrorFailingURLStringErrorKey
	CFNetworkErrors kCFURLErrorFileDoesNotExist
	CFNetworkErrors kCFURLErrorFileIsDirectory
	CFNetworkErrors kCFURLErrorHTTPTooManyRedirects
	CFNetworkErrors kCFURLErrorInternationalRoamingOff
	CFNetworkErrors kCFURLErrorNetworkConnectionLost
	CFNetworkErrors kCFURLErrorNoPermissionsToReadFile
	CFNetworkErrors kCFURLErrorNotConnectedToInternet
	CFNetworkErrors kCFURLErrorRedirectToNonExistentLocation
	CFNetworkErrors kCFURLErrorRequestBodyStreamExhausted
	CFNetworkErrors kCFURLErrorResourceUnavailable
	CFNetworkErrors kCFURLErrorSecureConnectionFailed
	CFNetworkErrors kCFURLErrorServerCertificateHasBadDate
	CFNetworkErrors kCFURLErrorServerCertificateHasUnknownRoot
	CFNetworkErrors kCFURLErrorServerCertificateNotYetValid
	CFNetworkErrors kCFURLErrorServerCertificateUntrusted
	CFNetworkErrors kCFURLErrorTimedOut
	CFNetworkErrors kCFURLErrorUnknown
	CFNetworkErrors kCFURLErrorUnsupportedURL
	CFNetworkErrors kCFURLErrorUserAuthenticationRequired
	CFNetworkErrors kCFURLErrorUserCancelledAuthentication
	CFNetworkErrors kCFURLErrorZeroByteResource
	const CFStringRef kCFURLFileAllocatedSizeKey
	const CFStringRef kCFURLFileDirectoryContents
	const CFStringRef kCFURLFileExists
	const CFStringRef kCFURLFileLastModificationTime
	const CFStringRef kCFURLFileLength
	const CFStringRef kCFURLFileOwnerID
	const CFStringRef kCFURLFilePOSIXMode
	const CFStringRef kCFURLFileResourceIdentifierKey
	const CFStringRef kCFURLFileResourceTypeBlockSpecial
	const CFStringRef kCFURLFileResourceTypeCharacterSpecial
	const CFStringRef kCFURLFileResourceTypeDirectory
	const CFStringRef kCFURLFileResourceTypeKey
	const CFStringRef kCFURLFileResourceTypeNamedPipe
	const CFStringRef kCFURLFileResourceTypeRegular
	const CFStringRef kCFURLFileResourceTypeSocket
	const CFStringRef kCFURLFileResourceTypeSymbolicLink
	const CFStringRef kCFURLFileResourceTypeUnknown
	const CFStringRef kCFURLFileSecurityKey
	const CFStringRef kCFURLFileSizeKey
	const CFStringRef kCFURLHasHiddenExtensionKey
	enum <anonymous> kCFURLHFSPathStyle
	const CFStringRef kCFURLHTTPStatusCode
	const CFStringRef kCFURLHTTPStatusLine
	enum <anonymous> kCFURLImproperArgumentsError
	const CFStringRef kCFURLIsAliasFileKey
	const CFStringRef kCFURLIsDirectoryKey
	const CFStringRef kCFURLIsExcludedFromBackupKey
	const CFStringRef kCFURLIsExecutableKey
	const CFStringRef kCFURLIsHiddenKey
	const CFStringRef kCFURLIsMountTriggerKey
	const CFStringRef kCFURLIsPackageKey
	const CFStringRef kCFURLIsReadableKey
	const CFStringRef kCFURLIsRegularFileKey
	const CFStringRef kCFURLIsSymbolicLinkKey
	const CFStringRef kCFURLIsSystemImmutableKey
	const CFStringRef kCFURLIsUbiquitousItemKey
	const CFStringRef kCFURLIsUserImmutableKey
	const CFStringRef kCFURLIsVolumeKey
	const CFStringRef kCFURLIsWritableKey
	const CFStringRef kCFURLKeysOfUnsetValuesKey
	const CFStringRef kCFURLLabelColorKey
	const CFStringRef kCFURLLabelNumberKey
	const CFStringRef kCFURLLinkCountKey
	const CFStringRef kCFURLLocalizedLabelKey
	const CFStringRef kCFURLLocalizedNameKey
	const CFStringRef kCFURLLocalizedTypeDescriptionKey
	const CFStringRef kCFURLNameKey
	const CFStringRef kCFURLParentDirectoryURLKey
	const CFStringRef kCFURLPathKey
	enum <anonymous> kCFURLPOSIXPathStyle
	const CFStringRef kCFURLPreferredIOBlockSizeKey
	enum <anonymous> kCFURLPropertyKeyUnavailableError
	enum <anonymous> kCFURLRemoteHostUnavailableError
	enum <anonymous> kCFURLResourceAccessViolationError
	enum <anonymous> kCFURLResourceNotFoundError
	enum <anonymous> kCFURLTimeoutError
	const CFStringRef kCFURLTotalFileAllocatedSizeKey
	const CFStringRef kCFURLTotalFileSizeKey
	const CFStringRef kCFURLTypeIdentifierKey
	const CFStringRef kCFURLUbiquitousItemHasUnresolvedConflictsKey
	const CFStringRef kCFURLUbiquitousItemIsDownloadedKey
	const CFStringRef kCFURLUbiquitousItemIsDownloadingKey
	const CFStringRef kCFURLUbiquitousItemIsUploadedKey
	const CFStringRef kCFURLUbiquitousItemIsUploadingKey
	const CFStringRef kCFURLUbiquitousItemPercentDownloadedKey
	const CFStringRef kCFURLUbiquitousItemPercentUploadedKey
	enum <anonymous> kCFURLUnknownError
	enum <anonymous> kCFURLUnknownPropertyKeyError
	enum <anonymous> kCFURLUnknownSchemeError
	const CFStringRef kCFURLVolumeAvailableCapacityKey
	const CFStringRef kCFURLVolumeCreationDateKey
	const CFStringRef kCFURLVolumeIdentifierKey
	const CFStringRef kCFURLVolumeIsAutomountedKey
	const CFStringRef kCFURLVolumeIsBrowsableKey
	const CFStringRef kCFURLVolumeIsEjectableKey
	const CFStringRef kCFURLVolumeIsInternalKey
	const CFStringRef kCFURLVolumeIsJournalingKey
	const CFStringRef kCFURLVolumeIsLocalKey
	const CFStringRef kCFURLVolumeIsReadOnlyKey
	const CFStringRef kCFURLVolumeIsRemovableKey
	const CFStringRef kCFURLVolumeLocalizedFormatDescriptionKey
	const CFStringRef kCFURLVolumeLocalizedNameKey
	const CFStringRef kCFURLVolumeMaximumFileSizeKey
	const CFStringRef kCFURLVolumeNameKey
	const CFStringRef kCFURLVolumeResourceCountKey
	const CFStringRef kCFURLVolumeSupportsAdvisoryFileLockingKey
	const CFStringRef kCFURLVolumeSupportsCasePreservedNamesKey
	const CFStringRef kCFURLVolumeSupportsCaseSensitiveNamesKey
	const CFStringRef kCFURLVolumeSupportsExtendedSecurityKey
	const CFStringRef kCFURLVolumeSupportsHardLinksKey
	const CFStringRef kCFURLVolumeSupportsJournalingKey
	const CFStringRef kCFURLVolumeSupportsPersistentIDsKey
	const CFStringRef kCFURLVolumeSupportsRenamingKey
	const CFStringRef kCFURLVolumeSupportsRootDirectoryDatesKey
	const CFStringRef kCFURLVolumeSupportsSparseFilesKey
	const CFStringRef kCFURLVolumeSupportsSymbolicLinksKey
	const CFStringRef kCFURLVolumeSupportsVolumeSizesKey
	const CFStringRef kCFURLVolumeSupportsZeroRunsKey
	const CFStringRef kCFURLVolumeTotalCapacityKey
	const CFStringRef kCFURLVolumeURLForRemountingKey
	const CFStringRef kCFURLVolumeURLKey
	const CFStringRef kCFURLVolumeUUIDStringKey
	enum <anonymous> kCFURLWindowsPathStyle
	const CFStringRef kCFUserNotificationAlertHeaderKey
	const CFStringRef kCFUserNotificationAlertMessageKey
	const CFStringRef kCFUserNotificationAlternateButtonTitleKey
	enum <anonymous> kCFUserNotificationAlternateResponse
	enum <anonymous> kCFUserNotificationCancelResponse
	enum <anonymous> kCFUserNotificationCautionAlertLevel
	const CFStringRef kCFUserNotificationCheckBoxTitlesKey
	const CFStringRef kCFUserNotificationDefaultButtonTitleKey
	enum <anonymous> kCFUserNotificationDefaultResponse
	const CFStringRef kCFUserNotificationIconURLKey
	const CFStringRef kCFUserNotificationLocalizationURLKey
	enum <anonymous> kCFUserNotificationNoDefaultButtonFlag
	enum <anonymous> kCFUserNotificationNoteAlertLevel
	const CFStringRef kCFUserNotificationOtherButtonTitleKey
	enum <anonymous> kCFUserNotificationOtherResponse
	enum <anonymous> kCFUserNotificationPlainAlertLevel
	const CFStringRef kCFUserNotificationPopUpSelectionKey
	const CFStringRef kCFUserNotificationPopUpTitlesKey
	const CFStringRef kCFUserNotificationProgressIndicatorValueKey
	const CFStringRef kCFUserNotificationSoundURLKey
	enum <anonymous> kCFUserNotificationStopAlertLevel
	const CFStringRef kCFUserNotificationTextFieldTitlesKey
	const CFStringRef kCFUserNotificationTextFieldValuesKey
	enum <anonymous> kCFUserNotificationUseRadioButtonsFlag
	enum <anonymous> kCFXMLEntityTypeCharacter
	enum <anonymous> kCFXMLEntityTypeParameter
	enum <anonymous> kCFXMLEntityTypeParsedExternal
	enum <anonymous> kCFXMLEntityTypeParsedInternal
	enum <anonymous> kCFXMLEntityTypeUnparsed
	enum <anonymous> kCFXMLErrorElementlessDocument
	enum <anonymous> kCFXMLErrorEncodingConversionFailure
	enum <anonymous> kCFXMLErrorMalformedCDSect
	enum <anonymous> kCFXMLErrorMalformedCharacterReference
	enum <anonymous> kCFXMLErrorMalformedCloseTag
	enum <anonymous> kCFXMLErrorMalformedComment
	enum <anonymous> kCFXMLErrorMalformedDocument
	enum <anonymous> kCFXMLErrorMalformedDTD
	enum <anonymous> kCFXMLErrorMalformedName
	enum <anonymous> kCFXMLErrorMalformedParsedCharacterData
	enum <anonymous> kCFXMLErrorMalformedProcessingInstruction
	enum <anonymous> kCFXMLErrorMalformedStartTag
	enum <anonymous> kCFXMLErrorNoData
	enum <anonymous> kCFXMLErrorUnexpectedEOF
	enum <anonymous> kCFXMLErrorUnknownEncoding
	enum <anonymous> kCFXMLNodeCurrentVersion
	enum <anonymous> kCFXMLNodeTypeAttribute
	enum <anonymous> kCFXMLNodeTypeAttributeListDeclaration
	enum <anonymous> kCFXMLNodeTypeCDATASection
	enum <anonymous> kCFXMLNodeTypeComment
	enum <anonymous> kCFXMLNodeTypeDocument
	enum <anonymous> kCFXMLNodeTypeDocumentFragment
	enum <anonymous> kCFXMLNodeTypeDocumentType
	enum <anonymous> kCFXMLNodeTypeElement
	enum <anonymous> kCFXMLNodeTypeElementTypeDeclaration
	enum <anonymous> kCFXMLNodeTypeEntity
	enum <anonymous> kCFXMLNodeTypeEntityReference
	enum <anonymous> kCFXMLNodeTypeNotation
	enum <anonymous> kCFXMLNodeTypeProcessingInstruction
	enum <anonymous> kCFXMLNodeTypeText
	enum <anonymous> kCFXMLNodeTypeWhitespace
	enum <anonymous> kCFXMLParserAddImpliedAttributes
	enum <anonymous> kCFXMLParserAllOptions
	enum <anonymous> kCFXMLParserNoOptions
	enum <anonymous> kCFXMLParserReplacePhysicalEntities
	enum <anonymous> kCFXMLParserResolveExternalEntities
	enum <anonymous> kCFXMLParserSkipMetaData
	enum <anonymous> kCFXMLParserSkipWhitespace
	enum <anonymous> kCFXMLParserValidateDocument
	enum <anonymous> kCFXMLStatusParseInProgress
	enum <anonymous> kCFXMLStatusParseNotBegun
	enum <anonymous> kCFXMLStatusParseSuccessful
	const CFStringRef kCFXMLTreeErrorDescription
	const CFStringRef kCFXMLTreeErrorLineNumber
	const CFStringRef kCFXMLTreeErrorLocation
	const CFStringRef kCFXMLTreeErrorStatusCode
	enum <anonymous> kCGAnnotatedSessionEventTap
	enum <anonymous> kCGAssistiveTechHighWindowLevelKey
	enum <anonymous> kCGBackingStoreBuffered
	enum <anonymous> kCGBackingStoreNonretained
	enum <anonymous> kCGBackingStoreRetained
	enum <anonymous> kCGBackstopMenuLevelKey
	enum <anonymous> kCGBaseWindowLevelKey
	enum <anonymous> kCGBitmapAlphaInfoMask
	enum <anonymous> kCGBitmapByteOrder16Big
	enum <anonymous> kCGBitmapByteOrder16Little
	enum <anonymous> kCGBitmapByteOrder32Big
	enum <anonymous> kCGBitmapByteOrder32Little
	enum <anonymous> kCGBitmapByteOrderDefault
	enum <anonymous> kCGBitmapByteOrderMask
	enum <anonymous> kCGBitmapFloatComponents
	CGBlendMode kCGBlendModeClear
	CGBlendMode kCGBlendModeColor
	CGBlendMode kCGBlendModeColorBurn
	CGBlendMode kCGBlendModeColorDodge
	CGBlendMode kCGBlendModeCopy
	CGBlendMode kCGBlendModeDarken
	CGBlendMode kCGBlendModeDestinationAtop
	CGBlendMode kCGBlendModeDestinationIn
	CGBlendMode kCGBlendModeDestinationOut
	CGBlendMode kCGBlendModeDestinationOver
	CGBlendMode kCGBlendModeDifference
	CGBlendMode kCGBlendModeExclusion
	CGBlendMode kCGBlendModeHardLight
	CGBlendMode kCGBlendModeHue
	CGBlendMode kCGBlendModeLighten
	CGBlendMode kCGBlendModeLuminosity
	CGBlendMode kCGBlendModeMultiply
	CGBlendMode kCGBlendModeNormal
	CGBlendMode kCGBlendModeOverlay
	CGBlendMode kCGBlendModePlusDarker
	CGBlendMode kCGBlendModePlusLighter
	CGBlendMode kCGBlendModeSaturation
	CGBlendMode kCGBlendModeScreen
	CGBlendMode kCGBlendModeSoftLight
	CGBlendMode kCGBlendModeSourceAtop
	CGBlendMode kCGBlendModeSourceIn
	CGBlendMode kCGBlendModeSourceOut
	CGBlendMode kCGBlendModeXOR
	enum <anonymous> kCGCaptureNoFill
	enum <anonymous> kCGCaptureNoOptions
	const CFStringRef kCGColorBlack
	const CFStringRef kCGColorClear
	const CFStringRef kCGColorSpaceAdobeRGB1998
	const CFStringRef kCGColorSpaceGenericCMYK
	const CFStringRef kCGColorSpaceGenericGray
	const CFStringRef kCGColorSpaceGenericGrayGamma2_2
	const CFStringRef kCGColorSpaceGenericRGB
	const CFStringRef kCGColorSpaceGenericRGBLinear
	CGColorSpaceModel kCGColorSpaceModelCMYK
	CGColorSpaceModel kCGColorSpaceModelDeviceN
	CGColorSpaceModel kCGColorSpaceModelIndexed
	CGColorSpaceModel kCGColorSpaceModelLab
	CGColorSpaceModel kCGColorSpaceModelMonochrome
	CGColorSpaceModel kCGColorSpaceModelPattern
	CGColorSpaceModel kCGColorSpaceModelRGB
	CGColorSpaceModel kCGColorSpaceModelUnknown
	const CFStringRef kCGColorSpaceSRGB
	const CFStringRef kCGColorWhite
	enum <anonymous> kCGConfigureForAppOnly
	enum <anonymous> kCGConfigureForSession
	enum <anonymous> kCGConfigurePermanently
	enum <anonymous> kCGCursorWindowLevelKey
	enum <anonymous> kCGDesktopIconWindowLevelKey
	enum <anonymous> kCGDesktopWindowLevelKey
	enum <anonymous> kCGDisplayAddFlag
	enum <anonymous> kCGDisplayBeginConfigurationFlag
	enum <anonymous> kCGDisplayDesktopShapeChangedFlag
	enum <anonymous> kCGDisplayDisabledFlag
	enum <anonymous> kCGDisplayEnabledFlag
	enum <anonymous> kCGDisplayMirrorFlag
	enum <anonymous> kCGDisplayMovedFlag
	enum <anonymous> kCGDisplayRemoveFlag
	enum <anonymous> kCGDisplaySetMainFlag
	enum <anonymous> kCGDisplaySetModeFlag
	const CFStringRef kCGDisplayShowDuplicateLowResolutionModes
	const CFStringRef kCGDisplayStreamColorSpace
	const CFStringRef kCGDisplayStreamDestinationRect
	enum <anonymous> kCGDisplayStreamFrameStatusFrameBlank
	enum <anonymous> kCGDisplayStreamFrameStatusFrameComplete
	enum <anonymous> kCGDisplayStreamFrameStatusFrameIdle
	enum <anonymous> kCGDisplayStreamFrameStatusStopped
	const CFStringRef kCGDisplayStreamMinimumFrameTime
	const CFStringRef kCGDisplayStreamPreserveAspectRatio
	const CFStringRef kCGDisplayStreamQueueDepth
	const CFStringRef kCGDisplayStreamShowCursor
	const CFStringRef kCGDisplayStreamSourceRect
	enum <anonymous> kCGDisplayStreamUpdateDirtyRects
	enum <anonymous> kCGDisplayStreamUpdateMovedRects
	enum <anonymous> kCGDisplayStreamUpdateReducedDirtyRects
	enum <anonymous> kCGDisplayStreamUpdateRefreshedRects
	const CFStringRef kCGDisplayStreamYCbCrMatrix
	const CFStringRef kCGDisplayStreamYCbCrMatrix_ITU_R_601_4
	const CFStringRef kCGDisplayStreamYCbCrMatrix_ITU_R_709_2
	const CFStringRef kCGDisplayStreamYCbCrMatrix_SMPTE_240M_1995
	enum <anonymous> kCGDisplayUnMirrorFlag
	enum <anonymous> kCGDockWindowLevelKey
	enum <anonymous> kCGDraggingWindowLevelKey
	CGTextEncoding kCGEncodingFontSpecific
	CGTextEncoding kCGEncodingMacRoman
	_CGError kCGErrorCannotComplete
	_CGError kCGErrorFailure
	_CGError kCGErrorIllegalArgument
	_CGError kCGErrorInvalidConnection
	_CGError kCGErrorInvalidContext
	_CGError kCGErrorInvalidOperation
	_CGError kCGErrorNoneAvailable
	_CGError kCGErrorNotImplemented
	_CGError kCGErrorRangeCheck
	_CGError kCGErrorSuccess
	_CGError kCGErrorTypeCheck
	enum <anonymous> kCGEventFilterMaskPermitLocalKeyboardEvents
	enum <anonymous> kCGEventFilterMaskPermitLocalMouseEvents
	enum <anonymous> kCGEventFilterMaskPermitSystemDefinedEvents
	enum <anonymous> kCGEventFlagMaskAlphaShift
	enum <anonymous> kCGEventFlagMaskAlternate
	enum <anonymous> kCGEventFlagMaskCommand
	enum <anonymous> kCGEventFlagMaskControl
	enum <anonymous> kCGEventFlagMaskHelp
	enum <anonymous> kCGEventFlagMaskNonCoalesced
	enum <anonymous> kCGEventFlagMaskNumericPad
	enum <anonymous> kCGEventFlagMaskSecondaryFn
	enum <anonymous> kCGEventFlagMaskShift
	enum <anonymous> kCGEventFlagsChanged
	enum <anonymous> kCGEventKeyDown
	enum <anonymous> kCGEventKeyUp
	enum <anonymous> kCGEventLeftMouseDown
	enum <anonymous> kCGEventLeftMouseDragged
	enum <anonymous> kCGEventLeftMouseUp
	enum <anonymous> kCGEventMouseMoved
	enum <anonymous> kCGEventMouseSubtypeDefault
	enum <anonymous> kCGEventMouseSubtypeTabletPoint
	enum <anonymous> kCGEventMouseSubtypeTabletProximity
	enum <anonymous> kCGEventNull
	enum <anonymous> kCGEventOtherMouseDown
	enum <anonymous> kCGEventOtherMouseDragged
	enum <anonymous> kCGEventOtherMouseUp
	enum <anonymous> kCGEventRightMouseDown
	enum <anonymous> kCGEventRightMouseDragged
	enum <anonymous> kCGEventRightMouseUp
	enum <anonymous> kCGEventScrollWheel
	enum <anonymous> kCGEventSourceGroupID
	enum <anonymous> kCGEventSourceStateCombinedSessionState
	enum <anonymous> kCGEventSourceStateHIDSystemState
	enum <anonymous> kCGEventSourceStateID
	enum <anonymous> kCGEventSourceStatePrivate
	enum <anonymous> kCGEventSourceUnixProcessID
	enum <anonymous> kCGEventSourceUserData
	enum <anonymous> kCGEventSourceUserID
	enum <anonymous> kCGEventSuppressionStateRemoteMouseDrag
	enum <anonymous> kCGEventSuppressionStateSuppressionInterval
	enum <anonymous> kCGEventTabletPointer
	enum <anonymous> kCGEventTabletProximity
	enum <anonymous> kCGEventTapDisabledByTimeout
	enum <anonymous> kCGEventTapDisabledByUserInput
	enum <anonymous> kCGEventTapOptionDefault
	enum <anonymous> kCGEventTapOptionListenOnly
	enum <anonymous> kCGEventTargetProcessSerialNumber
	enum <anonymous> kCGEventTargetUnixProcessID
	enum <anonymous> kCGFloatingWindowLevelKey
	enum <anonymous> kCGFontIndexInvalid
	enum <anonymous> kCGFontIndexMax
	CGFontPostScriptFormat kCGFontPostScriptFormatType1
	CGFontPostScriptFormat kCGFontPostScriptFormatType3
	CGFontPostScriptFormat kCGFontPostScriptFormatType42
	const CFStringRef kCGFontVariationAxisDefaultValue
	const CFStringRef kCGFontVariationAxisMaxValue
	const CFStringRef kCGFontVariationAxisMinValue
	const CFStringRef kCGFontVariationAxisName
	enum <anonymous> kCGGlyphMax
	enum <anonymous> kCGGradientDrawsAfterEndLocation
	enum <anonymous> kCGGradientDrawsBeforeStartLocation
	enum <anonymous> kCGHeadInsertEventTap
	enum <anonymous> kCGHelpWindowLevelKey
	enum <anonymous> kCGHIDEventTap
	CGImageAlphaInfo kCGImageAlphaFirst
	CGImageAlphaInfo kCGImageAlphaLast
	CGImageAlphaInfo kCGImageAlphaNone
	CGImageAlphaInfo kCGImageAlphaNoneSkipFirst
	CGImageAlphaInfo kCGImageAlphaNoneSkipLast
	CGImageAlphaInfo kCGImageAlphaOnly
	CGImageAlphaInfo kCGImageAlphaPremultipliedFirst
	CGImageAlphaInfo kCGImageAlphaPremultipliedLast
	const CFStringRef kCGImageDestinationBackgroundColor
	const CFStringRef kCGImageDestinationDateTime
	const CFStringRef kCGImageDestinationLossyCompressionQuality
	const CFStringRef kCGImageDestinationMergeMetadata
	const CFStringRef kCGImageDestinationMetadata
	const CFStringRef kCGImageDestinationOrientation
	const CFStringRef kCGImageMetadataEnumerateRecursively
	CGImageMetadataErrors kCGImageMetadataErrorBadArgument
	CGImageMetadataErrors kCGImageMetadataErrorConflictingArguments
	CGImageMetadataErrors kCGImageMetadataErrorPrefixConflict
	CGImageMetadataErrors kCGImageMetadataErrorUnknown
	CGImageMetadataErrors kCGImageMetadataErrorUnsupportedFormat
	const CFStringRef kCGImageMetadataNamespaceDublinCore
	const CFStringRef kCGImageMetadataNamespaceExif
	const CFStringRef kCGImageMetadataNamespaceExifAux
	const CFStringRef kCGImageMetadataNamespaceIPTCCore
	const CFStringRef kCGImageMetadataNamespacePhotoshop
	const CFStringRef kCGImageMetadataNamespaceTIFF
	const CFStringRef kCGImageMetadataNamespaceXMPBasic
	const CFStringRef kCGImageMetadataNamespaceXMPRights
	const CFStringRef kCGImageMetadataPrefixDublinCore
	const CFStringRef kCGImageMetadataPrefixExif
	const CFStringRef kCGImageMetadataPrefixExifAux
	const CFStringRef kCGImageMetadataPrefixIPTCCore
	const CFStringRef kCGImageMetadataPrefixPhotoshop
	const CFStringRef kCGImageMetadataPrefixTIFF
	const CFStringRef kCGImageMetadataPrefixXMPBasic
	const CFStringRef kCGImageMetadataPrefixXMPRights
	const CFStringRef kCGImageMetadataShouldExcludeXMP
	CGImageMetadataType kCGImageMetadataTypeAlternateArray
	CGImageMetadataType kCGImageMetadataTypeAlternateText
	CGImageMetadataType kCGImageMetadataTypeArrayOrdered
	CGImageMetadataType kCGImageMetadataTypeArrayUnordered
	CGImageMetadataType kCGImageMetadataTypeDefault
	CGImageMetadataType kCGImageMetadataTypeInvalid
	CGImageMetadataType kCGImageMetadataTypeString
	CGImageMetadataType kCGImageMetadataTypeStructure
	const CFStringRef kCGImageProperty8BIMDictionary
	const CFStringRef kCGImageProperty8BIMLayerNames
	const CFStringRef kCGImagePropertyCIFFCameraSerialNumber
	const CFStringRef kCGImagePropertyCIFFContinuousDrive
	const CFStringRef kCGImagePropertyCIFFDescription
	const CFStringRef kCGImagePropertyCIFFDictionary
	const CFStringRef kCGImagePropertyCIFFFirmware
	const CFStringRef kCGImagePropertyCIFFFlashExposureComp
	const CFStringRef kCGImagePropertyCIFFFocusMode
	const CFStringRef kCGImagePropertyCIFFImageFileName
	const CFStringRef kCGImagePropertyCIFFImageName
	const CFStringRef kCGImagePropertyCIFFImageSerialNumber
	const CFStringRef kCGImagePropertyCIFFLensMaxMM
	const CFStringRef kCGImagePropertyCIFFLensMinMM
	const CFStringRef kCGImagePropertyCIFFLensModel
	const CFStringRef kCGImagePropertyCIFFMeasuredEV
	const CFStringRef kCGImagePropertyCIFFMeteringMode
	const CFStringRef kCGImagePropertyCIFFOwnerName
	const CFStringRef kCGImagePropertyCIFFRecordID
	const CFStringRef kCGImagePropertyCIFFReleaseMethod
	const CFStringRef kCGImagePropertyCIFFReleaseTiming
	const CFStringRef kCGImagePropertyCIFFSelfTimingTime
	const CFStringRef kCGImagePropertyCIFFShootingMode
	const CFStringRef kCGImagePropertyCIFFWhiteBalanceIndex
	const CFStringRef kCGImagePropertyColorModel
	const CFStringRef kCGImagePropertyColorModelCMYK
	const CFStringRef kCGImagePropertyColorModelGray
	const CFStringRef kCGImagePropertyColorModelLab
	const CFStringRef kCGImagePropertyColorModelRGB
	const CFStringRef kCGImagePropertyDepth
	const CFStringRef kCGImagePropertyDNGBackwardVersion
	const CFStringRef kCGImagePropertyDNGCameraSerialNumber
	const CFStringRef kCGImagePropertyDNGDictionary
	const CFStringRef kCGImagePropertyDNGLensInfo
	const CFStringRef kCGImagePropertyDNGLocalizedCameraModel
	const CFStringRef kCGImagePropertyDNGUniqueCameraModel
	const CFStringRef kCGImagePropertyDNGVersion
	const CFStringRef kCGImagePropertyDPIHeight
	const CFStringRef kCGImagePropertyDPIWidth
	const CFStringRef kCGImagePropertyExifApertureValue
	const CFStringRef kCGImagePropertyExifAuxDictionary
	const CFStringRef kCGImagePropertyExifAuxFirmware
	const CFStringRef kCGImagePropertyExifAuxFlashCompensation
	const CFStringRef kCGImagePropertyExifAuxImageNumber
	const CFStringRef kCGImagePropertyExifAuxLensID
	const CFStringRef kCGImagePropertyExifAuxLensInfo
	const CFStringRef kCGImagePropertyExifAuxLensModel
	const CFStringRef kCGImagePropertyExifAuxLensSerialNumber
	const CFStringRef kCGImagePropertyExifAuxOwnerName
	const CFStringRef kCGImagePropertyExifAuxSerialNumber
	const CFStringRef kCGImagePropertyExifBodySerialNumber
	const CFStringRef kCGImagePropertyExifBrightnessValue
	const CFStringRef kCGImagePropertyExifCameraOwnerName
	const CFStringRef kCGImagePropertyExifCFAPattern
	const CFStringRef kCGImagePropertyExifColorSpace
	const CFStringRef kCGImagePropertyExifComponentsConfiguration
	const CFStringRef kCGImagePropertyExifCompressedBitsPerPixel
	const CFStringRef kCGImagePropertyExifContrast
	const CFStringRef kCGImagePropertyExifCustomRendered
	const CFStringRef kCGImagePropertyExifDateTimeDigitized
	const CFStringRef kCGImagePropertyExifDateTimeOriginal
	const CFStringRef kCGImagePropertyExifDeviceSettingDescription
	const CFStringRef kCGImagePropertyExifDictionary
	const CFStringRef kCGImagePropertyExifDigitalZoomRatio
	const CFStringRef kCGImagePropertyExifExposureBiasValue
	const CFStringRef kCGImagePropertyExifExposureIndex
	const CFStringRef kCGImagePropertyExifExposureMode
	const CFStringRef kCGImagePropertyExifExposureProgram
	const CFStringRef kCGImagePropertyExifExposureTime
	const CFStringRef kCGImagePropertyExifFileSource
	const CFStringRef kCGImagePropertyExifFlash
	const CFStringRef kCGImagePropertyExifFlashEnergy
	const CFStringRef kCGImagePropertyExifFlashPixVersion
	const CFStringRef kCGImagePropertyExifFNumber
	const CFStringRef kCGImagePropertyExifFocalLength
	const CFStringRef kCGImagePropertyExifFocalLenIn35mmFilm
	const CFStringRef kCGImagePropertyExifFocalPlaneResolutionUnit
	const CFStringRef kCGImagePropertyExifFocalPlaneXResolution
	const CFStringRef kCGImagePropertyExifFocalPlaneYResolution
	const CFStringRef kCGImagePropertyExifGainControl
	const CFStringRef kCGImagePropertyExifGamma
	const CFStringRef kCGImagePropertyExifImageUniqueID
	const CFStringRef kCGImagePropertyExifISOSpeedRatings
	const CFStringRef kCGImagePropertyExifLensMake
	const CFStringRef kCGImagePropertyExifLensModel
	const CFStringRef kCGImagePropertyExifLensSerialNumber
	const CFStringRef kCGImagePropertyExifLensSpecification
	const CFStringRef kCGImagePropertyExifLightSource
	const CFStringRef kCGImagePropertyExifMakerNote
	const CFStringRef kCGImagePropertyExifMaxApertureValue
	const CFStringRef kCGImagePropertyExifMeteringMode
	const CFStringRef kCGImagePropertyExifOECF
	const CFStringRef kCGImagePropertyExifPixelXDimension
	const CFStringRef kCGImagePropertyExifPixelYDimension
	const CFStringRef kCGImagePropertyExifRelatedSoundFile
	const CFStringRef kCGImagePropertyExifSaturation
	const CFStringRef kCGImagePropertyExifSceneCaptureType
	const CFStringRef kCGImagePropertyExifSceneType
	const CFStringRef kCGImagePropertyExifSensingMethod
	const CFStringRef kCGImagePropertyExifSharpness
	const CFStringRef kCGImagePropertyExifShutterSpeedValue
	const CFStringRef kCGImagePropertyExifSpatialFrequencyResponse
	const CFStringRef kCGImagePropertyExifSpectralSensitivity
	const CFStringRef kCGImagePropertyExifSubjectArea
	const CFStringRef kCGImagePropertyExifSubjectDistance
	const CFStringRef kCGImagePropertyExifSubjectDistRange
	const CFStringRef kCGImagePropertyExifSubjectLocation
	const CFStringRef kCGImagePropertyExifSubsecTime
	const CFStringRef kCGImagePropertyExifSubsecTimeDigitized
	const CFStringRef kCGImagePropertyExifSubsecTimeOrginal
	const CFStringRef kCGImagePropertyExifUserComment
	const CFStringRef kCGImagePropertyExifVersion
	const CFStringRef kCGImagePropertyExifWhiteBalance
	const CFStringRef kCGImagePropertyFileSize
	const CFStringRef kCGImagePropertyGIFDelayTime
	const CFStringRef kCGImagePropertyGIFDictionary
	const CFStringRef kCGImagePropertyGIFHasGlobalColorMap
	const CFStringRef kCGImagePropertyGIFImageColorMap
	const CFStringRef kCGImagePropertyGIFLoopCount
	const CFStringRef kCGImagePropertyGIFUnclampedDelayTime
	const CFStringRef kCGImagePropertyGPSAltitude
	const CFStringRef kCGImagePropertyGPSAltitudeRef
	const CFStringRef kCGImagePropertyGPSAreaInformation
	const CFStringRef kCGImagePropertyGPSDateStamp
	const CFStringRef kCGImagePropertyGPSDestBearing
	const CFStringRef kCGImagePropertyGPSDestBearingRef
	const CFStringRef kCGImagePropertyGPSDestDistance
	const CFStringRef kCGImagePropertyGPSDestDistanceRef
	const CFStringRef kCGImagePropertyGPSDestLatitude
	const CFStringRef kCGImagePropertyGPSDestLatitudeRef
	const CFStringRef kCGImagePropertyGPSDestLongitude
	const CFStringRef kCGImagePropertyGPSDestLongitudeRef
	const CFStringRef kCGImagePropertyGPSDictionary
	const CFStringRef kCGImagePropertyGPSDifferental
	const CFStringRef kCGImagePropertyGPSDOP
	const CFStringRef kCGImagePropertyGPSImgDirection
	const CFStringRef kCGImagePropertyGPSImgDirectionRef
	const CFStringRef kCGImagePropertyGPSLatitude
	const CFStringRef kCGImagePropertyGPSLatitudeRef
	const CFStringRef kCGImagePropertyGPSLongitude
	const CFStringRef kCGImagePropertyGPSLongitudeRef
	const CFStringRef kCGImagePropertyGPSMapDatum
	const CFStringRef kCGImagePropertyGPSMeasureMode
	const CFStringRef kCGImagePropertyGPSProcessingMethod
	const CFStringRef kCGImagePropertyGPSSatellites
	const CFStringRef kCGImagePropertyGPSSpeed
	const CFStringRef kCGImagePropertyGPSSpeedRef
	const CFStringRef kCGImagePropertyGPSStatus
	const CFStringRef kCGImagePropertyGPSTimeStamp
	const CFStringRef kCGImagePropertyGPSTrack
	const CFStringRef kCGImagePropertyGPSTrackRef
	const CFStringRef kCGImagePropertyGPSVersion
	const CFStringRef kCGImagePropertyHasAlpha
	const CFStringRef kCGImagePropertyIPTCActionAdvised
	const CFStringRef kCGImagePropertyIPTCByline
	const CFStringRef kCGImagePropertyIPTCBylineTitle
	const CFStringRef kCGImagePropertyIPTCCaptionAbstract
	const CFStringRef kCGImagePropertyIPTCCategory
	const CFStringRef kCGImagePropertyIPTCCity
	const CFStringRef kCGImagePropertyIPTCContact
	const CFStringRef kCGImagePropertyIPTCContactInfoAddress
	const CFStringRef kCGImagePropertyIPTCContactInfoCity
	const CFStringRef kCGImagePropertyIPTCContactInfoCountry
	const CFStringRef kCGImagePropertyIPTCContactInfoEmails
	const CFStringRef kCGImagePropertyIPTCContactInfoPhones
	const CFStringRef kCGImagePropertyIPTCContactInfoPostalCode
	const CFStringRef kCGImagePropertyIPTCContactInfoStateProvince
	const CFStringRef kCGImagePropertyIPTCContactInfoWebURLs
	const CFStringRef kCGImagePropertyIPTCContentLocationCode
	const CFStringRef kCGImagePropertyIPTCContentLocationName
	const CFStringRef kCGImagePropertyIPTCCopyrightNotice
	const CFStringRef kCGImagePropertyIPTCCountryPrimaryLocationCode
	const CFStringRef kCGImagePropertyIPTCCountryPrimaryLocationName
	const CFStringRef kCGImagePropertyIPTCCreatorContactInfo
	const CFStringRef kCGImagePropertyIPTCCredit
	const CFStringRef kCGImagePropertyIPTCDateCreated
	const CFStringRef kCGImagePropertyIPTCDictionary
	const CFStringRef kCGImagePropertyIPTCDigitalCreationDate
	const CFStringRef kCGImagePropertyIPTCDigitalCreationTime
	const CFStringRef kCGImagePropertyIPTCEditorialUpdate
	const CFStringRef kCGImagePropertyIPTCEditStatus
	const CFStringRef kCGImagePropertyIPTCExpirationDate
	const CFStringRef kCGImagePropertyIPTCExpirationTime
	const CFStringRef kCGImagePropertyIPTCFixtureIdentifier
	const CFStringRef kCGImagePropertyIPTCHeadline
	const CFStringRef kCGImagePropertyIPTCImageOrientation
	const CFStringRef kCGImagePropertyIPTCImageType
	const CFStringRef kCGImagePropertyIPTCKeywords
	const CFStringRef kCGImagePropertyIPTCLanguageIdentifier
	const CFStringRef kCGImagePropertyIPTCObjectAttributeReference
	const CFStringRef kCGImagePropertyIPTCObjectCycle
	const CFStringRef kCGImagePropertyIPTCObjectName
	const CFStringRef kCGImagePropertyIPTCObjectTypeReference
	const CFStringRef kCGImagePropertyIPTCOriginalTransmissionReference
	const CFStringRef kCGImagePropertyIPTCOriginatingProgram
	const CFStringRef kCGImagePropertyIPTCProgramVersion
	const CFStringRef kCGImagePropertyIPTCProvinceState
	const CFStringRef kCGImagePropertyIPTCReferenceDate
	const CFStringRef kCGImagePropertyIPTCReferenceNumber
	const CFStringRef kCGImagePropertyIPTCReferenceService
	const CFStringRef kCGImagePropertyIPTCReleaseDate
	const CFStringRef kCGImagePropertyIPTCReleaseTime
	const CFStringRef kCGImagePropertyIPTCRightsUsageTerms
	const CFStringRef kCGImagePropertyIPTCScene
	const CFStringRef kCGImagePropertyIPTCSource
	const CFStringRef kCGImagePropertyIPTCSpecialInstructions
	const CFStringRef kCGImagePropertyIPTCStarRating
	const CFStringRef kCGImagePropertyIPTCSubjectReference
	const CFStringRef kCGImagePropertyIPTCSubLocation
	const CFStringRef kCGImagePropertyIPTCSupplementalCategory
	const CFStringRef kCGImagePropertyIPTCTimeCreated
	const CFStringRef kCGImagePropertyIPTCUrgency
	const CFStringRef kCGImagePropertyIPTCWriterEditor
	const CFStringRef kCGImagePropertyIsFloat
	const CFStringRef kCGImagePropertyIsIndexed
	const CFStringRef kCGImagePropertyJFIFDensityUnit
	const CFStringRef kCGImagePropertyJFIFDictionary
	const CFStringRef kCGImagePropertyJFIFIsProgressive
	const CFStringRef kCGImagePropertyJFIFVersion
	const CFStringRef kCGImagePropertyJFIFXDensity
	const CFStringRef kCGImagePropertyJFIFYDensity
	const CFStringRef kCGImagePropertyMakerCanonAspectRatioInfo
	const CFStringRef kCGImagePropertyMakerCanonCameraSerialNumber
	const CFStringRef kCGImagePropertyMakerCanonContinuousDrive
	const CFStringRef kCGImagePropertyMakerCanonDictionary
	const CFStringRef kCGImagePropertyMakerCanonFirmware
	const CFStringRef kCGImagePropertyMakerCanonFlashExposureComp
	const CFStringRef kCGImagePropertyMakerCanonImageSerialNumber
	const CFStringRef kCGImagePropertyMakerCanonLensModel
	const CFStringRef kCGImagePropertyMakerCanonOwnerName
	const CFStringRef kCGImagePropertyMakerFujiDictionary
	const CFStringRef kCGImagePropertyMakerMinoltaDictionary
	const CFStringRef kCGImagePropertyMakerNikonCameraSerialNumber
	const CFStringRef kCGImagePropertyMakerNikonColorMode
	const CFStringRef kCGImagePropertyMakerNikonDictionary
	const CFStringRef kCGImagePropertyMakerNikonDigitalZoom
	const CFStringRef kCGImagePropertyMakerNikonFlashExposureComp
	const CFStringRef kCGImagePropertyMakerNikonFlashSetting
	const CFStringRef kCGImagePropertyMakerNikonFocusDistance
	const CFStringRef kCGImagePropertyMakerNikonFocusMode
	const CFStringRef kCGImagePropertyMakerNikonImageAdjustment
	const CFStringRef kCGImagePropertyMakerNikonISOSelection
	const CFStringRef kCGImagePropertyMakerNikonISOSetting
	const CFStringRef kCGImagePropertyMakerNikonLensAdapter
	const CFStringRef kCGImagePropertyMakerNikonLensInfo
	const CFStringRef kCGImagePropertyMakerNikonLensType
	const CFStringRef kCGImagePropertyMakerNikonQuality
	const CFStringRef kCGImagePropertyMakerNikonSharpenMode
	const CFStringRef kCGImagePropertyMakerNikonShootingMode
	const CFStringRef kCGImagePropertyMakerNikonShutterCount
	const CFStringRef kCGImagePropertyMakerNikonWhiteBalanceMode
	const CFStringRef kCGImagePropertyMakerOlympusDictionary
	const CFStringRef kCGImagePropertyMakerPentaxDictionary
	const CFStringRef kCGImagePropertyOrientation
	const CFStringRef kCGImagePropertyPixelHeight
	const CFStringRef kCGImagePropertyPixelWidth
	const CFStringRef kCGImagePropertyPNGAuthor
	const CFStringRef kCGImagePropertyPNGChromaticities
	const CFStringRef kCGImagePropertyPNGCopyright
	const CFStringRef kCGImagePropertyPNGCreationTime
	const CFStringRef kCGImagePropertyPNGDescription
	const CFStringRef kCGImagePropertyPNGDictionary
	const CFStringRef kCGImagePropertyPNGGamma
	const CFStringRef kCGImagePropertyPNGInterlaceType
	const CFStringRef kCGImagePropertyPNGModificationTime
	const CFStringRef kCGImagePropertyPNGSoftware
	const CFStringRef kCGImagePropertyPNGsRGBIntent
	const CFStringRef kCGImagePropertyPNGTitle
	const CFStringRef kCGImagePropertyPNGXPixelsPerMeter
	const CFStringRef kCGImagePropertyPNGYPixelsPerMeter
	const CFStringRef kCGImagePropertyProfileName
	const CFStringRef kCGImagePropertyRawDictionary
	const CFStringRef kCGImagePropertyTIFFArtist
	const CFStringRef kCGImagePropertyTIFFCompression
	const CFStringRef kCGImagePropertyTIFFCopyright
	const CFStringRef kCGImagePropertyTIFFDateTime
	const CFStringRef kCGImagePropertyTIFFDictionary
	const CFStringRef kCGImagePropertyTIFFDocumentName
	const CFStringRef kCGImagePropertyTIFFHostComputer
	const CFStringRef kCGImagePropertyTIFFImageDescription
	const CFStringRef kCGImagePropertyTIFFMake
	const CFStringRef kCGImagePropertyTIFFModel
	const CFStringRef kCGImagePropertyTIFFOrientation
	const CFStringRef kCGImagePropertyTIFFPhotometricInterpretation
	const CFStringRef kCGImagePropertyTIFFPrimaryChromaticities
	const CFStringRef kCGImagePropertyTIFFResolutionUnit
	const CFStringRef kCGImagePropertyTIFFSoftware
	const CFStringRef kCGImagePropertyTIFFTransferFunction
	const CFStringRef kCGImagePropertyTIFFWhitePoint
	const CFStringRef kCGImagePropertyTIFFXResolution
	const CFStringRef kCGImagePropertyTIFFYResolution
	const CFStringRef kCGImageSourceCreateThumbnailFromImageAlways
	const CFStringRef kCGImageSourceCreateThumbnailFromImageIfAbsent
	const CFStringRef kCGImageSourceCreateThumbnailWithTransform
	const CFStringRef kCGImageSourceShouldAllowFloat
	const CFStringRef kCGImageSourceShouldCache
	const CFStringRef kCGImageSourceThumbnailMaxPixelSize
	const CFStringRef kCGImageSourceTypeIdentifierHint
	CGImageSourceStatus kCGImageStatusComplete
	CGImageSourceStatus kCGImageStatusIncomplete
	CGImageSourceStatus kCGImageStatusInvalidData
	CGImageSourceStatus kCGImageStatusReadingHeader
	CGImageSourceStatus kCGImageStatusUnexpectedEOF
	CGImageSourceStatus kCGImageStatusUnknownType
	CGInterpolationQuality kCGInterpolationDefault
	CGInterpolationQuality kCGInterpolationHigh
	CGInterpolationQuality kCGInterpolationLow
	CGInterpolationQuality kCGInterpolationMedium
	CGInterpolationQuality kCGInterpolationNone
	enum <anonymous> kCGKeyboardEventAutorepeat
	enum <anonymous> kCGKeyboardEventKeyboardType
	enum <anonymous> kCGKeyboardEventKeycode
	_CGLError kCGLBadAddress
	_CGLError kCGLBadAlloc
	_CGLError kCGLBadAttribute
	_CGLError kCGLBadCodeModule
	_CGLError kCGLBadConnection
	_CGLError kCGLBadContext
	_CGLError kCGLBadDisplay
	_CGLError kCGLBadDrawable
	_CGLError kCGLBadEnumeration
	_CGLError kCGLBadFullScreen
	_CGLError kCGLBadMatch
	_CGLError kCGLBadOffScreen
	_CGLError kCGLBadPixelFormat
	_CGLError kCGLBadProperty
	_CGLError kCGLBadRendererInfo
	_CGLError kCGLBadState
	_CGLError kCGLBadValue
	_CGLError kCGLBadWindow
	_CGLContextEnable kCGLCECrashOnRemovedFunctions
	_CGLContextEnable kCGLCEDisplayListOptimization
	_CGLContextEnable kCGLCEMPEngine
	_CGLContextEnable kCGLCERasterization
	_CGLContextEnable kCGLCEStateValidation
	_CGLContextEnable kCGLCESurfaceBackingSize
	_CGLContextEnable kCGLCESwapLimit
	_CGLContextEnable kCGLCESwapRectangle
	_CGLContextParameter kCGLCPClientStorage
	_CGLContextParameter kCGLCPCurrentRendererID
	_CGLContextParameter kCGLCPDispatchTableSize
	_CGLContextParameter kCGLCPGPUFragmentProcessing
	_CGLContextParameter kCGLCPGPUVertexProcessing
	_CGLContextParameter kCGLCPHasDrawable
	_CGLContextParameter kCGLCPMPSwapsInFlight
	_CGLContextParameter kCGLCPReclaimResources
	_CGLContextParameter kCGLCPSurfaceBackingSize
	_CGLContextParameter kCGLCPSurfaceOpacity
	_CGLContextParameter kCGLCPSurfaceOrder
	_CGLContextParameter kCGLCPSurfaceSurfaceVolatile
	_CGLContextParameter kCGLCPSurfaceTexture
	_CGLContextParameter kCGLCPSwapInterval
	_CGLContextParameter kCGLCPSwapRectangle
	_CGLGlobalOption kCGLGOClearFormatCache
	_CGLGlobalOption kCGLGOFormatCacheSize
	_CGLGlobalOption kCGLGOResetLibrary
	_CGLGlobalOption kCGLGORetainRenderers
	_CGLGlobalOption kCGLGOUseBuildCache
	_CGLGlobalOption kCGLGOUseErrorHandler
	CGLineCap kCGLineCapButt
	CGLineCap kCGLineCapRound
	CGLineCap kCGLineCapSquare
	CGLineJoin kCGLineJoinBevel
	CGLineJoin kCGLineJoinMiter
	CGLineJoin kCGLineJoinRound
	_CGLError kCGLNoError
	_CGLOpenGLProfile kCGLOGLPVersion_3_2_Core
	_CGLOpenGLProfile kCGLOGLPVersion_Legacy
	_CGLPixelFormatAttribute kCGLPFAAccelerated
	_CGLPixelFormatAttribute kCGLPFAAcceleratedCompute
	_CGLPixelFormatAttribute kCGLPFAAccumSize
	_CGLPixelFormatAttribute kCGLPFAAllowOfflineRenderers
	_CGLPixelFormatAttribute kCGLPFAAllRenderers
	_CGLPixelFormatAttribute kCGLPFAAlphaSize
	_CGLPixelFormatAttribute kCGLPFAAuxBuffers
	_CGLPixelFormatAttribute kCGLPFAAuxDepthStencil
	_CGLPixelFormatAttribute kCGLPFABackingStore
	_CGLPixelFormatAttribute kCGLPFABackingVolatile
	_CGLPixelFormatAttribute kCGLPFAClosestPolicy
	_CGLPixelFormatAttribute kCGLPFAColorFloat
	_CGLPixelFormatAttribute kCGLPFAColorSize
	_CGLPixelFormatAttribute kCGLPFACompliant
	_CGLPixelFormatAttribute kCGLPFADepthSize
	_CGLPixelFormatAttribute kCGLPFADisplayMask
	_CGLPixelFormatAttribute kCGLPFADoubleBuffer
	_CGLPixelFormatAttribute kCGLPFAFullScreen
	_CGLPixelFormatAttribute kCGLPFAMaximumPolicy
	_CGLPixelFormatAttribute kCGLPFAMinimumPolicy
	_CGLPixelFormatAttribute kCGLPFAMPSafe
	_CGLPixelFormatAttribute kCGLPFAMultisample
	_CGLPixelFormatAttribute kCGLPFAMultiScreen
	_CGLPixelFormatAttribute kCGLPFANoRecovery
	_CGLPixelFormatAttribute kCGLPFAOffScreen
	_CGLPixelFormatAttribute kCGLPFAOpenGLProfile
	_CGLPixelFormatAttribute kCGLPFAPBuffer
	_CGLPixelFormatAttribute kCGLPFARemotePBuffer
	_CGLPixelFormatAttribute kCGLPFARendererID
	_CGLPixelFormatAttribute kCGLPFARobust
	_CGLPixelFormatAttribute kCGLPFASampleAlpha
	_CGLPixelFormatAttribute kCGLPFASampleBuffers
	_CGLPixelFormatAttribute kCGLPFASamples
	_CGLPixelFormatAttribute kCGLPFASingleRenderer
	_CGLPixelFormatAttribute kCGLPFAStencilSize
	_CGLPixelFormatAttribute kCGLPFAStereo
	_CGLPixelFormatAttribute kCGLPFASupersample
	_CGLPixelFormatAttribute kCGLPFASupportsAutomaticGraphicsSwitching
	_CGLPixelFormatAttribute kCGLPFATripleBuffer
	_CGLPixelFormatAttribute kCGLPFAVirtualScreenCount
	_CGLPixelFormatAttribute kCGLPFAWindow
	_CGLRendererProperty kCGLRPAccelerated
	_CGLRendererProperty kCGLRPAcceleratedCompute
	_CGLRendererProperty kCGLRPAccumModes
	_CGLRendererProperty kCGLRPBackingStore
	_CGLRendererProperty kCGLRPBufferModes
	_CGLRendererProperty kCGLRPColorModes
	_CGLRendererProperty kCGLRPCompliant
	_CGLRendererProperty kCGLRPDepthModes
	_CGLRendererProperty kCGLRPDisplayMask
	_CGLRendererProperty kCGLRPFullScreen
	_CGLRendererProperty kCGLRPGPUFragProcCapable
	_CGLRendererProperty kCGLRPGPUVertProcCapable
	_CGLRendererProperty kCGLRPMaxAuxBuffers
	_CGLRendererProperty kCGLRPMaxSampleBuffers
	_CGLRendererProperty kCGLRPMaxSamples
	_CGLRendererProperty kCGLRPMPSafe
	_CGLRendererProperty kCGLRPMultiScreen
	_CGLRendererProperty kCGLRPOffScreen
	_CGLRendererProperty kCGLRPOnline
	_CGLRendererProperty kCGLRPRendererCount
	_CGLRendererProperty kCGLRPRendererID
	_CGLRendererProperty kCGLRPRobust
	_CGLRendererProperty kCGLRPSampleAlpha
	_CGLRendererProperty kCGLRPSampleModes
	_CGLRendererProperty kCGLRPStencilModes
	_CGLRendererProperty kCGLRPTextureMemory
	_CGLRendererProperty kCGLRPTextureMemoryMegabytes
	_CGLRendererProperty kCGLRPVideoMemory
	_CGLRendererProperty kCGLRPVideoMemoryMegabytes
	_CGLRendererProperty kCGLRPWindow
	enum <anonymous> kCGMainMenuWindowLevelKey
	enum <anonymous> kCGMaximumWindowLevelKey
	enum <anonymous> kCGMinimumWindowLevelKey
	enum <anonymous> kCGModalPanelWindowLevelKey
	enum <anonymous> kCGMouseButtonCenter
	enum <anonymous> kCGMouseButtonLeft
	enum <anonymous> kCGMouseButtonRight
	enum <anonymous> kCGMouseEventButtonNumber
	enum <anonymous> kCGMouseEventClickState
	enum <anonymous> kCGMouseEventDeltaX
	enum <anonymous> kCGMouseEventDeltaY
	enum <anonymous> kCGMouseEventInstantMouser
	enum <anonymous> kCGMouseEventNumber
	enum <anonymous> kCGMouseEventPressure
	enum <anonymous> kCGMouseEventSubtype
	enum <anonymous> kCGMouseEventWindowUnderMousePointer
	enum <anonymous> kCGMouseEventWindowUnderMousePointerThatCanHandleThisEvent
	enum <anonymous> kCGNormalWindowLevelKey
	enum <anonymous> kCGNumberOfEventSuppressionStates
	enum <anonymous> kCGNumberOfWindowLevelKeys
	enum <anonymous> kCGOverlayWindowLevelKey
	CGPathElementType kCGPathElementAddCurveToPoint
	CGPathElementType kCGPathElementAddLineToPoint
	CGPathElementType kCGPathElementAddQuadCurveToPoint
	CGPathElementType kCGPathElementCloseSubpath
	CGPathElementType kCGPathElementMoveToPoint
	CGPathDrawingMode kCGPathEOFill
	CGPathDrawingMode kCGPathEOFillStroke
	CGPathDrawingMode kCGPathFill
	CGPathDrawingMode kCGPathFillStroke
	CGPathDrawingMode kCGPathStroke
	CGPatternTiling kCGPatternTilingConstantSpacing
	CGPatternTiling kCGPatternTilingConstantSpacingMinimalDistortion
	CGPatternTiling kCGPatternTilingNoDistortion
	CGPDFBox kCGPDFArtBox
	CGPDFBox kCGPDFBleedBox
	const CFStringRef kCGPDFContextAllowsCopying
	const CFStringRef kCGPDFContextAllowsPrinting
	const CFStringRef kCGPDFContextArtBox
	const CFStringRef kCGPDFContextAuthor
	const CFStringRef kCGPDFContextBleedBox
	const CFStringRef kCGPDFContextCreator
	const CFStringRef kCGPDFContextCropBox
	const CFStringRef kCGPDFContextEncryptionKeyLength
	const CFStringRef kCGPDFContextKeywords
	const CFStringRef kCGPDFContextMediaBox
	const CFStringRef kCGPDFContextOutputIntent
	const CFStringRef kCGPDFContextOutputIntents
	const CFStringRef kCGPDFContextOwnerPassword
	const CFStringRef kCGPDFContextSubject
	const CFStringRef kCGPDFContextTitle
	const CFStringRef kCGPDFContextTrimBox
	const CFStringRef kCGPDFContextUserPassword
	CGPDFBox kCGPDFCropBox
	CGPDFBox kCGPDFMediaBox
	CGPDFObjectType kCGPDFObjectTypeArray
	CGPDFObjectType kCGPDFObjectTypeBoolean
	CGPDFObjectType kCGPDFObjectTypeDictionary
	CGPDFObjectType kCGPDFObjectTypeInteger
	CGPDFObjectType kCGPDFObjectTypeName
	CGPDFObjectType kCGPDFObjectTypeNull
	CGPDFObjectType kCGPDFObjectTypeReal
	CGPDFObjectType kCGPDFObjectTypeStream
	CGPDFObjectType kCGPDFObjectTypeString
	CGPDFBox kCGPDFTrimBox
	const CFStringRef kCGPDFXDestinationOutputProfile
	const CFStringRef kCGPDFXInfo
	const CFStringRef kCGPDFXOutputCondition
	const CFStringRef kCGPDFXOutputConditionIdentifier
	const CFStringRef kCGPDFXOutputIntentSubtype
	const CFStringRef kCGPDFXRegistryName
	enum <anonymous> kCGPopUpMenuWindowLevelKey
	CGColorRenderingIntent kCGRenderingIntentAbsoluteColorimetric
	CGColorRenderingIntent kCGRenderingIntentDefault
	CGColorRenderingIntent kCGRenderingIntentPerceptual
	CGColorRenderingIntent kCGRenderingIntentRelativeColorimetric
	CGColorRenderingIntent kCGRenderingIntentSaturation
	enum <anonymous> kCGScreenSaverWindowLevelKey
	enum <anonymous> kCGScreenUpdateOperationMove
	enum <anonymous> kCGScreenUpdateOperationReducedDirtyRectangleCount
	enum <anonymous> kCGScreenUpdateOperationRefresh
	enum <anonymous> kCGScrollEventUnitLine
	enum <anonymous> kCGScrollEventUnitPixel
	enum <anonymous> kCGScrollWheelEventDeltaAxis1
	enum <anonymous> kCGScrollWheelEventDeltaAxis2
	enum <anonymous> kCGScrollWheelEventDeltaAxis3
	enum <anonymous> kCGScrollWheelEventFixedPtDeltaAxis1
	enum <anonymous> kCGScrollWheelEventFixedPtDeltaAxis2
	enum <anonymous> kCGScrollWheelEventFixedPtDeltaAxis3
	enum <anonymous> kCGScrollWheelEventInstantMouser
	enum <anonymous> kCGScrollWheelEventIsContinuous
	enum <anonymous> kCGScrollWheelEventPointDeltaAxis1
	enum <anonymous> kCGScrollWheelEventPointDeltaAxis2
	enum <anonymous> kCGScrollWheelEventPointDeltaAxis3
	enum <anonymous> kCGScrollWheelEventScrollCount
	enum <anonymous> kCGScrollWheelEventScrollPhase
	enum <anonymous> kCGSessionEventTap
	enum <anonymous> kCGStatusWindowLevelKey
	enum <anonymous> kCGTabletEventDeviceID
	enum <anonymous> kCGTabletEventPointButtons
	enum <anonymous> kCGTabletEventPointPressure
	enum <anonymous> kCGTabletEventPointX
	enum <anonymous> kCGTabletEventPointY
	enum <anonymous> kCGTabletEventPointZ
	enum <anonymous> kCGTabletEventRotation
	enum <anonymous> kCGTabletEventTangentialPressure
	enum <anonymous> kCGTabletEventTiltX
	enum <anonymous> kCGTabletEventTiltY
	enum <anonymous> kCGTabletEventVendor1
	enum <anonymous> kCGTabletEventVendor2
	enum <anonymous> kCGTabletEventVendor3
	enum <anonymous> kCGTabletProximityEventCapabilityMask
	enum <anonymous> kCGTabletProximityEventDeviceID
	enum <anonymous> kCGTabletProximityEventEnterProximity
	enum <anonymous> kCGTabletProximityEventPointerID
	enum <anonymous> kCGTabletProximityEventPointerType
	enum <anonymous> kCGTabletProximityEventSystemTabletID
	enum <anonymous> kCGTabletProximityEventTabletID
	enum <anonymous> kCGTabletProximityEventVendorID
	enum <anonymous> kCGTabletProximityEventVendorPointerSerialNumber
	enum <anonymous> kCGTabletProximityEventVendorPointerType
	enum <anonymous> kCGTabletProximityEventVendorUniqueID
	enum <anonymous> kCGTailAppendEventTap
	CGTextDrawingMode kCGTextClip
	CGTextDrawingMode kCGTextFill
	CGTextDrawingMode kCGTextFillClip
	CGTextDrawingMode kCGTextFillStroke
	CGTextDrawingMode kCGTextFillStrokeClip
	CGTextDrawingMode kCGTextInvisible
	CGTextDrawingMode kCGTextStroke
	CGTextDrawingMode kCGTextStrokeClip
	enum <anonymous> kCGTornOffMenuWindowLevelKey
	enum <anonymous> kCGUtilityWindowLevelKey
	const CFStringRef kCGWindowAlpha
	const CFStringRef kCGWindowBackingLocationVideoMemory
	const CFStringRef kCGWindowBounds
	enum <anonymous> kCGWindowImageBestResolution
	enum <anonymous> kCGWindowImageBoundsIgnoreFraming
	enum <anonymous> kCGWindowImageDefault
	enum <anonymous> kCGWindowImageNominalResolution
	enum <anonymous> kCGWindowImageOnlyShadows
	enum <anonymous> kCGWindowImageShouldBeOpaque
	const CFStringRef kCGWindowIsOnscreen
	const CFStringRef kCGWindowLayer
	enum <anonymous> kCGWindowListExcludeDesktopElements
	enum <anonymous> kCGWindowListOptionAll
	enum <anonymous> kCGWindowListOptionIncludingWindow
	enum <anonymous> kCGWindowListOptionOnScreenAboveWindow
	enum <anonymous> kCGWindowListOptionOnScreenBelowWindow
	enum <anonymous> kCGWindowListOptionOnScreenOnly
	const CFStringRef kCGWindowMemoryUsage
	const CFStringRef kCGWindowName
	const CFStringRef kCGWindowNumber
	const CFStringRef kCGWindowOwnerName
	const CFStringRef kCGWindowOwnerPID
	enum <anonymous> kCGWindowSharingNone
	enum <anonymous> kCGWindowSharingReadOnly
	enum <anonymous> kCGWindowSharingReadWrite
	const CFStringRef kCGWindowSharingState
	const CFStringRef kCGWindowStoreType
	const CFStringRef kCGWindowWorkspace
	enum <anonymous> kCharacterAlternativesType
	enum <anonymous> kCharacterShapeType
	enum <anonymous> kChewableItemsFolderType
	CIFormat kCIFormatARGB8
	CIFormat kCIFormatRGBA16
	CIFormat kCIFormatRGBAf
	CIFormat kCIFormatRGBAh
	NSString * kCIImageAutoAdjustEnhance
	NSString * kCIImageAutoAdjustFeatures
	NSString * kCIImageAutoAdjustRedEye
	NSString * kCIImageColorSpace
	NSString * kCIImageProperties
	enum <anonymous> kCircleAnnotationSelector
	enum <anonymous> kCJKItalicRomanOffSelector
	enum <anonymous> kCJKItalicRomanOnSelector
	enum <anonymous> kCJKItalicRomanSelector
	enum <anonymous> kCJKRomanSpacingType
	enum <anonymous> kCJKSymbolAlternativesType
	enum <anonymous> kCJKSymbolAltFiveSelector
	enum <anonymous> kCJKSymbolAltFourSelector
	enum <anonymous> kCJKSymbolAltOneSelector
	enum <anonymous> kCJKSymbolAltThreeSelector
	enum <anonymous> kCJKSymbolAltTwoSelector
	enum <anonymous> kCJKVerticalRomanCenteredSelector
	enum <anonymous> kCJKVerticalRomanHBaselineSelector
	enum <anonymous> kCJKVerticalRomanPlacementType
	enum <anonymous> kClassicDesktopFolderType
	enum <anonymous> kClassicDomain
	enum <anonymous> kClassicPreferencesFolderType
	enum <anonymous> kClassKCItemAttr
	enum <anonymous> kClientRequestDenied
	enum <anonymous> kClipboardIcon
	enum <anonymous> kClippingCreator
	enum <anonymous> kClippingPictureType
	enum <anonymous> kClippingPictureTypeIcon
	enum <anonymous> kClippingSoundType
	enum <anonymous> kClippingSoundTypeIcon
	enum <anonymous> kClippingTextType
	enum <anonymous> kClippingTextTypeIcon
	enum <anonymous> kClippingUnknownType
	enum <anonymous> kClippingUnknownTypeIcon
	CMFloatBitmapFlags kCMFloatBitmapFlagsAlpha
	CMFloatBitmapFlags kCMFloatBitmapFlagsAlphaPremul
	CMFloatBitmapFlags kCMFloatBitmapFlagsNone
	CMFloatBitmapFlags kCMFloatBitmapFlagsRangeClipped
	const float [3] kCMIlluminantD50
	const float [3] kCMIlluminantD65
	CFStringRef kCMMApplyTransformProcName
	CFStringRef kCMMCreateTransformPropertyProcName
	CFStringRef kCMMInitializeLinkProfileProcName
	CFStringRef kCMMInitializeTransformProcName
	enum <anonymous> kCMSAttrNone
	enum <anonymous> kCMSAttrSigningTime
	enum <anonymous> kCMSAttrSmimeCapabilities
	enum <anonymous> kCMSAttrSmimeEncryptionKeyPrefs
	enum <anonymous> kCMSAttrSmimeMSEncryptionKeyPrefs
	enum <anonymous> kCMSCertificateChain
	enum <anonymous> kCMSCertificateChainWithRoot
	enum <anonymous> kCMSCertificateNone
	enum <anonymous> kCMSCertificateSignerOnly
	enum <anonymous> kCMSSignerInvalidCert
	enum <anonymous> kCMSSignerInvalidIndex
	enum <anonymous> kCMSSignerInvalidSignature
	enum <anonymous> kCMSSignerNeedsDetachedContent
	enum <anonymous> kCMSSignerUnsigned
	enum <anonymous> kCMSSignerValid
	enum <anonymous> kCollateAttributesNotFoundErr
	enum <anonymous> kCollateBufferTooSmall
	enum <anonymous> kCollateInvalidChar
	enum <anonymous> kCollateInvalidCollationRef
	enum <anonymous> kCollateInvalidOptions
	enum <anonymous> kCollateMissingUnicodeTableErr
	enum <anonymous> kCollatePatternNotFoundErr
	enum <anonymous> kCollateUnicodeConvertFailedErr
	enum <anonymous> kCollectionAllAttributes
	enum <anonymous> kCollectionDefaultAttributes
	enum <anonymous> kCollectionDontWantAttributes
	enum <anonymous> kCollectionDontWantData
	enum <anonymous> kCollectionDontWantId
	enum <anonymous> kCollectionDontWantIndex
	enum <anonymous> kCollectionDontWantSize
	enum <anonymous> kCollectionDontWantTag
	enum <anonymous> kCollectionLockBit
	enum <anonymous> kCollectionLockMask
	enum <anonymous> kCollectionNoAttributes
	enum <anonymous> kCollectionPersistenceBit
	enum <anonymous> kCollectionPersistenceMask
	enum <anonymous> kCollectionReserved0Bit
	enum <anonymous> kCollectionReserved0Mask
	enum <anonymous> kCollectionReserved10Bit
	enum <anonymous> kCollectionReserved10Mask
	enum <anonymous> kCollectionReserved11Bit
	enum <anonymous> kCollectionReserved11Mask
	enum <anonymous> kCollectionReserved12Bit
	enum <anonymous> kCollectionReserved12Mask
	enum <anonymous> kCollectionReserved13Bit
	enum <anonymous> kCollectionReserved13Mask
	enum <anonymous> kCollectionReserved1Bit
	enum <anonymous> kCollectionReserved1Mask
	enum <anonymous> kCollectionReserved2Bit
	enum <anonymous> kCollectionReserved2Mask
	enum <anonymous> kCollectionReserved3Bit
	enum <anonymous> kCollectionReserved3Mask
	enum <anonymous> kCollectionReserved4Bit
	enum <anonymous> kCollectionReserved4Mask
	enum <anonymous> kCollectionReserved5Bit
	enum <anonymous> kCollectionReserved5Mask
	enum <anonymous> kCollectionReserved6Bit
	enum <anonymous> kCollectionReserved6Mask
	enum <anonymous> kCollectionReserved7Bit
	enum <anonymous> kCollectionReserved7Mask
	enum <anonymous> kCollectionReserved8Bit
	enum <anonymous> kCollectionReserved8Mask
	enum <anonymous> kCollectionReserved9Bit
	enum <anonymous> kCollectionReserved9Mask
	enum <anonymous> kCollectionUser0Bit
	enum <anonymous> kCollectionUser0Mask
	enum <anonymous> kCollectionUser10Bit
	enum <anonymous> kCollectionUser10Mask
	enum <anonymous> kCollectionUser11Bit
	enum <anonymous> kCollectionUser11Mask
	enum <anonymous> kCollectionUser12Bit
	enum <anonymous> kCollectionUser12Mask
	enum <anonymous> kCollectionUser13Bit
	enum <anonymous> kCollectionUser13Mask
	enum <anonymous> kCollectionUser14Bit
	enum <anonymous> kCollectionUser14Mask
	enum <anonymous> kCollectionUser15Bit
	enum <anonymous> kCollectionUser15Mask
	enum <anonymous> kCollectionUser1Bit
	enum <anonymous> kCollectionUser1Mask
	enum <anonymous> kCollectionUser2Bit
	enum <anonymous> kCollectionUser2Mask
	enum <anonymous> kCollectionUser3Bit
	enum <anonymous> kCollectionUser3Mask
	enum <anonymous> kCollectionUser4Bit
	enum <anonymous> kCollectionUser4Mask
	enum <anonymous> kCollectionUser5Bit
	enum <anonymous> kCollectionUser5Mask
	enum <anonymous> kCollectionUser6Bit
	enum <anonymous> kCollectionUser6Mask
	enum <anonymous> kCollectionUser7Bit
	enum <anonymous> kCollectionUser7Mask
	enum <anonymous> kCollectionUser8Bit
	enum <anonymous> kCollectionUser8Mask
	enum <anonymous> kCollectionUser9Bit
	enum <anonymous> kCollectionUser9Mask
	enum <anonymous> kCollectionUserAttributes
	enum <anonymous> kColor
	enum <anonymous> kColorPickersFolderType
	ColorSyncDataDepth kColorSync16BitFloat
	ColorSyncDataDepth kColorSync16BitInteger
	ColorSyncDataDepth kColorSync1BitGamut
	ColorSyncDataDepth kColorSync32BitFloat
	ColorSyncDataDepth kColorSync32BitInteger
	ColorSyncDataDepth kColorSync32BitNamedColorIndex
	ColorSyncDataDepth kColorSync8BitInteger
	CFStringRef kColorSyncAdobeRGB1998Profile
	ColorSyncAlphaInfo kColorSyncAlphaFirst
	enum <anonymous> kColorSyncAlphaInfoMask
	ColorSyncAlphaInfo kColorSyncAlphaLast
	ColorSyncAlphaInfo kColorSyncAlphaNone
	ColorSyncAlphaInfo kColorSyncAlphaNoneSkipFirst
	ColorSyncAlphaInfo kColorSyncAlphaNoneSkipLast
	ColorSyncAlphaInfo kColorSyncAlphaPremultipliedFirst
	ColorSyncAlphaInfo kColorSyncAlphaPremultipliedLast
	CFStringRef kColorSyncBestQuality
	CFStringRef kColorSyncBlackPointCompensation
	enum <anonymous> kColorSyncByteOrder16Big
	enum <anonymous> kColorSyncByteOrder16Little
	enum <anonymous> kColorSyncByteOrder32Big
	enum <anonymous> kColorSyncByteOrder32Little
	enum <anonymous> kColorSyncByteOrderDefault
	enum <anonymous> kColorSyncByteOrderMask
	CFStringRef kColorSyncCameraDeviceClass
	enum <anonymous> kColorSyncCMMFolderType
	CFStringRef kColorSyncConversion1DLut
	CFStringRef kColorSyncConversion3DLut
	CFStringRef kColorSyncConversionBPC
	CFStringRef kColorSyncConversionChannelID
	CFStringRef kColorSyncConversionGridPoints
	CFStringRef kColorSyncConversionInpChan
	CFStringRef kColorSyncConversionMatrix
	CFStringRef kColorSyncConversionOutChan
	CFStringRef kColorSyncConversionParamCurve0
	CFStringRef kColorSyncConversionParamCurve1
	CFStringRef kColorSyncConversionParamCurve2
	CFStringRef kColorSyncConversionParamCurve3
	CFStringRef kColorSyncConversionParamCurve4
	CFStringRef kColorSyncConvertQuality
	CFStringRef kColorSyncConvertThreadCount
	CFStringRef kColorSyncConvertUseVectorUnit
	CFStringRef kColorSyncCustomProfiles
	CFStringRef kColorSyncDeviceClass
	CFStringRef kColorSyncDeviceDefaultProfileID
	CFStringRef kColorSyncDeviceDescription
	CFStringRef kColorSyncDeviceDescriptions
	CFStringRef kColorSyncDeviceHostScope
	CFStringRef kColorSyncDeviceID
	CFStringRef kColorSyncDeviceModeDescription
	CFStringRef kColorSyncDeviceModeDescriptions
	CFStringRef kColorSyncDeviceProfileID
	CFStringRef kColorSyncDeviceProfileIsCurrent
	CFStringRef kColorSyncDeviceProfileIsDefault
	CFStringRef kColorSyncDeviceProfileIsFactory
	CFStringRef kColorSyncDeviceProfilesNotification
	CFStringRef kColorSyncDeviceProfileURL
	CFStringRef kColorSyncDeviceRegisteredNotification
	CFStringRef kColorSyncDeviceUnregisteredNotification
	CFStringRef kColorSyncDeviceUserScope
	CFStringRef kColorSyncDisplayDeviceClass
	CFStringRef kColorSyncDisplayDeviceProfilesNotification
	CFStringRef kColorSyncDraftQuality
	CFStringRef kColorSyncFactoryProfiles
	enum <anonymous> kColorSyncFolderIcon
	enum <anonymous> kColorSyncFolderType
	CFStringRef kColorSyncGenericCMYKProfile
	CFStringRef kColorSyncGenericGrayGamma22Profile
	CFStringRef kColorSyncGenericGrayProfile
	CFStringRef kColorSyncGenericLabProfile
	CFStringRef kColorSyncGenericRGBProfile
	CFStringRef kColorSyncGenericXYZProfile
	CFStringRef kColorSyncNormalQuality
	CFStringRef kColorSyncPreferredCMM
	CFStringRef kColorSyncPrinterDeviceClass
	CFStringRef kColorSyncProfile
	CFStringRef kColorSyncProfileClass
	CFStringRef kColorSyncProfileColorSpace
	CFStringRef kColorSyncProfileDescription
	CFStringRef kColorSyncProfileHeader
	CFStringRef kColorSyncProfileHostScope
	CFStringRef kColorSyncProfileMD5Digest
	CFStringRef kColorSyncProfilePCS
	enum <anonymous> kColorSyncProfilesFolderType
	CFStringRef kColorSyncProfileURL
	CFStringRef kColorSyncProfileUserScope
	CFStringRef kColorSyncRenderingIntent
	CFStringRef kColorSyncRenderingIntentAbsolute
	CFStringRef kColorSyncRenderingIntentPerceptual
	CFStringRef kColorSyncRenderingIntentRelative
	CFStringRef kColorSyncRenderingIntentSaturation
	CFStringRef kColorSyncRenderingIntentUseProfileHeader
	CFStringRef kColorSyncScannerDeviceClass
	enum <anonymous> kColorSyncScriptingFolderType
	CFStringRef kColorSyncSRGBProfile
	CFStringRef kColorSyncTranformInfo
	CFStringRef kColorSyncTransformCreator
	CFStringRef kColorSyncTransformDeviceToDevice
	CFStringRef kColorSyncTransformDeviceToPCS
	CFStringRef kColorSyncTransformDstSpace
	CFStringRef kColorSyncTransformFullConversionData
	CFStringRef kColorSyncTransformGamutCheck
	CFStringRef kColorSyncTransformParametricConversionData
	CFStringRef kColorSyncTransformPCSToDevice
	CFStringRef kColorSyncTransformPCSToPCS
	CFStringRef kColorSyncTransformSimplifiedConversionData
	CFStringRef kColorSyncTransformSrcSpace
	CFStringRef kColorSyncTransformTag
	enum <anonymous> kCommentKCItemAttr
	enum <anonymous> kCommonLigaturesOffSelector
	enum <anonymous> kCommonLigaturesOnSelector
	enum <anonymous> kCommonNameKCItemAttr
	enum <anonymous> kCompatibilityCompositionOffSelector
	enum <anonymous> kCompatibilityCompositionOnSelector
	enum <anonymous> kComponentAliasResourceType
	enum <anonymous> kComponentCanDoSelect
	enum <anonymous> kComponentCloseSelect
	enum <anonymous> kComponentDebugOption
	enum <anonymous> kComponentExecuteWiredActionSelect
	enum <anonymous> kComponentGetMPWorkFunctionSelect
	enum <anonymous> kComponentGetPublicResourceSelect
	enum <anonymous> kComponentOpenSelect
	enum <anonymous> kComponentRegisterSelect
	enum <anonymous> kComponentResourceType
	enum <anonymous> kComponentsFolderType
	enum <anonymous> kComponentTargetSelect
	enum <anonymous> kComponentUnregisterSelect
	enum <anonymous> kComponentVersionSelect
	enum <anonymous> kCompositionsFolderType
	enum <anonymous> kComputerIcon
	enum <anonymous> kConfigurationLockedErr
	enum <anonymous> kConnectionBlueGammaScale
	enum <anonymous> kConnectionChanged
	enum <anonymous> kConnectionCheckEnable
	enum <anonymous> kConnectionColorDepthsSupported
	enum <anonymous> kConnectionColorMode
	enum <anonymous> kConnectionColorModesSupported
	enum <anonymous> kConnectionControllerColorDepth
	enum <anonymous> kConnectionControllerDepthsSupported
	enum <anonymous> kConnectionControllerDitherControl
	enum <anonymous> kConnectionDisplayFlags
	enum <anonymous> kConnectionDisplayParameterCount
	enum <anonymous> kConnectionDisplayParameters
	enum <anonymous> kConnectionEnable
	enum <anonymous> kConnectionEnableAudio
	enum <anonymous> kConnectionFlags
	enum <anonymous> kConnectionGreenGammaScale
	enum <anonymous> kConnectionHandleDisplayPortEvent
	enum <anonymous> kConnectionOverscan
	enum <anonymous> kConnectionPanelTimingDisable
	enum <anonymous> kConnectionPostWake
	enum <anonymous> kConnectionPower
	enum <anonymous> kConnectionProbe
	enum <anonymous> kConnectionRedGammaScale
	enum <anonymous> kConnectionSupportsAppleSense
	enum <anonymous> kConnectionSupportsHLDDCSense
	enum <anonymous> kConnectionSupportsLLDDCSense
	enum <anonymous> kConnectionSyncEnable
	enum <anonymous> kConnectionSyncFlags
	enum <anonymous> kConnectionVideoBest
	enum <anonymous> kConnectToIcon
	enum <anonymous> kConnSuite
	enum <anonymous> kContainerAliasType
	enum <anonymous> kContainerCDROMAliasType
	enum <anonymous> kContainerFloppyAliasType
	enum <anonymous> kContainerFolderAliasType
	enum <anonymous> kContainerHardDiskAliasType
	enum <anonymous> kContainerServerAliasType
	enum <anonymous> kContainerTrashAliasType
	enum <anonymous> kContextualAlternatesOffSelector
	enum <anonymous> kContextualAlternatesOnSelector
	enum <anonymous> kContextualAlternatesType
	enum <anonymous> kContextualLigaturesOffSelector
	enum <anonymous> kContextualLigaturesOnSelector
	enum <anonymous> kContextualMenuItemsFolderIcon
	enum <anonymous> kContextualMenuItemsFolderType
	enum <anonymous> kContextualSwashAlternatesOffSelector
	enum <anonymous> kContextualSwashAlternatesOnSelector
	enum <anonymous> kControlPanelDisabledFolderIcon
	enum <anonymous> kControlPanelDisabledFolderType
	enum <anonymous> kControlPanelFolderAliasType
	enum <anonymous> kControlPanelFolderIcon
	enum <anonymous> kControlPanelFolderIconResource
	enum <anonymous> kControlPanelFolderType
	enum <anonymous> kControlStripModulesFolderIcon
	enum <anonymous> kControlStripModulesFolderType
	enum <anonymous> kCooperativeThread
	enum <anonymous> kCoreEndianAppleEventManagerDomain
	enum <anonymous> kCoreEndianResourceManagerDomain
	enum <anonymous> kCoreEventClass
	enum <anonymous> kCoreServicesFolderType
	enum <anonymous> kCreateFolder
	enum <anonymous> kCreateFolderAtBoot
	enum <anonymous> kCreateFolderAtBootBit
	enum <anonymous> kCreateIfNeeded
	enum <anonymous> kCreationDateKCItemAttr
	enum <anonymous> kCreatorKCItemAttr
	enum <anonymous> kCSAcceptAllComponentsMode
	enum <anonymous> kCSAcceptThreadSafeComponentsOnlyMode
	enum <anonymous> kCSDiskSpaceRecoveryOptionNoUI
	enum <anonymous> kCSIdentityAuthorityNotAccessibleErr
	enum <anonymous> kCSIdentityClassGroup
	enum <anonymous> kCSIdentityClassUser
	enum <anonymous> kCSIdentityCommitCompleted
	enum <anonymous> kCSIdentityDeletedErr
	enum <anonymous> kCSIdentityDuplicateFullNameErr
	enum <anonymous> kCSIdentityDuplicatePosixNameErr
	const CFStringRef kCSIdentityErrorDomain
	enum <anonymous> kCSIdentityFlagHidden
	enum <anonymous> kCSIdentityFlagNone
	const CFStringRef kCSIdentityGeneratePosixName
	enum <anonymous> kCSIdentityInvalidFullNameErr
	enum <anonymous> kCSIdentityInvalidPosixNameErr
	enum <anonymous> kCSIdentityPermissionErr
	enum <anonymous> kCSIdentityQueryEventErrorOccurred
	enum <anonymous> kCSIdentityQueryEventResultsAdded
	enum <anonymous> kCSIdentityQueryEventResultsChanged
	enum <anonymous> kCSIdentityQueryEventResultsRemoved
	enum <anonymous> kCSIdentityQueryEventSearchPhaseFinished
	enum <anonymous> kCSIdentityQueryGenerateUpdateEvents
	enum <anonymous> kCSIdentityQueryIncludeHiddenIdentities
	enum <anonymous> kCSIdentityQueryStringBeginsWith
	enum <anonymous> kCSIdentityQueryStringEquals
	enum <anonymous> kCSIdentityUnknownAuthorityErr
	cssm_appledl_open_parameters_mask kCSSM_APPLEDL_MASK_MODE
	enum <anonymous> kCStackBased
	enum <anonymous> kCTAdobeCNS1CharacterCollection
	enum <anonymous> kCTAdobeGB1CharacterCollection
	enum <anonymous> kCTAdobeJapan1CharacterCollection
	enum <anonymous> kCTAdobeJapan2CharacterCollection
	enum <anonymous> kCTAdobeKorea1CharacterCollection
	const CFStringRef kCTBaselineClassAttributeName
	const CFStringRef kCTBaselineClassHanging
	const CFStringRef kCTBaselineClassIdeographicCentered
	const CFStringRef kCTBaselineClassIdeographicHigh
	const CFStringRef kCTBaselineClassIdeographicLow
	const CFStringRef kCTBaselineClassMath
	const CFStringRef kCTBaselineClassRoman
	const CFStringRef kCTBaselineInfoAttributeName
	const CFStringRef kCTBaselineOriginalFont
	const CFStringRef kCTBaselineReferenceFont
	const CFStringRef kCTBaselineReferenceInfoAttributeName
	enum <anonymous> kCTCenterTextAlignment
	enum <anonymous> kCTCharacterCollectionAdobeCNS1
	enum <anonymous> kCTCharacterCollectionAdobeGB1
	enum <anonymous> kCTCharacterCollectionAdobeJapan1
	enum <anonymous> kCTCharacterCollectionAdobeJapan2
	enum <anonymous> kCTCharacterCollectionAdobeKorea1
	enum <anonymous> kCTCharacterCollectionIdentityMapping
	const CFStringRef kCTCharacterShapeAttributeName
	enum <anonymous> kCTFontAlertHeaderFontType
	enum <anonymous> kCTFontApplicationFontType
	const CFStringRef kCTFontAttributeName
	const CFStringRef kCTFontBaselineAdjustAttribute
	enum <anonymous> kCTFontBoldTrait
	const CFStringRef kCTFontCascadeListAttribute
	const CFStringRef kCTFontCharacterSetAttribute
	enum <anonymous> kCTFontClarendonSerifsClass
	enum <anonymous> kCTFontClassClarendonSerifs
	enum <anonymous> kCTFontClassFreeformSerifs
	enum <anonymous> kCTFontClassMaskShift
	enum <anonymous> kCTFontClassMaskTrait
	enum <anonymous> kCTFontClassModernSerifs
	enum <anonymous> kCTFontClassOldStyleSerifs
	enum <anonymous> kCTFontClassOrnamentals
	enum <anonymous> kCTFontClassSansSerif
	enum <anonymous> kCTFontClassScripts
	enum <anonymous> kCTFontClassSlabSerifs
	enum <anonymous> kCTFontClassSymbolic
	enum <anonymous> kCTFontClassTransitionalSerifs
	enum <anonymous> kCTFontClassUnknown
	enum <anonymous> kCTFontCollectionCopyDefaultOptions
	enum <anonymous> kCTFontCollectionCopyStandardSort
	enum <anonymous> kCTFontCollectionCopyUnique
	const CFStringRef kCTFontCollectionDisallowAutoActivationOption
	const CFStringRef kCTFontCollectionIncludeDisabledFontsOption
	const CFStringRef kCTFontCollectionRemoveDuplicatesOption
	enum <anonymous> kCTFontColorGlyphsTrait
	enum <anonymous> kCTFontCompositeTrait
	enum <anonymous> kCTFontCondensedTrait
	enum <anonymous> kCTFontControlContentFontType
	const CFStringRef kCTFontCopyrightNameKey
	enum <anonymous> kCTFontDefaultOrientation
	const CFStringRef kCTFontDescriptionNameKey
	const CFStringRef kCTFontDesignerNameKey
	const CFStringRef kCTFontDesignerURLNameKey
	const CFStringRef kCTFontDisplayNameAttribute
	enum <anonymous> kCTFontEmphasizedSystemDetailFontType
	enum <anonymous> kCTFontEmphasizedSystemFontType
	const CFStringRef kCTFontEnabledAttribute
	enum <anonymous> kCTFontExpandedTrait
	const CFStringRef kCTFontFamilyNameAttribute
	const CFStringRef kCTFontFamilyNameKey
	const CFStringRef kCTFontFeaturesAttribute
	const CFStringRef kCTFontFeatureSelectorDefaultKey
	const CFStringRef kCTFontFeatureSelectorIdentifierKey
	const CFStringRef kCTFontFeatureSelectorNameKey
	const CFStringRef kCTFontFeatureSelectorSettingKey
	const CFStringRef kCTFontFeatureSettingsAttribute
	const CFStringRef kCTFontFeatureTypeExclusiveKey
	const CFStringRef kCTFontFeatureTypeIdentifierKey
	const CFStringRef kCTFontFeatureTypeNameKey
	const CFStringRef kCTFontFeatureTypeSelectorsKey
	const CFStringRef kCTFontFixedAdvanceAttribute
	const CFStringRef kCTFontFormatAttribute
	enum <anonymous> kCTFontFormatBitmap
	enum <anonymous> kCTFontFormatOpenTypePostScript
	enum <anonymous> kCTFontFormatOpenTypeTrueType
	enum <anonymous> kCTFontFormatPostScript
	enum <anonymous> kCTFontFormatTrueType
	enum <anonymous> kCTFontFormatUnrecognized
	enum <anonymous> kCTFontFreeformSerifsClass
	const CFStringRef kCTFontFullNameKey
	enum <anonymous> kCTFontHorizontalOrientation
	enum <anonymous> kCTFontItalicTrait
	enum <anonymous> kCTFontLabelFontType
	const CFStringRef kCTFontLanguagesAttribute
	const CFStringRef kCTFontLicenseNameKey
	const CFStringRef kCTFontLicenseURLNameKey
	const CFStringRef kCTFontMacintoshEncodingsAttribute
	enum <anonymous> kCTFontManagerAutoActivationDefault
	enum <anonymous> kCTFontManagerAutoActivationDisabled
	enum <anonymous> kCTFontManagerAutoActivationEnabled
	enum <anonymous> kCTFontManagerAutoActivationPromptUser
	const CFStringRef kCTFontManagerBundleIdentifier
	enum <anonymous> kCTFontManagerErrorAlreadyRegistered
	const CFStringRef kCTFontManagerErrorDomain
	enum <anonymous> kCTFontManagerErrorFileNotFound
	const CFStringRef kCTFontManagerErrorFontURLsKey
	enum <anonymous> kCTFontManagerErrorInsufficientPermissions
	enum <anonymous> kCTFontManagerErrorInUse
	enum <anonymous> kCTFontManagerErrorInvalidFontData
	enum <anonymous> kCTFontManagerErrorNotRegistered
	enum <anonymous> kCTFontManagerErrorSystemRequired
	enum <anonymous> kCTFontManagerErrorUnrecognizedFormat
	const CFStringRef kCTFontManagerRegisteredFontsChangedNotification
	enum <anonymous> kCTFontManagerScopeNone
	enum <anonymous> kCTFontManagerScopeProcess
	enum <anonymous> kCTFontManagerScopeSession
	enum <anonymous> kCTFontManagerScopeUser
	const CFStringRef kCTFontManufacturerNameKey
	const CFStringRef kCTFontMatrixAttribute
	enum <anonymous> kCTFontMenuItemCmdKeyFontType
	enum <anonymous> kCTFontMenuItemFontType
	enum <anonymous> kCTFontMenuItemMarkFontType
	enum <anonymous> kCTFontMenuTitleFontType
	enum <anonymous> kCTFontMessageFontType
	enum <anonymous> kCTFontMiniEmphasizedSystemFontType
	enum <anonymous> kCTFontMiniSystemFontType
	enum <anonymous> kCTFontModernSerifsClass
	enum <anonymous> kCTFontMonoSpaceTrait
	const CFStringRef kCTFontNameAttribute
	enum <anonymous> kCTFontNoFontType
	enum <anonymous> kCTFontOldStyleSerifsClass
	enum <anonymous> kCTFontOptionsDefault
	enum <anonymous> kCTFontOptionsPreferSystemFont
	enum <anonymous> kCTFontOptionsPreventAutoActivation
	const CFStringRef kCTFontOrientationAttribute
	enum <anonymous> kCTFontOrientationDefault
	enum <anonymous> kCTFontOrientationHorizontal
	enum <anonymous> kCTFontOrientationVertical
	enum <anonymous> kCTFontOrnamentalsClass
	enum <anonymous> kCTFontPaletteFontType
	const CFStringRef kCTFontPostScriptCIDNameKey
	const CFStringRef kCTFontPostScriptNameKey
	const CFStringRef kCTFontPriorityAttribute
	enum <anonymous> kCTFontPriorityComputer
	enum <anonymous> kCTFontPriorityDynamic
	enum <anonymous> kCTFontPriorityNetwork
	enum <anonymous> kCTFontPriorityProcess
	enum <anonymous> kCTFontPrioritySystem
	enum <anonymous> kCTFontPriorityUser
	enum <anonymous> kCTFontPushButtonFontType
	const CFStringRef kCTFontRegistrationScopeAttribute
	const CFStringRef kCTFontSampleTextNameKey
	enum <anonymous> kCTFontSansSerifClass
	enum <anonymous> kCTFontScriptsClass
	const CFStringRef kCTFontSizeAttribute
	enum <anonymous> kCTFontSlabSerifsClass
	const CFStringRef kCTFontSlantTrait
	enum <anonymous> kCTFontSmallEmphasizedSystemFontType
	enum <anonymous> kCTFontSmallSystemFontType
	enum <anonymous> kCTFontSmallToolbarFontType
	const CFStringRef kCTFontStyleNameAttribute
	const CFStringRef kCTFontStyleNameKey
	const CFStringRef kCTFontSubFamilyNameKey
	enum <anonymous> kCTFontSymbolicClass
	const CFStringRef kCTFontSymbolicTrait
	enum <anonymous> kCTFontSystemDetailFontType
	enum <anonymous> kCTFontSystemFontType
	enum <anonymous> kCTFontTableAcnt
	enum <anonymous> kCTFontTableAnkr
	enum <anonymous> kCTFontTableAvar
	enum <anonymous> kCTFontTableBASE
	enum <anonymous> kCTFontTableBdat
	enum <anonymous> kCTFontTableBhed
	enum <anonymous> kCTFontTableBloc
	enum <anonymous> kCTFontTableBsln
	enum <anonymous> kCTFontTableCFF
	enum <anonymous> kCTFontTableCmap
	enum <anonymous> kCTFontTableCvar
	enum <anonymous> kCTFontTableCvt
	enum <anonymous> kCTFontTableDSIG
	enum <anonymous> kCTFontTableEBDT
	enum <anonymous> kCTFontTableEBLC
	enum <anonymous> kCTFontTableEBSC
	enum <anonymous> kCTFontTableFdsc
	enum <anonymous> kCTFontTableFeat
	enum <anonymous> kCTFontTableFmtx
	enum <anonymous> kCTFontTableFpgm
	enum <anonymous> kCTFontTableFvar
	enum <anonymous> kCTFontTableGasp
	enum <anonymous> kCTFontTableGDEF
	enum <anonymous> kCTFontTableGlyf
	enum <anonymous> kCTFontTableGPOS
	enum <anonymous> kCTFontTableGSUB
	enum <anonymous> kCTFontTableGvar
	enum <anonymous> kCTFontTableHdmx
	enum <anonymous> kCTFontTableHead
	enum <anonymous> kCTFontTableHhea
	enum <anonymous> kCTFontTableHmtx
	enum <anonymous> kCTFontTableHsty
	enum <anonymous> kCTFontTableJSTF
	enum <anonymous> kCTFontTableJust
	enum <anonymous> kCTFontTableKern
	enum <anonymous> kCTFontTableKerx
	enum <anonymous> kCTFontTableLcar
	enum <anonymous> kCTFontTableLoca
	enum <anonymous> kCTFontTableLTSH
	enum <anonymous> kCTFontTableMaxp
	enum <anonymous> kCTFontTableMort
	enum <anonymous> kCTFontTableMorx
	enum <anonymous> kCTFontTableName
	enum <anonymous> kCTFontTableOpbd
	enum <anonymous> kCTFontTableOptionExcludeSynthetic
	enum <anonymous> kCTFontTableOptionNoOptions
	enum <anonymous> kCTFontTableOS2
	enum <anonymous> kCTFontTablePCLT
	enum <anonymous> kCTFontTablePost
	enum <anonymous> kCTFontTablePrep
	enum <anonymous> kCTFontTableProp
	enum <anonymous> kCTFontTableSbit
	enum <anonymous> kCTFontTableSbix
	enum <anonymous> kCTFontTableTrak
	enum <anonymous> kCTFontTableVDMX
	enum <anonymous> kCTFontTableVhea
	enum <anonymous> kCTFontTableVmtx
	enum <anonymous> kCTFontTableVORG
	enum <anonymous> kCTFontTableZapf
	enum <anonymous> kCTFontToolbarFontType
	enum <anonymous> kCTFontToolTipFontType
	const CFStringRef kCTFontTrademarkNameKey
	enum <anonymous> kCTFontTraitBold
	enum <anonymous> kCTFontTraitClassMask
	enum <anonymous> kCTFontTraitColorGlyphs
	enum <anonymous> kCTFontTraitComposite
	enum <anonymous> kCTFontTraitCondensed
	enum <anonymous> kCTFontTraitExpanded
	enum <anonymous> kCTFontTraitItalic
	enum <anonymous> kCTFontTraitMonoSpace
	const CFStringRef kCTFontTraitsAttribute
	enum <anonymous> kCTFontTraitUIOptimized
	enum <anonymous> kCTFontTraitVertical
	enum <anonymous> kCTFontTransitionalSerifsClass
	enum <anonymous> kCTFontUIFontAlertHeader
	enum <anonymous> kCTFontUIFontApplication
	enum <anonymous> kCTFontUIFontControlContent
	enum <anonymous> kCTFontUIFontEmphasizedSystem
	enum <anonymous> kCTFontUIFontEmphasizedSystemDetail
	enum <anonymous> kCTFontUIFontLabel
	enum <anonymous> kCTFontUIFontMenuItem
	enum <anonymous> kCTFontUIFontMenuItemCmdKey
	enum <anonymous> kCTFontUIFontMenuItemMark
	enum <anonymous> kCTFontUIFontMenuTitle
	enum <anonymous> kCTFontUIFontMessage
	enum <anonymous> kCTFontUIFontMiniEmphasizedSystem
	enum <anonymous> kCTFontUIFontMiniSystem
	enum <anonymous> kCTFontUIFontNone
	enum <anonymous> kCTFontUIFontPalette
	enum <anonymous> kCTFontUIFontPushButton
	enum <anonymous> kCTFontUIFontSmallEmphasizedSystem
	enum <anonymous> kCTFontUIFontSmallSystem
	enum <anonymous> kCTFontUIFontSmallToolbar
	enum <anonymous> kCTFontUIFontSystem
	enum <anonymous> kCTFontUIFontSystemDetail
	enum <anonymous> kCTFontUIFontToolbar
	enum <anonymous> kCTFontUIFontToolTip
	enum <anonymous> kCTFontUIFontUser
	enum <anonymous> kCTFontUIFontUserFixedPitch
	enum <anonymous> kCTFontUIFontUtilityWindowTitle
	enum <anonymous> kCTFontUIFontViews
	enum <anonymous> kCTFontUIFontWindowTitle
	enum <anonymous> kCTFontUIOptimizedTrait
	const CFStringRef kCTFontUniqueNameKey
	enum <anonymous> kCTFontUnknownClass
	const CFStringRef kCTFontURLAttribute
	enum <anonymous> kCTFontUserFixedPitchFontType
	enum <anonymous> kCTFontUserFontType
	enum <anonymous> kCTFontUtilityWindowTitleFontType
	const CFStringRef kCTFontVariationAttribute
	const CFStringRef kCTFontVariationAxisDefaultValueKey
	const CFStringRef kCTFontVariationAxisIdentifierKey
	const CFStringRef kCTFontVariationAxisMaximumValueKey
	const CFStringRef kCTFontVariationAxisMinimumValueKey
	const CFStringRef kCTFontVariationAxisNameKey
	const CFStringRef kCTFontVendorURLNameKey
	const CFStringRef kCTFontVersionNameKey
	enum <anonymous> kCTFontVerticalOrientation
	enum <anonymous> kCTFontVerticalTrait
	enum <anonymous> kCTFontViewsFontType
	const CFStringRef kCTFontWeightTrait
	const CFStringRef kCTFontWidthTrait
	enum <anonymous> kCTFontWindowTitleFontType
	const CFStringRef kCTForegroundColorAttributeName
	const CFStringRef kCTForegroundColorFromContextAttributeName
	const CFStringRef kCTFrameClippingPathsAttributeName
	const CFStringRef kCTFramePathClippingPathAttributeName
	enum <anonymous> kCTFramePathFillEvenOdd
	const CFStringRef kCTFramePathFillRuleAttributeName
	enum <anonymous> kCTFramePathFillWindingNumber
	const CFStringRef kCTFramePathWidthAttributeName
	const CFStringRef kCTFrameProgressionAttributeName
	enum <anonymous> kCTFrameProgressionRightToLeft
	enum <anonymous> kCTFrameProgressionTopToBottom
	const CFStringRef kCTGlyphInfoAttributeName
	enum <anonymous> kCTIdentityMappingCharacterCollection
	enum <anonymous> kCTJustifiedTextAlignment
	const CFStringRef kCTKernAttributeName
	enum <anonymous> kCTLeftTextAlignment
	const CFStringRef kCTLigatureAttributeName
	enum <anonymous> kCTLineBoundsExcludeTypographicLeading
	enum <anonymous> kCTLineBoundsExcludeTypographicShifts
	enum <anonymous> kCTLineBoundsUseGlyphPathBounds
	enum <anonymous> kCTLineBoundsUseHangingPunctuation
	enum <anonymous> kCTLineBoundsUseOpticalBounds
	enum <anonymous> kCTLineBreakByCharWrapping
	enum <anonymous> kCTLineBreakByClipping
	enum <anonymous> kCTLineBreakByTruncatingHead
	enum <anonymous> kCTLineBreakByTruncatingMiddle
	enum <anonymous> kCTLineBreakByTruncatingTail
	enum <anonymous> kCTLineBreakByWordWrapping
	enum <anonymous> kCTLineTruncationEnd
	enum <anonymous> kCTLineTruncationMiddle
	enum <anonymous> kCTLineTruncationStart
	enum <anonymous> kCTNaturalTextAlignment
	const CFStringRef kCTParagraphStyleAttributeName
	enum <anonymous> kCTParagraphStyleSpecifierAlignment
	enum <anonymous> kCTParagraphStyleSpecifierBaseWritingDirection
	enum <anonymous> kCTParagraphStyleSpecifierCount
	enum <anonymous> kCTParagraphStyleSpecifierDefaultTabInterval
	enum <anonymous> kCTParagraphStyleSpecifierFirstLineHeadIndent
	enum <anonymous> kCTParagraphStyleSpecifierHeadIndent
	enum <anonymous> kCTParagraphStyleSpecifierLineBoundsOptions
	enum <anonymous> kCTParagraphStyleSpecifierLineBreakMode
	enum <anonymous> kCTParagraphStyleSpecifierLineHeightMultiple
	enum <anonymous> kCTParagraphStyleSpecifierLineSpacing
	enum <anonymous> kCTParagraphStyleSpecifierLineSpacingAdjustment
	enum <anonymous> kCTParagraphStyleSpecifierMaximumLineHeight
	enum <anonymous> kCTParagraphStyleSpecifierMaximumLineSpacing
	enum <anonymous> kCTParagraphStyleSpecifierMinimumLineHeight
	enum <anonymous> kCTParagraphStyleSpecifierMinimumLineSpacing
	enum <anonymous> kCTParagraphStyleSpecifierParagraphSpacing
	enum <anonymous> kCTParagraphStyleSpecifierParagraphSpacingBefore
	enum <anonymous> kCTParagraphStyleSpecifierTabStops
	enum <anonymous> kCTParagraphStyleSpecifierTailIndent
	enum <anonymous> kCTRightTextAlignment
	const CFStringRef kCTRunDelegateAttributeName
	enum <anonymous> kCTRunStatusHasNonIdentityMatrix
	enum <anonymous> kCTRunStatusNonMonotonic
	enum <anonymous> kCTRunStatusNoStatus
	enum <anonymous> kCTRunStatusRightToLeft
	const CFStringRef kCTStrokeColorAttributeName
	const CFStringRef kCTStrokeWidthAttributeName
	const CFStringRef kCTSuperscriptAttributeName
	const CFStringRef kCTTabColumnTerminatorsAttributeName
	enum <anonymous> kCTTextAlignmentCenter
	enum <anonymous> kCTTextAlignmentJustified
	enum <anonymous> kCTTextAlignmentLeft
	enum <anonymous> kCTTextAlignmentNatural
	enum <anonymous> kCTTextAlignmentRight
	const CFStringRef kCTTypesetterOptionDisableBidiProcessing
	const CFStringRef kCTTypesetterOptionForcedEmbeddingLevel
	const CFStringRef kCTUnderlineColorAttributeName
	enum <anonymous> kCTUnderlinePatternDash
	enum <anonymous> kCTUnderlinePatternDashDot
	enum <anonymous> kCTUnderlinePatternDashDotDot
	enum <anonymous> kCTUnderlinePatternDot
	enum <anonymous> kCTUnderlinePatternSolid
	const CFStringRef kCTUnderlineStyleAttributeName
	enum <anonymous> kCTUnderlineStyleDouble
	enum <anonymous> kCTUnderlineStyleNone
	enum <anonymous> kCTUnderlineStyleSingle
	enum <anonymous> kCTUnderlineStyleThick
	const CFStringRef kCTVerticalFormsAttributeName
	const CFStringRef kCTWritingDirectionAttributeName
	enum <anonymous> kCTWritingDirectionEmbedding
	enum <anonymous> kCTWritingDirectionLeftToRight
	enum <anonymous> kCTWritingDirectionNatural
	enum <anonymous> kCTWritingDirectionOverride
	enum <anonymous> kCTWritingDirectionRightToLeft
	enum <anonymous> kCUPSPPDDomain
	enum <anonymous> kCurrentMixedModeStateRecord
	enum <anonymous> kCurrentProcess
	enum <anonymous> kCurrentThreadID
	enum <anonymous> kCurrentUserFolderLocation
	enum <anonymous> kCurrentUserFolderType
	enum <anonymous> kCurrentUserRemoteFolderLocation
	enum <anonymous> kCurrentUserRemoteFolderType
	enum <anonymous> kCursiveConnectionType
	enum <anonymous> kCursiveSelector
	enum <anonymous> kCustomBadgeResourceID
	enum <anonymous> kCustomBadgeResourceType
	enum <anonymous> kCustomBadgeResourceVersion
	enum <anonymous> kCustomIconKCItemAttr
	enum <anonymous> kCustomIconResource
	enum <anonymous> kCVAttachmentMode_ShouldNotPropagate
	enum <anonymous> kCVAttachmentMode_ShouldPropagate
	const CFStringRef kCVBufferMovieTimeKey
	const CFStringRef kCVBufferNonPropagatedAttachmentsKey
	const CFStringRef kCVBufferPropagatedAttachmentsKey
	const CFStringRef kCVBufferTimeScaleKey
	const CFStringRef kCVBufferTimeValueKey
	const CFStringRef kCVImageBufferCGColorSpaceKey
	const CFStringRef kCVImageBufferChromaLocation_Bottom
	const CFStringRef kCVImageBufferChromaLocation_BottomLeft
	const CFStringRef kCVImageBufferChromaLocation_Center
	const CFStringRef kCVImageBufferChromaLocation_DV420
	const CFStringRef kCVImageBufferChromaLocation_Left
	const CFStringRef kCVImageBufferChromaLocation_Top
	const CFStringRef kCVImageBufferChromaLocation_TopLeft
	const CFStringRef kCVImageBufferChromaLocationBottomFieldKey
	const CFStringRef kCVImageBufferChromaLocationTopFieldKey
	const CFStringRef kCVImageBufferChromaSubsampling_411
	const CFStringRef kCVImageBufferChromaSubsampling_420
	const CFStringRef kCVImageBufferChromaSubsampling_422
	const CFStringRef kCVImageBufferChromaSubsamplingKey
	const CFStringRef kCVImageBufferCleanApertureHeightKey
	const CFStringRef kCVImageBufferCleanApertureHorizontalOffsetKey
	const CFStringRef kCVImageBufferCleanApertureKey
	const CFStringRef kCVImageBufferCleanApertureVerticalOffsetKey
	const CFStringRef kCVImageBufferCleanApertureWidthKey
	const CFStringRef kCVImageBufferColorPrimaries_EBU_3213
	const CFStringRef kCVImageBufferColorPrimaries_ITU_R_709_2
	const CFStringRef kCVImageBufferColorPrimaries_P22
	const CFStringRef kCVImageBufferColorPrimaries_SMPTE_C
	const CFStringRef kCVImageBufferColorPrimariesKey
	const CFStringRef kCVImageBufferDisplayDimensionsKey
	const CFStringRef kCVImageBufferDisplayHeightKey
	const CFStringRef kCVImageBufferDisplayWidthKey
	const CFStringRef kCVImageBufferFieldCountKey
	const CFStringRef kCVImageBufferFieldDetailKey
	const CFStringRef kCVImageBufferFieldDetailSpatialFirstLineEarly
	const CFStringRef kCVImageBufferFieldDetailSpatialFirstLineLate
	const CFStringRef kCVImageBufferFieldDetailTemporalBottomFirst
	const CFStringRef kCVImageBufferFieldDetailTemporalTopFirst
	const CFStringRef kCVImageBufferGammaLevelKey
	const CFStringRef kCVImageBufferICCProfileKey
	const CFStringRef kCVImageBufferPixelAspectRatioHorizontalSpacingKey
	const CFStringRef kCVImageBufferPixelAspectRatioKey
	const CFStringRef kCVImageBufferPixelAspectRatioVerticalSpacingKey
	const CFStringRef kCVImageBufferPreferredCleanApertureKey
	const CFStringRef kCVImageBufferTransferFunction_EBU_3213
	const CFStringRef kCVImageBufferTransferFunction_ITU_R_709_2
	const CFStringRef kCVImageBufferTransferFunction_SMPTE_240M_1995
	const CFStringRef kCVImageBufferTransferFunction_SMPTE_C
	const CFStringRef kCVImageBufferTransferFunction_UseGamma
	const CFStringRef kCVImageBufferTransferFunctionKey
	const CFStringRef kCVImageBufferYCbCrMatrix_ITU_R_601_4
	const CFStringRef kCVImageBufferYCbCrMatrix_ITU_R_709_2
	const CFStringRef kCVImageBufferYCbCrMatrix_SMPTE_240M_1995
	const CFStringRef kCVImageBufferYCbCrMatrixKey
	const CVTime kCVIndefiniteTime
	const CFStringRef kCVOpenGLBufferHeight
	const CFStringRef kCVOpenGLBufferInternalFormat
	const CFStringRef kCVOpenGLBufferMaximumMipmapLevel
	const CFStringRef kCVOpenGLBufferPoolMaximumBufferAgeKey
	const CFStringRef kCVOpenGLBufferPoolMinimumBufferCountKey
	const CFStringRef kCVOpenGLBufferTarget
	const CFStringRef kCVOpenGLBufferWidth
	const CFStringRef kCVOpenGLTextureCacheChromaSamplingModeAutomatic
	const CFStringRef kCVOpenGLTextureCacheChromaSamplingModeBestPerformance
	const CFStringRef kCVOpenGLTextureCacheChromaSamplingModeHighestQuality
	const CFStringRef kCVOpenGLTextureCacheChromaSamplingModeKey
	const CFStringRef kCVPixelBufferBytesPerRowAlignmentKey
	const CFStringRef kCVPixelBufferCGBitmapContextCompatibilityKey
	const CFStringRef kCVPixelBufferCGImageCompatibilityKey
	const CFStringRef kCVPixelBufferExtendedPixelsBottomKey
	const CFStringRef kCVPixelBufferExtendedPixelsLeftKey
	const CFStringRef kCVPixelBufferExtendedPixelsRightKey
	const CFStringRef kCVPixelBufferExtendedPixelsTopKey
	const CFStringRef kCVPixelBufferHeightKey
	const CFStringRef kCVPixelBufferIOSurfaceCoreAnimationCompatibilityKey
	const CFStringRef kCVPixelBufferIOSurfaceOpenGLESFBOCompatibilityKey
	const CFStringRef kCVPixelBufferIOSurfaceOpenGLESTextureCompatibilityKey
	const CFStringRef kCVPixelBufferIOSurfaceOpenGLFBOCompatibilityKey
	const CFStringRef kCVPixelBufferIOSurfaceOpenGLTextureCompatibilityKey
	const CFStringRef kCVPixelBufferIOSurfacePropertiesKey
	CVPixelBufferLockFlags kCVPixelBufferLock_ReadOnly
	const CFStringRef kCVPixelBufferMemoryAllocatorKey
	const CFStringRef kCVPixelBufferOpenGLCompatibilityKey
	const CFStringRef kCVPixelBufferOpenGLESCompatibilityKey
	const CFStringRef kCVPixelBufferPixelFormatTypeKey
	const CFStringRef kCVPixelBufferPlaneAlignmentKey
	const CFStringRef kCVPixelBufferPoolAllocationThresholdKey
	const CFStringRef kCVPixelBufferPoolFreeBufferNotification
	const CFStringRef kCVPixelBufferPoolMaximumBufferAgeKey
	const CFStringRef kCVPixelBufferPoolMinimumBufferCountKey
	const CFStringRef kCVPixelBufferWidthKey
	const CFStringRef kCVPixelFormatBitsPerBlock
	const CFStringRef kCVPixelFormatBlackBlock
	const CFStringRef kCVPixelFormatBlockHeight
	const CFStringRef kCVPixelFormatBlockHorizontalAlignment
	const CFStringRef kCVPixelFormatBlockVerticalAlignment
	const CFStringRef kCVPixelFormatBlockWidth
	const CFStringRef kCVPixelFormatCGBitmapContextCompatibility
	const CFStringRef kCVPixelFormatCGBitmapInfo
	const CFStringRef kCVPixelFormatCGImageCompatibility
	const CFStringRef kCVPixelFormatCodecType
	const CFStringRef kCVPixelFormatConstant
	const CFStringRef kCVPixelFormatContainsAlpha
	const CFStringRef kCVPixelFormatFillExtendedPixelsCallback
	const CFStringRef kCVPixelFormatFourCC
	const CFStringRef kCVPixelFormatHorizontalSubsampling
	const CFStringRef kCVPixelFormatName
	const CFStringRef kCVPixelFormatOpenGLCompatibility
	const CFStringRef kCVPixelFormatOpenGLESCompatibility
	const CFStringRef kCVPixelFormatOpenGLFormat
	const CFStringRef kCVPixelFormatOpenGLInternalFormat
	const CFStringRef kCVPixelFormatOpenGLType
	const CFStringRef kCVPixelFormatPlanes
	const CFStringRef kCVPixelFormatQDCompatibility
	enum <anonymous> kCVPixelFormatType_16BE555
	enum <anonymous> kCVPixelFormatType_16BE565
	enum <anonymous> kCVPixelFormatType_16Gray
	enum <anonymous> kCVPixelFormatType_16LE555
	enum <anonymous> kCVPixelFormatType_16LE5551
	enum <anonymous> kCVPixelFormatType_16LE565
	enum <anonymous> kCVPixelFormatType_1IndexedGray_WhiteIsZero
	enum <anonymous> kCVPixelFormatType_1Monochrome
	enum <anonymous> kCVPixelFormatType_24BGR
	enum <anonymous> kCVPixelFormatType_24RGB
	enum <anonymous> kCVPixelFormatType_2Indexed
	enum <anonymous> kCVPixelFormatType_2IndexedGray_WhiteIsZero
	enum <anonymous> kCVPixelFormatType_30RGB
	enum <anonymous> kCVPixelFormatType_32ABGR
	enum <anonymous> kCVPixelFormatType_32AlphaGray
	enum <anonymous> kCVPixelFormatType_32ARGB
	enum <anonymous> kCVPixelFormatType_32BGRA
	enum <anonymous> kCVPixelFormatType_32RGBA
	enum <anonymous> kCVPixelFormatType_420YpCbCr8BiPlanarFullRange
	enum <anonymous> kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange
	enum <anonymous> kCVPixelFormatType_420YpCbCr8Planar
	enum <anonymous> kCVPixelFormatType_420YpCbCr8PlanarFullRange
	enum <anonymous> kCVPixelFormatType_422YpCbCr10
	enum <anonymous> kCVPixelFormatType_422YpCbCr16
	enum <anonymous> kCVPixelFormatType_422YpCbCr8
	enum <anonymous> kCVPixelFormatType_422YpCbCr8_yuvs
	enum <anonymous> kCVPixelFormatType_422YpCbCr8FullRange
	enum <anonymous> kCVPixelFormatType_422YpCbCr_4A_8BiPlanar
	enum <anonymous> kCVPixelFormatType_4444AYpCbCr16
	enum <anonymous> kCVPixelFormatType_4444AYpCbCr8
	enum <anonymous> kCVPixelFormatType_4444YpCbCrA8
	enum <anonymous> kCVPixelFormatType_4444YpCbCrA8R
	enum <anonymous> kCVPixelFormatType_444YpCbCr10
	enum <anonymous> kCVPixelFormatType_444YpCbCr8
	enum <anonymous> kCVPixelFormatType_48RGB
	enum <anonymous> kCVPixelFormatType_4Indexed
	enum <anonymous> kCVPixelFormatType_4IndexedGray_WhiteIsZero
	enum <anonymous> kCVPixelFormatType_64ARGB
	enum <anonymous> kCVPixelFormatType_8Indexed
	enum <anonymous> kCVPixelFormatType_8IndexedGray_WhiteIsZero
	enum <anonymous> kCVPixelFormatType_OneComponent8
	enum <anonymous> kCVPixelFormatType_TwoComponent8
	const CFStringRef kCVPixelFormatVerticalSubsampling
	_CVReturn kCVReturnAllocationFailed
	_CVReturn kCVReturnDisplayLinkAlreadyRunning
	_CVReturn kCVReturnDisplayLinkCallbacksNotSet
	_CVReturn kCVReturnDisplayLinkNotRunning
	_CVReturn kCVReturnError
	_CVReturn kCVReturnFirst
	_CVReturn kCVReturnInvalidArgument
	_CVReturn kCVReturnInvalidDisplay
	_CVReturn kCVReturnInvalidPixelBufferAttributes
	_CVReturn kCVReturnInvalidPixelFormat
	_CVReturn kCVReturnInvalidPoolAttributes
	_CVReturn kCVReturnInvalidSize
	_CVReturn kCVReturnLast
	_CVReturn kCVReturnPixelBufferNotOpenGLCompatible
	_CVReturn kCVReturnPoolAllocationFailed
	_CVReturn kCVReturnSuccess
	_CVReturn kCVReturnWouldExceedAllocationThreshold
	enum <anonymous> kCVSMPTETimeRunning
	enum <anonymous> kCVSMPTETimeType24
	enum <anonymous> kCVSMPTETimeType25
	enum <anonymous> kCVSMPTETimeType2997
	enum <anonymous> kCVSMPTETimeType2997Drop
	enum <anonymous> kCVSMPTETimeType30
	enum <anonymous> kCVSMPTETimeType30Drop
	enum <anonymous> kCVSMPTETimeType5994
	enum <anonymous> kCVSMPTETimeType60
	enum <anonymous> kCVSMPTETimeValid
	enum <anonymous> kCVTimeIsIndefinite
	enum <anonymous> kCVTimeStampBottomField
	enum <anonymous> kCVTimeStampHostTimeValid
	enum <anonymous> kCVTimeStampIsInterlaced
	enum <anonymous> kCVTimeStampRateScalarValid
	enum <anonymous> kCVTimeStampSMPTETimeValid
	enum <anonymous> kCVTimeStampTopField
	enum <anonymous> kCVTimeStampVideoHostTimeValid
	enum <anonymous> kCVTimeStampVideoRefreshPeriodValid
	enum <anonymous> kCVTimeStampVideoTimeValid
	const CVTime kCVZeroTime
	enum <anonymous> kD0DispatchedCStackBased
	enum <anonymous> kD0DispatchedPascalStackBased
	enum <anonymous> kD1DispatchedPascalStackBased
	const CFStringRef kDADiskDescriptionBusNameKey
	const CFStringRef kDADiskDescriptionBusPathKey
	const CFStringRef kDADiskDescriptionDeviceGUIDKey
	const CFStringRef kDADiskDescriptionDeviceInternalKey
	const CFStringRef kDADiskDescriptionDeviceModelKey
	const CFStringRef kDADiskDescriptionDevicePathKey
	const CFStringRef kDADiskDescriptionDeviceProtocolKey
	const CFStringRef kDADiskDescriptionDeviceRevisionKey
	const CFStringRef kDADiskDescriptionDeviceUnitKey
	const CFStringRef kDADiskDescriptionDeviceVendorKey
	const CFStringRef kDADiskDescriptionMediaBlockSizeKey
	const CFStringRef kDADiskDescriptionMediaBSDMajorKey
	const CFStringRef kDADiskDescriptionMediaBSDMinorKey
	const CFStringRef kDADiskDescriptionMediaBSDNameKey
	const CFStringRef kDADiskDescriptionMediaBSDUnitKey
	const CFStringRef kDADiskDescriptionMediaContentKey
	const CFStringRef kDADiskDescriptionMediaEjectableKey
	const CFStringRef kDADiskDescriptionMediaIconKey
	const CFStringRef kDADiskDescriptionMediaKindKey
	const CFStringRef kDADiskDescriptionMediaLeafKey
	const CFStringRef kDADiskDescriptionMediaNameKey
	const CFStringRef kDADiskDescriptionMediaPathKey
	const CFStringRef kDADiskDescriptionMediaRemovableKey
	const CFStringRef kDADiskDescriptionMediaSizeKey
	const CFStringRef kDADiskDescriptionMediaTypeKey
	const CFStringRef kDADiskDescriptionMediaUUIDKey
	const CFStringRef kDADiskDescriptionMediaWholeKey
	const CFStringRef kDADiskDescriptionMediaWritableKey
	const CFStringRef kDADiskDescriptionVolumeKindKey
	const CFStringRef kDADiskDescriptionVolumeMountableKey
	const CFStringRef kDADiskDescriptionVolumeNameKey
	const CFStringRef kDADiskDescriptionVolumeNetworkKey
	const CFStringRef kDADiskDescriptionVolumePathKey
	const CFStringRef kDADiskDescriptionVolumeUUIDKey
	enum <anonymous> kDataAccessKCEvent
	enum <anonymous> kDataAccessKCEventMask
	enum <anonymous> kDataAlignmentException
	enum <anonymous> kDataBreakpointException
	enum <anonymous> kDCMAllowListing
	enum <anonymous> kDCMAnyFieldTag
	enum <anonymous> kDCMAnyFieldType
	enum <anonymous> kDCMBasicDictionaryClass
	enum <anonymous> kDCMCanAddDictionaryFieldMask
	enum <anonymous> kDCMCanCreateDictionaryMask
	enum <anonymous> kDCMCanHaveMultipleIndexMask
	enum <anonymous> kDCMCanModifyDictionaryMask
	enum <anonymous> kDCMCanStreamDictionaryMask
	enum <anonymous> kDCMCanUseFileDictionaryMask
	enum <anonymous> kDCMCanUseMemoryDictionaryMask
	enum <anonymous> kDCMCanUseTransactionMask
	enum <anonymous> kDCMDictionaryHeaderSignature
	enum <anonymous> kDCMDictionaryHeaderVersion
	enum <anonymous> kDCMFindMethodBackwardTrie
	enum <anonymous> kDCMFindMethodBeginningMatch
	enum <anonymous> kDCMFindMethodContainsMatch
	enum <anonymous> kDCMFindMethodEndingMatch
	enum <anonymous> kDCMFindMethodExactMatch
	enum <anonymous> kDCMFindMethodForwardTrie
	enum <anonymous> kDCMFixedSizeFieldMask
	enum <anonymous> kDCMHiddenFieldMask
	enum <anonymous> kDCMIdentifyFieldMask
	enum <anonymous> kDCMIndexedFieldMask
	enum <anonymous> kDCMJapaneseAccentTag
	enum <anonymous> kDCMJapaneseAccentType
	enum <anonymous> kDCMJapaneseFukugouInfoTag
	enum <anonymous> kDCMJapaneseFukugouInfoType
	enum <anonymous> kDCMJapaneseHinshiTag
	enum <anonymous> kDCMJapaneseHinshiType
	enum <anonymous> kDCMJapaneseHyokiTag
	enum <anonymous> kDCMJapaneseHyokiType
	enum <anonymous> kDCMJapaneseOnKunReadingTag
	enum <anonymous> kDCMJapaneseOnKunReadingType
	enum <anonymous> kDCMJapanesePhoneticTag
	enum <anonymous> kDCMJapanesePhoneticType
	enum <anonymous> kDCMJapaneseWeightTag
	enum <anonymous> kDCMJapaneseWeightType
	enum <anonymous> kDCMJapaneseYomiTag
	enum <anonymous> kDCMJapaneseYomiType
	enum <anonymous> kDCMProhibitListing
	enum <anonymous> kDCMReadOnlyDictionary
	enum <anonymous> kDCMReadWriteDictionary
	enum <anonymous> kDCMRequiredFieldMask
	enum <anonymous> kDCMSpecificDictionaryClass
	enum <anonymous> kDCMUserDictionaryClass
	enum <anonymous> kDecomposeDiacriticsSelector
	enum <anonymous> kDecorativeBordersSelector
	enum <anonymous> kDecryptKCItemAttr
	enum <anonymous> kDefaultChangedKCEvent
	enum <anonymous> kDefaultChangedKCEventMask
	enum <anonymous> kDefaultCJKRomanSelector
	enum <anonymous> kDefaultCMMSignature
	enum <anonymous> kDefaultLowerCaseSelector
	enum <anonymous> kDefaultUpperCaseSelector
	enum <anonymous> kDeleteAliasIcon
	enum <anonymous> kDeleteKCEvent
	enum <anonymous> kDeleteKCEventMask
	enum <anonymous> kDescriptionKCItemAttr
	enum <anonymous> kDesignComplexityType
	enum <anonymous> kDesignLevel1Selector
	enum <anonymous> kDesignLevel2Selector
	enum <anonymous> kDesignLevel3Selector
	enum <anonymous> kDesignLevel4Selector
	enum <anonymous> kDesignLevel5Selector
	enum <anonymous> kDesktopFolderType
	enum <anonymous> kDesktopIcon
	enum <anonymous> kDesktopIconResource
	enum <anonymous> kDesktopPicturesFolderType
	enum <anonymous> kDesktopPrinterAliasType
	enum <anonymous> kDeveloperApplicationsFolderType
	enum <anonymous> kDeveloperDocsFolderType
	enum <anonymous> kDeveloperFolderType
	enum <anonymous> kDeveloperHelpFolderType
	enum <anonymous> kDeviceInitiatedWake
	enum <anonymous> kDeviceToPCS
	enum <anonymous> kDiacriticsType
	enum <anonymous> kDiagonalFractionsSelector
	enum <anonymous> kDiamondAnnotationSelector
	enum <anonymous> kDictionariesFolderType
	enum <anonymous> kDictionaryFileType
	enum <anonymous> kDingbatsSelector
	enum <anonymous> kDiphthongLigaturesOffSelector
	enum <anonymous> kDiphthongLigaturesOnSelector
	enum <anonymous> kDirectoryServicesFolderType
	enum <anonymous> kDirectoryServicesPlugInsFolderType
	enum <anonymous> kDispatchedParameterPhase
	enum <anonymous> kDispatchedSelectorSizePhase
	enum <anonymous> kDispatchedSelectorSizeWidth
	enum <anonymous> kDisplayExtensionsFolderType
	enum <anonymous> kDisplayModeAcceleratorBackedFlag
	enum <anonymous> kDisplayModeAlwaysShowFlag
	enum <anonymous> kDisplayModeBuiltInFlag
	enum <anonymous> kDisplayModeDefaultFlag
	enum <anonymous> kDisplayModeInterlacedFlag
	enum <anonymous> kDisplayModeNeverShowFlag
	enum <anonymous> kDisplayModeNotGraphicsQualityFlag
	enum <anonymous> kDisplayModeNotPresetFlag
	enum <anonymous> kDisplayModeNotResizeFlag
	enum <anonymous> kDisplayModeRequiresPanFlag
	enum <anonymous> kDisplayModeSafeFlag
	enum <anonymous> kDisplayModeSafetyFlags
	enum <anonymous> kDisplayModeSimulscanFlag
	enum <anonymous> kDisplayModeStretchedFlag
	enum <anonymous> kDisplayModeTelevisionFlag
	enum <anonymous> kDisplayModeValidateAgainstDisplay
	enum <anonymous> kDisplayModeValidFlag
	enum <anonymous> kDisplayModeValidForAirPlayFlag
	enum <anonymous> kDisplayModeValidForHiResFlag
	enum <anonymous> kDisplayModeValidForMirroringFlag
	enum <anonymous> kDisplayProductIDGeneric
	enum <anonymous> kDisplaySubPixelConfigurationDelta
	enum <anonymous> kDisplaySubPixelConfigurationQuad
	enum <anonymous> kDisplaySubPixelConfigurationStripe
	enum <anonymous> kDisplaySubPixelConfigurationStripeOffset
	enum <anonymous> kDisplaySubPixelConfigurationUndefined
	enum <anonymous> kDisplaySubPixelLayoutBGR
	enum <anonymous> kDisplaySubPixelLayoutQuadGBL
	enum <anonymous> kDisplaySubPixelLayoutQuadGBR
	enum <anonymous> kDisplaySubPixelLayoutRGB
	enum <anonymous> kDisplaySubPixelLayoutUndefined
	enum <anonymous> kDisplaySubPixelShapeElliptical
	enum <anonymous> kDisplaySubPixelShapeOval
	enum <anonymous> kDisplaySubPixelShapeRectangular
	enum <anonymous> kDisplaySubPixelShapeRound
	enum <anonymous> kDisplaySubPixelShapeSquare
	enum <anonymous> kDisplaySubPixelShapeUndefined
	enum <anonymous> kDisplayTextSelector
	enum <anonymous> kDisplayVendorIDUnknown
	enum <anonymous> kDMCantBlock
	enum <anonymous> kDMDisplayAlreadyInstalledErr
	enum <anonymous> kDMDisplayNotFoundErr
	enum <anonymous> kDMDriverNotDisplayMgrAwareErr
	enum <anonymous> kDMFoundErr
	enum <anonymous> kDMGenErr
	enum <anonymous> kDMMainDisplayCannotMoveErr
	enum <anonymous> kDMMirroringBlocked
	enum <anonymous> kDMMirroringNotOn
	enum <anonymous> kDMMirroringOnAlready
	enum <anonymous> kDMNoDeviceTableclothErr
	enum <anonymous> kDMNotFoundErr
	enum <anonymous> kDMSWNotInitializedErr
	enum <anonymous> kDMWrongNumberOfDisplays
	enum <anonymous> kDocumentationFolderType
	enum <anonymous> kDocumentsFolderIcon
	enum <anonymous> kDocumentsFolderType
	enum <anonymous> kDoFolderActionEvent
	enum <anonymous> kDomainLibraryFolderType
	enum <anonymous> kDomainTopLevelFolderType
	enum <anonymous> kDontCreateFolder
	enum <anonymous> kDontFindAppBySignature
	enum <anonymous> kDontPassSelector
	enum <anonymous> kDOSJapanesePalmVariant
	enum <anonymous> kDOSJapaneseStandardVariant
	enum <anonymous> kDownloadsFolderType
	enum <anonymous> kDozeDemand
	enum <anonymous> kDozeRequest
	enum <anonymous> kDozeToFullWakeUp
	enum <anonymous> kDozeWakeUp
	enum <anonymous> kDropBoxFolderType
	enum <anonymous> kDropFolderAliasType
	enum <anonymous> kDropFolderIcon
	enum <anonymous> kDropFolderIconResource
	enum <anonymous> kDropIconVariant
	enum <anonymous> kDSpConfirmSwitchWarning
	enum <anonymous> kDSpContextAlreadyReservedErr
	enum <anonymous> kDSpContextNotFoundErr
	enum <anonymous> kDSpContextNotReservedErr
	enum <anonymous> kDSpFrameRateNotReadyErr
	enum <anonymous> kDSpInternalErr
	enum <anonymous> kDSpInvalidAttributesErr
	enum <anonymous> kDSpInvalidContextErr
	enum <anonymous> kDSpNotInitializedErr
	enum <anonymous> kDSpStereoContextErr
	enum <anonymous> kDSpSystemSWTooOldErr
	SSLProtocol kDTLSProtocol1
	enum <anonymous> kDTPAbortJobErr
	enum <anonymous> kDTPHoldJobErr
	enum <anonymous> kDTPStopQueueErr
	enum <anonymous> kDTPThirdPartySupported
	enum <anonymous> kDTPTryAgainErr
	enum <anonymous> kDurationForever
	enum <anonymous> kDurationImmediate
	enum <anonymous> kDurationMicrosecond
	enum <anonymous> kDurationMillisecond
	enum <anonymous> kEACCESErr
	enum <anonymous> kEADDRINUSEErr
	enum <anonymous> kEADDRNOTAVAILErr
	enum <anonymous> kEAGAINErr
	enum <anonymous> kEALREADYErr
	enum <anonymous> kEBADFErr
	enum <anonymous> kEBADMSGErr
	enum <anonymous> kEBUSYErr
	enum <anonymous> kECANCELErr
	enum <anonymous> kECONNABORTEDErr
	enum <anonymous> kECONNREFUSEDErr
	enum <anonymous> kECONNRESETErr
	enum <anonymous> kEDEADLKErr
	enum <anonymous> kEDESTADDRREQErr
	enum <anonymous> kEditorsFolderType
	enum <anonymous> kEEXISTErr
	enum <anonymous> kEFAULTErr
	enum <anonymous> kEHOSTDOWNErr
	enum <anonymous> kEHOSTUNREACHErr
	enum <anonymous> kEINPROGRESSErr
	enum <anonymous> kEINTRErr
	enum <anonymous> kEINVALErr
	enum <anonymous> kEIOErr
	enum <anonymous> kEISCONNErr
	enum <anonymous> kEjectMediaIcon
	enum <anonymous> kEMailKCItemAttr
	enum <anonymous> kEMSGSIZEErr
	enum <anonymous> kEncryptKCItemAttr
	enum <anonymous> kEncryptPassword
	enum <anonymous> kEndDateKCItemAttr
	enum <anonymous> kEndOfSentence
	enum <anonymous> kEndOfWord
	enum <anonymous> kENETDOWNErr
	enum <anonymous> kENETRESETErr
	enum <anonymous> kENETUNREACHErr
	enum <anonymous> kEngravedTextSelector
	enum <anonymous> kENOBUFSErr
	enum <anonymous> kENODATAErr
	enum <anonymous> kENODEVErr
	enum <anonymous> kENOENTErr
	enum <anonymous> kENOMEMErr
	enum <anonymous> kENOMSGErr
	enum <anonymous> kENOPROTOOPTErr
	enum <anonymous> kENORSRCErr
	enum <anonymous> kENOSRErr
	enum <anonymous> kENOSTRErr
	enum <anonymous> kENOTCONNErr
	enum <anonymous> kENOTSOCKErr
	enum <anonymous> kENOTTYErr
	enum <anonymous> kEnterIdle
	enum <anonymous> kEnterRun
	enum <anonymous> kEnterStandby
	enum <anonymous> kENXIOErr
	enum <anonymous> kEOPNOTSUPPErr
	enum <anonymous> kEPERMErr
	enum <anonymous> kEPIPEErr
	enum <anonymous> kEPROTOErr
	enum <anonymous> kEPROTONOSUPPORTErr
	enum <anonymous> kEPROTOTYPEErr
	enum <anonymous> kERANGEErr
	audit_token_t KERNEL_AUDIT_TOKEN
	security_token_t KERNEL_SECURITY_TOKEN
	enum <anonymous> kernelAlreadyFreeErr
	enum <anonymous> kernelAsyncReceiveLimitErr
	enum <anonymous> kernelAsyncSendLimitErr
	enum <anonymous> kernelAttributeErr
	enum <anonymous> kernelCanceledErr
	enum <anonymous> kernelDeletePermissionErr
	enum <anonymous> kernelExceptionErr
	enum <anonymous> kernelExecutePermissionErr
	enum <anonymous> kernelExecutionLevelErr
	enum <anonymous> kernelIDErr
	enum <anonymous> kernelIncompleteErr
	enum <anonymous> kernelInUseErr
	enum <anonymous> kernelObjectExistsErr
	enum <anonymous> kernelOptionsErr
	enum <anonymous> kernelPrivilegeErr
	enum <anonymous> kernelReadPermissionErr
	enum <anonymous> kernelReturnValueErr
	enum <anonymous> kernelTerminatedErr
	enum <anonymous> kernelTimeoutErr
	enum <anonymous> kernelUnrecoverableErr
	enum <anonymous> kernelUnsupportedErr
	enum <anonymous> kernelWritePermissionErr
	enum <anonymous> kESHUTDOWNErr
	enum <anonymous> kESOCKTNOSUPPORTErr
	enum <anonymous> kESRCHErr
	enum <anonymous> kETIMEDOUTErr
	enum <anonymous> kETIMEErr
	enum <anonymous> kETOOMANYREFSErr
	enum <anonymous> kEUC_CN_BasicVariant
	enum <anonymous> kEUC_CN_DOSVariant
	enum <anonymous> kEUC_KR_BasicVariant
	enum <anonymous> kEUC_KR_DOSVariant
	enum <anonymous> kEveryKCEventMask
	enum <anonymous> kEWOULDBLOCKErr
	enum <anonymous> kExactMatchThread
	enum <anonymous> kExcludedMemoryException
	enum <anonymous> kExitIdle
	enum <anonymous> kExpertCharactersSelector
	enum <anonymous> kExponentsOffSelector
	enum <anonymous> kExponentsOnSelector
	enum <anonymous> kExportedFolderAliasType
	enum <anonymous> kExtendedFlagHasCustomBadge
	enum <anonymous> kExtendedFlagHasRoutingInfo
	enum <anonymous> kExtendedFlagObjectIsBusy
	enum <anonymous> kExtendedFlagsAreInvalid
	enum <anonymous> kExtensionDisabledFolderType
	enum <anonymous> kExtensionFolderAliasType
	enum <anonymous> kExtensionFolderType
	enum <anonymous> kExtensionsDisabledFolderIcon
	enum <anonymous> kExtensionsFolderIcon
	enum <anonymous> kExtensionsFolderIconResource
	enum <anonymous> keyAcceptTimeoutAttr
	enum <anonymous> keyActualSenderAuditToken
	enum <anonymous> keyAdditionalHTTPHeaders
	enum <anonymous> keyAddressAttr
	enum <anonymous> keyAEAdjustMarksProc
	enum <anonymous> keyAEAngle
	enum <anonymous> keyAEArcAngle
	enum <anonymous> keyAEAttaching
	enum <anonymous> keyAEBaseAddr
	enum <anonymous> keyAEBestType
	enum <anonymous> keyAEBgndColor
	enum <anonymous> keyAEBgndPattern
	enum <anonymous> keyAEBounds
	enum <anonymous> keyAEBufferSize
	enum <anonymous> keyAECellList
	enum <anonymous> keyAEClassID
	enum <anonymous> keyAEClauseOffsets
	enum <anonymous> keyAEColor
	enum <anonymous> keyAEColorTable
	enum <anonymous> keyAECompareProc
	enum <anonymous> keyAECompOperator
	enum <anonymous> keyAEContainer
	enum <anonymous> keyAECountProc
	enum <anonymous> keyAECurrentPoint
	enum <anonymous> keyAECurveHeight
	enum <anonymous> keyAECurveWidth
	enum <anonymous> keyAEDashStyle
	enum <anonymous> keyAEData
	enum <anonymous> keyAEDefaultType
	enum <anonymous> keyAEDefinitionRect
	enum <anonymous> keyAEDescType
	enum <anonymous> keyAEDesiredClass
	enum <anonymous> keyAEDestination
	enum <anonymous> keyAEDoAntiAlias
	enum <anonymous> keyAEDoDithered
	enum <anonymous> keyAEDoRotate
	enum <anonymous> keyAEDoScale
	enum <anonymous> keyAEDoTranslate
	enum <anonymous> keyAEDragging
	enum <anonymous> keyAEEditionFileLoc
	enum <anonymous> keyAEElements
	enum <anonymous> keyAEEndPoint
	enum <anonymous> keyAEEventClass
	enum <anonymous> keyAEEventID
	enum <anonymous> keyAEFile
	enum <anonymous> keyAEFileType
	enum <anonymous> keyAEFillColor
	enum <anonymous> keyAEFillPattern
	enum <anonymous> keyAEFixLength
	enum <anonymous> keyAEFlipHorizontal
	enum <anonymous> keyAEFlipVertical
	enum <anonymous> keyAEFont
	enum <anonymous> keyAEFormula
	enum <anonymous> keyAEGetErrDescProc
	enum <anonymous> keyAEGraphicObjects
	enum <anonymous> keyAEHiliteRange
	enum <anonymous> keyAEHomographAccent
	enum <anonymous> keyAEHomographDicInfo
	enum <anonymous> keyAEHomographWeight
	enum <anonymous> keyAEID
	enum <anonymous> keyAEImageQuality
	enum <anonymous> keyAEIndex
	enum <anonymous> keyAEInsertHere
	enum <anonymous> keyAEKeyData
	enum <anonymous> keyAEKeyForm
	enum <anonymous> keyAEKeyForms
	enum <anonymous> keyAEKeyword
	enum <anonymous> keyAELAHomograph
	enum <anonymous> keyAELAMorpheme
	enum <anonymous> keyAELAMorphemeBundle
	enum <anonymous> keyAELAMorphemePath
	enum <anonymous> keyAELaunchedAsLogInItem
	enum <anonymous> keyAELaunchedAsServiceItem
	enum <anonymous> keyAELeftSide
	enum <anonymous> keyAELevel
	enum <anonymous> keyAELineArrow
	enum <anonymous> keyAELogicalOperator
	enum <anonymous> keyAELogicalTerms
	enum <anonymous> keyAEMarkProc
	enum <anonymous> keyAEMarkTokenProc
	enum <anonymous> keyAEMorphemePartOfSpeechCode
	enum <anonymous> keyAEMorphemeTextRange
	enum <anonymous> keyAEMoveView
	enum <anonymous> keyAEName
	enum <anonymous> keyAENewElementLoc
	enum <anonymous> keyAENextBody
	enum <anonymous> keyAEObject
	enum <anonymous> keyAEObject1
	enum <anonymous> keyAEObject2
	enum <anonymous> keyAEObjectClass
	enum <anonymous> keyAEOffset
	enum <anonymous> keyAEOffStyles
	enum <anonymous> keyAEOnStyles
	enum <anonymous> keyAEParameters
	enum <anonymous> keyAEParamFlags
	enum <anonymous> keyAEPenColor
	enum <anonymous> keyAEPenPattern
	enum <anonymous> keyAEPenWidth
	enum <anonymous> keyAEPinRange
	enum <anonymous> keyAEPixelDepth
	enum <anonymous> keyAEPixMapMinus
	enum <anonymous> keyAEPMTable
	enum <anonymous> keyAEPoint
	enum <anonymous> keyAEPointList
	enum <anonymous> keyAEPointSize
	enum <anonymous> keyAEPosition
	enum <anonymous> keyAEPOSTHeaderData
	enum <anonymous> keyAEPropData
	enum <anonymous> keyAEProperties
	enum <anonymous> keyAEProperty
	enum <anonymous> keyAEPropFlags
	enum <anonymous> keyAEPropID
	enum <anonymous> keyAEProtection
	enum <anonymous> keyAERangeStart
	enum <anonymous> keyAERangeStop
	enum <anonymous> keyAERecorderCount
	enum <anonymous> keyAERegionClass
	enum <anonymous> keyAERenderAs
	enum <anonymous> keyAEReplyHeaderData
	enum <anonymous> keyAERequestedType
	enum <anonymous> keyAEResult
	enum <anonymous> keyAEResultInfo
	enum <anonymous> keyAERotation
	enum <anonymous> keyAERotPoint
	enum <anonymous> keyAERowList
	enum <anonymous> keyAESaveOptions
	enum <anonymous> keyAEScale
	enum <anonymous> keyAEScriptTag
	enum <anonymous> keyAESearchText
	enum <anonymous> keyAEServerInstance
	enum <anonymous> keyAEShowWhere
	enum <anonymous> keyAEStartAngle
	enum <anonymous> keyAEStartPoint
	enum <anonymous> keyAEStyles
	enum <anonymous> keyAESuiteID
	enum <anonymous> keyAETest
	enum <anonymous> keyAEText
	enum <anonymous> keyAETextColor
	enum <anonymous> keyAETextFont
	enum <anonymous> keyAETextLineAscent
	enum <anonymous> keyAETextLineHeight
	enum <anonymous> keyAETextPointSize
	enum <anonymous> keyAETextServiceEncoding
	enum <anonymous> keyAETextServiceMacEncoding
	enum <anonymous> keyAETextStyles
	enum <anonymous> keyAETheData
	enum <anonymous> keyAETheText
	enum <anonymous> keyAETransferMode
	enum <anonymous> keyAETranslation
	enum <anonymous> keyAETryAsStructGraf
	enum <anonymous> keyAETSMDocumentRefcon
	enum <anonymous> keyAETSMEventRecord
	enum <anonymous> keyAETSMEventRef
	enum <anonymous> keyAETSMGlyphInfoArray
	enum <anonymous> keyAETSMScriptTag
	enum <anonymous> keyAETSMTextFMFont
	enum <anonymous> keyAETSMTextFont
	enum <anonymous> keyAETSMTextPointSize
	enum <anonymous> keyAEUniformStyles
	enum <anonymous> keyAEUpdateOn
	enum <anonymous> keyAEUpdateRange
	enum <anonymous> keyAEUserTerm
	enum <anonymous> keyAEVersion
	enum <anonymous> keyAEWhoseRangeStart
	enum <anonymous> keyAEWhoseRangeStop
	enum <anonymous> keyAEWindow
	enum <anonymous> keyAEWritingCode
	enum <anonymous> keyAEXMLReplyData
	enum <anonymous> keyAEXMLRequestData
	enum <anonymous> keyCloseAllWindows
	enum <anonymous> keyDCMFieldAttributes
	enum <anonymous> keyDCMFieldDefaultData
	enum <anonymous> keyDCMFieldFindMethods
	enum <anonymous> keyDCMFieldName
	enum <anonymous> keyDCMFieldTag
	enum <anonymous> keyDCMFieldType
	enum <anonymous> keyDCMMaxRecordSize
	enum <anonymous> keyDirectObject
	enum <anonymous> keyDisableAuthenticationAttr
	enum <anonymous> keyDisposeTokenProc
	enum <anonymous> keyDriveNumber
	enum <anonymous> keyErrorCode
	enum <anonymous> keyErrorNumber
	enum <anonymous> keyErrorString
	enum <anonymous> keyEventClassAttr
	enum <anonymous> keyEventIDAttr
	enum <anonymous> keyEventSourceAttr
	enum <anonymous> keyEvtDev
	enum <anonymous> keyHighLevelClass
	enum <anonymous> keyHighLevelID
	enum <anonymous> keyICEditPreferenceDestination
	enum <anonymous> keyInteractLevelAttr
	enum <anonymous> keyKey
	enum <anonymous> keyKeyboard
	enum <anonymous> keyKeyCode
	enum <anonymous> keyLocalWhere
	enum <anonymous> keyMenuID
	enum <anonymous> keyMenuItem
	enum <anonymous> keyMiscellaneous
	enum <anonymous> keyMissedKeywordAttr
	enum <anonymous> keyModifiers
	enum <anonymous> keyNewBounds
	enum <anonymous> keyOptionalKeywordAttr
	enum <anonymous> keyOriginalAddressAttr
	enum <anonymous> keyOriginalBounds
	enum <anonymous> keyPreDispatch
	enum <anonymous> keyProcessSerialNumber
	enum <anonymous> keyReplyPortAttr
	enum <anonymous> keyReplyRequestedAttr
	enum <anonymous> keyReturnIDAttr
	enum <anonymous> keyRPCMethodName
	enum <anonymous> keyRPCMethodParam
	enum <anonymous> keyRPCMethodParamOrder
	enum <anonymous> keySelection
	enum <anonymous> keySelectProc
	enum <anonymous> keySenderApplescriptEntitlementsAttr
	enum <anonymous> keySenderApplicationIdentifierEntitlementAttr
	enum <anonymous> keySenderApplicationSandboxed
	enum <anonymous> keySenderAuditTokenAttr
	enum <anonymous> keySenderEGIDAttr
	enum <anonymous> keySenderEUIDAttr
	enum <anonymous> keySenderGIDAttr
	enum <anonymous> keySenderPIDAttr
	enum <anonymous> keySenderUIDAttr
	enum <anonymous> keySOAPAction
	enum <anonymous> keySOAPMethodNameSpace
	enum <anonymous> keySOAPMethodNameSpaceURI
	enum <anonymous> keySOAPSchemaVersion
	enum <anonymous> keySOAPSMDNamespace
	enum <anonymous> keySOAPSMDNamespaceURI
	enum <anonymous> keySOAPSMDType
	enum <anonymous> keySOAPStructureMetaData
	enum <anonymous> keyTimeoutAttr
	enum <anonymous> keyTransactionIDAttr
	enum <anonymous> keyUserNameAttr
	enum <anonymous> keyUserPasswordAttr
	enum <anonymous> keyWhen
	enum <anonymous> keyWhere
	enum <anonymous> keyWindow
	enum <anonymous> keyXMLDebuggingAttr
	enum <anonymous> kFAAttachCommand
	enum <anonymous> kFAEditCommand
	enum <anonymous> kFAFileParam
	enum <anonymous> kFAIndexParam
	enum <anonymous> kFARemoveCommand
	enum <anonymous> kFAServerApp
	enum <anonymous> kFASuiteCode
	enum <anonymous> kFavoriteItemsIcon
	enum <anonymous> kFavoritesFolderIcon
	enum <anonymous> kFavoritesFolderType
	enum <anonymous> kFBCaccessCanceled
	enum <anonymous> kFBCaccessorStoreFailed
	enum <anonymous> kFBCaddDocFailed
	enum <anonymous> kFBCallocFailed
	enum <anonymous> kFBCanalysisNotAvailable
	enum <anonymous> kFBCbadIndexFile
	enum <anonymous> kFBCbadIndexFileVersion
	enum <anonymous> kFBCbadParam
	enum <anonymous> kFBCbadSearchSession
	enum <anonymous> kFBCcommitFailed
	enum <anonymous> kFBCcompactionFailed
	enum <anonymous> kFBCdeletionFailed
	enum <anonymous> kFBCfileNotIndexed
	enum <anonymous> kFBCflushFailed
	enum <anonymous> kFBCillegalSessionChange
	enum <anonymous> kFBCindexCreationFailed
	enum <anonymous> kFBCindexDiskIOFailed
	enum <anonymous> kFBCindexFileDestroyed
	enum <anonymous> kFBCindexingCanceled
	enum <anonymous> kFBCindexingFailed
	enum <anonymous> kFBCindexNotAvailable
	enum <anonymous> kFBCindexNotFound
	enum <anonymous> kFBCmergingFailed
	enum <anonymous> kFBCmoveFailed
	enum <anonymous> kFBCnoIndexesFound
	enum <anonymous> kFBCnoSearchSession
	enum <anonymous> kFBCnoSuchHit
	enum <anonymous> kFBCsearchFailed
	enum <anonymous> kFBCsomeFilesNotIndexed
	enum <anonymous> kFBCsummarizationCanceled
	enum <anonymous> kFBCtokenizationFailed
	enum <anonymous> kFBCvalidationFailed
	enum <anonymous> kFBCvTwinExceptionErr
	enum <anonymous> kFemale
	enum <anonymous> kFetchReference
	enum <anonymous> kFileSystemSupportFolderType
	enum <anonymous> kFindByContentFolderType
	enum <anonymous> kFindByContentIndexesFolderType
	enum <anonymous> kFindByContentPluginsFolderType
	enum <anonymous> kFinderIcon
	enum <anonymous> kFindSupportFolderType
	enum <anonymous> kFirstFailKCStopOn
	enum <anonymous> kFirstIOKitNotificationType
	enum <anonymous> kFirstMagicBusyFiletype
	enum <anonymous> kFirstPassKCStopOn
	enum <anonymous> kFleuronsSelector
	enum <anonymous> kFloatingPointException
	enum <anonymous> kFloppyIconResource
	enum <anonymous> kFMCurrentFilterFormat
	enum <anonymous> kFMFontCallbackFilterSelector
	enum <anonymous> kFMFontContainerAccessErr
	enum <anonymous> kFMFontContainerFilterSelector
	enum <anonymous> kFMFontDirectoryFilterSelector
	enum <anonymous> kFMFontFamilyCallbackFilterSelector
	enum <anonymous> kFMFontFileRefFilterSelector
	enum <anonymous> kFMFontTableAccessErr
	enum <anonymous> kFMFontTechnologyFilterSelector
	enum <anonymous> kFMGenerationFilterSelector
	enum <anonymous> kFMInvalidFontErr
	enum <anonymous> kFMInvalidFontFamilyErr
	enum <anonymous> kFMIterationCompleted
	enum <anonymous> kFMIterationScopeModifiedErr
	enum <anonymous> kFMPostScriptFontTechnology
	enum <anonymous> kFMTrueTypeFontTechnology
	enum <anonymous> kFNDirectoryModifiedMessage
	enum <anonymous> kFNNoImplicitAllSubscription
	enum <anonymous> kFNNotifyInBackground
	enum <anonymous> kFNSBadFlattenedSizeErr
	enum <anonymous> kFNSBadProfileVersionErr
	enum <anonymous> kFNSBadReferenceVersionErr
	enum <anonymous> kFNSDuplicateReferenceErr
	enum <anonymous> kFNSInsufficientDataErr
	enum <anonymous> kFNSInvalidProfileErr
	enum <anonymous> kFNSInvalidReferenceErr
	enum <anonymous> kFNSMismatchErr
	enum <anonymous> kFNSNameNotFoundErr
	enum <anonymous> kFolderActionCode
	enum <anonymous> kFolderActionsFolderType
	enum <anonymous> kFolderClosedEvent
	enum <anonymous> kFolderCreatedAdminPrivs
	enum <anonymous> kFolderCreatedAdminPrivsBit
	enum <anonymous> kFolderCreatedInvisible
	enum <anonymous> kFolderCreatedInvisibleBit
	enum <anonymous> kFolderCreatedNameLocked
	enum <anonymous> kFolderCreatedNameLockedBit
	enum <anonymous> kFolderInLocalOrRemoteUserFolder
	enum <anonymous> kFolderInRemoteUserFolderIfAvailable
	enum <anonymous> kFolderInRemoteUserFolderIfAvailableBit
	enum <anonymous> kFolderInUserFolder
	enum <anonymous> kFolderInUserFolderBit
	enum <anonymous> kFolderItemsAddedEvent
	enum <anonymous> kFolderItemsRemovedEvent
	enum <anonymous> kFolderManagerFolderInMacOS9FolderIfMacOSXIsInstalledBit
	enum <anonymous> kFolderManagerFolderInMacOS9FolderIfMacOSXIsInstalledMask
	enum <anonymous> kFolderManagerLastDomain
	enum <anonymous> kFolderManagerNewlyCreatedFolderIsLocalizedBit
	enum <anonymous> kFolderManagerNewlyCreatedFolderShouldHaveDotLocalizedCreatedWithinMask
	enum <anonymous> kFolderManagerNotCreatedOnRemoteVolumesBit
	enum <anonymous> kFolderManagerNotCreatedOnRemoteVolumesMask
	enum <anonymous> kFolderMustStayOnSameVolume
	enum <anonymous> kFolderMustStayOnSameVolumeBit
	enum <anonymous> kFolderNeverMatchedInIdentifyFolder
	enum <anonymous> kFolderNeverMatchedInIdentifyFolderBit
	enum <anonymous> kFolderOpenedEvent
	enum <anonymous> kFolderTrackedByAlias
	enum <anonymous> kFolderTrackedByAliasBit
	enum <anonymous> kFolderWindowMovedEvent
	enum <anonymous> kFontAlbanianLanguage
	enum <anonymous> kFontAmharicLanguage
	enum <anonymous> kFontAmharicScript
	enum <anonymous> kFontArabicLanguage
	enum <anonymous> kFontArabicScript
	enum <anonymous> kFontArmenianLanguage
	enum <anonymous> kFontArmenianScript
	enum <anonymous> kFontAssameseLanguage
	enum <anonymous> kFontAymaraLanguage
	enum <anonymous> kFontAzerbaijanArLanguage
	enum <anonymous> kFontAzerbaijaniLanguage
	enum <anonymous> kFontBasqueLanguage
	enum <anonymous> kFontBengaliLanguage
	enum <anonymous> kFontBengaliScript
	enum <anonymous> kFontBulgarianLanguage
	enum <anonymous> kFontBurmeseLanguage
	enum <anonymous> kFontBurmeseScript
	enum <anonymous> kFontByelorussianLanguage
	enum <anonymous> kFontCatalanLanguage
	enum <anonymous> kFontChewaLanguage
	enum <anonymous> kFontChineseScript
	enum <anonymous> kFontCollectionsFolderType
	enum <anonymous> kFontCopyrightName
	enum <anonymous> kFontCroatianLanguage
	enum <anonymous> kFontCustom16BitScript
	enum <anonymous> kFontCustom816BitScript
	enum <anonymous> kFontCustom8BitScript
	enum <anonymous> kFontCustomPlatform
	enum <anonymous> kFontCyrillicScript
	enum <anonymous> kFontCzechLanguage
	enum <anonymous> kFontDanishLanguage
	enum <anonymous> kFontDescriptionName
	enum <anonymous> kFontDesignerName
	enum <anonymous> kFontDesignerURLName
	enum <anonymous> kFontDevanagariScript
	enum <anonymous> kFontDutchLanguage
	enum <anonymous> kFontDzongkhaLanguage
	enum <anonymous> kFontEastEuropeanRomanScript
	enum <anonymous> kFontEnglishLanguage
	enum <anonymous> kFontEsperantoLanguage
	enum <anonymous> kFontEstonianLanguage
	enum <anonymous> kFontEthiopicScript
	enum <anonymous> kFontExtendedArabicScript
	enum <anonymous> kFontFaeroeseLanguage
	enum <anonymous> kFontFamilyName
	enum <anonymous> kFontFarsiLanguage
	enum <anonymous> kFontFinnishLanguage
	enum <anonymous> kFontFlemishLanguage
	enum <anonymous> kFontFrenchLanguage
	enum <anonymous> kFontFullName
	enum <anonymous> kFontGallaLanguage
	enum <anonymous> kFontGeezScript
	enum <anonymous> kFontGeorgianLanguage
	enum <anonymous> kFontGeorgianScript
	enum <anonymous> kFontGermanLanguage
	enum <anonymous> kFontGreekLanguage
	enum <anonymous> kFontGreekScript
	enum <anonymous> kFontGuaraniLanguage
	enum <anonymous> kFontGujaratiLanguage
	enum <anonymous> kFontGujaratiScript
	enum <anonymous> kFontGurmukhiScript
	enum <anonymous> kFontHebrewLanguage
	enum <anonymous> kFontHebrewScript
	enum <anonymous> kFontHindiLanguage
	enum <anonymous> kFontHungarianLanguage
	enum <anonymous> kFontIcelandicLanguage
	enum <anonymous> kFontIndonesianLanguage
	enum <anonymous> kFontIrishLanguage
	enum <anonymous> kFontISO10646_1993Semantics
	enum <anonymous> kFontItalianLanguage
	enum <anonymous> kFontJapaneseLanguage
	enum <anonymous> kFontJapaneseScript
	enum <anonymous> kFontJavaneseRomLanguage
	enum <anonymous> kFontKannadaLanguage
	enum <anonymous> kFontKannadaScript
	enum <anonymous> kFontKashmiriLanguage
	enum <anonymous> kFontKazakhLanguage
	enum <anonymous> kFontKhmerLanguage
	enum <anonymous> kFontKhmerScript
	enum <anonymous> kFontKirghizLanguage
	enum <anonymous> kFontKoreanLanguage
	enum <anonymous> kFontKoreanScript
	enum <anonymous> kFontKurdishLanguage
	enum <anonymous> kFontLaoLanguage
	enum <anonymous> kFontLaotianScript
	enum <anonymous> kFontLappishLanguage
	enum <anonymous> kFontLastReservedName
	enum <anonymous> kFontLatinLanguage
	enum <anonymous> kFontLatvianLanguage
	enum <anonymous> kFontLettishLanguage
	enum <anonymous> kFontLicenseDescriptionName
	enum <anonymous> kFontLicenseInfoURLName
	enum <anonymous> kFontLithuanianLanguage
	enum <anonymous> kFontMacCompatibleFullName
	enum <anonymous> kFontMacedonianLanguage
	enum <anonymous> kFontMacintoshPlatform
	enum <anonymous> kFontMalagasyLanguage
	enum <anonymous> kFontMalayalamLanguage
	enum <anonymous> kFontMalayalamScript
	enum <anonymous> kFontMalayArabicLanguage
	enum <anonymous> kFontMalayRomanLanguage
	enum <anonymous> kFontMalteseLanguage
	enum <anonymous> kFontManufacturerName
	enum <anonymous> kFontMarathiLanguage
	enum <anonymous> kFontMicrosoftPlatform
	enum <anonymous> kFontMicrosoftStandardScript
	enum <anonymous> kFontMicrosoftSymbolScript
	enum <anonymous> kFontMicrosoftUCS4Script
	enum <anonymous> kFontMoldavianLanguage
	enum <anonymous> kFontMongolianCyrLanguage
	enum <anonymous> kFontMongolianLanguage
	enum <anonymous> kFontMongolianScript
	enum <anonymous> kFontNepaliLanguage
	enum <anonymous> kFontNoLanguage
	enum <anonymous> kFontNoLanguageCode
	enum <anonymous> kFontNoName
	enum <anonymous> kFontNoNameCode
	enum <anonymous> kFontNoPlatform
	enum <anonymous> kFontNoPlatformCode
	enum <anonymous> kFontNorwegianLanguage
	enum <anonymous> kFontNoScript
	enum <anonymous> kFontNoScriptCode
	enum <anonymous> kFontOriyaLanguage
	enum <anonymous> kFontOriyaScript
	enum <anonymous> kFontOromoLanguage
	enum <anonymous> kFontPashtoLanguage
	enum <anonymous> kFontPersianLanguage
	enum <anonymous> kFontPolishLanguage
	enum <anonymous> kFontPortugueseLanguage
	enum <anonymous> kFontPostScriptCIDName
	enum <anonymous> kFontPostscriptName
	enum <anonymous> kFontPreferredFamilyName
	enum <anonymous> kFontPreferredSubfamilyName
	enum <anonymous> kFontPunjabiLanguage
	enum <anonymous> kFontQuechuaLanguage
	enum <anonymous> kFontReservedPlatform
	enum <anonymous> kFontRomanianLanguage
	enum <anonymous> kFontRomanScript
	enum <anonymous> kFontRSymbolScript
	enum <anonymous> kFontRuandaLanguage
	enum <anonymous> kFontRundiLanguage
	enum <anonymous> kFontRussian
	enum <anonymous> kFontRussianLanguage
	enum <anonymous> kFontSaamiskLanguage
	enum <anonymous> kFontSampleTextName
	enum <anonymous> kFontSanskritLanguage
	enum <anonymous> kFontSerbianLanguage
	enum <anonymous> kFontsFolderIcon
	enum <anonymous> kFontsFolderIconResource
	enum <anonymous> kFontsFolderType
	enum <anonymous> kFontSimpChineseLanguage
	enum <anonymous> kFontSimpleChineseScript
	enum <anonymous> kFontSindhiLanguage
	enum <anonymous> kFontSindhiScript
	enum <anonymous> kFontSinhaleseLanguage
	enum <anonymous> kFontSinhaleseScript
	enum <anonymous> kFontSlavicScript
	enum <anonymous> kFontSlovakLanguage
	enum <anonymous> kFontSlovenianLanguage
	enum <anonymous> kFontSomaliLanguage
	enum <anonymous> kFontSpanishLanguage
	enum <anonymous> kFontStyleName
	enum <anonymous> kFontSuitcaseIcon
	enum <anonymous> kFontSundaneseRomLanguage
	enum <anonymous> kFontSwahiliLanguage
	enum <anonymous> kFontSwedishLanguage
	enum <anonymous> kFontTagalogLanguage
	enum <anonymous> kFontTajikiLanguage
	enum <anonymous> kFontTamilLanguage
	enum <anonymous> kFontTamilScript
	enum <anonymous> kFontTatarLanguage
	enum <anonymous> kFontTeluguLanguage
	enum <anonymous> kFontTeluguScript
	enum <anonymous> kFontThaiLanguage
	enum <anonymous> kFontThaiScript
	enum <anonymous> kFontTibetanLanguage
	enum <anonymous> kFontTibetanScript
	enum <anonymous> kFontTigrinyaLanguage
	enum <anonymous> kFontTradChineseLanguage
	enum <anonymous> kFontTrademarkName
	enum <anonymous> kFontTraditionalChineseScript
	enum <anonymous> kFontTurkishLanguage
	enum <anonymous> kFontTurkmenLanguage
	enum <anonymous> kFontUighurLanguage
	enum <anonymous> kFontUkrainianLanguage
	enum <anonymous> kFontUnicode_FullRepertoire
	enum <anonymous> kFontUnicodeDefaultSemantics
	enum <anonymous> kFontUnicodePlatform
	enum <anonymous> kFontUnicodeV1_1Semantics
	enum <anonymous> kFontUnicodeV2_0BMPOnlySemantics
	enum <anonymous> kFontUnicodeV2_0FullCoverageSemantics
	enum <anonymous> kFontUnicodeV4_0VariationSequenceSemantics
	enum <anonymous> kFontUninterpretedScript
	enum <anonymous> kFontUniqueName
	enum <anonymous> kFontUrduLanguage
	enum <anonymous> kFontUzbekLanguage
	enum <anonymous> kFontVendorURLName
	enum <anonymous> kFontVersionName
	enum <anonymous> kFontVietnameseLanguage
	enum <anonymous> kFontVietnameseScript
	enum <anonymous> kFontWelshLanguage
	enum <anonymous> kFontYiddishLanguage
	enum <anonymous> kForkInfoFlagsFileLockedBit
	enum <anonymous> kForkInfoFlagsFileLockedMask
	enum <anonymous> kForkInfoFlagsLargeFileBit
	enum <anonymous> kForkInfoFlagsLargeFileMask
	enum <anonymous> kForkInfoFlagsModifiedBit
	enum <anonymous> kForkInfoFlagsModifiedMask
	enum <anonymous> kForkInfoFlagsOwnClumpBit
	enum <anonymous> kForkInfoFlagsOwnClumpMask
	enum <anonymous> kForkInfoFlagsResourceBit
	enum <anonymous> kForkInfoFlagsResourceMask
	enum <anonymous> kForkInfoFlagsSharedWriteBit
	enum <anonymous> kForkInfoFlagsSharedWriteMask
	enum <anonymous> kForkInfoFlagsWriteBit
	enum <anonymous> kForkInfoFlagsWriteLockedBit
	enum <anonymous> kForkInfoFlagsWriteLockedMask
	enum <anonymous> kForkInfoFlagsWriteMask
	enum <anonymous> kFormInterrobangOffSelector
	enum <anonymous> kFormInterrobangOnSelector
	enum <anonymous> kForwardArrowIcon
	enum <anonymous> kFourByteCode
	enum <anonymous> kFPUNotNeeded
	enum <anonymous> kFractionsType
	enum <anonymous> kFragmentIsPrepared
	enum <anonymous> kFragmentNeedsPreparing
	enum <anonymous> kFramebufferDisableAltivecAccess
	enum <anonymous> kFramebufferSupportsCopybackCache
	enum <anonymous> kFramebufferSupportsGammaCorrection
	enum <anonymous> kFramebufferSupportsWritethruCache
	enum <anonymous> kFrameworksFolderType
	enum <anonymous> kFSAliasInfoFinderInfo
	enum <anonymous> kFSAliasInfoFSInfo
	enum <anonymous> kFSAliasInfoIDs
	enum <anonymous> kFSAliasInfoIsDirectory
	enum <anonymous> kFSAliasInfoNone
	enum <anonymous> kFSAliasInfoTargetCreateDate
	enum <anonymous> kFSAliasInfoVolumeCreateDate
	enum <anonymous> kFSAliasInfoVolumeFlags
	enum <anonymous> kFSAllocAllOrNothingMask
	enum <anonymous> kFSAllocContiguousMask
	enum <anonymous> kFSAllocDefaultFlags
	enum <anonymous> kFSAllocNoRoundUpMask
	enum <anonymous> kFSAllocReservedMask
	enum <anonymous> kFSAllowConcurrentAsyncIOBit
	enum <anonymous> kFSAllowConcurrentAsyncIOMask
	enum <anonymous> kFSCatInfoAccessDate
	enum <anonymous> kFSCatInfoAllDates
	enum <anonymous> kFSCatInfoAttrMod
	enum <anonymous> kFSCatInfoBackupDate
	enum <anonymous> kFSCatInfoContentMod
	enum <anonymous> kFSCatInfoCreateDate
	enum <anonymous> kFSCatInfoDataSizes
	enum <anonymous> kFSCatInfoFinderInfo
	enum <anonymous> kFSCatInfoFinderXInfo
	enum <anonymous> kFSCatInfoFSFileSecurityRef
	enum <anonymous> kFSCatInfoGettableInfo
	enum <anonymous> kFSCatInfoNodeFlags
	enum <anonymous> kFSCatInfoNodeID
	enum <anonymous> kFSCatInfoNone
	enum <anonymous> kFSCatInfoParentDirID
	enum <anonymous> kFSCatInfoPermissions
	enum <anonymous> kFSCatInfoReserved
	enum <anonymous> kFSCatInfoRsrcSizes
	enum <anonymous> kFSCatInfoSetOwnership
	enum <anonymous> kFSCatInfoSettableInfo
	enum <anonymous> kFSCatInfoSharingFlags
	enum <anonymous> kFSCatInfoTextEncoding
	enum <anonymous> kFSCatInfoUserAccess
	enum <anonymous> kFSCatInfoUserPrivs
	enum <anonymous> kFSCatInfoValence
	enum <anonymous> kFSCatInfoVolume
	enum <anonymous> kFSEjectVolumeForceEject
	enum <anonymous> kFSEventStreamCreateFlagFileEvents
	enum <anonymous> kFSEventStreamCreateFlagIgnoreSelf
	enum <anonymous> kFSEventStreamCreateFlagNoDefer
	enum <anonymous> kFSEventStreamCreateFlagNone
	enum <anonymous> kFSEventStreamCreateFlagUseCFTypes
	enum <anonymous> kFSEventStreamCreateFlagWatchRoot
	enum <anonymous> kFSEventStreamEventFlagEventIdsWrapped
	enum <anonymous> kFSEventStreamEventFlagHistoryDone
	enum <anonymous> kFSEventStreamEventFlagItemChangeOwner
	enum <anonymous> kFSEventStreamEventFlagItemCreated
	enum <anonymous> kFSEventStreamEventFlagItemFinderInfoMod
	enum <anonymous> kFSEventStreamEventFlagItemInodeMetaMod
	enum <anonymous> kFSEventStreamEventFlagItemIsDir
	enum <anonymous> kFSEventStreamEventFlagItemIsFile
	enum <anonymous> kFSEventStreamEventFlagItemIsSymlink
	enum <anonymous> kFSEventStreamEventFlagItemModified
	enum <anonymous> kFSEventStreamEventFlagItemRemoved
	enum <anonymous> kFSEventStreamEventFlagItemRenamed
	enum <anonymous> kFSEventStreamEventFlagItemXattrMod
	enum <anonymous> kFSEventStreamEventFlagKernelDropped
	enum <anonymous> kFSEventStreamEventFlagMount
	enum <anonymous> kFSEventStreamEventFlagMustScanSubDirs
	enum <anonymous> kFSEventStreamEventFlagNone
	enum <anonymous> kFSEventStreamEventFlagRootChanged
	enum <anonymous> kFSEventStreamEventFlagUnmount
	enum <anonymous> kFSEventStreamEventFlagUserDropped
	enum <anonymous> kFSEventStreamEventIdSinceNow
	enum <anonymous> kFSFileOperationDefaultOptions
	enum <anonymous> kFSFileOperationDoNotMoveAcrossVolumes
	enum <anonymous> kFSFileOperationOverwrite
	enum <anonymous> kFSFileOperationSkipPreflight
	enum <anonymous> kFSFileOperationSkipSourcePermissionErrors
	enum <anonymous> kFSForceReadBit
	enum <anonymous> kFSForceReadMask
	enum <anonymous> kFSInvalidVolumeRefNum
	enum <anonymous> kFSIterateDelete
	enum <anonymous> kFSIterateFlat
	enum <anonymous> kFSIterateReserved
	enum <anonymous> kFSIterateSubtree
	enum <anonymous> kFSKMountVersion
	enum <anonymous> kFSMountServerMarkDoNotDisplay
	enum <anonymous> kFSMountServerMountOnMountDir
	enum <anonymous> kFSMountServerMountWithoutNotification
	enum <anonymous> kFSMountServerSuppressConnectionUI
	enum <anonymous> kFSNewLineBit
	enum <anonymous> kFSNewLineCharMask
	enum <anonymous> kFSNewLineMask
	enum <anonymous> kFSNoCacheBit
	enum <anonymous> kFSNoCacheMask
	enum <anonymous> kFSNodeCopyProtectBit
	enum <anonymous> kFSNodeCopyProtectMask
	enum <anonymous> kFSNodeDataOpenBit
	enum <anonymous> kFSNodeDataOpenMask
	enum <anonymous> kFSNodeForkOpenBit
	enum <anonymous> kFSNodeForkOpenMask
	enum <anonymous> kFSNodeHardLinkBit
	enum <anonymous> kFSNodeHardLinkMask
	enum <anonymous> kFSNodeInSharedBit
	enum <anonymous> kFSNodeInSharedMask
	enum <anonymous> kFSNodeIsDirectoryBit
	enum <anonymous> kFSNodeIsDirectoryMask
	enum <anonymous> kFSNodeIsMountedBit
	enum <anonymous> kFSNodeIsMountedMask
	enum <anonymous> kFSNodeIsSharePointBit
	enum <anonymous> kFSNodeIsSharePointMask
	enum <anonymous> kFSNodeLockedBit
	enum <anonymous> kFSNodeLockedMask
	enum <anonymous> kFSNodeResOpenBit
	enum <anonymous> kFSNodeResOpenMask
	const CFStringRef kFSOperationBytesCompleteKey
	const CFStringRef kFSOperationBytesRemainingKey
	const CFStringRef kFSOperationObjectsCompleteKey
	const CFStringRef kFSOperationObjectsRemainingKey
	enum <anonymous> kFSOperationStageComplete
	enum <anonymous> kFSOperationStagePreflighting
	enum <anonymous> kFSOperationStageRunning
	enum <anonymous> kFSOperationStageUndefined
	const CFStringRef kFSOperationThroughputKey
	const CFStringRef kFSOperationTotalBytesKey
	const CFStringRef kFSOperationTotalObjectsKey
	const CFStringRef kFSOperationTotalUserVisibleObjectsKey
	const CFStringRef kFSOperationUserVisibleObjectsCompleteKey
	const CFStringRef kFSOperationUserVisibleObjectsRemainingKey
	enum <anonymous> kFSPathMakeRefDefaultOptions
	enum <anonymous> kFSPathMakeRefDoNotFollowLeafSymlink
	enum <anonymous> kFSPleaseCacheBit
	enum <anonymous> kFSPleaseCacheMask
	enum <anonymous> kFSRdVerifyBit
	enum <anonymous> kFSRdVerifyMask
	enum <anonymous> kFSReplaceObjectDefaultOptions
	enum <anonymous> kFSReplaceObjectDoNotCheckObjectWriteAccess
	enum <anonymous> kFSReplaceObjectPreservePermissionInfo
	enum <anonymous> kFSReplaceObjectReplaceMetadata
	enum <anonymous> kFSReplaceObjectReplacePermissionInfo
	enum <anonymous> kFSReplaceObjectSaveOriginalAsABackup
	enum <anonymous> kFSUnmountVolumeForceUnmount
	enum <anonymous> kFSVolFlagDefaultVolumeBit
	enum <anonymous> kFSVolFlagDefaultVolumeMask
	enum <anonymous> kFSVolFlagFilesOpenBit
	enum <anonymous> kFSVolFlagFilesOpenMask
	enum <anonymous> kFSVolFlagHardwareLockedBit
	enum <anonymous> kFSVolFlagHardwareLockedMask
	enum <anonymous> kFSVolFlagJournalingActiveBit
	enum <anonymous> kFSVolFlagJournalingActiveMask
	enum <anonymous> kFSVolFlagSoftwareLockedBit
	enum <anonymous> kFSVolFlagSoftwareLockedMask
	enum <anonymous> kFSVolInfoBackupDate
	enum <anonymous> kFSVolInfoBlocks
	enum <anonymous> kFSVolInfoCheckedDate
	enum <anonymous> kFSVolInfoCreateDate
	enum <anonymous> kFSVolInfoDataClump
	enum <anonymous> kFSVolInfoDirCount
	enum <anonymous> kFSVolInfoDriveInfo
	enum <anonymous> kFSVolInfoFileCount
	enum <anonymous> kFSVolInfoFinderInfo
	enum <anonymous> kFSVolInfoFlags
	enum <anonymous> kFSVolInfoFSInfo
	enum <anonymous> kFSVolInfoGettableInfo
	enum <anonymous> kFSVolInfoModDate
	enum <anonymous> kFSVolInfoNextAlloc
	enum <anonymous> kFSVolInfoNextID
	enum <anonymous> kFSVolInfoNone
	enum <anonymous> kFSVolInfoRsrcClump
	enum <anonymous> kFSVolInfoSettableInfo
	enum <anonymous> kFSVolInfoSizes
	enum <anonymous> kFTPServerIcon
	enum <anonymous> kfullPrivileges
	enum <anonymous> kFullTrashIcon
	enum <anonymous> kFullTrashIconResource
	enum <anonymous> kFullWidthCJKRomanSelector
	enum <anonymous> kFullWidthIdeographsSelector
	enum <anonymous> kFullWidthKanaSelector
	enum <anonymous> kGenEditorsFolderType
	enum <anonymous> kGeneralFailureErr
	enum <anonymous> kGenericApplicationIcon
	enum <anonymous> kGenericApplicationIconResource
	enum <anonymous> kGenericCDROMIcon
	enum <anonymous> kGenericCDROMIconResource
	enum <anonymous> kGenericComponentIcon
	enum <anonymous> kGenericControlPanelIcon
	enum <anonymous> kGenericControlStripModuleIcon
	enum <anonymous> kGenericDeskAccessoryIcon
	enum <anonymous> kGenericDeskAccessoryIconResource
	enum <anonymous> kGenericDocumentIcon
	enum <anonymous> kGenericDocumentIconResource
	enum <anonymous> kGenericEditionFileIcon
	enum <anonymous> kGenericEditionFileIconResource
	enum <anonymous> kGenericExtensionIcon
	enum <anonymous> kGenericExtensionIconResource
	enum <anonymous> kGenericFileServerIcon
	enum <anonymous> kGenericFileServerIconResource
	enum <anonymous> kGenericFloppyIcon
	enum <anonymous> kGenericFolderIcon
	enum <anonymous> kGenericFolderIconResource
	enum <anonymous> kGenericFontIcon
	enum <anonymous> kGenericFontScalerIcon
	enum <anonymous> kGenericHardDiskIcon
	enum <anonymous> kGenericHardDiskIconResource
	enum <anonymous> kGenericIDiskIcon
	enum <anonymous> kGenericKCItemAttr
	enum <anonymous> kGenericMoverObjectIcon
	enum <anonymous> kGenericMoverObjectIconResource
	enum <anonymous> kGenericNetworkIcon
	enum <anonymous> kGenericPasswordKCItemClass
	enum <anonymous> kGenericPCCardIcon
	enum <anonymous> kGenericPreferencesIcon
	enum <anonymous> kGenericPreferencesIconResource
	enum <anonymous> kGenericQueryDocumentIcon
	enum <anonymous> kGenericQueryDocumentIconResource
	enum <anonymous> kGenericRAMDiskIcon
	enum <anonymous> kGenericRAMDiskIconResource
	enum <anonymous> kGenericRemovableMediaIcon
	enum <anonymous> kGenericSharedLibaryIcon
	enum <anonymous> kGenericStationeryIcon
	enum <anonymous> kGenericStationeryIconResource
	enum <anonymous> kGenericSuitcaseIcon
	enum <anonymous> kGenericSuitcaseIconResource
	enum <anonymous> kGenericURLIcon
	enum <anonymous> kGenericWindowIcon
	enum <anonymous> kGenericWORMIcon
	enum <anonymous> kGetDebugOption
	enum <anonymous> kGetPowerInfo
	enum <anonymous> kGetPowerLevel
	enum <anonymous> kGetSelectedText
	enum <anonymous> kGetWakeOnNetInfo
	enum <anonymous> kGlyphCollectionAdobeCNS1
	enum <anonymous> kGlyphCollectionAdobeGB1
	enum <anonymous> kGlyphCollectionAdobeJapan1
	enum <anonymous> kGlyphCollectionAdobeJapan2
	enum <anonymous> kGlyphCollectionAdobeKorea1
	enum <anonymous> kGlyphCollectionGID
	enum <anonymous> kGlyphCollectionUnspecified
	enum <anonymous> kGridIcon
	enum <anonymous> kGroupIcon
	enum <anonymous> kGroupID2Name
	enum <anonymous> kGroupName2ID
	enum <anonymous> kGuestUserIcon
	enum <anonymous> kHalfWidthCJKRomanSelector
	enum <anonymous> kHalfWidthIdeographsSelector
	enum <anonymous> kHalfWidthTextSelector
	enum <anonymous> kHandleIsResourceBit
	enum <anonymous> kHandleIsResourceMask
	enum <anonymous> kHandleLockedBit
	enum <anonymous> kHandleLockedMask
	enum <anonymous> kHandlePurgeableBit
	enum <anonymous> kHandlePurgeableMask
	enum <anonymous> kHanjaToHangulAltOneSelector
	enum <anonymous> kHanjaToHangulAltThreeSelector
	enum <anonymous> kHanjaToHangulAltTwoSelector
	enum <anonymous> kHanjaToHangulSelector
	enum <anonymous> kHardLinkFileType
	enum <anonymous> kHardwareCursorDescriptorMajorVersion
	enum <anonymous> kHardwareCursorDescriptorMinorVersion
	enum <anonymous> kHardwareCursorInfoMajorVersion
	enum <anonymous> kHardwareCursorInfoMinorVersion
	enum <anonymous> kHasBeenInited
	enum <anonymous> kHasBundle
	enum <anonymous> kHasCustomIcon
	enum <anonymous> kHasNoINITs
	enum <anonymous> kHebrewFigureSpaceVariant
	enum <anonymous> kHebrewStandardVariant
	enum <anonymous> kHelpFolderIcon
	enum <anonymous> kHelpFolderType
	enum <anonymous> kHelpIcon
	enum <anonymous> kHelpIconResource
	enum <anonymous> kHFSAllocationFileID
	enum <anonymous> kHFSAttributeDataFileID
	enum <anonymous> kHFSAttributesFileID
	enum <anonymous> kHFSBadBlockFileID
	enum <anonymous> kHFSBinaryCompare
	enum <anonymous> kHFSBogusExtentFileID
	enum <anonymous> kHFSBootVolumeInconsistentBit
	enum <anonymous> kHFSBootVolumeInconsistentMask
	enum <anonymous> kHFSCaseFolding
	enum <anonymous> kHFSCatalogFileID
	enum <anonymous> kHFSCatalogKeyMaximumLength
	enum <anonymous> kHFSCatalogKeyMinimumLength
	enum <anonymous> kHFSCatalogNodeIDsReusedBit
	enum <anonymous> kHFSCatalogNodeIDsReusedMask
	enum <anonymous> kHFSContentProtectionBit
	enum <anonymous> kHFSContentProtectionMask
	enum <anonymous> kHFSExtentDensity
	enum <anonymous> kHFSExtentKeyMaximumLength
	enum <anonymous> kHFSExtentsFileID
	enum <anonymous> kHFSFileLockedBit
	enum <anonymous> kHFSFileLockedMask
	enum <anonymous> kHFSFileRecord
	enum <anonymous> kHFSFileThreadRecord
	enum <anonymous> kHFSFirstUserCatalogNodeID
	enum <anonymous> kHFSFolderRecord
	enum <anonymous> kHFSFolderThreadRecord
	enum <anonymous> kHFSHasAttributesBit
	enum <anonymous> kHFSHasAttributesMask
	enum <anonymous> kHFSHasChildLinkBit
	enum <anonymous> kHFSHasChildLinkMask
	enum <anonymous> kHFSHasDateAddedBit
	enum <anonymous> kHFSHasDateAddedMask
	enum <anonymous> kHFSHasFolderCountBit
	enum <anonymous> kHFSHasFolderCountMask
	enum <anonymous> kHFSHasLinkChainBit
	enum <anonymous> kHFSHasLinkChainMask
	enum <anonymous> kHFSHasSecurityBit
	enum <anonymous> kHFSHasSecurityMask
	enum <anonymous> kHFSJMountVersion
	enum <anonymous> kHFSMaxAttrNameLen
	enum <anonymous> kHFSMaxFileNameChars
	enum <anonymous> kHFSMaxVolumeNameChars
	enum <anonymous> kHFSMDBAttributesMask
	enum <anonymous> kHFSPlusAttrExtents
	enum <anonymous> kHFSPlusAttrForkData
	enum <anonymous> kHFSPlusAttrInlineData
	enum <anonymous> kHFSPlusAttrMinNodeSize
	enum <anonymous> kHFSPlusCatalogKeyMaximumLength
	enum <anonymous> kHFSPlusCatalogKeyMinimumLength
	enum <anonymous> kHFSPlusCatalogMinNodeSize
	enum <anonymous> kHFSPlusCreator
	enum <anonymous> kHFSPlusExtentDensity
	enum <anonymous> kHFSPlusExtentKeyMaximumLength
	enum <anonymous> kHFSPlusExtentMinNodeSize
	enum <anonymous> kHFSPlusFileRecord
	enum <anonymous> kHFSPlusFileThreadRecord
	enum <anonymous> kHFSPlusFolderRecord
	enum <anonymous> kHFSPlusFolderThreadRecord
	enum <anonymous> kHFSPlusMaxFileNameChars
	enum <anonymous> kHFSPlusMountVersion
	enum <anonymous> kHFSPlusSigWord
	enum <anonymous> kHFSPlusVersion
	enum <anonymous> kHFSRepairCatalogFileID
	enum <anonymous> kHFSRootFolderID
	enum <anonymous> kHFSRootParentID
	enum <anonymous> kHFSSigWord
	enum <anonymous> kHFSStartupFileID
	enum <anonymous> kHFSThreadExistsBit
	enum <anonymous> kHFSThreadExistsMask
	enum <anonymous> kHFSUnusedNodeFixBit
	enum <anonymous> kHFSUnusedNodeFixMask
	enum <anonymous> kHFSUnusedNodesFixDate
	enum <anonymous> kHFSVolumeHardwareLockBit
	enum <anonymous> kHFSVolumeHardwareLockMask
	enum <anonymous> kHFSVolumeInconsistentBit
	enum <anonymous> kHFSVolumeInconsistentMask
	enum <anonymous> kHFSVolumeJournaledBit
	enum <anonymous> kHFSVolumeJournaledMask
	enum <anonymous> kHFSVolumeNoCacheRequiredBit
	enum <anonymous> kHFSVolumeNoCacheRequiredMask
	enum <anonymous> kHFSVolumeSoftwareLockBit
	enum <anonymous> kHFSVolumeSoftwareLockMask
	enum <anonymous> kHFSVolumeSparedBlocksBit
	enum <anonymous> kHFSVolumeSparedBlocksMask
	enum <anonymous> kHFSVolumeUnmountedBit
	enum <anonymous> kHFSVolumeUnmountedMask
	enum <anonymous> kHFSXSigWord
	enum <anonymous> kHFSXVersion
	enum <anonymous> kHIDBadLogicalMaximumErr
	enum <anonymous> kHIDBadLogicalMinimumErr
	enum <anonymous> kHIDBadLogPhysValuesErr
	enum <anonymous> kHIDBadParameterErr
	enum <anonymous> kHIDBaseError
	enum <anonymous> kHIDBufferTooSmallErr
	enum <anonymous> kHIDDeviceNotReady
	enum <anonymous> kHideDiacriticsSelector
	enum <anonymous> kHIDEndOfDescriptorErr
	enum <anonymous> kHIDIncompatibleReportErr
	enum <anonymous> kHIDInvalidPreparsedDataErr
	enum <anonymous> kHIDInvalidRangePageErr
	enum <anonymous> kHIDInvalidReportLengthErr
	enum <anonymous> kHIDInvalidReportTypeErr
	enum <anonymous> kHIDInvertedLogicalRangeErr
	enum <anonymous> kHIDInvertedPhysicalRangeErr
	enum <anonymous> kHIDInvertedUsageRangeErr
	enum <anonymous> kHIDNotEnoughMemoryErr
	enum <anonymous> kHIDNotValueArrayErr
	enum <anonymous> kHIDNullPointerErr
	enum <anonymous> kHIDNullStateErr
	enum <anonymous> kHIDReportCountZeroErr
	enum <anonymous> kHIDReportIDZeroErr
	enum <anonymous> kHIDReportSizeZeroErr
	enum <anonymous> kHIDSuccess
	enum <anonymous> kHIDUnmatchedDesignatorRangeErr
	enum <anonymous> kHIDUnmatchedStringRangeErr
	enum <anonymous> kHIDUnmatchedUsageRangeErr
	enum <anonymous> kHIDUsageNotFoundErr
	enum <anonymous> kHIDUsagePageZeroErr
	enum <anonymous> kHIDValueOutOfRangeErr
	enum <anonymous> kHIDVersionIncompatibleErr
	enum <anonymous> kHiraganaToKatakanaSelector
	enum <anonymous> kHIShapeEnumerateInit
	enum <anonymous> kHIShapeEnumerateRect
	enum <anonymous> kHIShapeEnumerateTerminate
	enum <anonymous> kHIShapeParseFromBottom
	enum <anonymous> kHIShapeParseFromBottomRight
	enum <anonymous> kHIShapeParseFromLeft
	enum <anonymous> kHIShapeParseFromRight
	enum <anonymous> kHIShapeParseFromTop
	enum <anonymous> kHIShapeParseFromTopLeft
	enum <anonymous> kHistoricalLigaturesOffSelector
	enum <anonymous> kHistoricalLigaturesOnSelector
	enum <anonymous> kHojoCharactersSelector
	enum <anonymous> kHorizontalConstraint
	enum <anonymous> kHTTPServerIcon
	enum <anonymous> kHuge1BitMask
	enum <anonymous> kHuge32BitData
	enum <anonymous> kHuge4BitData
	enum <anonymous> kHuge8BitData
	enum <anonymous> kHuge8BitMask
	enum <anonymous> kHyphensToEmDashOffSelector
	enum <anonymous> kHyphensToEmDashOnSelector
	enum <anonymous> kHyphenToEnDashOffSelector
	enum <anonymous> kHyphenToEnDashOnSelector
	enum <anonymous> kHyphenToMinusOffSelector
	enum <anonymous> kHyphenToMinusOnSelector
	enum <anonymous> kICAttrLockedBit
	enum <anonymous> kICAttrLockedMask
	enum <anonymous> kICAttrNoChange
	enum <anonymous> kICAttrVolatileBit
	enum <anonymous> kICAttrVolatileMask
	enum <anonymous> kICComponentInterfaceVersion
	enum <anonymous> kICComponentInterfaceVersion0
	enum <anonymous> kICComponentInterfaceVersion1
	enum <anonymous> kICComponentInterfaceVersion2
	enum <anonymous> kICComponentInterfaceVersion3
	enum <anonymous> kICComponentInterfaceVersion4
	enum <anonymous> kICComponentVersion
	enum <anonymous> kICCreator
	enum <anonymous> kICEditPreferenceEvent
	enum <anonymous> kICEditPreferenceEventClass
	enum <anonymous> kICFileSpecHeaderSize
	enum <anonymous> kICFileType
	enum <anonymous> kICMapBinaryBit
	enum <anonymous> kICMapBinaryMask
	enum <anonymous> kICMapDataForkBit
	enum <anonymous> kICMapDataForkMask
	enum <anonymous> kICMapFixedLength
	enum <anonymous> kICMapNotIncomingBit
	enum <anonymous> kICMapNotIncomingMask
	enum <anonymous> kICMapNotOutgoingBit
	enum <anonymous> kICMapNotOutgoingMask
	enum <anonymous> kICMapPostBit
	enum <anonymous> kICMapPostMask
	enum <anonymous> kICMapResourceForkBit
	enum <anonymous> kICMapResourceForkMask
	enum <anonymous> kICNilProfileID
	enum <anonymous> kICNoUserInteractionBit
	enum <anonymous> kICNoUserInteractionMask
	enum <anonymous> kICNumVersion
	enum <anonymous> kIconFamilyType
	enum <anonymous> kIconServices1024PixelDataARGB
	enum <anonymous> kIconServices128PixelDataARGB
	enum <anonymous> kIconServices16PixelDataARGB
	enum <anonymous> kIconServices256PixelDataARGB
	enum <anonymous> kIconServices32PixelDataARGB
	enum <anonymous> kIconServices48PixelDataARGB
	enum <anonymous> kIconServices512PixelDataARGB
	enum <anonymous> kIconServicesCatalogInfoMask
	enum <anonymous> kIconServicesNoBadgeFlag
	enum <anonymous> kIconServicesNormalUsageFlag
	enum <anonymous> kIconServicesUpdateIfNeededFlag
	enum <anonymous> kICServicesTCPBit
	enum <anonymous> kICServicesTCPMask
	enum <anonymous> kICServicesUDPBit
	enum <anonymous> kICServicesUDPMask
	enum <anonymous> kIdeographicAlternativesType
	enum <anonymous> kIdeographicAltFiveSelector
	enum <anonymous> kIdeographicAltFourSelector
	enum <anonymous> kIdeographicAltOneSelector
	enum <anonymous> kIdeographicAltThreeSelector
	enum <anonymous> kIdeographicAltTwoSelector
	enum <anonymous> kIdeographicSpacingType
	enum <anonymous> kIdleKCEvent
	enum <anonymous> kIdleKCEventMask
	enum <anonymous> kIllegalClockValueErr
	enum <anonymous> kIllegalInstructionException
	enum <anonymous> kIlluminatedCapsSelector
	enum <anonymous> kImmediate
	enum <anonymous> kiMovieFolderType
	enum <anonymous> kiMoviePlugInsFolderType
	enum <anonymous> kiMovieSoundEffectsFolderType
	enum <anonymous> kInDeferredTaskMask
	enum <anonymous> kIndexFilesFolderType
	enum <anonymous> kInequalityLigaturesOffSelector
	enum <anonymous> kInequalityLigaturesOnSelector
	enum <anonymous> kInferiorsSelector
	enum <anonymous> kInitialCapsAndSmallCapsSelector
	enum <anonymous> kInitialCapsSelector
	enum <anonymous> kInNestedInterruptMask
	enum <anonymous> kInputManagersFolderType
	enum <anonymous> kInputMethodsFolderType
	enum <anonymous> kInSecondaryIntHandlerMask
	enum <anonymous> kInstallerLogsFolderType
	enum <anonymous> kInstallerReceiptsFolderType
	enum <anonymous> kInstructionBreakpointException
	enum <anonymous> kIntegerException
	enum <anonymous> kInternationalResourcesIcon
	enum <anonymous> kInternationalSymbolsSelector
	enum <anonymous> kInternationResourcesIcon
	enum <anonymous> kInternetEventClass
	enum <anonymous> kInternetFolderIcon
	enum <anonymous> kInternetFolderType
	enum <anonymous> kInternetLocationAFP
	enum <anonymous> kInternetLocationAppleShareIcon
	enum <anonymous> kInternetLocationAppleTalk
	enum <anonymous> kInternetLocationAppleTalkZoneIcon
	enum <anonymous> kInternetLocationCreator
	enum <anonymous> kInternetLocationFile
	enum <anonymous> kInternetLocationFileIcon
	enum <anonymous> kInternetLocationFTP
	enum <anonymous> kInternetLocationFTPIcon
	enum <anonymous> kInternetLocationGeneric
	enum <anonymous> kInternetLocationGenericIcon
	enum <anonymous> kInternetLocationHTTP
	enum <anonymous> kInternetLocationHTTPIcon
	enum <anonymous> kInternetLocationMail
	enum <anonymous> kInternetLocationMailIcon
	enum <anonymous> kInternetLocationNewsIcon
	enum <anonymous> kInternetLocationNNTP
	enum <anonymous> kInternetLocationNSL
	enum <anonymous> kInternetLocationNSLNeighborhoodIcon
	enum <anonymous> kInternetPasswordKCItemClass
	enum <anonymous> kInternetPlugInFolderIcon
	enum <anonymous> kInternetPlugInFolderType
	enum <anonymous> kInternetSearchSitesFolderIcon
	enum <anonymous> kInternetSearchSitesFolderType
	enum <anonymous> kInternetSitesFolderType
	enum <anonymous> kInUseErr
	enum <anonymous> kInvalidCSClientErr
	enum <anonymous> kInvalidDeviceNumber
	enum <anonymous> kInvalidFont
	enum <anonymous> kInvalidFontFamily
	enum <anonymous> kInvalidGeneration
	enum <anonymous> kInvalidRegEntryErr
	enum <anonymous> kInVBLTaskMask
	enum <anonymous> kInvertedBoxAnnotationSelector
	enum <anonymous> kInvertedCircleAnnotationSelector
	enum <anonymous> kInvertedRoundedBoxAnnotationSelector
	enum <anonymous> kInvertHighlighting
	enum <anonymous> kInvertingEncodedPixel
	enum <anonymous> kInvertingEncoding
	enum <anonymous> kInvertingEncodingShift
	enum <anonymous> kInvisibleKCItemAttr
	enum <anonymous> kioACAccessBlankAccessBit
	enum <anonymous> kioACAccessBlankAccessMask
	enum <anonymous> kioACAccessEveryoneReadBit
	enum <anonymous> kioACAccessEveryoneReadMask
	enum <anonymous> kioACAccessEveryoneSearchBit
	enum <anonymous> kioACAccessEveryoneSearchMask
	enum <anonymous> kioACAccessEveryoneWriteBit
	enum <anonymous> kioACAccessEveryoneWriteMask
	enum <anonymous> kioACAccessGroupReadBit
	enum <anonymous> kioACAccessGroupReadMask
	enum <anonymous> kioACAccessGroupSearchBit
	enum <anonymous> kioACAccessGroupSearchMask
	enum <anonymous> kioACAccessGroupWriteBit
	enum <anonymous> kioACAccessGroupWriteMask
	enum <anonymous> kioACAccessOwnerBit
	enum <anonymous> kioACAccessOwnerMask
	enum <anonymous> kioACAccessOwnerReadBit
	enum <anonymous> kioACAccessOwnerReadMask
	enum <anonymous> kioACAccessOwnerSearchBit
	enum <anonymous> kioACAccessOwnerSearchMask
	enum <anonymous> kioACAccessOwnerWriteBit
	enum <anonymous> kioACAccessOwnerWriteMask
	enum <anonymous> kioACAccessUserReadBit
	enum <anonymous> kioACAccessUserReadMask
	enum <anonymous> kioACAccessUserSearchBit
	enum <anonymous> kioACAccessUserSearchMask
	enum <anonymous> kioACAccessUserWriteBit
	enum <anonymous> kioACAccessUserWriteMask
	enum <anonymous> kioACUserNoMakeChangesBit
	enum <anonymous> kioACUserNoMakeChangesMask
	enum <anonymous> kioACUserNoSeeFilesBit
	enum <anonymous> kioACUserNoSeeFilesMask
	enum <anonymous> kioACUserNoSeeFolderBit
	enum <anonymous> kioACUserNoSeeFolderMask
	enum <anonymous> kioACUserNotOwnerBit
	enum <anonymous> kioACUserNotOwnerMask
	enum <anonymous> kIOAnalogSetupExpected
	enum <anonymous> kIOAnalogSignalLevel_0700_0000
	enum <anonymous> kIOAnalogSignalLevel_0700_0300
	enum <anonymous> kIOAnalogSignalLevel_0714_0286
	enum <anonymous> kIOAnalogSignalLevel_1000_0400
	enum <anonymous> kIOAsyncCalloutCount
	enum <anonymous> kIOAsyncCalloutFuncIndex
	enum <anonymous> kIOAsyncCalloutRefconIndex
	enum <anonymous> kIOAsyncCompletionNotificationType
	enum <anonymous> kIOAsyncReservedCount
	enum <anonymous> kIOAsyncReservedIndex
	enum <anonymous> kIOCapturedAttribute
	enum <anonymous> kIOClamshellStateAttribute
	enum <anonymous> kIOCLUTPixels
	enum <anonymous> kIOConnectionBuiltIn
	enum <anonymous> kIOConnectionStereoSync
	enum <anonymous> kIOConnectMethodVarOutputSize
	enum <anonymous> kIOCopybackCache
	enum <anonymous> kIOCopybackInnerCache
	enum <anonymous> kIOCSyncDisable
	enum <anonymous> kIOCursorControlAttribute
	enum <anonymous> kIODefaultCache
	enum <anonymous> kIODefaultMemoryType
	enum <anonymous> kIODeferCLUTSetAttribute
	enum <anonymous> kIODetailedTimingValid
	enum <anonymous> kIODigitalSignal
	enum <anonymous> kIODisplayColorMode
	enum <anonymous> kIODisplayDitherAll
	enum <anonymous> kIODisplayDitherDefault
	enum <anonymous> kIODisplayDitherDisable
	enum <anonymous> kIODisplayDitherFrameRateControl
	enum <anonymous> kIODisplayDitherRGBShift
	enum <anonymous> kIODisplayDitherSpatial
	enum <anonymous> kIODisplayDitherTemporal
	enum <anonymous> kIODisplayDitherYCbCr422Shift
	enum <anonymous> kIODisplayDitherYCbCr444Shift
	enum <anonymous> kIODisplayModeIDBootProgrammable
	enum <anonymous> kIODisplayModeIDReservedBase
	enum <anonymous> kIODisplayNeedsCEAUnderscan
	enum <anonymous> kIODisplayPowerStateMinUsable
	enum <anonymous> kIODisplayPowerStateOff
	enum <anonymous> kIODisplayPowerStateOn
	enum <anonymous> kIODisplayRGBColorComponentBits10
	enum <anonymous> kIODisplayRGBColorComponentBits12
	enum <anonymous> kIODisplayRGBColorComponentBits14
	enum <anonymous> kIODisplayRGBColorComponentBits16
	enum <anonymous> kIODisplayRGBColorComponentBits6
	enum <anonymous> kIODisplayRGBColorComponentBits8
	enum <anonymous> kIODisplayRGBColorComponentBitsUnknown
	enum <anonymous> kIODisplayYCbCr422ColorComponentBits10
	enum <anonymous> kIODisplayYCbCr422ColorComponentBits12
	enum <anonymous> kIODisplayYCbCr422ColorComponentBits14
	enum <anonymous> kIODisplayYCbCr422ColorComponentBits16
	enum <anonymous> kIODisplayYCbCr422ColorComponentBits6
	enum <anonymous> kIODisplayYCbCr422ColorComponentBits8
	enum <anonymous> kIODisplayYCbCr422ColorComponentBitsUnknown
	enum <anonymous> kIODisplayYCbCr444ColorComponentBits10
	enum <anonymous> kIODisplayYCbCr444ColorComponentBits12
	enum <anonymous> kIODisplayYCbCr444ColorComponentBits14
	enum <anonymous> kIODisplayYCbCr444ColorComponentBits16
	enum <anonymous> kIODisplayYCbCr444ColorComponentBits6
	enum <anonymous> kIODisplayYCbCr444ColorComponentBits8
	enum <anonymous> kIODisplayYCbCr444ColorComponentBitsUnknown
	enum <anonymous> kIODPEventAutomatedTestRequest
	enum <anonymous> kIODPEventContentProtection
	enum <anonymous> kIODPEventForceRetrain
	enum <anonymous> kIODPEventIdle
	enum <anonymous> kIODPEventMCCS
	enum <anonymous> kIODPEventRemoteControlCommandPending
	enum <anonymous> kIODPEventSinkSpecific
	enum <anonymous> kIODPEventStart
	enum <anonymous> kIODriverPowerAttribute
	enum <anonymous> kIOFBAVSignalTypeDP
	enum <anonymous> kIOFBAVSignalTypeDVI
	enum <anonymous> kIOFBAVSignalTypeHDMI
	enum <anonymous> kIOFBAVSignalTypeUnknown
	enum <anonymous> kIOFBAVSignalTypeVGA
	enum <anonymous> kIOFBBitRateHBR
	enum <anonymous> kIOFBBitRateHBR2
	enum <anonymous> kIOFBBitRateRBR
	enum <anonymous> kIOFBChangedInterruptType
	enum <anonymous> kIOFBConnectInterruptType
	enum <anonymous> kIOFBDisplayPortInterruptType
	enum <anonymous> kIOFBDisplayPortLinkChangeInterruptType
	enum <anonymous> kIOFBDisplayPortTrainingAttribute
	enum <anonymous> kIOFBFrameInterruptType
	enum <anonymous> kIOFBHBLInterruptType
	enum <anonymous> kIOFBLinkDownspreadMax
	enum <anonymous> kIOFBLinkDownspreadNone
	enum <anonymous> kIOFBLinkPreEmphasisLevel0
	enum <anonymous> kIOFBLinkPreEmphasisLevel1
	enum <anonymous> kIOFBLinkPreEmphasisLevel2
	enum <anonymous> kIOFBLinkPreEmphasisLevel3
	enum <anonymous> kIOFBLinkScramblerAlternate
	enum <anonymous> kIOFBLinkScramblerNormal
	enum <anonymous> kIOFBLinkVoltageLevel0
	enum <anonymous> kIOFBLinkVoltageLevel1
	enum <anonymous> kIOFBLinkVoltageLevel2
	enum <anonymous> kIOFBLinkVoltageLevel3
	enum <anonymous> kIOFBMCCSInterruptType
	enum <anonymous> kIOFBOfflineInterruptType
	enum <anonymous> kIOFBOnlineInterruptType
	enum <anonymous> kIOFBServerConnectType
	enum <anonymous> kIOFBSharedConnectType
	enum <anonymous> kIOFBSystemAperture
	enum <anonymous> kIOFBUserRequestProbe
	enum <anonymous> kIOFBVBLInterruptType
	enum <anonymous> kIOFBWakeInterruptType
	enum <anonymous> kioFCBFileLockedBit
	enum <anonymous> kioFCBFileLockedMask
	enum <anonymous> kioFCBLargeFileBit
	enum <anonymous> kioFCBLargeFileMask
	enum <anonymous> kioFCBModifiedBit
	enum <anonymous> kioFCBModifiedMask
	enum <anonymous> kioFCBOwnClumpBit
	enum <anonymous> kioFCBOwnClumpMask
	enum <anonymous> kioFCBResourceBit
	enum <anonymous> kioFCBResourceMask
	enum <anonymous> kioFCBSharedWriteBit
	enum <anonymous> kioFCBSharedWriteMask
	enum <anonymous> kioFCBWriteBit
	enum <anonymous> kioFCBWriteLockedBit
	enum <anonymous> kioFCBWriteLockedMask
	enum <anonymous> kioFCBWriteMask
	enum <anonymous> kIOFixedCLUTPixels
	enum <anonymous> kioFlAttribCopyProtBit
	enum <anonymous> kioFlAttribCopyProtMask
	enum <anonymous> kioFlAttribDataOpenBit
	enum <anonymous> kioFlAttribDataOpenMask
	enum <anonymous> kioFlAttribDirBit
	enum <anonymous> kioFlAttribDirMask
	enum <anonymous> kioFlAttribFileOpenBit
	enum <anonymous> kioFlAttribFileOpenMask
	enum <anonymous> kioFlAttribInSharedBit
	enum <anonymous> kioFlAttribInSharedMask
	enum <anonymous> kioFlAttribLockedBit
	enum <anonymous> kioFlAttribLockedMask
	enum <anonymous> kioFlAttribMountedBit
	enum <anonymous> kioFlAttribMountedMask
	enum <anonymous> kioFlAttribResOpenBit
	enum <anonymous> kioFlAttribResOpenMask
	enum <anonymous> kioFlAttribSharePointBit
	enum <anonymous> kioFlAttribSharePointMask
	enum <anonymous> kIOHardwareCursorAttribute
	enum <anonymous> kIOHibernatePreviewActive
	enum <anonymous> kIOHibernatePreviewUpdates
	enum <anonymous> kIOHSyncDisable
	enum <anonymous> kIOInhibitCache
	enum <anonymous> kIOInterestCalloutCount
	enum <anonymous> kIOInterestCalloutFuncIndex
	enum <anonymous> kIOInterestCalloutRefconIndex
	enum <anonymous> kIOInterestCalloutServiceIndex
	enum <anonymous> kIOInterlacedCEATiming
	enum <anonymous> kIOMapAnywhere
	enum <anonymous> kIOMapCacheMask
	enum <anonymous> kIOMapCacheShift
	enum <anonymous> kIOMapCopybackCache
	enum <anonymous> kIOMapCopybackInnerCache
	enum <anonymous> kIOMapDefaultCache
	enum <anonymous> kIOMapInhibitCache
	enum <anonymous> kIOMapReadOnly
	enum <anonymous> kIOMapReference
	enum <anonymous> kIOMapStatic
	enum <anonymous> kIOMapUnique
	enum <anonymous> kIOMapUserOptionsMask
	enum <anonymous> kIOMapWriteCombineCache
	enum <anonymous> kIOMapWriteThruCache
	const mach_port_t kIOMasterPortDefault
	enum <anonymous> kIOMatchingCalloutCount
	enum <anonymous> kIOMatchingCalloutFuncIndex
	enum <anonymous> kIOMatchingCalloutRefconIndex
	enum <anonymous> kIOMaxPixelBits
	enum <anonymous> kIOMirrorAttribute
	enum <anonymous> kIOMirrorDefault
	enum <anonymous> kIOMirrorDefaultAttribute
	enum <anonymous> kIOMirrorForced
	enum <anonymous> kIOMirrorHWClipped
	enum <anonymous> kIOMirrorIsMirrored
	enum <anonymous> kIOMirrorIsPrimary
	enum <anonymous> kIOMonoDirectPixels
	enum <anonymous> kIOMonoInverseDirectPixels
	enum <anonymous> kIONoSeparateSyncControl
	enum <anonymous> kIONTSCTiming
	enum <anonymous> kIOPALTiming
	enum <anonymous> kIOPowerAttribute
	enum <anonymous> kIOPowerStateAttribute
	enum <anonymous> kIORangeSupportsCompositeSync
	enum <anonymous> kIORangeSupportsInterlacedCEATiming
	enum <anonymous> kIORangeSupportsInterlacedCEATimingWithConfirm
	enum <anonymous> kIORangeSupportsSeparateSyncs
	enum <anonymous> kIORangeSupportsSignal_0700_0000
	enum <anonymous> kIORangeSupportsSignal_0700_0300
	enum <anonymous> kIORangeSupportsSignal_0714_0286
	enum <anonymous> kIORangeSupportsSignal_1000_0400
	enum <anonymous> kIORangeSupportsSyncOnGreen
	enum <anonymous> kIORangeSupportsVSyncSerration
	enum <anonymous> kIORegistryIterateParents
	enum <anonymous> kIORegistryIterateRecursively
	enum <anonymous> kIORGBDirectPixels
	enum <anonymous> kIORGBSignedDirectPixels
	enum <anonymous> kIORGBSignedFloatingPointPixels
	enum <anonymous> kIOScaleCanBorderInsetOnly
	enum <anonymous> kIOScaleCanDownSamplePixels
	enum <anonymous> kIOScaleCanRotate
	enum <anonymous> kIOScaleCanScaleInterlaced
	enum <anonymous> kIOScaleCanSupportInset
	enum <anonymous> kIOScaleCanUpSamplePixels
	enum <anonymous> kIOScaleInvertX
	enum <anonymous> kIOScaleInvertY
	enum <anonymous> kIOScaleRotate0
	enum <anonymous> kIOScaleRotate180
	enum <anonymous> kIOScaleRotate270
	enum <anonymous> kIOScaleRotate90
	enum <anonymous> kIOScaleRotateFlags
	enum <anonymous> kIOScaleStretchOnly
	enum <anonymous> kIOScaleStretchToFit
	enum <anonymous> kIOScaleSwapAxes
	enum <anonymous> kIOScalingInfoValid
	enum <anonymous> kIOServiceMatchedNotificationType
	enum <anonymous> kIOServiceMessageNotificationType
	enum <anonymous> kIOServicePublishNotificationType
	enum <anonymous> kIOServiceTerminatedNotificationType
	const CFStringRef kIOSurfaceAllocSize
	const CFStringRef kIOSurfaceBytesPerElement
	const CFStringRef kIOSurfaceBytesPerRow
	const CFStringRef kIOSurfaceCacheMode
	const CFStringRef kIOSurfaceElementHeight
	const CFStringRef kIOSurfaceElementWidth
	const CFStringRef kIOSurfaceHeight
	const CFStringRef kIOSurfaceIsGlobal
	enum <anonymous> kIOSurfaceLockAvoidSync
	enum <anonymous> kIOSurfaceLockReadOnly
	const CFStringRef kIOSurfaceOffset
	const CFStringRef kIOSurfacePixelFormat
	const CFStringRef kIOSurfacePlaneBase
	const CFStringRef kIOSurfacePlaneBytesPerElement
	const CFStringRef kIOSurfacePlaneBytesPerRow
	const CFStringRef kIOSurfacePlaneElementHeight
	const CFStringRef kIOSurfacePlaneElementWidth
	const CFStringRef kIOSurfacePlaneHeight
	const CFStringRef kIOSurfacePlaneInfo
	const CFStringRef kIOSurfacePlaneOffset
	const CFStringRef kIOSurfacePlaneSize
	const CFStringRef kIOSurfacePlaneWidth
	const CFStringRef kIOSurfaceWidth
	enum <anonymous> kIOSyncOnBlue
	enum <anonymous> kIOSyncOnGreen
	enum <anonymous> kIOSyncOnRed
	enum <anonymous> kIOSyncPositivePolarity
	enum <anonymous> kIOSystemPowerAttribute
	enum <anonymous> kIOTimingIDApple_0x0_0hz_Offline
	enum <anonymous> kIOTimingIDApple_1024x768_75hz
	enum <anonymous> kIOTimingIDApple_1152x870_75hz
	enum <anonymous> kIOTimingIDApple_512x384_60hz
	enum <anonymous> kIOTimingIDApple_560x384_60hz
	enum <anonymous> kIOTimingIDApple_640x400_67hz
	enum <anonymous> kIOTimingIDApple_640x480_67hz
	enum <anonymous> kIOTimingIDApple_640x818_75hz
	enum <anonymous> kIOTimingIDApple_640x870_75hz
	enum <anonymous> kIOTimingIDApple_832x624_75hz
	enum <anonymous> kIOTimingIDApple_FixedRateLCD
	enum <anonymous> kIOTimingIDAppleNTSC_FF
	enum <anonymous> kIOTimingIDAppleNTSC_FFconv
	enum <anonymous> kIOTimingIDAppleNTSC_ST
	enum <anonymous> kIOTimingIDAppleNTSC_STconv
	enum <anonymous> kIOTimingIDApplePAL_FF
	enum <anonymous> kIOTimingIDApplePAL_FFconv
	enum <anonymous> kIOTimingIDApplePAL_ST
	enum <anonymous> kIOTimingIDApplePAL_STconv
	enum <anonymous> kIOTimingIDFilmRate_48hz
	enum <anonymous> kIOTimingIDGTF_640x480_120hz
	enum <anonymous> kIOTimingIDInvalid
	enum <anonymous> kIOTimingIDSMPTE240M_60hz
	enum <anonymous> kIOTimingIDSony_1600x1024_76hz
	enum <anonymous> kIOTimingIDSony_1920x1080_60hz
	enum <anonymous> kIOTimingIDSony_1920x1080_72hz
	enum <anonymous> kIOTimingIDSony_1920x1200_76hz
	enum <anonymous> kIOTimingIDVESA_1024x768_60hz
	enum <anonymous> kIOTimingIDVESA_1024x768_70hz
	enum <anonymous> kIOTimingIDVESA_1024x768_75hz
	enum <anonymous> kIOTimingIDVESA_1024x768_85hz
	enum <anonymous> kIOTimingIDVESA_1280x1024_60hz
	enum <anonymous> kIOTimingIDVESA_1280x1024_75hz
	enum <anonymous> kIOTimingIDVESA_1280x1024_85hz
	enum <anonymous> kIOTimingIDVESA_1280x960_60hz
	enum <anonymous> kIOTimingIDVESA_1280x960_75hz
	enum <anonymous> kIOTimingIDVESA_1280x960_85hz
	enum <anonymous> kIOTimingIDVESA_1360x768_60hz
	enum <anonymous> kIOTimingIDVESA_1600x1200_60hz
	enum <anonymous> kIOTimingIDVESA_1600x1200_65hz
	enum <anonymous> kIOTimingIDVESA_1600x1200_70hz
	enum <anonymous> kIOTimingIDVESA_1600x1200_75hz
	enum <anonymous> kIOTimingIDVESA_1600x1200_80hz
	enum <anonymous> kIOTimingIDVESA_1600x1200_85hz
	enum <anonymous> kIOTimingIDVESA_1792x1344_60hz
	enum <anonymous> kIOTimingIDVESA_1792x1344_75hz
	enum <anonymous> kIOTimingIDVESA_1856x1392_60hz
	enum <anonymous> kIOTimingIDVESA_1856x1392_75hz
	enum <anonymous> kIOTimingIDVESA_1920x1440_60hz
	enum <anonymous> kIOTimingIDVESA_1920x1440_75hz
	enum <anonymous> kIOTimingIDVESA_640x480_60hz
	enum <anonymous> kIOTimingIDVESA_640x480_72hz
	enum <anonymous> kIOTimingIDVESA_640x480_75hz
	enum <anonymous> kIOTimingIDVESA_640x480_85hz
	enum <anonymous> kIOTimingIDVESA_800x600_56hz
	enum <anonymous> kIOTimingIDVESA_800x600_60hz
	enum <anonymous> kIOTimingIDVESA_800x600_72hz
	enum <anonymous> kIOTimingIDVESA_800x600_75hz
	enum <anonymous> kIOTimingIDVESA_800x600_85hz
	enum <anonymous> kIOTimingIDVESA_848x480_60hz
	enum <anonymous> kIOTriStateSyncs
	enum <anonymous> kioVAtrbDefaultVolumeBit
	enum <anonymous> kioVAtrbDefaultVolumeMask
	enum <anonymous> kioVAtrbFilesOpenBit
	enum <anonymous> kioVAtrbFilesOpenMask
	enum <anonymous> kioVAtrbHardwareLockedBit
	enum <anonymous> kioVAtrbHardwareLockedMask
	enum <anonymous> kioVAtrbSoftwareLockedBit
	enum <anonymous> kioVAtrbSoftwareLockedMask
	enum <anonymous> kIOVRAMSaveAttribute
	enum <anonymous> kIOVSyncDisable
	enum <anonymous> kIOWriteCombineCache
	enum <anonymous> kIOWriteThruCache
	enum <anonymous> kIPFileServerIcon
	enum <anonymous> kIsAlias
	enum <anonymous> kIsInvisible
	enum <anonymous> kISOLatin1MusicCDVariant
	enum <anonymous> kISOLatin1StandardVariant
	enum <anonymous> kISOLatinArabicExplicitOrderVariant
	enum <anonymous> kISOLatinArabicImplicitOrderVariant
	enum <anonymous> kISOLatinArabicVisualOrderVariant
	enum <anonymous> kISOLatinHebrewExplicitOrderVariant
	enum <anonymous> kISOLatinHebrewImplicitOrderVariant
	enum <anonymous> kISOLatinHebrewVisualOrderVariant
	enum <anonymous> kIsOnDesk
	enum <anonymous> kISpBufferToSmallErr
	enum <anonymous> kISpDeviceActiveErr
	enum <anonymous> kISpDeviceInactiveErr
	enum <anonymous> kISpElementInListErr
	enum <anonymous> kISpElementNotInListErr
	enum <anonymous> kISpInternalErr
	enum <anonymous> kISpListBusyErr
	enum <anonymous> kISpSystemActiveErr
	enum <anonymous> kISpSystemInactiveErr
	enum <anonymous> kISpSystemListErr
	enum <anonymous> kISSDownloadsFolderType
	enum <anonymous> kIsShared
	enum <anonymous> kIsStationery
	enum <anonymous> kIssuerKCItemAttr
	enum <anonymous> kIssuerURLKCItemAttr
	enum <anonymous> kItalicCJKRomanType
	enum <anonymous> kItemList
	enum <anonymous> kJapaneseBasicVariant
	enum <anonymous> kJapanesePostScriptPrintVariant
	enum <anonymous> kJapanesePostScriptScrnVariant
	enum <anonymous> kJapaneseStandardVariant
	enum <anonymous> kJapaneseStdNoVerticalsVariant
	enum <anonymous> kJapaneseVertAtKuPlusTenVariant
	enum <anonymous> kJIJournalInFSMask
	enum <anonymous> kJIJournalNeedInitMask
	enum <anonymous> kJIJournalOnOtherDeviceMask
	enum <anonymous> kJIS1978CharactersSelector
	enum <anonymous> kJIS1983CharactersSelector
	enum <anonymous> kJIS1990CharactersSelector
	enum <anonymous> kJIS2004CharactersSelector
	enum <anonymous> kJUSTCurrentVersion
	enum <anonymous> kJUSTKashidaPriority
	enum <anonymous> kJUSTLetterPriority
	enum <anonymous> kJUSTnoGlyphcode
	enum <anonymous> kJUSTNullPriority
	enum <anonymous> kJUSTOverrideLimits
	enum <anonymous> kJUSTOverridePriority
	enum <anonymous> kJUSTOverrideUnlimited
	enum <anonymous> kJUSTpcConditionalAddAction
	enum <anonymous> kJUSTpcDecompositionAction
	enum <anonymous> kJUSTpcDuctilityAction
	enum <anonymous> kJUSTpcGlyphRepeatAddAction
	enum <anonymous> kJUSTpcGlyphStretchAction
	enum <anonymous> kJUSTpcUnconditionalAddAction
	enum <anonymous> kJUSTPriorityCount
	enum <anonymous> kJUSTPriorityMask
	enum <anonymous> kJUSTSpacePriority
	enum <anonymous> kJUSTStandardFormat
	enum <anonymous> kJUSTTag
	enum <anonymous> kJUSTUnlimited
	enum <anonymous> kKanaSpacingType
	enum <anonymous> kKanaToRomanizationSelector
	enum <anonymous> kKatakanaToHiraganaSelector
	enum <anonymous> kKCAuthTypeDefault
	enum <anonymous> kKCAuthTypeDPA
	enum <anonymous> kKCAuthTypeHTTPDigest
	enum <anonymous> kKCAuthTypeMSN
	enum <anonymous> kKCAuthTypeNTLM
	enum <anonymous> kKCAuthTypeRPA
	enum <anonymous> kKCProtocolTypeAFP
	enum <anonymous> kKCProtocolTypeAppleTalk
	enum <anonymous> kKCProtocolTypeFTP
	enum <anonymous> kKCProtocolTypeFTPAccount
	enum <anonymous> kKCProtocolTypeHTTP
	enum <anonymous> kKCProtocolTypeIMAP
	enum <anonymous> kKCProtocolTypeIRC
	enum <anonymous> kKCProtocolTypeLDAP
	enum <anonymous> kKCProtocolTypeNNTP
	enum <anonymous> kKCProtocolTypePOP3
	enum <anonymous> kKCProtocolTypeSMTP
	enum <anonymous> kKCProtocolTypeSOCKS
	enum <anonymous> kKCProtocolTypeTelnet
	enum <anonymous> kKeepArrangedIcon
	enum <anonymous> kKERNCrossStream
	enum <anonymous> kKERNCrossStreamResetNote
	enum <anonymous> kKERNCurrentVersion
	enum <anonymous> kKernelExtensionsFolderType
	enum <anonymous> kKERNFormatMask
	enum <anonymous> kKERNIndexArray
	enum <anonymous> kKERNLineEndKerning
	enum <anonymous> kKERNLineStart
	enum <anonymous> kKERNNoCrossKerning
	enum <anonymous> kKERNNoStakeNote
	enum <anonymous> kKERNNotApplied
	enum <anonymous> kKERNNotesRequested
	enum <anonymous> kKERNOrderedList
	enum <anonymous> kKERNResetCrossStream
	enum <anonymous> kKERNSimpleArray
	enum <anonymous> kKERNStateTable
	enum <anonymous> kKERNTag
	enum <anonymous> kKERNUnusedBits
	enum <anonymous> kKERNVariation
	enum <anonymous> kKERNVertical
	enum <anonymous> kKERXActionOffsetMask
	enum <anonymous> kKERXActionTypeAnchorPoints
	enum <anonymous> kKERXActionTypeControlPoints
	enum <anonymous> kKERXActionTypeCoordinates
	enum <anonymous> kKERXActionTypeMask
	enum <anonymous> kKERXControlPoint
	enum <anonymous> kKERXCrossStream
	enum <anonymous> kKERXCrossStreamResetNote
	enum <anonymous> kKERXCurrentVersion
	enum <anonymous> kKERXFormatMask
	enum <anonymous> kKERXIndexArray
	enum <anonymous> kKERXLineEndKerning
	enum <anonymous> kKERXLineStart
	enum <anonymous> kKERXNoCrossKerning
	enum <anonymous> kKERXNoStakeNote
	enum <anonymous> kKERXNotApplied
	enum <anonymous> kKERXNotesRequested
	enum <anonymous> kKERXOrderedList
	enum <anonymous> kKERXResetCrossStream
	enum <anonymous> kKERXSimpleArray
	enum <anonymous> kKERXStateTable
	enum <anonymous> kKERXTag
	enum <anonymous> kKERXUnusedBits
	enum <anonymous> kKERXUnusedFlags
	enum <anonymous> kKERXVariation
	enum <anonymous> kKERXVertical
	enum <anonymous> kKeyboardLayoutIcon
	enum <anonymous> kKeyboardLayoutsFolderType
	enum <anonymous> kKeychainFolderType
	enum <anonymous> kKeychainListChangedKCEvent
	enum <anonymous> kLAAllMorphemes
	enum <anonymous> kLabelKCItemAttr
	enum <anonymous> kLADefaultEdge
	enum <anonymous> kLAEndOfSourceTextMask
	enum <anonymous> kLAFreeEdge
	enum <anonymous> kLAIncompleteEdge
	enum <anonymous> kLAMorphemesArrayVersion
	enum <anonymous> kLarge1BitMask
	enum <anonymous> kLarge32BitData
	enum <anonymous> kLarge4BitData
	enum <anonymous> kLarge4BitIconSize
	enum <anonymous> kLarge8BitData
	enum <anonymous> kLarge8BitIconSize
	enum <anonymous> kLarge8BitMask
	enum <anonymous> kLargeIconSize
	enum <anonymous> kLASpeechBagyouGodan
	enum <anonymous> kLASpeechChimei
	enum <anonymous> kLASpeechChimeiSetsubigo
	enum <anonymous> kLASpeechDokuritsugo
	enum <anonymous> kLASpeechDoushi
	enum <anonymous> kLASpeechFukushi
	enum <anonymous> kLASpeechFutsuuMeishi
	enum <anonymous> kLASpeechGagyouGodan
	enum <anonymous> kLASpeechGodanDoushi
	enum <anonymous> kLASpeechIchidanDoushi
	enum <anonymous> kLASpeechJinmei
	enum <anonymous> kLASpeechJinmeiMei
	enum <anonymous> kLASpeechJinmeiSei
	enum <anonymous> kLASpeechJinmeiSetsubigo
	enum <anonymous> kLASpeechJodoushi
	enum <anonymous> kLASpeechJoshi
	enum <anonymous> kLASpeechKagyouGodan
	enum <anonymous> kLASpeechKahenDoushi
	enum <anonymous> kLASpeechKandoushi
	enum <anonymous> kLASpeechKatsuyouGokan
	enum <anonymous> kLASpeechKatsuyouKatei
	enum <anonymous> kLASpeechKatsuyouMask
	enum <anonymous> kLASpeechKatsuyouMeirei
	enum <anonymous> kLASpeechKatsuyouMizen
	enum <anonymous> kLASpeechKatsuyouRentai
	enum <anonymous> kLASpeechKatsuyouRenyou
	enum <anonymous> kLASpeechKatsuyouSyuushi
	enum <anonymous> kLASpeechKeidouMeishi
	enum <anonymous> kLASpeechKeiyoudoushi
	enum <anonymous> kLASpeechKeiyoushi
	enum <anonymous> kLASpeechKigou
	enum <anonymous> kLASpeechKoyuuMeishi
	enum <anonymous> kLASpeechKuten
	enum <anonymous> kLASpeechMagyouGodan
	enum <anonymous> kLASpeechMediumClassMask
	enum <anonymous> kLASpeechMeishi
	enum <anonymous> kLASpeechMuhinshi
	enum <anonymous> kLASpeechNagyouGodan
	enum <anonymous> kLASpeechRagyouGodan
	enum <anonymous> kLASpeechRentaishi
	enum <anonymous> kLASpeechRoughClassMask
	enum <anonymous> kLASpeechSagyouGodan
	enum <anonymous> kLASpeechSahenDoushi
	enum <anonymous> kLASpeechSahenMeishi
	enum <anonymous> kLASpeechSeiku
	enum <anonymous> kLASpeechSetsubiChimei
	enum <anonymous> kLASpeechSetsubigo
	enum <anonymous> kLASpeechSetsuzokushi
	enum <anonymous> kLASpeechSettougo
	enum <anonymous> kLASpeechSoshikimei
	enum <anonymous> kLASpeechSoshikimeiSetsubigo
	enum <anonymous> kLASpeechStrictClassMask
	enum <anonymous> kLASpeechSuujiSetsubigo
	enum <anonymous> kLASpeechSuujiSettougo
	enum <anonymous> kLASpeechSuushi
	enum <anonymous> kLASpeechTagyouGodan
	enum <anonymous> kLASpeechTankanji
	enum <anonymous> kLASpeechTouten
	enum <anonymous> kLASpeechWagyouGodan
	enum <anonymous> kLASpeechZahenDoushi
	enum <anonymous> kLastDomainConstant
	enum <anonymous> kLastFeatureType
	enum <anonymous> kLastIOKitNotificationType
	enum <anonymous> kLastMagicBusyFiletype
	enum <anonymous> kLauncherItemsFolderType
	enum <anonymous> kLaunchToGetTerminology
	enum <anonymous> kLCARCtlPointFormat
	enum <anonymous> kLCARCurrentVersion
	enum <anonymous> kLCARLinearFormat
	enum <anonymous> kLCARTag
	enum <anonymous> kLeftToRight
	enum <anonymous> kLetterCaseType
	enum <anonymous> kLibraryAssistantsFolderType
	enum <anonymous> kLigaturesType
	enum <anonymous> kLineFinalSwashesOffSelector
	enum <anonymous> kLineFinalSwashesOnSelector
	enum <anonymous> kLineInitialSwashesOffSelector
	enum <anonymous> kLineInitialSwashesOnSelector
	enum <anonymous> kLinguisticRearrangementOffSelector
	enum <anonymous> kLinguisticRearrangementOnSelector
	enum <anonymous> kLinguisticRearrangementType
	enum <anonymous> kLocalDomain
	enum <anonymous> kLocaleAllPartsMask
	enum <anonymous> kLocaleAndVariantNameMask
	enum <anonymous> kLocaleLanguageMask
	enum <anonymous> kLocaleLanguageVariantMask
	enum <anonymous> kLocaleNameMask
	enum <anonymous> kLocaleOperationVariantNameMask
	enum <anonymous> kLocaleRegionMask
	enum <anonymous> kLocaleRegionVariantMask
	enum <anonymous> kLocalesBufferTooSmallErr
	enum <anonymous> kLocaleScriptMask
	enum <anonymous> kLocaleScriptVariantMask
	enum <anonymous> kLocalesDefaultDisplayStatus
	enum <anonymous> kLocalesFolderIcon
	enum <anonymous> kLocalesFolderType
	enum <anonymous> kLocalesTableFormatErr
	enum <anonymous> kLocalPPDDomain
	enum <anonymous> kLockedBadgeIcon
	enum <anonymous> kLockedIcon
	enum <anonymous> kLockKCEvent
	enum <anonymous> kLockKCEventMask
	enum <anonymous> kLogosOffSelector
	enum <anonymous> kLogosOnSelector
	enum <anonymous> kLogsFolderType
	enum <anonymous> kLowerCaseNumbersSelector
	enum <anonymous> kLowerCasePetiteCapsSelector
	enum <anonymous> kLowerCaseSmallCapsSelector
	enum <anonymous> kLowerCaseType
	enum <anonymous> kLSAcceptAllowLoginUI
	enum <anonymous> kLSAcceptDefault
	enum <anonymous> kLSAppDoesNotClaimTypeErr
	enum <anonymous> kLSAppDoesNotSupportSchemeWarning
	enum <anonymous> kLSAppInTrashErr
	enum <anonymous> kLSApplicationNotFoundErr
	enum <anonymous> kLSAttributeNotFoundErr
	enum <anonymous> kLSAttributeNotSettableErr
	enum <anonymous> kLSCannotSetInfoErr
	enum <anonymous> kLSDataErr
	enum <anonymous> kLSDataTooOldErr
	enum <anonymous> kLSDataUnavailableErr
	enum <anonymous> kLSExecutableIncorrectFormat
	enum <anonymous> kLSHandlerOptionsDefault
	enum <anonymous> kLSHandlerOptionsIgnoreCreator
	enum <anonymous> kLSIncompatibleApplicationVersionErr
	enum <anonymous> kLSIncompatibleSystemVersionErr
	enum <anonymous> kLSInitializeDefaults
	const CFStringRef kLSItemContentType
	const CFStringRef kLSItemDisplayKind
	const CFStringRef kLSItemDisplayName
	const CFStringRef kLSItemExtension
	const CFStringRef kLSItemExtensionIsHidden
	const CFStringRef kLSItemFileCreator
	const CFStringRef kLSItemFileType
	enum <anonymous> kLSItemInfoAppIsScriptable
	enum <anonymous> kLSItemInfoAppPrefersClassic
	enum <anonymous> kLSItemInfoAppPrefersNative
	enum <anonymous> kLSItemInfoExtensionIsHidden
	enum <anonymous> kLSItemInfoIsAliasFile
	enum <anonymous> kLSItemInfoIsApplication
	enum <anonymous> kLSItemInfoIsClassicApp
	enum <anonymous> kLSItemInfoIsContainer
	enum <anonymous> kLSItemInfoIsInvisible
	enum <anonymous> kLSItemInfoIsNativeApp
	enum <anonymous> kLSItemInfoIsPackage
	enum <anonymous> kLSItemInfoIsPlainFile
	enum <anonymous> kLSItemInfoIsSymlink
	enum <anonymous> kLSItemInfoIsVolume
	const CFStringRef kLSItemIsInvisible
	const CFStringRef kLSItemQuarantineProperties
	const CFStringRef kLSItemRoleHandlerDisplayName
	enum <anonymous> kLSLaunchAndDisplayErrors
	enum <anonymous> kLSLaunchAndHide
	enum <anonymous> kLSLaunchAndHideOthers
	enum <anonymous> kLSLaunchAndPrint
	enum <anonymous> kLSLaunchAsync
	enum <anonymous> kLSLaunchDefaults
	enum <anonymous> kLSLaunchDontAddToRecents
	enum <anonymous> kLSLaunchDontSwitch
	enum <anonymous> kLSLaunchHasUntrustedContents
	enum <anonymous> kLSLaunchInClassic
	enum <anonymous> kLSLaunchInhibitBGOnly
	enum <anonymous> kLSLaunchInProgressErr
	enum <anonymous> kLSLaunchNewInstance
	enum <anonymous> kLSLaunchNoParams
	enum <anonymous> kLSLaunchReserved2
	enum <anonymous> kLSLaunchReserved3
	enum <anonymous> kLSLaunchReserved4
	enum <anonymous> kLSLaunchReserved5
	enum <anonymous> kLSLaunchStartClassic
	enum <anonymous> kLSMinCatInfoBitmap
	enum <anonymous> kLSMultipleSessionsNotSupportedErr
	enum <anonymous> kLSNoClassicEnvironmentErr
	enum <anonymous> kLSNoExecutableErr
	enum <anonymous> kLSNoLaunchPermissionErr
	enum <anonymous> kLSNoRegistrationInfoErr
	enum <anonymous> kLSNoRosettaEnvironmentErr
	enum <anonymous> kLSNotAnApplicationErr
	enum <anonymous> kLSNotInitializedErr
	enum <anonymous> kLSNotRegisteredErr
	const CFStringRef kLSQuarantineAgentBundleIdentifierKey
	const CFStringRef kLSQuarantineAgentNameKey
	const CFStringRef kLSQuarantineDataURLKey
	const CFStringRef kLSQuarantineOriginURLKey
	const CFStringRef kLSQuarantineTimeStampKey
	const CFStringRef kLSQuarantineTypeCalendarEventAttachment
	const CFStringRef kLSQuarantineTypeEmailAttachment
	const CFStringRef kLSQuarantineTypeInstantMessageAttachment
	const CFStringRef kLSQuarantineTypeKey
	const CFStringRef kLSQuarantineTypeOtherAttachment
	const CFStringRef kLSQuarantineTypeOtherDownload
	const CFStringRef kLSQuarantineTypeWebDownload
	enum <anonymous> kLSRequestAllFlags
	enum <anonymous> kLSRequestAllInfo
	enum <anonymous> kLSRequestAppTypeFlags
	enum <anonymous> kLSRequestBasicFlagsOnly
	enum <anonymous> kLSRequestExtension
	enum <anonymous> kLSRequestExtensionFlagsOnly
	enum <anonymous> kLSRequestIconAndKind
	enum <anonymous> kLSRequestTypeCreator
	enum <anonymous> kLSRolesAll
	enum <anonymous> kLSRolesEditor
	enum <anonymous> kLSRolesNone
	enum <anonymous> kLSRolesShell
	enum <anonymous> kLSRolesViewer
	enum <anonymous> kLSServerCommunicationErr
	enum <anonymous> kLSSharedFileListDoNotMountVolumes
	CFStringRef kLSSharedFileListFavoriteItems
	CFStringRef kLSSharedFileListFavoriteVolumes
	CFStringRef kLSSharedFileListGlobalLoginItems
	LSSharedFileListItemRef kLSSharedFileListItemBeforeFirst
	CFStringRef kLSSharedFileListItemHidden
	LSSharedFileListItemRef kLSSharedFileListItemLast
	CFStringRef kLSSharedFileListLoginItemHidden
	enum <anonymous> kLSSharedFileListNoUserInteraction
	CFStringRef kLSSharedFileListRecentApplicationItems
	CFStringRef kLSSharedFileListRecentDocumentItems
	CFStringRef kLSSharedFileListRecentItemsMaxAmount
	CFStringRef kLSSharedFileListRecentServerItems
	CFStringRef kLSSharedFileListSessionLoginItems
	CFStringRef kLSSharedFileListVolumesComputerVisible
	CFStringRef kLSSharedFileListVolumesIDiskVisible
	CFStringRef kLSSharedFileListVolumesNetworkVisible
	enum <anonymous> kLSUnknownCreator
	enum <anonymous> kLSUnknownErr
	enum <anonymous> kLSUnknownType
	enum <anonymous> kLSUnknownTypeErr
	enum <anonymous> kM68kISA
	enum <anonymous> kMacArabicAlBayanVariant
	enum <anonymous> kMacArabicStandardVariant
	enum <anonymous> kMacArabicThuluthVariant
	enum <anonymous> kMacArabicTrueTypeVariant
	enum <anonymous> kMacCroatianCurrencySignVariant
	enum <anonymous> kMacCroatianDefaultVariant
	enum <anonymous> kMacCroatianEuroSignVariant
	enum <anonymous> kMacCyrillicCurrSignStdVariant
	enum <anonymous> kMacCyrillicCurrSignUkrVariant
	enum <anonymous> kMacCyrillicDefaultVariant
	enum <anonymous> kMacCyrillicEuroSignVariant
	enum <anonymous> kMacFarsiStandardVariant
	enum <anonymous> kMacFarsiTrueTypeVariant
	enum <anonymous> kMacGreekDefaultVariant
	enum <anonymous> kMacGreekEuroSignVariant
	enum <anonymous> kMacGreekNoEuroSignVariant
	enum <anonymous> kMacHebrewFigureSpaceVariant
	enum <anonymous> kMacHebrewStandardVariant
	enum <anonymous> kMachineNameStrID
	enum <anonymous> kMacIcelandicStandardVariant
	enum <anonymous> kMacIcelandicStdCurrSignVariant
	enum <anonymous> kMacIcelandicStdDefaultVariant
	enum <anonymous> kMacIcelandicStdEuroSignVariant
	enum <anonymous> kMacIcelandicTrueTypeVariant
	enum <anonymous> kMacIcelandicTTCurrSignVariant
	enum <anonymous> kMacIcelandicTTDefaultVariant
	enum <anonymous> kMacIcelandicTTEuroSignVariant
	enum <anonymous> kMacJapaneseBasicVariant
	enum <anonymous> kMacJapanesePostScriptPrintVariant
	enum <anonymous> kMacJapanesePostScriptScrnVariant
	enum <anonymous> kMacJapaneseStandardVariant
	enum <anonymous> kMacJapaneseStdNoVerticalsVariant
	enum <anonymous> kMacJapaneseVertAtKuPlusTenVariant
	enum <anonymous> kMacMemoryMaximumMemoryManagerBlockSize
	enum <anonymous> kMacOSReadMeFolderIcon
	enum <anonymous> kMacOSReadMesFolderType
	enum <anonymous> kMacRomanCurrencySignVariant
	enum <anonymous> kMacRomanDefaultVariant
	enum <anonymous> kMacRomanEuroSignVariant
	enum <anonymous> kMacRomanianCurrencySignVariant
	enum <anonymous> kMacRomanianDefaultVariant
	enum <anonymous> kMacRomanianEuroSignVariant
	enum <anonymous> kMacRomanLatin1CroatianVariant
	enum <anonymous> kMacRomanLatin1DefaultVariant
	enum <anonymous> kMacRomanLatin1IcelandicVariant
	enum <anonymous> kMacRomanLatin1RomanianVariant
	enum <anonymous> kMacRomanLatin1StandardVariant
	enum <anonymous> kMacRomanLatin1TurkishVariant
	enum <anonymous> kMacRomanStandardVariant
	enum <anonymous> kMacVT100CurrencySignVariant
	enum <anonymous> kMacVT100DefaultVariant
	enum <anonymous> kMacVT100EuroSignVariant
	enum <anonymous> kMagicBusyCreationDate
	enum <anonymous> kMagicTemporaryItemsFolderType
	enum <anonymous> kMale
	enum <anonymous> kManagedItemsFolderType
	enum <anonymous> kMathematicalExtrasType
	enum <anonymous> kMathematicalGreekOffSelector
	enum <anonymous> kMathematicalGreekOnSelector
	enum <anonymous> kMathSymbolsSelector
	enum <anonymous> kMaxAsyncArgs
	enum <anonymous> kMaximumBlocksIn4GB
	enum <anonymous> kMaxInputLengthOfAppleJapaneseEngine
	enum <anonymous> kMaxKanjiLengthInAppleJapaneseDictionary
	BTreeKeyLimits kMaxKeyLength
	enum <anonymous> kMaxYomiLengthInAppleJapaneseDictionary
	const CFStringRef kMDAttributeAllValues
	const CFStringRef kMDAttributeDisplayValues
	const CFStringRef kMDAttributeMultiValued
	const CFStringRef kMDAttributeName
	const CFStringRef kMDAttributeReadOnlyValues
	const CFStringRef kMDAttributeType
	const CFStringRef kMDExporterAvaliable
	const CFStringRef kMDItemAcquisitionMake
	const CFStringRef kMDItemAcquisitionModel
	const CFStringRef kMDItemAlbum
	const CFStringRef kMDItemAltitude
	const CFStringRef kMDItemAperture
	const CFStringRef kMDItemAppleLoopDescriptors
	const CFStringRef kMDItemAppleLoopsKeyFilterType
	const CFStringRef kMDItemAppleLoopsLoopMode
	const CFStringRef kMDItemAppleLoopsRootKey
	const CFStringRef kMDItemApplicationCategories
	const CFStringRef kMDItemAttributeChangeDate
	const CFStringRef kMDItemAudiences
	const CFStringRef kMDItemAudioBitRate
	const CFStringRef kMDItemAudioChannelCount
	const CFStringRef kMDItemAudioEncodingApplication
	const CFStringRef kMDItemAudioSampleRate
	const CFStringRef kMDItemAudioTrackNumber
	const CFStringRef kMDItemAuthorAddresses
	const CFStringRef kMDItemAuthorEmailAddresses
	const CFStringRef kMDItemAuthors
	const CFStringRef kMDItemBitsPerSample
	const CFStringRef kMDItemCameraOwner
	const CFStringRef kMDItemCFBundleIdentifier
	const CFStringRef kMDItemCity
	const CFStringRef kMDItemCodecs
	const CFStringRef kMDItemColorSpace
	const CFStringRef kMDItemComment
	const CFStringRef kMDItemComposer
	const CFStringRef kMDItemContactKeywords
	const CFStringRef kMDItemContentCreationDate
	const CFStringRef kMDItemContentModificationDate
	const CFStringRef kMDItemContentType
	const CFStringRef kMDItemContentTypeTree
	const CFStringRef kMDItemContributors
	const CFStringRef kMDItemCopyright
	const CFStringRef kMDItemCountry
	const CFStringRef kMDItemCoverage
	const CFStringRef kMDItemCreator
	const CFStringRef kMDItemDateAdded
	const CFStringRef kMDItemDeliveryType
	const CFStringRef kMDItemDescription
	const CFStringRef kMDItemDirector
	const CFStringRef kMDItemDisplayName
	const CFStringRef kMDItemDownloadedDate
	const CFStringRef kMDItemDueDate
	const CFStringRef kMDItemDurationSeconds
	const CFStringRef kMDItemEditors
	const CFStringRef kMDItemEmailAddresses
	const CFStringRef kMDItemEncodingApplications
	const CFStringRef kMDItemExecutableArchitectures
	const CFStringRef kMDItemExecutablePlatform
	const CFStringRef kMDItemEXIFGPSVersion
	const CFStringRef kMDItemEXIFVersion
	const CFStringRef kMDItemExposureMode
	const CFStringRef kMDItemExposureProgram
	const CFStringRef kMDItemExposureTimeSeconds
	const CFStringRef kMDItemExposureTimeString
	const CFStringRef kMDItemFinderComment
	const CFStringRef kMDItemFlashOnOff
	const CFStringRef kMDItemFNumber
	const CFStringRef kMDItemFocalLength
	const CFStringRef kMDItemFocalLength35mm
	const CFStringRef kMDItemFonts
	const CFStringRef kMDItemFSContentChangeDate
	const CFStringRef kMDItemFSCreationDate
	const CFStringRef kMDItemFSExists
	const CFStringRef kMDItemFSHasCustomIcon
	const CFStringRef kMDItemFSInvisible
	const CFStringRef kMDItemFSIsExtensionHidden
	const CFStringRef kMDItemFSIsReadable
	const CFStringRef kMDItemFSIsStationery
	const CFStringRef kMDItemFSIsWriteable
	const CFStringRef kMDItemFSLabel
	const CFStringRef kMDItemFSName
	const CFStringRef kMDItemFSNodeCount
	const CFStringRef kMDItemFSOwnerGroupID
	const CFStringRef kMDItemFSOwnerUserID
	const CFStringRef kMDItemFSSize
	const CFStringRef kMDItemGenre
	const CFStringRef kMDItemGPSAreaInformation
	const CFStringRef kMDItemGPSDateStamp
	const CFStringRef kMDItemGPSDestBearing
	const CFStringRef kMDItemGPSDestDistance
	const CFStringRef kMDItemGPSDestLatitude
	const CFStringRef kMDItemGPSDestLongitude
	const CFStringRef kMDItemGPSDifferental
	const CFStringRef kMDItemGPSDOP
	const CFStringRef kMDItemGPSMapDatum
	const CFStringRef kMDItemGPSMeasureMode
	const CFStringRef kMDItemGPSProcessingMethod
	const CFStringRef kMDItemGPSStatus
	const CFStringRef kMDItemGPSTrack
	const CFStringRef kMDItemHasAlphaChannel
	const CFStringRef kMDItemHeadline
	const CFStringRef kMDItemIdentifier
	const CFStringRef kMDItemImageDirection
	const CFStringRef kMDItemInformation
	const CFStringRef kMDItemInstantMessageAddresses
	const CFStringRef kMDItemInstructions
	const CFStringRef kMDItemIsApplicationManaged
	const CFStringRef kMDItemIsGeneralMIDISequence
	const CFStringRef kMDItemIsLikelyJunk
	const CFStringRef kMDItemISOSpeed
	const CFStringRef kMDItemKeySignature
	const CFStringRef kMDItemKeywords
	const CFStringRef kMDItemKind
	const CFStringRef kMDItemLabelIcon
	const CFStringRef kMDItemLabelID
	const CFStringRef kMDItemLabelKind
	const CFStringRef kMDItemLabelUUID
	const CFStringRef kMDItemLanguages
	const CFStringRef kMDItemLastUsedDate
	const CFStringRef kMDItemLatitude
	const CFStringRef kMDItemLayerNames
	const CFStringRef kMDItemLensModel
	const CFStringRef kMDItemLongitude
	const CFStringRef kMDItemLyricist
	const CFStringRef kMDItemMaxAperture
	const CFStringRef kMDItemMediaTypes
	const CFStringRef kMDItemMeteringMode
	const CFStringRef kMDItemMusicalGenre
	const CFStringRef kMDItemMusicalInstrumentCategory
	const CFStringRef kMDItemMusicalInstrumentName
	const CFStringRef kMDItemNamedLocation
	const CFStringRef kMDItemNumberOfPages
	const CFStringRef kMDItemOrganizations
	const CFStringRef kMDItemOrientation
	const CFStringRef kMDItemOriginalFormat
	const CFStringRef kMDItemOriginalSource
	const CFStringRef kMDItemPageHeight
	const CFStringRef kMDItemPageWidth
	const CFStringRef kMDItemParticipants
	const CFStringRef kMDItemPath
	const CFStringRef kMDItemPerformers
	const CFStringRef kMDItemPhoneNumbers
	const CFStringRef kMDItemPixelCount
	const CFStringRef kMDItemPixelHeight
	const CFStringRef kMDItemPixelWidth
	const CFStringRef kMDItemProducer
	const CFStringRef kMDItemProfileName
	const CFStringRef kMDItemProjects
	const CFStringRef kMDItemPublishers
	const CFStringRef kMDItemRecipientAddresses
	const CFStringRef kMDItemRecipientEmailAddresses
	const CFStringRef kMDItemRecipients
	const CFStringRef kMDItemRecordingDate
	const CFStringRef kMDItemRecordingYear
	const CFStringRef kMDItemRedEyeOnOff
	const CFStringRef kMDItemResolutionHeightDPI
	const CFStringRef kMDItemResolutionWidthDPI
	const CFStringRef kMDItemRights
	const CFStringRef kMDItemSecurityMethod
	const CFStringRef kMDItemSpeed
	const CFStringRef kMDItemStarRating
	const CFStringRef kMDItemStateOrProvince
	const CFStringRef kMDItemStreamable
	const CFStringRef kMDItemSubject
	const CFStringRef kMDItemSupportFileType
	const CFStringRef kMDItemTempo
	const CFStringRef kMDItemTextContent
	const CFStringRef kMDItemTheme
	const CFStringRef kMDItemTimeSignature
	const CFStringRef kMDItemTimestamp
	const CFStringRef kMDItemTitle
	const CFStringRef kMDItemTotalBitRate
	const CFStringRef kMDItemURL
	const CFStringRef kMDItemVersion
	const CFStringRef kMDItemVideoBitRate
	const CFStringRef kMDItemWhereFroms
	const CFStringRef kMDItemWhiteBalance
	const CFStringRef kMDLabelAddedNotification
	CFStringRef kMDLabelBundleURL
	const CFStringRef kMDLabelChangedNotification
	CFStringRef kMDLabelContentChangeDate
	CFStringRef kMDLabelDisplayName
	CFStringRef kMDLabelIconData
	CFStringRef kMDLabelIconUUID
	CFStringRef kMDLabelIsMutuallyExclusiveSetMember
	CFStringRef kMDLabelKind
	CFStringRef kMDLabelKindIsMutuallyExclusiveSetKey
	CFStringRef kMDLabelKindVisibilityKey
	MDLabelDomain kMDLabelLocalDomain
	const CFStringRef kMDLabelRemovedNotification
	CFStringRef kMDLabelSetsFinderColor
	MDLabelDomain kMDLabelUserDomain
	CFStringRef kMDLabelUUID
	CFStringRef kMDLabelVisibility
	CFStringRef kMDPrivateVisibility
	CFStringRef kMDPublicVisibility
	const CFStringRef kMDQueryDidFinishNotification
	const CFStringRef kMDQueryDidUpdateNotification
	const CFStringRef kMDQueryProgressNotification
	const CFStringRef kMDQueryResultContentRelevance
	MDQuerySortOptionFlags kMDQueryReverseSortOrderFlag
	const CFStringRef kMDQueryScopeAllIndexed
	const CFStringRef kMDQueryScopeComputer
	const CFStringRef kMDQueryScopeComputerIndexed
	const CFStringRef kMDQueryScopeHome
	const CFStringRef kMDQueryScopeNetwork
	const CFStringRef kMDQueryScopeNetworkIndexed
	MDQueryOptionFlags kMDQuerySynchronous
	const CFStringRef kMDQueryUpdateAddedItems
	const CFStringRef kMDQueryUpdateChangedItems
	const CFStringRef kMDQueryUpdateRemovedItems
	MDQueryOptionFlags kMDQueryWantsUpdates
	enum <anonymous> kMicrosecondScale
	enum <anonymous> kMIDIDriversFolderType
	enum <anonymous> kMillisecondScale
	enum <anonymous> kMini1BitMask
	enum <anonymous> kMini4BitData
	enum <anonymous> kMini8BitData
	enum <anonymous> kModDateKCItemAttr
	enum <anonymous> kModemOutOfMemory
	enum <anonymous> kModemPreferencesMissing
	enum <anonymous> kModemScriptMissing
	enum <anonymous> kModemScriptsFolderType
	enum <anonymous> kMonospacedNumbersSelector
	enum <anonymous> kMonospacedTextSelector
	enum <anonymous> kMORTContextualType
	enum <anonymous> kMORTCoverDescending
	enum <anonymous> kMORTCoverIgnoreVertical
	enum <anonymous> kMORTCoverTypeMask
	enum <anonymous> kMORTCoverVertical
	enum <anonymous> kMORTCurrentVersion
	enum <anonymous> kMORTCurrInsertBefore
	enum <anonymous> kMORTCurrInsertCountMask
	enum <anonymous> kMORTCurrInsertCountShift
	enum <anonymous> kMORTCurrInsertKashidaLike
	enum <anonymous> kMORTCurrJustTableCountMask
	enum <anonymous> kMORTCurrJustTableCountShift
	enum <anonymous> kMORTDoInsertionsBefore
	enum <anonymous> kMORTInsertionsCountMask
	enum <anonymous> kMORTInsertionType
	enum <anonymous> kMORTIsSplitVowelPiece
	enum <anonymous> kMORTLigatureType
	enum <anonymous> kMORTLigFormOffsetMask
	enum <anonymous> kMORTLigFormOffsetShift
	enum <anonymous> kMORTLigLastAction
	enum <anonymous> kMORTLigStoreLigature
	enum <anonymous> kMORTMarkInsertBefore
	enum <anonymous> kMORTMarkInsertCountMask
	enum <anonymous> kMORTMarkInsertCountShift
	enum <anonymous> kMORTMarkInsertKashidaLike
	enum <anonymous> kMORTMarkJustTableCountMask
	enum <anonymous> kMORTMarkJustTableCountShift
	enum <anonymous> kMORTraCDx
	enum <anonymous> kMORTraCDxA
	enum <anonymous> kMORTraCDxAB
	enum <anonymous> kMORTraCDxBA
	enum <anonymous> kMORTraDCx
	enum <anonymous> kMORTraDCxA
	enum <anonymous> kMORTraDCxAB
	enum <anonymous> kMORTraDCxBA
	enum <anonymous> kMORTraDx
	enum <anonymous> kMORTraDxA
	enum <anonymous> kMORTraDxAB
	enum <anonymous> kMORTraDxBA
	enum <anonymous> kMORTraNoAction
	enum <anonymous> kMORTraxA
	enum <anonymous> kMORTraxAB
	enum <anonymous> kMORTraxBA
	enum <anonymous> kMORTRearrangementType
	enum <anonymous> kMORTSwashType
	enum <anonymous> kMORTTag
	enum <anonymous> kMORXCoverDescending
	enum <anonymous> kMORXCoverIgnoreVertical
	enum <anonymous> kMORXCoverTypeMask
	enum <anonymous> kMORXCoverVertical
	enum <anonymous> kMORXCurrentVersion
	enum <anonymous> kMORXTag
	enum <anonymous> kMountedBadgeIcon
	enum <anonymous> kMountedFolderAliasType
	enum <anonymous> kMountedFolderIcon
	enum <anonymous> kMountedFolderIconResource
	enum <anonymous> kMovieDocumentsFolderType
	enum <anonymous> kMPAddressSpaceInfoVersion
	enum <anonymous> kMPAllocate1024ByteAligned
	enum <anonymous> kMPAllocate16ByteAligned
	enum <anonymous> kMPAllocate32ByteAligned
	enum <anonymous> kMPAllocate4096ByteAligned
	enum <anonymous> kMPAllocate8ByteAligned
	enum <anonymous> kMPAllocateAltiVecAligned
	enum <anonymous> kMPAllocateClearMask
	enum <anonymous> kMPAllocateDefaultAligned
	enum <anonymous> kMPAllocateGloballyMask
	enum <anonymous> kMPAllocateInterlockAligned
	enum <anonymous> kMPAllocateMaxAlignment
	enum <anonymous> kMPAllocateNoCreateMask
	enum <anonymous> kMPAllocateNoGrowthMask
	enum <anonymous> kMPAllocateResidentMask
	enum <anonymous> kMPAllocateVMPageAligned
	enum <anonymous> kMPAllocateVMXAligned
	enum <anonymous> kMPAnyRemoteContext
	enum <anonymous> kMPAsyncInterruptRemoteContext
	enum <anonymous> kMPBlueBlockingErr
	enum <anonymous> kMPCreateTaskNotDebuggableMask
	enum <anonymous> kMPCreateTaskSuspendedMask
	enum <anonymous> kMPCreateTaskTakesAllExceptionsMask
	enum <anonymous> kMPCreateTaskValidOptionsMask
	enum <anonymous> kMPCriticalRegionInfoVersion
	enum <anonymous> kMPDeletedErr
	enum <anonymous> kMPEventInfoVersion
	enum <anonymous> kMPHighLevelDebugger
	enum <anonymous> kMPInsufficientResourcesErr
	enum <anonymous> kMPInterruptRemoteContext
	enum <anonymous> kMPInvalidIDErr
	enum <anonymous> kMPIterationEndErr
	enum <anonymous> kMPLowLevelDebugger
	enum <anonymous> kMPMaxAllocSize
	enum <anonymous> kMPMidLevelDebugger
	enum <anonymous> kMPNanokernelNeedsMemoryErr
	enum <anonymous> kMPNoID
	enum <anonymous> kMPNotificationInfoVersion
	enum <anonymous> kMPOwningProcessRemoteContext
	enum <anonymous> kMPPreserveTimerIDMask
	enum <anonymous> kMPPrivilegedErr
	enum <anonymous> kMPProcessCreatedErr
	enum <anonymous> kMPProcessTerminatedErr
	enum <anonymous> kMPQueueInfoVersion
	enum <anonymous> kMPSemaphoreInfoVersion
	enum <anonymous> kMPTaskAbortedErr
	enum <anonymous> kMPTaskBlocked
	enum <anonymous> kMPTaskBlockedErr
	enum <anonymous> kMPTaskCreatedErr
	enum <anonymous> kMPTaskInfoVersion
	enum <anonymous> kMPTaskPropagate
	enum <anonymous> kMPTaskPropagateMask
	enum <anonymous> kMPTaskReady
	enum <anonymous> kMPTaskResumeBranch
	enum <anonymous> kMPTaskResumeBranchMask
	enum <anonymous> kMPTaskResumeMask
	enum <anonymous> kMPTaskResumeStep
	enum <anonymous> kMPTaskResumeStepMask
	enum <anonymous> kMPTaskRunning
	enum <anonymous> kMPTaskState32BitMemoryException
	enum <anonymous> kMPTaskStateFPU
	enum <anonymous> kMPTaskStateMachine
	enum <anonymous> kMPTaskStateRegisters
	enum <anonymous> kMPTaskStateTaskInfo
	enum <anonymous> kMPTaskStateVectors
	enum <anonymous> kMPTaskStoppedErr
	enum <anonymous> kMPTimeIsDeltaMask
	enum <anonymous> kMPTimeIsDurationMask
	enum <anonymous> kMPTimeoutErr
	enum <anonymous> kMultiprocessingFolderType
	enum <anonymous> kMusicDocumentsFolderType
	enum <anonymous> kNameLocked
	enum <anonymous> kNanosecondScale
	enum <anonymous> kNavCustomControlMessageFailedErr
	enum <anonymous> kNavInvalidCustomControlMessageErr
	enum <anonymous> kNavInvalidSystemConfigErr
	enum <anonymous> kNavMissingKindStringErr
	enum <anonymous> kNavWrongDialogClassErr
	enum <anonymous> kNavWrongDialogStateErr
	enum <anonymous> kNegativeKCItemAttr
	enum <anonymous> kNetworkDomain
	enum <anonymous> kNetworkPPDDomain
	enum <anonymous> kNeuter
	SSLAuthenticate kNeverAuthenticate
	enum <anonymous> kNewDebugHeap
	enum <anonymous> kNewSizeParameter
	enum <anonymous> kNewStyleHeap
	enum <anonymous> kNewSuspend
	enum <anonymous> kNextBody
	enum <anonymous> kNilOptions
	enum <anonymous> kNLCCharactersSelector
	enum <anonymous> kNoAlternatesSelector
	enum <anonymous> kNoAnnotationSelector
	enum <anonymous> kNoByteCode
	enum <anonymous> kNoCardBusCISErr
	enum <anonymous> kNoCardEnablersFoundErr
	enum <anonymous> kNoCardErr
	enum <anonymous> kNoCardSevicesSocketsErr
	enum <anonymous> kNoCJKItalicRomanSelector
	enum <anonymous> kNoCJKSymbolAlternativesSelector
	enum <anonymous> kNoClientTableErr
	enum <anonymous> kNoCompatibleNameErr
	enum <anonymous> kNoConstraint
	enum <anonymous> kNoEnablerForCardErr
	enum <anonymous> kNoEndingProsody
	enum <anonymous> kNoFilesIcon
	enum <anonymous> kNoFolderIcon
	enum <anonymous> kNoFractionsSelector
	enum <anonymous> knoGroup
	enum <anonymous> kNoIdeographicAlternativesSelector
	enum <anonymous> kNoIOWindowRequestedErr
	enum <anonymous> kNoMoreInterruptSlotsErr
	enum <anonymous> kNoMoreItemsErr
	enum <anonymous> kNoMoreTimerClientsErr
	enum <anonymous> kNoneKCStopOn
	enum <anonymous> kNonFinalSwashesOffSelector
	enum <anonymous> kNonFinalSwashesOnSelector
	enum <anonymous> kNoOrnamentsSelector
	enum <anonymous> kNoProcess
	enum <anonymous> kNormalPositionSelector
	enum <anonymous> kNoRubyKanaSelector
	enum <anonymous> kNoSpeechInterrupt
	enum <anonymous> kNoStyleOptionsSelector
	enum <anonymous> kNoStylisticAlternatesSelector
	enum <anonymous> kNoSuchPowerSource
	enum <anonymous> kNoThreadID
	enum <anonymous> kNoTimeOut
	enum <anonymous> kNotPaged
	enum <anonymous> kNoTransform
	enum <anonymous> kNoTransliterationSelector
	enum <anonymous> kNotReadyErr
	enum <anonymous> kNotZVCapableErr
	enum <anonymous> knoUser
	enum <anonymous> kNoUserAuthentication
	enum <anonymous> kNoWriteIcon
	enum <anonymous> kNSL68kContextNotSupported
	enum <anonymous> kNSLBadClientInfoPtr
	enum <anonymous> kNSLBadDataTypeErr
	enum <anonymous> kNSLBadNetConnection
	enum <anonymous> kNSLBadProtocolTypeErr
	enum <anonymous> kNSLBadReferenceErr
	enum <anonymous> kNSLBadServiceTypeErr
	enum <anonymous> kNSLBadURLSyntax
	enum <anonymous> kNSLBufferTooSmallForData
	enum <anonymous> kNSLCannotContinueLookup
	enum <anonymous> kNSLErrNullPtrError
	enum <anonymous> kNSLInitializationFailed
	enum <anonymous> kNSLInsufficientOTVer
	enum <anonymous> kNSLInsufficientSysVer
	enum <anonymous> kNSLInvalidPluginSpec
	enum <anonymous> kNSLNoCarbonLib
	enum <anonymous> kNSLNoContextAvailable
	enum <anonymous> kNSLNoElementsInList
	enum <anonymous> kNSLNoPluginsForSearch
	enum <anonymous> kNSLNoPluginsFound
	enum <anonymous> kNSLNoSupportForService
	enum <anonymous> kNSLNotImplementedYet
	enum <anonymous> kNSLNotInitialized
	enum <anonymous> kNSLNullListPtr
	enum <anonymous> kNSLNullNeighborhoodPtr
	enum <anonymous> kNSLPluginLoadFailed
	enum <anonymous> kNSLRequestBufferAlreadyInList
	enum <anonymous> kNSLSchedulerError
	enum <anonymous> kNSLSearchAlreadyInProgress
	enum <anonymous> kNSLSomePluginsFailedToLoad
	enum <anonymous> kNSLUILibraryNotAvailable
	enum <anonymous> kNSpAddPlayerFailedErr
	enum <anonymous> kNSpAddressInUseErr
	enum <anonymous> kNSpAlreadyAdvertisingErr
	enum <anonymous> kNSpAlreadyInitializedErr
	enum <anonymous> kNSpCantBlockErr
	enum <anonymous> kNSpConnectFailedErr
	enum <anonymous> kNSpCreateGroupFailedErr
	enum <anonymous> kNSpFeatureNotImplementedErr
	enum <anonymous> kNSpFreeQExhaustedErr
	enum <anonymous> kNSpGameTerminatedErr
	enum <anonymous> kNSpHostFailedErr
	enum <anonymous> kNSpInitializationFailedErr
	enum <anonymous> kNSpInvalidAddressErr
	enum <anonymous> kNSpInvalidDefinitionErr
	enum <anonymous> kNSpInvalidGameRefErr
	enum <anonymous> kNSpInvalidGroupIDErr
	enum <anonymous> kNSpInvalidParameterErr
	enum <anonymous> kNSpInvalidPlayerIDErr
	enum <anonymous> kNSpInvalidProtocolListErr
	enum <anonymous> kNSpInvalidProtocolRefErr
	enum <anonymous> kNSpJoinFailedErr
	enum <anonymous> kNSpMemAllocationErr
	enum <anonymous> kNSpMessageTooBigErr
	enum <anonymous> kNSpNameRequiredErr
	enum <anonymous> kNSpNoGroupsErr
	enum <anonymous> kNSpNoHostVolunteersErr
	enum <anonymous> kNSpNoPlayersErr
	enum <anonymous> kNSpNotAdvertisingErr
	enum <anonymous> kNSpOTNotPresentErr
	enum <anonymous> kNSpOTVersionTooOldErr
	enum <anonymous> kNSpPipeFullErr
	enum <anonymous> kNSpProtocolNotAvailableErr
	enum <anonymous> kNSpRemovePlayerFailedErr
	enum <anonymous> kNSpSendFailedErr
	enum <anonymous> kNSpTimeoutErr
	enum <anonymous> kNSpTopologyNotSupportedErr
	enum <anonymous> kNumberCaseType
	enum <anonymous> kNumberSpacingType
	enum <anonymous> kOffset2Pos
	enum <anonymous> kOld68kRTA
	enum <anonymous> kOnAppropriateDisk
	enum <anonymous> kOneByteCode
	enum <anonymous> kOnSystemDisk
	enum <anonymous> kOpaqueAddressSpaceID
	enum <anonymous> kOpaqueAnyID
	enum <anonymous> kOpaqueAreaID
	enum <anonymous> kOpaqueCoherenceID
	enum <anonymous> kOpaqueConsoleID
	enum <anonymous> kOpaqueCpuID
	enum <anonymous> kOpaqueCriticalRegionID
	enum <anonymous> kOpaqueEventID
	enum <anonymous> kOpaqueNotificationID
	enum <anonymous> kOpaqueProcessID
	enum <anonymous> kOpaqueQueueID
	enum <anonymous> kOpaqueSemaphoreID
	enum <anonymous> kOpaqueTaskID
	enum <anonymous> kOpaqueTimerID
	enum <anonymous> kOPBDControlPointFormat
	enum <anonymous> kOPBDCurrentVersion
	enum <anonymous> kOPBDDistanceFormat
	enum <anonymous> kOPBDTag
	enum <anonymous> kOpenDocEditorsFolderType
	enum <anonymous> kOpenDocFolderType
	enum <anonymous> kOpenDocLibrariesFolderType
	enum <anonymous> kOpenDocShellPlugInsFolderType
	enum <anonymous> kOpenDropIconVariant
	enum <anonymous> kOpenFolderIcon
	enum <anonymous> kOpenFolderIconResource
	enum <anonymous> kOpenIconVariant
	enum <anonymous> kOrConnections
	enum <anonymous> kOrdinalsSelector
	enum <anonymous> kOrnamentSetsType
	enum <anonymous> kOSAsyncCompleteMessageID
	enum <anonymous> kOSAsyncRef64Count
	enum <anonymous> kOSAsyncRef64Size
	enum <anonymous> kOSAsyncRefCount
	enum <anonymous> kOSAsyncRefSize
	enum <anonymous> kOSIZCodeInSharedLibraries
	enum <anonymous> kOSIZdontAcceptRemoteEvents
	enum <anonymous> kOSIZDontOpenResourceFile
	enum <anonymous> kOSIZOpenWithReadPermission
	enum <anonymous> kOSNotificationMessageID
	enum <anonymous> kOTAccessErr
	enum <anonymous> kOTAddressBusyErr
	enum <anonymous> kOTBadAddressErr
	enum <anonymous> kOTBadConfigurationErr
	enum <anonymous> kOTBadDataErr
	enum <anonymous> kOTBadFlagErr
	enum <anonymous> kOTBadNameErr
	enum <anonymous> kOTBadOptionErr
	enum <anonymous> kOTBadQLenErr
	enum <anonymous> kOTBadReferenceErr
	enum <anonymous> kOTBadSequenceErr
	enum <anonymous> kOTBadSyncErr
	enum <anonymous> kOTBufferOverflowErr
	enum <anonymous> kOTCanceledErr
	enum <anonymous> kOTClientNotInittedErr
	enum <anonymous> kOTConfigurationChangedErr
	enum <anonymous> kOTDuplicateFoundErr
	enum <anonymous> kOTFlowErr
	enum <anonymous> kOTIndOutErr
	enum <anonymous> kOTLookErr
	enum <anonymous> kOTNoAddressErr
	enum <anonymous> kOTNoDataErr
	enum <anonymous> kOTNoDisconnectErr
	enum <anonymous> kOTNoError
	enum <anonymous> kOTNoReleaseErr
	enum <anonymous> kOTNoStructureTypeErr
	enum <anonymous> kOTNotFoundErr
	enum <anonymous> kOTNotSupportedErr
	enum <anonymous> kOTNoUDErrErr
	enum <anonymous> kOTOutOfMemoryErr
	enum <anonymous> kOTOutStateErr
	enum <anonymous> kOTPortHasDiedErr
	enum <anonymous> kOTPortLostConnection
	enum <anonymous> kOTPortWasEjectedErr
	enum <anonymous> kOTProtocolErr
	enum <anonymous> kOTProviderMismatchErr
	enum <anonymous> kOTQFullErr
	enum <anonymous> kOTResAddressErr
	enum <anonymous> kOTResQLenErr
	enum <anonymous> kOTStateChangeErr
	enum <anonymous> kOTSysErrorErr
	enum <anonymous> kOTUserRequestedErr
	enum <anonymous> kOutOfResourceErr
	enum <anonymous> kOverlappingCharactersType
	enum <anonymous> kOwnedFolderIcon
	enum <anonymous> kOwnedFolderIconResource
	enum <anonymous> kOwnerIcon
	enum <anonymous> kOwnerID2Name
	enum <anonymous> kOwnerName2ID
	enum <anonymous> kownerPrivileges
	enum <anonymous> kPackageAliasType
	enum <anonymous> kPageInMemory
	enum <anonymous> kPageOnDisk
	enum <anonymous> kParenthesisAnnotationSelector
	enum <anonymous> kPartiallyConnectedSelector
	enum <anonymous> kPascalStackBased
	enum <anonymous> kPassCallToChainErr
	enum <anonymous> kPassSelector
	enum <anonymous> kPassword
	enum <anonymous> kPasswordChangedKCEvent
	enum <anonymous> kPasswordChangedKCEventMask
	enum <anonymous> kPasteboardClientIsOwner
	enum <anonymous> kPasteboardFlavorNoFlags
	enum <anonymous> kPasteboardFlavorNotSaved
	enum <anonymous> kPasteboardFlavorPromised
	enum <anonymous> kPasteboardFlavorRequestOnly
	enum <anonymous> kPasteboardFlavorSenderOnly
	enum <anonymous> kPasteboardFlavorSenderTranslated
	enum <anonymous> kPasteboardFlavorSystemTranslated
	enum <anonymous> kPasteboardModified
	enum <anonymous> kPasteboardStandardLocationTrash
	enum <anonymous> kPasteboardStandardLocationUnknown
	enum <anonymous> kPathKCItemAttr
	enum <anonymous> kPCSToDevice
	enum <anonymous> kPCSToPCS
	enum <anonymous> kPEFAbsoluteExport
	enum <anonymous> kPEFCodeSection
	enum <anonymous> kPEFCodeSymbol
	enum <anonymous> kPEFConstantSection
	enum <anonymous> kPEFDataSymbol
	enum <anonymous> kPEFDebugSection
	enum <anonymous> kPEFExceptionSection
	enum <anonymous> kPEFExecDataSection
	enum <anonymous> kPEFExpSymClassShift
	enum <anonymous> kPEFExpSymMaxNameOffset
	enum <anonymous> kPEFExpSymNameOffsetMask
	enum <anonymous> kPEFFirstSectionHeaderOffset
	enum <anonymous> kPEFGlobalShare
	enum <anonymous> kPEFGlueSymbol
	enum <anonymous> kPEFHashLengthShift
	enum <anonymous> kPEFHashMaxLength
	enum <anonymous> kPEFHashSlotFirstKeyMask
	enum <anonymous> kPEFHashSlotMaxKeyIndex
	enum <anonymous> kPEFHashSlotMaxSymbolCount
	enum <anonymous> kPEFHashSlotSymCountShift
	enum <anonymous> kPEFHashValueMask
	enum <anonymous> kPEFImpSymClassShift
	enum <anonymous> kPEFImpSymMaxNameOffset
	enum <anonymous> kPEFImpSymNameOffsetMask
	enum <anonymous> kPEFInitLibBeforeMask
	enum <anonymous> kPEFLoaderSection
	enum <anonymous> kPEFPackedDataSection
	enum <anonymous> kPEFPkDataBlock
	enum <anonymous> kPEFPkDataCount5Mask
	enum <anonymous> kPEFPkDataMaxCount5
	enum <anonymous> kPEFPkDataOpcodeShift
	enum <anonymous> kPEFPkDataRepeat
	enum <anonymous> kPEFPkDataRepeatBlock
	enum <anonymous> kPEFPkDataRepeatZero
	enum <anonymous> kPEFPkDataVCountEndMask
	enum <anonymous> kPEFPkDataVCountMask
	enum <anonymous> kPEFPkDataVCountShift
	enum <anonymous> kPEFPkDataZero
	enum <anonymous> kPEFProcessShare
	enum <anonymous> kPEFProtectedShare
	enum <anonymous> kPEFReexportedImport
	enum <anonymous> kPEFRelocBasicOpcodeRange
	enum <anonymous> kPEFRelocBySectC
	enum <anonymous> kPEFRelocBySectD
	enum <anonymous> kPEFRelocBySectDWithSkip
	enum <anonymous> kPEFRelocImportRun
	enum <anonymous> kPEFRelocIncrPosition
	enum <anonymous> kPEFRelocIncrPositionMaxOffset
	enum <anonymous> kPEFRelocLgByImport
	enum <anonymous> kPEFRelocLgByImportMaxIndex
	enum <anonymous> kPEFRelocLgBySectionSubopcode
	enum <anonymous> kPEFRelocLgRepeat
	enum <anonymous> kPEFRelocLgRepeatMaxChunkCount
	enum <anonymous> kPEFRelocLgRepeatMaxRepeatCount
	enum <anonymous> kPEFRelocLgSetOrBySection
	enum <anonymous> kPEFRelocLgSetOrBySectionMaxIndex
	enum <anonymous> kPEFRelocLgSetSectCSubopcode
	enum <anonymous> kPEFRelocLgSetSectDSubopcode
	enum <anonymous> kPEFRelocRunMaxRunLength
	enum <anonymous> kPEFRelocSetPosition
	enum <anonymous> kPEFRelocSetPosMaxOffset
	enum <anonymous> kPEFRelocSmByImport
	enum <anonymous> kPEFRelocSmBySection
	enum <anonymous> kPEFRelocSmIndexMaxIndex
	enum <anonymous> kPEFRelocSmRepeat
	enum <anonymous> kPEFRelocSmRepeatMaxChunkCount
	enum <anonymous> kPEFRelocSmRepeatMaxRepeatCount
	enum <anonymous> kPEFRelocSmSetSectC
	enum <anonymous> kPEFRelocSmSetSectD
	enum <anonymous> kPEFRelocTVector12
	enum <anonymous> kPEFRelocTVector8
	enum <anonymous> kPEFRelocUndefinedOpcode
	enum <anonymous> kPEFRelocVTable8
	enum <anonymous> kPEFRelocWithSkipMaxRelocCount
	enum <anonymous> kPEFRelocWithSkipMaxSkipCount
	enum <anonymous> kPEFTag1
	enum <anonymous> kPEFTag2
	enum <anonymous> kPEFTOCSymbol
	enum <anonymous> kPEFTracebackSection
	enum <anonymous> kPEFTVectorSymbol
	enum <anonymous> kPEFUndefinedSymbol
	enum <anonymous> kPEFUnpackedDataSection
	enum <anonymous> kPEFVersion
	enum <anonymous> kPEFWeakImportLibMask
	enum <anonymous> kPEFWeakImportSymMask
	enum <anonymous> kPeriodAnnotationSelector
	enum <anonymous> kPeriodsToEllipsisOffSelector
	enum <anonymous> kPeriodsToEllipsisOnSelector
	enum <anonymous> kPiCharactersSelector
	enum <anonymous> kPictureDocumentsFolderType
	enum <anonymous> kPlotIconRefNoImage
	enum <anonymous> kPlotIconRefNoMask
	enum <anonymous> kPlotIconRefNormalFlags
	enum <anonymous> kPMAllocationFailure
	enum <anonymous> kPMBorderDoubleHairline
	enum <anonymous> kPMBorderDoubleThickline
	enum <anonymous> kPMBorderSingleHairline
	enum <anonymous> kPMBorderSingleThickline
	enum <anonymous> kPMCancel
	enum <anonymous> kPMCloseFailed
	enum <anonymous> kPMCMYKColorSpaceModel
	enum <anonymous> kPMCoverPageAfter
	enum <anonymous> kPMCoverPageBefore
	enum <anonymous> kPMCoverPageNone
	enum <anonymous> kPMCreateMessageFailed
	enum <anonymous> kPMCVMSymbolNotFound
	PMDataFormat kPMDataFormatXMLCompressed
	PMDataFormat kPMDataFormatXMLDefault
	PMDataFormat kPMDataFormatXMLMinimal
	enum <anonymous> kPMDeleteSubTicketFailed
	enum <anonymous> kPMDestinationFax
	enum <anonymous> kPMDestinationFile
	enum <anonymous> kPMDestinationInvalid
	enum <anonymous> kPMDestinationPreview
	enum <anonymous> kPMDestinationPrinter
	enum <anonymous> kPMDestinationProcessPDF
	enum <anonymous> kPMDevNColorSpaceModel
	enum <anonymous> kPMDocumentNotFound
	enum <anonymous> kPMDontSwitchPDEError
	enum <anonymous> kPMDuplexNone
	enum <anonymous> kPMDuplexNoTumble
	enum <anonymous> kPMDuplexTumble
	enum <anonymous> kPMEditRequestFailed
	enum <anonymous> kPMFeatureNotInstalled
	enum <anonymous> kPMFileOrDirOperationFailed
	enum <anonymous> kPMFontNameTooLong
	enum <anonymous> kPMFontNotFound
	enum <anonymous> kPMGeneralCGError
	enum <anonymous> kPMGeneralError
	enum <anonymous> kPMGrayColorSpaceModel
	enum <anonymous> kPMHideInlineItems
	enum <anonymous> kPMInternalError
	enum <anonymous> kPMInvalidAllocator
	enum <anonymous> kPMInvalidCalibrationTarget
	enum <anonymous> kPMInvalidConnection
	enum <anonymous> kPMInvalidCVMContext
	enum <anonymous> kPMInvalidFileType
	enum <anonymous> kPMInvalidIndex
	enum <anonymous> kPMInvalidIOMContext
	enum <anonymous> kPMInvalidItem
	enum <anonymous> kPMInvalidJobID
	enum <anonymous> kPMInvalidJobTemplate
	enum <anonymous> kPMInvalidKey
	enum <anonymous> kPMInvalidLookupSpec
	enum <anonymous> kPMInvalidObject
	enum <anonymous> kPMInvalidPageFormat
	enum <anonymous> kPMInvalidPaper
	enum <anonymous> kPMInvalidParameter
	enum <anonymous> kPMInvalidPBMRef
	enum <anonymous> kPMInvalidPDEContext
	enum <anonymous> kPMInvalidPMContext
	enum <anonymous> kPMInvalidPreset
	enum <anonymous> kPMInvalidPrinter
	enum <anonymous> kPMInvalidPrinterAddress
	enum <anonymous> kPMInvalidPrinterInfo
	enum <anonymous> kPMInvalidPrintSession
	enum <anonymous> kPMInvalidPrintSettings
	enum <anonymous> kPMInvalidReply
	enum <anonymous> kPMInvalidState
	enum <anonymous> kPMInvalidSubTicket
	enum <anonymous> kPMInvalidTicket
	enum <anonymous> kPMInvalidType
	enum <anonymous> kPMInvalidValue
	enum <anonymous> kPMIOAttrNotAvailable
	enum <anonymous> kPMIOMSymbolNotFound
	enum <anonymous> kPMItemIsLocked
	enum <anonymous> kPMJobBusy
	enum <anonymous> kPMJobCanceled
	enum <anonymous> kPMJobGetTicketBadFormatError
	enum <anonymous> kPMJobGetTicketReadError
	enum <anonymous> kPMJobManagerAborted
	enum <anonymous> kPMJobNotFound
	enum <anonymous> kPMJobStreamEndError
	enum <anonymous> kPMJobStreamOpenFailed
	enum <anonymous> kPMJobStreamReadFailed
	enum <anonymous> kPMKeyNotFound
	enum <anonymous> kPMKeyNotUnique
	enum <anonymous> kPMKeyOrValueNotFound
	enum <anonymous> kPMLandscape
	enum <anonymous> kPMLastErrorCodeToMakeMaintenanceOfThisListEasier
	enum <anonymous> kPMLayoutBottomTopLeftRight
	enum <anonymous> kPMLayoutBottomTopRightLeft
	enum <anonymous> kPMLayoutLeftRightBottomTop
	enum <anonymous> kPMLayoutLeftRightTopBottom
	enum <anonymous> kPMLayoutRightLeftBottomTop
	enum <anonymous> kPMLayoutRightLeftTopBottom
	enum <anonymous> kPMLayoutTopBottomLeftRight
	enum <anonymous> kPMLayoutTopBottomRightLeft
	enum <anonymous> kPMLockIgnored
	enum <anonymous> kPMMessagingError
	enum <anonymous> kPMNoDefaultItem
	enum <anonymous> kPMNoDefaultPrinter
	enum <anonymous> kPMNoDefaultSettings
	enum <anonymous> kPMNoError
	enum <anonymous> kPMNoPrinterJobID
	enum <anonymous> kPMNoSelectedPrinters
	enum <anonymous> kPMNoSuchEntry
	enum <anonymous> kPMNotImplemented
	enum <anonymous> kPMObjectInUse
	enum <anonymous> kPMOpenFailed
	enum <anonymous> kPMOutOfScope
	PMPageToPaperMappingType kPMPageToPaperMappingNone
	PMPageToPaperMappingType kPMPageToPaperMappingScaleToFit
	enum <anonymous> kPMPaperTypeCoated
	enum <anonymous> kPMPaperTypeGlossy
	enum <anonymous> kPMPaperTypePlain
	enum <anonymous> kPMPaperTypePremium
	enum <anonymous> kPMPaperTypeTransparency
	enum <anonymous> kPMPaperTypeTShirt
	enum <anonymous> kPMPaperTypeUnknown
	enum <anonymous> kPMPermissionError
	enum <anonymous> kPMPluginNotFound
	enum <anonymous> kPMPluginRegisterationFailed
	enum <anonymous> kPMPMSymbolNotFound
	enum <anonymous> kPMPortrait
	enum <anonymous> kPMPrBrowserNoUI
	enum <anonymous> kPMPrintAllPages
	enum <anonymous> kPMPrinterIdle
	enum <anonymous> kPMPrinterProcessing
	enum <anonymous> kPMPrinterStopped
	enum <anonymous> kPMQualityBest
	enum <anonymous> kPMQualityDraft
	enum <anonymous> kPMQualityHighest
	enum <anonymous> kPMQualityInkSaver
	enum <anonymous> kPMQualityLowest
	enum <anonymous> kPMQualityNormal
	enum <anonymous> kPMQualityPhoto
	enum <anonymous> kPMQueueAlreadyExists
	enum <anonymous> kPMQueueJobFailed
	enum <anonymous> kPMQueueNotFound
	enum <anonymous> kPMReadFailed
	enum <anonymous> kPMReadGotZeroData
	enum <anonymous> kPMReverseLandscape
	enum <anonymous> kPMReversePortrait
	enum <anonymous> kPMRGBColorSpaceModel
	enum <anonymous> kPMScalingCenterOnImgArea
	enum <anonymous> kPMScalingCenterOnPaper
	enum <anonymous> kPMScalingPinBottomLeft
	enum <anonymous> kPMScalingPinBottomRight
	enum <anonymous> kPMScalingPinTopLeft
	enum <anonymous> kPMScalingPinTopRight
	enum <anonymous> kPMServerAlreadyRunning
	enum <anonymous> kPMServerAttributeRestricted
	enum <anonymous> kPMServerCommunicationFailed
	enum <anonymous> kPMServerNotFound
	enum <anonymous> kPMServerSuspended
	enum <anonymous> kPMShowDefaultInlineItems
	enum <anonymous> kPMShowInlineCopies
	enum <anonymous> kPMShowInlineOrientation
	enum <anonymous> kPMShowInlinePageRange
	enum <anonymous> kPMShowInlinePageRangeWithSelection
	enum <anonymous> kPMShowInlinePaperSize
	enum <anonymous> kPMShowInlineScale
	enum <anonymous> kPMShowPageAttributesPDE
	enum <anonymous> kPMSimplexTumble
	enum <anonymous> kPMStatusFailed
	enum <anonymous> kPMStringConversionFailure
	enum <anonymous> kPMSubTicketNotFound
	enum <anonymous> kPMSyncRequestFailed
	enum <anonymous> kPMTemplateIsLocked
	enum <anonymous> kPMTicketIsLocked
	enum <anonymous> kPMTicketTypeNotFound
	enum <anonymous> kPMUnableToFindProcess
	enum <anonymous> kPMUnexpectedImagingError
	enum <anonymous> kPMUnknownColorSpaceModel
	enum <anonymous> kPMUnknownDataType
	enum <anonymous> kPMUnknownMessage
	enum <anonymous> kPMUnlocked
	enum <anonymous> kPMUnsupportedConnection
	enum <anonymous> kPMUpdateTicketFailed
	enum <anonymous> kPMUserOrGroupNotFound
	enum <anonymous> kPMValidateTicketFailed
	enum <anonymous> kPMValueOutOfRange
	enum <anonymous> kPMWriteFailed
	enum <anonymous> kPMXMLParseError
	enum <anonymous> kPolicyKCStopOn
	enum <anonymous> kPortKCItemAttr
	enum <anonymous> kPos2Offset
	enum <anonymous> kPOSIXErrorBase
	enum <anonymous> kPOSIXErrorE2BIG
	enum <anonymous> kPOSIXErrorEACCES
	enum <anonymous> kPOSIXErrorEADDRINUSE
	enum <anonymous> kPOSIXErrorEADDRNOTAVAIL
	enum <anonymous> kPOSIXErrorEAFNOSUPPORT
	enum <anonymous> kPOSIXErrorEAGAIN
	enum <anonymous> kPOSIXErrorEALREADY
	enum <anonymous> kPOSIXErrorEAUTH
	enum <anonymous> kPOSIXErrorEBADARCH
	enum <anonymous> kPOSIXErrorEBADEXEC
	enum <anonymous> kPOSIXErrorEBADF
	enum <anonymous> kPOSIXErrorEBADMACHO
	enum <anonymous> kPOSIXErrorEBADMSG
	enum <anonymous> kPOSIXErrorEBADRPC
	enum <anonymous> kPOSIXErrorEBUSY
	enum <anonymous> kPOSIXErrorECANCELED
	enum <anonymous> kPOSIXErrorECHILD
	enum <anonymous> kPOSIXErrorECONNABORTED
	enum <anonymous> kPOSIXErrorECONNREFUSED
	enum <anonymous> kPOSIXErrorECONNRESET
	enum <anonymous> kPOSIXErrorEDEADLK
	enum <anonymous> kPOSIXErrorEDESTADDRREQ
	enum <anonymous> kPOSIXErrorEDEVERR
	enum <anonymous> kPOSIXErrorEDOM
	enum <anonymous> kPOSIXErrorEDQUOT
	enum <anonymous> kPOSIXErrorEEXIST
	enum <anonymous> kPOSIXErrorEFAULT
	enum <anonymous> kPOSIXErrorEFBIG
	enum <anonymous> kPOSIXErrorEFTYPE
	enum <anonymous> kPOSIXErrorEHOSTDOWN
	enum <anonymous> kPOSIXErrorEHOSTUNREACH
	enum <anonymous> kPOSIXErrorEIDRM
	enum <anonymous> kPOSIXErrorEILSEQ
	enum <anonymous> kPOSIXErrorEINPROGRESS
	enum <anonymous> kPOSIXErrorEINTR
	enum <anonymous> kPOSIXErrorEINVAL
	enum <anonymous> kPOSIXErrorEIO
	enum <anonymous> kPOSIXErrorEISCONN
	enum <anonymous> kPOSIXErrorEISDIR
	enum <anonymous> kPOSIXErrorELOOP
	enum <anonymous> kPOSIXErrorEMFILE
	enum <anonymous> kPOSIXErrorEMLINK
	enum <anonymous> kPOSIXErrorEMSGSIZE
	enum <anonymous> kPOSIXErrorEMULTIHOP
	enum <anonymous> kPOSIXErrorENAMETOOLONG
	enum <anonymous> kPOSIXErrorENEEDAUTH
	enum <anonymous> kPOSIXErrorENETDOWN
	enum <anonymous> kPOSIXErrorENETRESET
	enum <anonymous> kPOSIXErrorENETUNREACH
	enum <anonymous> kPOSIXErrorENFILE
	enum <anonymous> kPOSIXErrorENOATTR
	enum <anonymous> kPOSIXErrorENOBUFS
	enum <anonymous> kPOSIXErrorENODATA
	enum <anonymous> kPOSIXErrorENODEV
	enum <anonymous> kPOSIXErrorENOENT
	enum <anonymous> kPOSIXErrorENOEXEC
	enum <anonymous> kPOSIXErrorENOLCK
	enum <anonymous> kPOSIXErrorENOLINK
	enum <anonymous> kPOSIXErrorENOMEM
	enum <anonymous> kPOSIXErrorENOMSG
	enum <anonymous> kPOSIXErrorENOPROTOOPT
	enum <anonymous> kPOSIXErrorENOSPC
	enum <anonymous> kPOSIXErrorENOSR
	enum <anonymous> kPOSIXErrorENOSTR
	enum <anonymous> kPOSIXErrorENOSYS
	enum <anonymous> kPOSIXErrorENOTBLK
	enum <anonymous> kPOSIXErrorENOTCONN
	enum <anonymous> kPOSIXErrorENOTDIR
	enum <anonymous> kPOSIXErrorENOTEMPTY
	enum <anonymous> kPOSIXErrorENOTSOCK
	enum <anonymous> kPOSIXErrorENOTSUP
	enum <anonymous> kPOSIXErrorENOTTY
	enum <anonymous> kPOSIXErrorENXIO
	enum <anonymous> kPOSIXErrorEOPNOTSUPP
	enum <anonymous> kPOSIXErrorEOVERFLOW
	enum <anonymous> kPOSIXErrorEPERM
	enum <anonymous> kPOSIXErrorEPFNOSUPPORT
	enum <anonymous> kPOSIXErrorEPIPE
	enum <anonymous> kPOSIXErrorEPROCLIM
	enum <anonymous> kPOSIXErrorEPROCUNAVAIL
	enum <anonymous> kPOSIXErrorEPROGMISMATCH
	enum <anonymous> kPOSIXErrorEPROGUNAVAIL
	enum <anonymous> kPOSIXErrorEPROTO
	enum <anonymous> kPOSIXErrorEPROTONOSUPPORT
	enum <anonymous> kPOSIXErrorEPROTOTYPE
	enum <anonymous> kPOSIXErrorEPWROFF
	enum <anonymous> kPOSIXErrorERANGE
	enum <anonymous> kPOSIXErrorEREMOTE
	enum <anonymous> kPOSIXErrorEROFS
	enum <anonymous> kPOSIXErrorERPCMISMATCH
	enum <anonymous> kPOSIXErrorESHLIBVERS
	enum <anonymous> kPOSIXErrorESHUTDOWN
	enum <anonymous> kPOSIXErrorESOCKTNOSUPPORT
	enum <anonymous> kPOSIXErrorESPIPE
	enum <anonymous> kPOSIXErrorESRCH
	enum <anonymous> kPOSIXErrorESTALE
	enum <anonymous> kPOSIXErrorETIME
	enum <anonymous> kPOSIXErrorETIMEDOUT
	enum <anonymous> kPOSIXErrorETOOMANYREFS
	enum <anonymous> kPOSIXErrorETXTBSY
	enum <anonymous> kPOSIXErrorEUSERS
	enum <anonymous> kPOSIXErrorEXDEV
	enum <anonymous> kPostCardEventErr
	enum <anonymous> kPowerHandlerExistsForDeviceErr
	enum <anonymous> kPowerHandlerNotFoundForDeviceErr
	enum <anonymous> kPowerHandlerNotFoundForProcErr
	enum <anonymous> kPowerMgtMessageNotHandled
	enum <anonymous> kPowerMgtRequestDenied
	enum <anonymous> kPowerPCISA
	enum <anonymous> kPowerPCRTA
	enum <anonymous> kPreemptiveThread
	enum <anonymous> kPreferencePanesFolderType
	enum <anonymous> kPreferencesFolderAliasType
	enum <anonymous> kPreferencesFolderIcon
	enum <anonymous> kPreferencesFolderIconResource
	enum <anonymous> kPreferencesFolderType
	enum <anonymous> kPreflightThenPause
	enum <anonymous> kPreMacOS91AppleExtrasFolderType
	enum <anonymous> kPreMacOS91ApplicationsFolderType
	enum <anonymous> kPreMacOS91AssistantsFolderType
	enum <anonymous> kPreMacOS91AutomountedServersFolderType
	enum <anonymous> kPreMacOS91InstallerLogsFolderType
	enum <anonymous> kPreMacOS91InternetFolderType
	enum <anonymous> kPreMacOS91MacOSReadMesFolderType
	enum <anonymous> kPreMacOS91StationeryFolderType
	enum <anonymous> kPreMacOS91UtilitiesFolderType
	enum <anonymous> kPreventOverlapOffSelector
	enum <anonymous> kPreventOverlapOnSelector
	enum <anonymous> kPreviousBody
	enum <anonymous> kPrinterDescriptionFolderIcon
	enum <anonymous> kPrinterDescriptionFolderType
	enum <anonymous> kPrinterDriverFolderIcon
	enum <anonymous> kPrinterDriverFolderType
	enum <anonymous> kPrintersFolderType
	enum <anonymous> kPrintingPlugInsFolderType
	enum <anonymous> kPrintMonitorDocsFolderAliasType
	enum <anonymous> kPrintMonitorDocsFolderType
	enum <anonymous> kPrintMonitorFolderIcon
	enum <anonymous> kPrintMonitorFolderIconResource
	enum <anonymous> kPrivateFolderIcon
	enum <anonymous> kPrivateFolderIconResource
	enum <anonymous> kPrivateFrameworksFolderType
	enum <anonymous> kPrivilegeViolationException
	enum <anonymous> kProcDescriptorIsAbsolute
	enum <anonymous> kProcDescriptorIsIndex
	enum <anonymous> kProcDescriptorIsProcPtr
	enum <anonymous> kProcDescriptorIsRelative
	enum <anonymous> kProcessDictionaryIncludeAllInformationMask
	enum <anonymous> kProcessorTempRoutineRequiresMPLib2
	enum <anonymous> kProcessTransformToBackgroundApplication
	enum <anonymous> kProcessTransformToForegroundApplication
	enum <anonymous> kProcessTransformToUIElementApplication
	enum <anonymous> kPROPALDirectionClass
	enum <anonymous> kPROPANDirectionClass
	enum <anonymous> kPROPBNDirectionClass
	enum <anonymous> kPROPCanHangLTMask
	enum <anonymous> kPROPCanHangRBMask
	enum <anonymous> kPROPCSDirectionClass
	enum <anonymous> kPROPCurrentVersion
	enum <anonymous> kPROPDirectionMask
	enum <anonymous> kPROPENDirectionClass
	enum <anonymous> kPROPESDirectionClass
	enum <anonymous> kPROPETDirectionClass
	enum <anonymous> kPROPIsFloaterMask
	enum <anonymous> kPROPLDirectionClass
	enum <anonymous> kPROPLREDirectionClass
	enum <anonymous> kPROPLRODirectionClass
	enum <anonymous> kPROPNSMDirectionClass
	enum <anonymous> kPROPNumDirectionClasses
	enum <anonymous> kPROPONDirectionClass
	enum <anonymous> kProportionalCJKRomanSelector
	enum <anonymous> kProportionalIdeographsSelector
	enum <anonymous> kProportionalKanaSelector
	enum <anonymous> kProportionalNumbersSelector
	enum <anonymous> kProportionalTextSelector
	enum <anonymous> kPROPPairOffsetMask
	enum <anonymous> kPROPPairOffsetShift
	enum <anonymous> kPROPPairOffsetSign
	enum <anonymous> kPROPPDFDirectionClass
	enum <anonymous> kPROPPSDirectionClass
	enum <anonymous> kPROPRDirectionClass
	enum <anonymous> kPROPRightConnectMask
	enum <anonymous> kPROPRLEDirectionClass
	enum <anonymous> kPROPRLODirectionClass
	enum <anonymous> kPROPSDirectionClass
	enum <anonymous> kPROPSENDirectionClass
	enum <anonymous> kPROPTag
	enum <anonymous> kPROPUseRLPairMask
	enum <anonymous> kPROPWSDirectionClass
	enum <anonymous> kPROPZeroReserved
	enum <anonymous> kProtectedApplicationFolderIcon
	enum <anonymous> kProtectedSystemFolderIcon
	enum <anonymous> kProtocolKCItemAttr
	enum <anonymous> kPublicFolderIcon
	enum <anonymous> kPublicFolderType
	enum <anonymous> kPublicKeyHashKCItemAttr
	enum <anonymous> kQDCorruptPICTDataErr
	enum <anonymous> kQDCursorAlreadyRegistered
	enum <anonymous> kQDCursorNotRegistered
	enum <anonymous> kQDNoColorHWCursorSupport
	enum <anonymous> kQDNoPalette
	enum <anonymous> kQTSSUnknownErr
	enum <anonymous> kQuarterWidthNumbersSelector
	enum <anonymous> kQuarterWidthTextSelector
	enum <anonymous> kQuestionMarkIcon
	enum <anonymous> kQuickLookFolderType
	enum <anonymous> kQuickTimeComponentsFolderType
	enum <anonymous> kQuickTimeExtensionsFolderType
	enum <anonymous> kQuitAtNormalTimeMask
	enum <anonymous> kQuitBeforeFBAsQuitMask
	enum <anonymous> kQuitBeforeNormalTimeMask
	enum <anonymous> kQuitBeforeShellQuitsMask
	enum <anonymous> kQuitBeforeTerminatorAppQuitsMask
	enum <anonymous> kQuitNeverMask
	enum <anonymous> kQuitNotQuitDuringInstallMask
	enum <anonymous> kQuitNotQuitDuringLogoutMask
	enum <anonymous> kQuitOptionsMask
	enum <anonymous> kRAATalkInactive
	enum <anonymous> kRACallBackFailed
	enum <anonymous> kRAConfigurationDBInitErr
	enum <anonymous> kRAConnectionCanceled
	enum <anonymous> kRADuplicateIPAddr
	enum <anonymous> kRAExtAuthenticationFailed
	enum <anonymous> kRAIncompatiblePrefs
	enum <anonymous> kRAInitOpenTransportFailed
	enum <anonymous> kRAInstallationDamaged
	enum <anonymous> kRAInternalError
	enum <anonymous> kRAInvalidParameter
	enum <anonymous> kRAInvalidPassword
	enum <anonymous> kRAInvalidPort
	enum <anonymous> kRAInvalidPortState
	enum <anonymous> kRAInvalidSerialProtocol
	enum <anonymous> kRAMissingResources
	enum <anonymous> kRANCPRejectedbyPeer
	enum <anonymous> kRANotConnected
	enum <anonymous> kRANotEnabled
	enum <anonymous> kRANotPrimaryInterface
	enum <anonymous> kRANotSupported
	enum <anonymous> kRAOutOfMemory
	enum <anonymous> kRAPeerNotResponding
	enum <anonymous> kRAPortBusy
	enum <anonymous> kRAPortSetupFailed
	enum <anonymous> kRAPPPAuthenticationFailed
	enum <anonymous> kRAPPPNegotiationFailed
	enum <anonymous> kRAPPPPeerDisconnected
	enum <anonymous> kRAPPPProtocolRejected
	enum <anonymous> kRAPPPUserDisconnected
	enum <anonymous> kRareLigaturesOffSelector
	enum <anonymous> kRareLigaturesOnSelector
	enum <anonymous> kRARemoteAccessNotReady
	enum <anonymous> kRAStartupFailed
	enum <anonymous> kRATCPIPInactive
	enum <anonymous> kRATCPIPNotConfigured
	enum <anonymous> kRAUnknownPortState
	enum <anonymous> kRAUnknownUser
	enum <anonymous> kRAUserInteractionRequired
	enum <anonymous> kRAUserLoginDisabled
	enum <anonymous> kRAUserPwdChangeRequired
	enum <anonymous> kRAUserPwdEntryRequired
	enum <anonymous> kRdPermKCStatus
	enum <anonymous> kReadExtensionTermsMask
	enum <anonymous> kReadFailureErr
	enum <anonymous> kReadOnlyMemoryException
	enum <anonymous> kReadReference
	enum <anonymous> kReadyThreadState
	enum <anonymous> kRebusPicturesOffSelector
	enum <anonymous> kRebusPicturesOnSelector
	enum <anonymous> kRecentApplicationsFolderIcon
	enum <anonymous> kRecentApplicationsFolderType
	enum <anonymous> kRecentDocumentsFolderIcon
	enum <anonymous> kRecentDocumentsFolderType
	enum <anonymous> kRecentItemsIcon
	enum <anonymous> kRecentServersFolderIcon
	enum <anonymous> kRecentServersFolderType
	enum <anonymous> kRedirectedRelativeFolder
	enum <anonymous> kRedrawHighlighting
	enum <anonymous> kRegisterA0
	enum <anonymous> kRegisterA1
	enum <anonymous> kRegisterA2
	enum <anonymous> kRegisterA3
	enum <anonymous> kRegisterA4
	enum <anonymous> kRegisterA5
	enum <anonymous> kRegisterA6
	enum <anonymous> kRegisterBased
	enum <anonymous> kRegisterD0
	enum <anonymous> kRegisterD1
	enum <anonymous> kRegisterD2
	enum <anonymous> kRegisterD3
	enum <anonymous> kRegisterD4
	enum <anonymous> kRegisterD5
	enum <anonymous> kRegisterD6
	enum <anonymous> kRegisterD7
	enum <anonymous> kRegisterParameterMask
	enum <anonymous> kRegisterParameterPhase
	enum <anonymous> kRegisterParameterSizePhase
	enum <anonymous> kRegisterParameterSizeWidth
	enum <anonymous> kRegisterParameterWhichPhase
	enum <anonymous> kRegisterParameterWhichWidth
	enum <anonymous> kRegisterParameterWidth
	enum <anonymous> kRegisterResultLocationPhase
	enum <anonymous> kRegisterResultLocationWidth
	enum <anonymous> kRelativeFolder
	enum <anonymous> kRequiredLigaturesOffSelector
	enum <anonymous> kRequiredLigaturesOnSelector
	enum <anonymous> kResFileNotOpened
	enum <anonymous> kResolveAliasFileNoUI
	enum <anonymous> kResolveAliasTryFileIDFirst
	enum <anonymous> kResultSizeMask
	enum <anonymous> kResultSizePhase
	enum <anonymous> kResultSizeWidth
	enum <anonymous> kReturnNextGroup
	enum <anonymous> kReturnNextUG
	enum <anonymous> kReturnNextUser
	enum <anonymous> kRightContainerArrowIcon
	enum <anonymous> kRightToLeft
	enum <anonymous> kRolloverIconVariant
	enum <anonymous> kRomanizationToHiraganaSelector
	enum <anonymous> kRomanizationToKatakanaSelector
	enum <anonymous> kRomanNumeralAnnotationSelector
	enum <anonymous> kRootFolder
	enum <anonymous> kRoundedBoxAnnotationSelector
	enum <anonymous> kRoutineDescriptorVersion
	enum <anonymous> kRoutineIsDispatchedDefaultRoutine
	enum <anonymous> kRoutineIsNotDispatchedDefaultRoutine
	enum <anonymous> kRoutingResourceID
	enum <anonymous> kRoutingResourceType
	enum <anonymous> kRsrcChainAboveAllMaps
	enum <anonymous> kRsrcChainAboveApplicationMap
	enum <anonymous> kRsrcChainBelowApplicationMap
	enum <anonymous> kRsrcChainBelowSystemMap
	enum <anonymous> kRubyKanaOffSelector
	enum <anonymous> kRubyKanaOnSelector
	enum <anonymous> kRubyKanaSelector
	enum <anonymous> kRubyKanaType
	enum <anonymous> kRunningThreadState
	enum <anonymous> kScientificInferiorsSelector
	enum <anonymous> kScreenSaversFolderType
	enum <anonymous> kScriptCodeKCItemAttr
	enum <anonymous> kScriptingAdditionsFolderIcon
	enum <anonymous> kScriptingAdditionsFolderType
	enum <anonymous> kScriptsFolderIcon
	enum <anonymous> kScriptsFolderType
	enum <anonymous> kSec3DES192
	enum <anonymous> kSecAccountItemAttr
	CFTypeRef kSecACLAuthorizationAny
	CFTypeRef kSecACLAuthorizationChangeACL
	CFTypeRef kSecACLAuthorizationChangeOwner
	CFTypeRef kSecACLAuthorizationDecrypt
	CFTypeRef kSecACLAuthorizationDelete
	CFTypeRef kSecACLAuthorizationDerive
	CFTypeRef kSecACLAuthorizationEncrypt
	CFTypeRef kSecACLAuthorizationExportClear
	CFTypeRef kSecACLAuthorizationExportWrapped
	CFTypeRef kSecACLAuthorizationGenKey
	CFTypeRef kSecACLAuthorizationImportClear
	CFTypeRef kSecACLAuthorizationImportWrapped
	CFTypeRef kSecACLAuthorizationKeychainCreate
	CFTypeRef kSecACLAuthorizationKeychainDelete
	CFTypeRef kSecACLAuthorizationKeychainItemDelete
	CFTypeRef kSecACLAuthorizationKeychainItemInsert
	CFTypeRef kSecACLAuthorizationKeychainItemModify
	CFTypeRef kSecACLAuthorizationKeychainItemRead
	CFTypeRef kSecACLAuthorizationLogin
	CFTypeRef kSecACLAuthorizationMAC
	CFTypeRef kSecACLAuthorizationSign
	enum <anonymous> kSecAddEvent
	enum <anonymous> kSecAddEventMask
	enum <anonymous> kSecAddressItemAttr
	enum <anonymous> kSecAES128
	enum <anonymous> kSecAES192
	enum <anonymous> kSecAES256
	enum <anonymous> kSecAlias
	enum <anonymous> kSecAppleSharePasswordItemClass
	const CFTypeRef kSecAttrAccess
	const CFTypeRef kSecAttrAccount
	const CFTypeRef kSecAttrApplicationLabel
	const CFTypeRef kSecAttrApplicationTag
	const CFTypeRef kSecAttrAuthenticationType
	const CFTypeRef kSecAttrAuthenticationTypeDefault
	const CFTypeRef kSecAttrAuthenticationTypeDPA
	const CFTypeRef kSecAttrAuthenticationTypeHTMLForm
	const CFTypeRef kSecAttrAuthenticationTypeHTTPBasic
	const CFTypeRef kSecAttrAuthenticationTypeHTTPDigest
	const CFTypeRef kSecAttrAuthenticationTypeMSN
	const CFTypeRef kSecAttrAuthenticationTypeNTLM
	const CFTypeRef kSecAttrAuthenticationTypeRPA
	const CFTypeRef kSecAttrCanDecrypt
	const CFTypeRef kSecAttrCanDerive
	const CFTypeRef kSecAttrCanEncrypt
	const CFTypeRef kSecAttrCanSign
	const CFTypeRef kSecAttrCanUnwrap
	const CFTypeRef kSecAttrCanVerify
	const CFTypeRef kSecAttrCanWrap
	const CFTypeRef kSecAttrCertificateEncoding
	const CFTypeRef kSecAttrCertificateType
	const CFTypeRef kSecAttrComment
	const CFTypeRef kSecAttrCreationDate
	const CFTypeRef kSecAttrCreator
	const CFTypeRef kSecAttrDescription
	const CFTypeRef kSecAttrEffectiveKeySize
	const CFTypeRef kSecAttrGeneric
	const CFTypeRef kSecAttrIsInvisible
	const CFTypeRef kSecAttrIsNegative
	const CFTypeRef kSecAttrIsPermanent
	const CFTypeRef kSecAttrIssuer
	const CFTypeRef kSecAttrKeyClass
	const CFTypeRef kSecAttrKeyClassPrivate
	const CFTypeRef kSecAttrKeyClassPublic
	const CFTypeRef kSecAttrKeyClassSymmetric
	const CFTypeRef kSecAttrKeySizeInBits
	const CFTypeRef kSecAttrKeyType
	const CFTypeRef kSecAttrKeyType3DES
	const CFTypeRef kSecAttrKeyTypeAES
	const CFTypeRef kSecAttrKeyTypeCAST
	const CFTypeRef kSecAttrKeyTypeDES
	const CFTypeRef kSecAttrKeyTypeDSA
	const CFTypeRef kSecAttrKeyTypeECDSA
	const CFTypeRef kSecAttrKeyTypeRC2
	const CFTypeRef kSecAttrKeyTypeRC4
	const CFTypeRef kSecAttrKeyTypeRSA
	const CFTypeRef kSecAttrLabel
	const CFTypeRef kSecAttrModificationDate
	const CFTypeRef kSecAttrPath
	const CFTypeRef kSecAttrPort
	const CFTypeRef kSecAttrPRF
	const CFTypeRef kSecAttrPRFHmacAlgSHA1
	const CFTypeRef kSecAttrPRFHmacAlgSHA224
	const CFTypeRef kSecAttrPRFHmacAlgSHA256
	const CFTypeRef kSecAttrPRFHmacAlgSHA384
	const CFTypeRef kSecAttrPRFHmacAlgSHA512
	const CFTypeRef kSecAttrProtocol
	const CFTypeRef kSecAttrProtocolAFP
	const CFTypeRef kSecAttrProtocolAppleTalk
	const CFTypeRef kSecAttrProtocolDAAP
	const CFTypeRef kSecAttrProtocolEPPC
	const CFTypeRef kSecAttrProtocolFTP
	const CFTypeRef kSecAttrProtocolFTPAccount
	const CFTypeRef kSecAttrProtocolFTPProxy
	const CFTypeRef kSecAttrProtocolFTPS
	const CFTypeRef kSecAttrProtocolHTTP
	const CFTypeRef kSecAttrProtocolHTTPProxy
	const CFTypeRef kSecAttrProtocolHTTPS
	const CFTypeRef kSecAttrProtocolHTTPSProxy
	const CFTypeRef kSecAttrProtocolIMAP
	const CFTypeRef kSecAttrProtocolIMAPS
	const CFTypeRef kSecAttrProtocolIPP
	const CFTypeRef kSecAttrProtocolIRC
	const CFTypeRef kSecAttrProtocolIRCS
	const CFTypeRef kSecAttrProtocolLDAP
	const CFTypeRef kSecAttrProtocolLDAPS
	const CFTypeRef kSecAttrProtocolNNTP
	const CFTypeRef kSecAttrProtocolNNTPS
	const CFTypeRef kSecAttrProtocolPOP3
	const CFTypeRef kSecAttrProtocolPOP3S
	const CFTypeRef kSecAttrProtocolRTSP
	const CFTypeRef kSecAttrProtocolRTSPProxy
	const CFTypeRef kSecAttrProtocolSMB
	const CFTypeRef kSecAttrProtocolSMTP
	const CFTypeRef kSecAttrProtocolSOCKS
	const CFTypeRef kSecAttrProtocolSSH
	const CFTypeRef kSecAttrProtocolTelnet
	const CFTypeRef kSecAttrProtocolTelnetS
	const CFTypeRef kSecAttrPublicKeyHash
	const CFTypeRef kSecAttrRounds
	const CFTypeRef kSecAttrSalt
	const CFTypeRef kSecAttrSecurityDomain
	const CFTypeRef kSecAttrSerialNumber
	const CFTypeRef kSecAttrServer
	const CFTypeRef kSecAttrService
	const CFTypeRef kSecAttrSubject
	const CFTypeRef kSecAttrSubjectKeyID
	const CFTypeRef kSecAttrType
	enum <anonymous> kSecAuthenticationTypeAny
	enum <anonymous> kSecAuthenticationTypeDefault
	enum <anonymous> kSecAuthenticationTypeDPA
	enum <anonymous> kSecAuthenticationTypeHTMLForm
	enum <anonymous> kSecAuthenticationTypeHTTPBasic
	enum <anonymous> kSecAuthenticationTypeHTTPDigest
	enum <anonymous> kSecAuthenticationTypeItemAttr
	enum <anonymous> kSecAuthenticationTypeMSN
	enum <anonymous> kSecAuthenticationTypeNTLM
	enum <anonymous> kSecAuthenticationTypeRPA
	const CFStringRef kSecBase32Encoding
	const CFStringRef kSecBase64Encoding
	enum <anonymous> kSecCertEncodingItemAttr
	enum <anonymous> kSecCertificateEncoding
	enum <anonymous> kSecCertificateItemClass
	enum <anonymous> kSecCertificateType
	const CFStringRef kSecCertificateUsageDeriveAndSign
	const CFStringRef kSecCertificateUsageSigning
	const CFStringRef kSecCertificateUsageSigningAndEncrypting
	enum <anonymous> kSecCertTypeItemAttr
	const CFStringRef kSecCFErrorArchitecture
	const CFStringRef kSecCFErrorGuestAttributes
	const CFStringRef kSecCFErrorInfoPlist
	const CFStringRef kSecCFErrorPath
	const CFStringRef kSecCFErrorPattern
	const CFStringRef kSecCFErrorRequirementSyntax
	const CFStringRef kSecCFErrorResourceAdded
	const CFStringRef kSecCFErrorResourceAltered
	const CFStringRef kSecCFErrorResourceMissing
	const CFStringRef kSecCFErrorResourceSeal
	const CFTypeRef kSecClass
	const CFTypeRef kSecClassCertificate
	const CFTypeRef kSecClassGenericPassword
	const CFTypeRef kSecClassIdentity
	const CFTypeRef kSecClassInternetPassword
	const CFTypeRef kSecClassKey
	const CFStringRef kSecCodeAttributeArchitecture
	const CFStringRef kSecCodeAttributeBundleVersion
	const CFStringRef kSecCodeAttributeSubarchitecture
	const CFStringRef kSecCodeInfoCertificates
	const CFStringRef kSecCodeInfoChangedFiles
	const CFStringRef kSecCodeInfoCMS
	const CFStringRef kSecCodeInfoDesignatedRequirement
	const CFStringRef kSecCodeInfoDigestAlgorithm
	const CFStringRef kSecCodeInfoEntitlements
	const CFStringRef kSecCodeInfoEntitlementsDict
	const CFStringRef kSecCodeInfoFormat
	const CFStringRef kSecCodeInfoIdentifier
	const CFStringRef kSecCodeInfoImplicitDesignatedRequirement
	const CFStringRef kSecCodeInfoMainExecutable
	const CFStringRef kSecCodeInfoPList
	const CFStringRef kSecCodeInfoRequirementData
	const CFStringRef kSecCodeInfoRequirements
	const CFStringRef kSecCodeInfoSource
	const CFStringRef kSecCodeInfoStatus
	const CFStringRef kSecCodeInfoTime
	const CFStringRef kSecCodeInfoTimestamp
	const CFStringRef kSecCodeInfoTrust
	const CFStringRef kSecCodeInfoUnique
	enum <anonymous> kSecCodeSignatureAdhoc
	enum <anonymous> kSecCodeSignatureForceExpiration
	enum <anonymous> kSecCodeSignatureForceHard
	enum <anonymous> kSecCodeSignatureForceKill
	enum <anonymous> kSecCodeSignatureHost
	const CFStringRef kSecCodeSignerFlags
	enum <anonymous> kSecCodeStatusHard
	enum <anonymous> kSecCodeStatusKill
	enum <anonymous> kSecCodeStatusValid
	enum <anonymous> kSecCommentItemAttr
	const CFStringRef kSecCompressionRatio
	enum <anonymous> kSecCreationDateItemAttr
	enum <anonymous> kSecCreatorItemAttr
	enum <anonymous> kSecCredentialTypeDefault
	enum <anonymous> kSecCredentialTypeNoUI
	enum <anonymous> kSecCredentialTypeWithUI
	enum <anonymous> kSecCrlEncoding
	enum <anonymous> kSecCrlType
	enum <anonymous> kSecCSBasicValidateOnly
	enum <anonymous> kSecCSCheckAllArchitectures
	enum <anonymous> kSecCSCheckNestedCode
	enum <anonymous> kSecCSConsiderExpiration
	enum <anonymous> kSecCSContentInformation
	enum <anonymous> kSecCSDedicatedHost
	enum <anonymous> kSecCSDefaultFlags
	enum <anonymous> kSecCSDoNotValidateExecutable
	enum <anonymous> kSecCSDoNotValidateResources
	enum <anonymous> kSecCSDynamicInformation
	enum <anonymous> kSecCSEnforceRevocationChecks
	enum <anonymous> kSecCSGenerateGuestHash
	enum <anonymous> kSecCSInternalInformation
	enum <anonymous> kSecCSRequirementInformation
	enum <anonymous> kSecCSSigningInformation
	enum <anonymous> kSecCustomIconItemAttr
	enum <anonymous> kSecDataAccessEvent
	enum <anonymous> kSecDataAccessEventMask
	const CFStringRef kSecDecodeTypeAttribute
	enum <anonymous> kSecDefaultChangedEvent
	enum <anonymous> kSecDefaultChangedEventMask
	enum <anonymous> kSecDefaultKeySize
	enum <anonymous> kSecDeleteEvent
	enum <anonymous> kSecDeleteEventMask
	enum <anonymous> kSecDescriptionItemAttr
	enum <anonymous> kSecDesignatedRequirementType
	const CFStringRef kSecDigestHMACKeyAttribute
	const CFStringRef kSecDigestHMACMD5
	const CFStringRef kSecDigestHMACSHA1
	const CFStringRef kSecDigestHMACSHA2
	const CFStringRef kSecDigestLengthAttribute
	const CFStringRef kSecDigestMD2
	const CFStringRef kSecDigestMD4
	const CFStringRef kSecDigestMD5
	const CFStringRef kSecDigestSHA1
	const CFStringRef kSecDigestSHA2
	const CFStringRef kSecDigestTypeAttribute
	const CFStringRef kSecEncodeLineLengthAttribute
	const CFStringRef kSecEncodeTypeAttribute
	CFStringRef kSecEncryptionMode
	CFStringRef kSecEncryptKey
	enum <anonymous> kSecEveryEventMask
	enum <anonymous> kSecFormatBSAFE
	enum <anonymous> kSecFormatNetscapeCertSequence
	enum <anonymous> kSecFormatOpenSSL
	enum <anonymous> kSecFormatPEMSequence
	enum <anonymous> kSecFormatPKCS12
	enum <anonymous> kSecFormatPKCS7
	enum <anonymous> kSecFormatRawKey
	enum <anonymous> kSecFormatSSH
	enum <anonymous> kSecFormatSSHv2
	enum <anonymous> kSecFormatUnknown
	enum <anonymous> kSecFormatWrappedLSH
	enum <anonymous> kSecFormatWrappedOpenSSL
	enum <anonymous> kSecFormatWrappedPKCS8
	enum <anonymous> kSecFormatWrappedSSH
	enum <anonymous> kSecFormatX509Cert
	enum <anonymous> kSecGenericItemAttr
	enum <anonymous> kSecGenericPasswordItemClass
	const CFStringRef kSecGuestAttributeArchitecture
	const CFStringRef kSecGuestAttributeCanonical
	const CFStringRef kSecGuestAttributeHash
	const CFStringRef kSecGuestAttributeMachPort
	const CFStringRef kSecGuestAttributePid
	const CFStringRef kSecGuestAttributeSubarchitecture
	enum <anonymous> kSecGuestRequirementType
	enum <anonymous> kSecHonorRoot
	enum <anonymous> kSecHostRequirementType
	const CFStringRef kSecIdentityDomainDefault
	const CFStringRef kSecIdentityDomainKerberosKDC
	CFStringRef kSecImportExportAccess
	CFStringRef kSecImportExportKeychain
	CFStringRef kSecImportExportPassphrase
	CFStringRef kSecImportItemCertChain
	CFStringRef kSecImportItemIdentity
	CFStringRef kSecImportItemKeyID
	CFStringRef kSecImportItemLabel
	CFStringRef kSecImportItemTrust
	CFStringRef kSecInputIsAttributeName
	CFStringRef kSecInputIsDigest
	CFStringRef kSecInputIsPlainText
	CFStringRef kSecInputIsRaw
	enum <anonymous> kSecInternetPasswordItemClass
	enum <anonymous> kSecInvalidRequirementType
	enum <anonymous> kSecInvisibleItemAttr
	enum <anonymous> kSecIssuerItemAttr
	enum <anonymous> kSecItemPemArmour
	enum <anonymous> kSecItemTypeAggregate
	enum <anonymous> kSecItemTypeCertificate
	enum <anonymous> kSecItemTypePrivateKey
	enum <anonymous> kSecItemTypePublicKey
	enum <anonymous> kSecItemTypeSessionKey
	enum <anonymous> kSecItemTypeUnknown
	CFStringRef kSecIVKey
	enum <anonymous> kSecKeyAlias
	enum <anonymous> kSecKeyAlwaysSensitive
	enum <anonymous> kSecKeyApplicationTag
	CFStringRef kSecKeyAttributeName
	enum <anonymous> kSecKeychainListChangedEvent
	enum <anonymous> kSecKeychainListChangedMask
	enum <anonymous> kSecKeychainPromptInvalid
	enum <anonymous> kSecKeychainPromptInvalidAct
	enum <anonymous> kSecKeychainPromptRequirePassphase
	enum <anonymous> kSecKeychainPromptUnsigned
	enum <anonymous> kSecKeychainPromptUnsignedAct
	enum <anonymous> kSecKeyDecrypt
	enum <anonymous> kSecKeyDerive
	enum <anonymous> kSecKeyEffectiveKeySize
	enum <anonymous> kSecKeyEncrypt
	enum <anonymous> kSecKeyEndDate
	enum <anonymous> kSecKeyExtractable
	enum <anonymous> kSecKeyImportOnlyOne
	enum <anonymous> kSecKeyKeyClass
	enum <anonymous> kSecKeyKeyCreator
	enum <anonymous> kSecKeyKeySizeInBits
	enum <anonymous> kSecKeyKeyType
	enum <anonymous> kSecKeyLabel
	enum <anonymous> kSecKeyModifiable
	enum <anonymous> kSecKeyNeverExtractable
	enum <anonymous> kSecKeyNoAccessControl
	enum <anonymous> kSecKeyPermanent
	enum <anonymous> kSecKeyPrintName
	enum <anonymous> kSecKeyPrivate
	enum <anonymous> kSecKeySecurePassphrase
	enum <anonymous> kSecKeySensitive
	enum <anonymous> kSecKeySign
	enum <anonymous> kSecKeySignRecover
	enum <anonymous> kSecKeyStartDate
	enum <anonymous> kSecKeyUnwrap
	enum <anonymous> kSecKeyVerify
	enum <anonymous> kSecKeyVerifyRecover
	enum <anonymous> kSecKeyWrap
	enum <anonymous> kSecLabelItemAttr
	enum <anonymous> kSecLibraryRequirementType
	const CFStringRef kSecLineLength64
	const CFStringRef kSecLineLength76
	enum <anonymous> kSecLockEvent
	enum <anonymous> kSecLockEventMask
	enum <anonymous> kSecMatchBits
	const CFTypeRef kSecMatchCaseInsensitive
	const CFTypeRef kSecMatchDiacriticInsensitive
	const CFTypeRef kSecMatchEmailAddressIfPresent
	const CFTypeRef kSecMatchIssuers
	const CFTypeRef kSecMatchItemList
	const CFTypeRef kSecMatchLimit
	const CFTypeRef kSecMatchLimitAll
	const CFTypeRef kSecMatchLimitOne
	const CFTypeRef kSecMatchPolicy
	const CFTypeRef kSecMatchSearchList
	const CFTypeRef kSecMatchSubjectContains
	const CFTypeRef kSecMatchSubjectEndsWith
	const CFTypeRef kSecMatchSubjectStartsWith
	const CFTypeRef kSecMatchSubjectWholeString
	const CFTypeRef kSecMatchTrustedOnly
	const CFTypeRef kSecMatchValidOnDate
	const CFTypeRef kSecMatchWidthInsensitive
	enum <anonymous> kSecModDateItemAttr
	CFStringRef kSecModeCBCKey
	CFStringRef kSecModeCFBKey
	CFStringRef kSecModeECBKey
	CFStringRef kSecModeNoneKey
	CFStringRef kSecModeOFBKey
	enum <anonymous> kSecNegativeItemAttr
	enum <anonymous> kSecNoGuest
	CFStringRef kSecOAEPEncodingParametersAttributeName
	CFStringRef kSecOAEPMessageLengthAttributeName
	CFStringRef kSecOAEPMGF1DigestAlgorithmAttributeName
	CFTypeRef kSecOIDADC_CERT_POLICY
	CFTypeRef kSecOIDAPPLE_CERT_POLICY
	CFTypeRef kSecOIDAPPLE_EKU_CODE_SIGNING
	CFTypeRef kSecOIDAPPLE_EKU_CODE_SIGNING_DEV
	CFTypeRef kSecOIDAPPLE_EKU_ICHAT_ENCRYPTION
	CFTypeRef kSecOIDAPPLE_EKU_ICHAT_SIGNING
	CFTypeRef kSecOIDAPPLE_EKU_RESOURCE_SIGNING
	CFTypeRef kSecOIDAPPLE_EKU_SYSTEM_IDENTITY
	CFTypeRef kSecOIDAPPLE_EXTENSION
	CFTypeRef kSecOIDAPPLE_EXTENSION_AAI_INTERMEDIATE
	CFTypeRef kSecOIDAPPLE_EXTENSION_ADC_APPLE_SIGNING
	CFTypeRef kSecOIDAPPLE_EXTENSION_ADC_DEV_SIGNING
	CFTypeRef kSecOIDAPPLE_EXTENSION_APPLE_SIGNING
	CFTypeRef kSecOIDAPPLE_EXTENSION_APPLEID_INTERMEDIATE
	CFTypeRef kSecOIDAPPLE_EXTENSION_CODE_SIGNING
	CFTypeRef kSecOIDAPPLE_EXTENSION_INTERMEDIATE_MARKER
	CFTypeRef kSecOIDAPPLE_EXTENSION_ITMS_INTERMEDIATE
	CFTypeRef kSecOIDAPPLE_EXTENSION_WWDR_INTERMEDIATE
	CFTypeRef kSecOIDAuthorityInfoAccess
	CFTypeRef kSecOIDAuthorityKeyIdentifier
	CFTypeRef kSecOIDBasicConstraints
	CFTypeRef kSecOIDBiometricInfo
	CFTypeRef kSecOIDCertificatePolicies
	CFTypeRef kSecOIDCertIssuer
	CFTypeRef kSecOIDClientAuth
	CFTypeRef kSecOIDCollectiveStateProvinceName
	CFTypeRef kSecOIDCollectiveStreetAddress
	CFTypeRef kSecOIDCommonName
	CFTypeRef kSecOIDCountryName
	CFTypeRef kSecOIDCrlDistributionPoints
	CFTypeRef kSecOIDCrlNumber
	CFTypeRef kSecOIDCrlReason
	CFTypeRef kSecOIDCSSMKeyStruct
	CFTypeRef kSecOIDDeltaCrlIndicator
	CFTypeRef kSecOIDDescription
	CFTypeRef kSecOIDDOTMAC_CERT_EMAIL_ENCRYPT
	CFTypeRef kSecOIDDOTMAC_CERT_EMAIL_SIGN
	CFTypeRef kSecOIDDOTMAC_CERT_EXTENSION
	CFTypeRef kSecOIDDOTMAC_CERT_IDENTITY
	CFTypeRef kSecOIDDOTMAC_CERT_POLICY
	CFTypeRef kSecOIDEKU_IPSec
	CFTypeRef kSecOIDEmailAddress
	CFTypeRef kSecOIDEmailProtection
	CFTypeRef kSecOIDExtendedKeyUsage
	CFTypeRef kSecOIDExtendedKeyUsageAny
	CFTypeRef kSecOIDExtendedUseCodeSigning
	CFTypeRef kSecOIDGivenName
	CFTypeRef kSecOIDHoldInstructionCode
	CFTypeRef kSecOIDInvalidityDate
	CFTypeRef kSecOIDIssuerAltName
	CFTypeRef kSecOIDIssuingDistributionPoint
	CFTypeRef kSecOIDIssuingDistributionPoints
	CFTypeRef kSecOIDKERBv5_PKINIT_KP_CLIENT_AUTH
	CFTypeRef kSecOIDKERBv5_PKINIT_KP_KDC
	CFTypeRef kSecOIDKeyUsage
	CFTypeRef kSecOIDLocalityName
	CFTypeRef kSecOIDMicrosoftSGC
	CFTypeRef kSecOIDMS_NTPrincipalName
	CFTypeRef kSecOIDNameConstraints
	CFTypeRef kSecOIDNetscapeCertSequence
	CFTypeRef kSecOIDNetscapeCertType
	CFTypeRef kSecOIDNetscapeSGC
	CFTypeRef kSecOIDOCSPSigning
	CFTypeRef kSecOIDOrganizationalUnitName
	CFTypeRef kSecOIDOrganizationName
	CFTypeRef kSecOIDPolicyConstraints
	CFTypeRef kSecOIDPolicyMappings
	CFTypeRef kSecOIDPrivateKeyUsagePeriod
	CFTypeRef kSecOIDQC_Statements
	CFTypeRef kSecOIDSerialNumber
	CFTypeRef kSecOIDServerAuth
	CFTypeRef kSecOIDSRVName
	CFTypeRef kSecOIDStateProvinceName
	CFTypeRef kSecOIDStreetAddress
	CFTypeRef kSecOIDSubjectAltName
	CFTypeRef kSecOIDSubjectDirectoryAttributes
	CFTypeRef kSecOIDSubjectEmailAddress
	CFTypeRef kSecOIDSubjectInfoAccess
	CFTypeRef kSecOIDSubjectKeyIdentifier
	CFTypeRef kSecOIDSubjectPicture
	CFTypeRef kSecOIDSubjectSignatureBitmap
	CFTypeRef kSecOIDSurname
	CFTypeRef kSecOIDTimeStamping
	CFTypeRef kSecOIDTitle
	CFTypeRef kSecOIDUseExemptions
	CFTypeRef kSecOIDX509V1CertificateIssuerUniqueId
	CFTypeRef kSecOIDX509V1CertificateSubjectUniqueId
	CFTypeRef kSecOIDX509V1IssuerName
	CFTypeRef kSecOIDX509V1IssuerNameCStruct
	CFTypeRef kSecOIDX509V1IssuerNameLDAP
	CFTypeRef kSecOIDX509V1IssuerNameStd
	CFTypeRef kSecOIDX509V1SerialNumber
	CFTypeRef kSecOIDX509V1Signature
	CFTypeRef kSecOIDX509V1SignatureAlgorithm
	CFTypeRef kSecOIDX509V1SignatureAlgorithmParameters
	CFTypeRef kSecOIDX509V1SignatureAlgorithmTBS
	CFTypeRef kSecOIDX509V1SignatureCStruct
	CFTypeRef kSecOIDX509V1SignatureStruct
	CFTypeRef kSecOIDX509V1SubjectName
	CFTypeRef kSecOIDX509V1SubjectNameCStruct
	CFTypeRef kSecOIDX509V1SubjectNameLDAP
	CFTypeRef kSecOIDX509V1SubjectNameStd
	CFTypeRef kSecOIDX509V1SubjectPublicKey
	CFTypeRef kSecOIDX509V1SubjectPublicKeyAlgorithm
	CFTypeRef kSecOIDX509V1SubjectPublicKeyAlgorithmParameters
	CFTypeRef kSecOIDX509V1SubjectPublicKeyCStruct
	CFTypeRef kSecOIDX509V1ValidityNotAfter
	CFTypeRef kSecOIDX509V1ValidityNotBefore
	CFTypeRef kSecOIDX509V1Version
	CFTypeRef kSecOIDX509V3Certificate
	CFTypeRef kSecOIDX509V3CertificateCStruct
	CFTypeRef kSecOIDX509V3CertificateExtensionCritical
	CFTypeRef kSecOIDX509V3CertificateExtensionCStruct
	CFTypeRef kSecOIDX509V3CertificateExtensionId
	CFTypeRef kSecOIDX509V3CertificateExtensionsCStruct
	CFTypeRef kSecOIDX509V3CertificateExtensionsStruct
	CFTypeRef kSecOIDX509V3CertificateExtensionStruct
	CFTypeRef kSecOIDX509V3CertificateExtensionType
	CFTypeRef kSecOIDX509V3CertificateExtensionValue
	CFTypeRef kSecOIDX509V3CertificateNumberOfExtensions
	CFTypeRef kSecOIDX509V3SignedCertificate
	CFTypeRef kSecOIDX509V3SignedCertificateCStruct
	enum <anonymous> kSecondScale
	enum <anonymous> kSecOptionReserved
	enum <anonymous> kSecp192r1
	enum <anonymous> kSecp256r1
	enum <anonymous> kSecp384r1
	enum <anonymous> kSecp521r1
	CFStringRef kSecPaddingKey
	enum <anonymous> kSecPaddingNone
	CFStringRef kSecPaddingNoneKey
	CFStringRef kSecPaddingOAEPKey
	enum <anonymous> kSecPaddingPKCS1
	CFStringRef kSecPaddingPKCS1Key
	enum <anonymous> kSecPaddingPKCS1MD2
	enum <anonymous> kSecPaddingPKCS1MD5
	enum <anonymous> kSecPaddingPKCS1SHA1
	CFStringRef kSecPaddingPKCS5Key
	CFStringRef kSecPaddingPKCS7Key
	enum <anonymous> kSecPasswordChangedEvent
	enum <anonymous> kSecPasswordChangedEventMask
	enum <anonymous> kSecPathItemAttr
	enum <anonymous> kSecPluginRequirementType
	CFTypeRef kSecPolicyAppleCodeSigning
	CFTypeRef kSecPolicyAppleEAP
	CFTypeRef kSecPolicyAppleiChat
	CFTypeRef kSecPolicyAppleIDValidation
	CFTypeRef kSecPolicyAppleIPsec
	CFTypeRef kSecPolicyApplePKINITClient
	CFTypeRef kSecPolicyApplePKINITServer
	CFTypeRef kSecPolicyAppleSMIME
	CFTypeRef kSecPolicyAppleSSL
	CFTypeRef kSecPolicyAppleTimeStamping
	CFTypeRef kSecPolicyAppleX509Basic
	CFTypeRef kSecPolicyClient
	CFTypeRef kSecPolicyKU_CRLSign
	CFTypeRef kSecPolicyKU_DataEncipherment
	CFTypeRef kSecPolicyKU_DecipherOnly
	CFTypeRef kSecPolicyKU_DigitalSignature
	CFTypeRef kSecPolicyKU_EncipherOnly
	CFTypeRef kSecPolicyKU_KeyAgreement
	CFTypeRef kSecPolicyKU_KeyCertSign
	CFTypeRef kSecPolicyKU_KeyEncipherment
	CFTypeRef kSecPolicyKU_NonRepudiation
	CFTypeRef kSecPolicyMacAppStoreReceipt
	CFTypeRef kSecPolicyName
	CFTypeRef kSecPolicyOid
	enum <anonymous> kSecPortItemAttr
	SecPreferencesDomain kSecPreferencesDomainCommon
	SecPreferencesDomain kSecPreferencesDomainDynamic
	SecPreferencesDomain kSecPreferencesDomainSystem
	SecPreferencesDomain kSecPreferencesDomainUser
	enum <anonymous> kSecPrivateKeyItemClass
	CFStringRef kSecPropertyKeyLabel
	CFStringRef kSecPropertyKeyLocalizedLabel
	CFStringRef kSecPropertyKeyType
	CFStringRef kSecPropertyKeyValue
	CFStringRef kSecPropertyTypeData
	CFStringRef kSecPropertyTypeDate
	CFTypeRef kSecPropertyTypeError
	CFStringRef kSecPropertyTypeSection
	CFStringRef kSecPropertyTypeString
	CFStringRef kSecPropertyTypeSuccess
	CFTypeRef kSecPropertyTypeTitle
	CFStringRef kSecPropertyTypeURL
	CFStringRef kSecPropertyTypeWarning
	enum <anonymous> kSecProtocolItemAttr
	enum <anonymous> kSecProtocolTypeAFP
	enum <anonymous> kSecProtocolTypeAny
	enum <anonymous> kSecProtocolTypeAppleTalk
	enum <anonymous> kSecProtocolTypeCIFS
	enum <anonymous> kSecProtocolTypeCVSpserver
	enum <anonymous> kSecProtocolTypeDAAP
	enum <anonymous> kSecProtocolTypeEPPC
	enum <anonymous> kSecProtocolTypeFTP
	enum <anonymous> kSecProtocolTypeFTPAccount
	enum <anonymous> kSecProtocolTypeFTPProxy
	enum <anonymous> kSecProtocolTypeFTPS
	enum <anonymous> kSecProtocolTypeHTTP
	enum <anonymous> kSecProtocolTypeHTTPProxy
	enum <anonymous> kSecProtocolTypeHTTPS
	enum <anonymous> kSecProtocolTypeHTTPSProxy
	enum <anonymous> kSecProtocolTypeIMAP
	enum <anonymous> kSecProtocolTypeIMAPS
	enum <anonymous> kSecProtocolTypeIPP
	enum <anonymous> kSecProtocolTypeIRC
	enum <anonymous> kSecProtocolTypeIRCS
	enum <anonymous> kSecProtocolTypeLDAP
	enum <anonymous> kSecProtocolTypeLDAPS
	enum <anonymous> kSecProtocolTypeNNTP
	enum <anonymous> kSecProtocolTypeNNTPS
	enum <anonymous> kSecProtocolTypePOP3
	enum <anonymous> kSecProtocolTypePOP3S
	enum <anonymous> kSecProtocolTypeRTSP
	enum <anonymous> kSecProtocolTypeRTSPProxy
	enum <anonymous> kSecProtocolTypeSMB
	enum <anonymous> kSecProtocolTypeSMTP
	enum <anonymous> kSecProtocolTypeSOCKS
	enum <anonymous> kSecProtocolTypeSSH
	enum <anonymous> kSecProtocolTypeSVN
	enum <anonymous> kSecProtocolTypeTelnet
	enum <anonymous> kSecProtocolTypeTelnetS
	enum <anonymous> kSecPublicKeyHashItemAttr
	enum <anonymous> kSecPublicKeyItemClass
	enum <anonymous> kSecReadPermStatus
	enum <anonymous> kSecRequirementTypeCount
	const CFTypeRef kSecReturnAttributes
	const CFTypeRef kSecReturnData
	const CFTypeRef kSecReturnPersistentRef
	const CFTypeRef kSecReturnRef
	enum <anonymous> kSecRSAMax
	enum <anonymous> kSecRSAMin
	enum <anonymous> kSecScriptCodeItemAttr
	enum <anonymous> kSecSecurityDomainItemAttr
	enum <anonymous> kSecSerialNumberItemAttr
	enum <anonymous> kSecServerItemAttr
	enum <anonymous> kSecServiceItemAttr
	CFStringRef kSecSignatureAttributeName
	enum <anonymous> kSecSignatureItemAttr
	enum <anonymous> kSecSubjectItemAttr
	enum <anonymous> kSecSubjectKeyIdentifierItemAttr
	enum <anonymous> kSecSymmetricKeyItemClass
	const CFStringRef kSecTransformAbortAttributeName
	const CFStringRef kSecTransformAbortOriginatorKey
	const CFStringRef kSecTransformActionAttributeNotification
	const CFStringRef kSecTransformActionAttributeValidation
	const CFStringRef kSecTransformActionCanExecute
	const CFStringRef kSecTransformActionExternalizeExtraData
	const CFStringRef kSecTransformActionFinalize
	const CFStringRef kSecTransformActionInternalizeExtraData
	const CFStringRef kSecTransformActionProcessData
	const CFStringRef kSecTransformActionStartingExecution
	const CFStringRef kSecTransformDebugAttributeName
	enum <anonymous> kSecTransformErrorAborted
	enum <anonymous> kSecTransformErrorAbortInProgress
	enum <anonymous> kSecTransformErrorAttributeNotFound
	const CFStringRef kSecTransformErrorDomain
	enum <anonymous> kSecTransformErrorInvalidAlgorithm
	enum <anonymous> kSecTransformErrorInvalidConnection
	enum <anonymous> kSecTransformErrorInvalidInput
	enum <anonymous> kSecTransformErrorInvalidInputDictionary
	enum <anonymous> kSecTransformErrorInvalidLength
	enum <anonymous> kSecTransformErrorInvalidOperation
	enum <anonymous> kSecTransformErrorInvalidType
	enum <anonymous> kSecTransformErrorMissingParameter
	enum <anonymous> kSecTransformErrorMoreThanOneOutput
	enum <anonymous> kSecTransformErrorNameAlreadyRegistered
	enum <anonymous> kSecTransformErrorNotInitializedCorrectly
	enum <anonymous> kSecTransformErrorUnsupportedAttribute
	const CFStringRef kSecTransformInputAttributeName
	enum <anonymous> kSecTransformInvalidArgument
	enum <anonymous> kSecTransformInvalidOverride
	enum <anonymous> kSecTransformMetaAttributeCanCycle
	enum <anonymous> kSecTransformMetaAttributeDeferred
	enum <anonymous> kSecTransformMetaAttributeExternalize
	enum <anonymous> kSecTransformMetaAttributeHasInboundConnection
	enum <anonymous> kSecTransformMetaAttributeHasOutboundConnections
	enum <anonymous> kSecTransformMetaAttributeName
	enum <anonymous> kSecTransformMetaAttributeRef
	enum <anonymous> kSecTransformMetaAttributeRequired
	enum <anonymous> kSecTransformMetaAttributeRequiresOutboundConnection
	enum <anonymous> kSecTransformMetaAttributeStream
	enum <anonymous> kSecTransformMetaAttributeValue
	enum <anonymous> kSecTransformOperationNotSupportedOnGroup
	const CFStringRef kSecTransformOutputAttributeName
	const CFStringRef kSecTransformPreviousErrorKey
	enum <anonymous> kSecTransformTransformIsExecuting
	enum <anonymous> kSecTransformTransformIsNotRegistered
	const CFStringRef kSecTransformTransformName
	enum <anonymous> kSecTrustOptionAllowExpired
	enum <anonymous> kSecTrustOptionAllowExpiredRoot
	enum <anonymous> kSecTrustOptionFetchIssuerFromNet
	enum <anonymous> kSecTrustOptionImplicitAnchors
	enum <anonymous> kSecTrustOptionLeafIsCA
	enum <anonymous> kSecTrustOptionRequireRevPerCert
	enum <anonymous> kSecTrustOptionUseTrustSettings
	enum <anonymous> kSecTrustResultConfirm
	enum <anonymous> kSecTrustResultDeny
	enum <anonymous> kSecTrustResultFatalTrustFailure
	enum <anonymous> kSecTrustResultInvalid
	enum <anonymous> kSecTrustResultOtherError
	enum <anonymous> kSecTrustResultProceed
	enum <anonymous> kSecTrustResultRecoverableTrustFailure
	enum <anonymous> kSecTrustResultUnspecified
	enum <anonymous> kSecTrustSettingsChangedEvent
	enum <anonymous> kSecTrustSettingsChangedEventMask
	enum <anonymous> kSecTrustSettingsDomainAdmin
	enum <anonymous> kSecTrustSettingsDomainSystem
	enum <anonymous> kSecTrustSettingsDomainUser
	enum <anonymous> kSecTrustSettingsKeyUseAny
	enum <anonymous> kSecTrustSettingsKeyUseEnDecryptData
	enum <anonymous> kSecTrustSettingsKeyUseEnDecryptKey
	enum <anonymous> kSecTrustSettingsKeyUseKeyExchange
	enum <anonymous> kSecTrustSettingsKeyUseSignature
	enum <anonymous> kSecTrustSettingsKeyUseSignCert
	enum <anonymous> kSecTrustSettingsKeyUseSignRevocation
	enum <anonymous> kSecTrustSettingsResultDeny
	enum <anonymous> kSecTrustSettingsResultInvalid
	enum <anonymous> kSecTrustSettingsResultTrustAsRoot
	enum <anonymous> kSecTrustSettingsResultTrustRoot
	enum <anonymous> kSecTrustSettingsResultUnspecified
	enum <anonymous> kSecTypeItemAttr
	enum <anonymous> kSecUnlockEvent
	enum <anonymous> kSecUnlockEventMask
	enum <anonymous> kSecUnlockStateStatus
	enum <anonymous> kSecUpdateEvent
	enum <anonymous> kSecUpdateEventMask
	enum <anonymous> kSecurityDomainKCItemAttr
	const CFTypeRef kSecUseItemList
	const CFTypeRef kSecUseKeychain
	enum <anonymous> kSecUseOnlyGID
	enum <anonymous> kSecUseOnlyUID
	const CFTypeRef kSecValueData
	const CFTypeRef kSecValuePersistentRef
	const CFTypeRef kSecValueRef
	enum <anonymous> kSecVolumeItemAttr
	enum <anonymous> kSecWritePermStatus
	const CFStringRef kSecZLibEncoding
	enum <anonymous> kSelectorAll1BitData
	enum <anonymous> kSelectorAll32BitData
	enum <anonymous> kSelectorAll4BitData
	enum <anonymous> kSelectorAll8BitData
	enum <anonymous> kSelectorAllAvailableData
	enum <anonymous> kSelectorAllHugeData
	enum <anonymous> kSelectorAllLargeData
	enum <anonymous> kSelectorAllMiniData
	enum <anonymous> kSelectorAllSmallData
	enum <anonymous> kSelectorHuge1Bit
	enum <anonymous> kSelectorHuge32Bit
	enum <anonymous> kSelectorHuge4Bit
	enum <anonymous> kSelectorHuge8Bit
	enum <anonymous> kSelectorHuge8BitMask
	enum <anonymous> kSelectorLarge1Bit
	enum <anonymous> kSelectorLarge32Bit
	enum <anonymous> kSelectorLarge4Bit
	enum <anonymous> kSelectorLarge8Bit
	enum <anonymous> kSelectorLarge8BitMask
	enum <anonymous> kSelectorMini1Bit
	enum <anonymous> kSelectorMini4Bit
	enum <anonymous> kSelectorMini8Bit
	enum <anonymous> kSelectorsAreIndexable
	enum <anonymous> kSelectorsAreNotIndexable
	enum <anonymous> kSelectorSmall1Bit
	enum <anonymous> kSelectorSmall32Bit
	enum <anonymous> kSelectorSmall4Bit
	enum <anonymous> kSelectorSmall8Bit
	enum <anonymous> kSelectorSmall8BitMask
	enum <anonymous> kSerialNumberKCItemAttr
	enum <anonymous> kServerKCItemAttr
	enum <anonymous> kServiceKCItemAttr
	enum <anonymous> kServicesFolderType
	enum <anonymous> kSetCLUTByValue
	enum <anonymous> kSetCLUTImmediately
	enum <anonymous> kSetCLUTWithLuminance
	enum <anonymous> kSetDebugOption
	enum <anonymous> kSetFrontProcessCausedByUser
	enum <anonymous> kSetFrontProcessFrontWindowOnly
	enum <anonymous> kSetPowerLevel
	enum <anonymous> kSFNTLookupSegmentArray
	enum <anonymous> kSFNTLookupSegmentSingle
	enum <anonymous> kSFNTLookupSimpleArray
	enum <anonymous> kSFNTLookupSingleTable
	enum <anonymous> kSFNTLookupTrimmedArray
	enum <anonymous> kSharedBadgeIcon
	enum <anonymous> kSharedFolderAliasType
	enum <anonymous> kSharedFolderIcon
	enum <anonymous> kSharedFolderIconResource
	enum <anonymous> kSharedLibrariesFolderIcon
	enum <anonymous> kSharedLibrariesFolderType
	enum <anonymous> kSharedUserDataFolderType
	enum <anonymous> kSharingPrivsNotApplicableIcon
	enum <anonymous> kSharingPrivsReadOnlyIcon
	enum <anonymous> kSharingPrivsReadWriteIcon
	enum <anonymous> kSharingPrivsUnknownIcon
	enum <anonymous> kSharingPrivsWritableIcon
	enum <anonymous> kShiftJIS_BasicVariant
	enum <anonymous> kShiftJIS_DOSVariant
	enum <anonymous> kShiftJIS_MusicCDVariant
	enum <anonymous> kShortcutIcon
	enum <anonymous> kShowDiacriticsSelector
	enum <anonymous> kShowHideInputWindow
	enum <anonymous> kShutdownFolderType
	enum <anonymous> kShutdownItemsDisabledFolderIcon
	enum <anonymous> kShutdownItemsDisabledFolderType
	enum <anonymous> kShutdownItemsFolderIcon
	enum <anonymous> kSignatureKCItemAttr
	enum <anonymous> kSignKCItemAttr
	enum <anonymous> kSimplifiedCharactersSelector
	SKDocumentIndexState kSKDocumentStateAddPending
	SKDocumentIndexState kSKDocumentStateDeletePending
	SKDocumentIndexState kSKDocumentStateIndexed
	SKDocumentIndexState kSKDocumentStateNotIndexed
	const CFStringRef kSKEndTermChars
	SKIndexType kSKIndexInverted
	SKIndexType kSKIndexInvertedVector
	SKIndexType kSKIndexUnknown
	SKIndexType kSKIndexVector
	const CFStringRef kSKLanguageTypes
	const CFStringRef kSKMaximumTerms
	const CFStringRef kSKMinTermLength
	const CFStringRef kSKProximityIndexing
	SKSearchType kSKSearchBooleanRanked
	enum <anonymous> kSKSearchOptionDefault
	enum <anonymous> kSKSearchOptionFindSimilar
	enum <anonymous> kSKSearchOptionNoRelevanceScores
	enum <anonymous> kSKSearchOptionSpaceMeansOR
	SKSearchType kSKSearchPrefixRanked
	SKSearchType kSKSearchRanked
	SKSearchType kSKSearchRequiredRanked
	const CFStringRef kSKStartTermChars
	const CFStringRef kSKStopWords
	const CFStringRef kSKSubstitutions
	const CFStringRef kSKTermChars
	enum <anonymous> kSlashedZeroOffSelector
	enum <anonymous> kSlashedZeroOnSelector
	enum <anonymous> kSlashToDivideOffSelector
	enum <anonymous> kSlashToDivideOnSelector
	enum <anonymous> kSleepDemand
	enum <anonymous> kSleepDeny
	enum <anonymous> kSleepNow
	enum <anonymous> kSleepRequest
	enum <anonymous> kSleepRevoke
	enum <anonymous> kSleepUnlock
	enum <anonymous> kSleepWakeUp
	enum <anonymous> kSmall1BitMask
	enum <anonymous> kSmall32BitData
	enum <anonymous> kSmall4BitData
	enum <anonymous> kSmall4BitIconSize
	enum <anonymous> kSmall8BitData
	enum <anonymous> kSmall8BitIconSize
	enum <anonymous> kSmall8BitMask
	enum <anonymous> kSmallCapsSelector
	enum <anonymous> kSmallIconSize
	enum <anonymous> kSmartQuotesOffSelector
	enum <anonymous> kSmartQuotesOnSelector
	enum <anonymous> kSmartSwashType
	enum <anonymous> kSOAP1999Schema
	enum <anonymous> kSOAP2001Schema
	enum <anonymous> kSOCKS5NoAcceptableMethod
	enum <anonymous> kSortAscendingIcon
	enum <anonymous> kSortDescendingIcon
	enum <anonymous> kSoundFileIcon
	enum <anonymous> kSoundSetsFolderType
	enum <anonymous> kSpeakableItemsFolder
	enum <anonymous> kSpeakableItemsFolderType
	enum <anonymous> kSpecialCase
	enum <anonymous> kSpecialCaseCaretHook
	enum <anonymous> kSpecialCaseDrawHook
	enum <anonymous> kSpecialCaseEOLHook
	enum <anonymous> kSpecialCaseGNEFilterProc
	enum <anonymous> kSpecialCaseHighHook
	enum <anonymous> kSpecialCaseHitTestHook
	enum <anonymous> kSpecialCaseMBarHook
	enum <anonymous> kSpecialCaseNWidthHook
	enum <anonymous> kSpecialCaseProtocolHandler
	enum <anonymous> kSpecialCaseSelectorMask
	enum <anonymous> kSpecialCaseSelectorPhase
	enum <anonymous> kSpecialCaseSelectorWidth
	enum <anonymous> kSpecialCaseSocketListener
	enum <anonymous> kSpecialCaseTEDoText
	enum <anonymous> kSpecialCaseTEFindWord
	enum <anonymous> kSpecialCaseTERecalc
	enum <anonymous> kSpecialCaseTextWidthHook
	enum <anonymous> kSpecialCaseWidthHook
	enum <anonymous> kSpecialFolder
	CFStringRef kSpeechAudioGraphProperty
	CFStringRef kSpeechAudioUnitProperty
	CFStringRef kSpeechCharacterModeProperty
	CFStringRef kSpeechCommandDelimiterProperty
	CFStringRef kSpeechCommandPrefix
	CFStringRef kSpeechCommandSuffix
	CFStringRef kSpeechCurrentVoiceProperty
	CFStringRef kSpeechDictionaryAbbreviations
	CFStringRef kSpeechDictionaryEntryPhonemes
	CFStringRef kSpeechDictionaryEntrySpelling
	CFStringRef kSpeechDictionaryLocaleIdentifier
	CFStringRef kSpeechDictionaryModificationDate
	CFStringRef kSpeechDictionaryPronunciations
	CFStringRef kSpeechErrorCallbackCharacterOffset
	CFStringRef kSpeechErrorCallbackSpokenString
	CFStringRef kSpeechErrorCFCallBack
	CFStringRef kSpeechErrorCount
	CFStringRef kSpeechErrorNewest
	CFStringRef kSpeechErrorNewestCharacterOffset
	CFStringRef kSpeechErrorOldest
	CFStringRef kSpeechErrorOldestCharacterOffset
	CFStringRef kSpeechErrorsProperty
	enum <anonymous> kSpeechFolderType
	enum <anonymous> kSpeechGenerateTune
	CFStringRef kSpeechInputModeProperty
	CFStringRef kSpeechModeLiteral
	CFStringRef kSpeechModeNormal
	CFStringRef kSpeechModePhoneme
	CFStringRef kSpeechModeText
	CFStringRef kSpeechModeTune
	CFStringRef kSpeechNoEndingProsody
	CFStringRef kSpeechNoSpeechInterrupt
	CFStringRef kSpeechNumberModeProperty
	CFStringRef kSpeechOutputToAudioDeviceProperty
	CFStringRef kSpeechOutputToExtAudioFileProperty
	CFStringRef kSpeechOutputToFileURLProperty
	CFStringRef kSpeechPhonemeCallBack
	CFStringRef kSpeechPhonemeInfoExample
	CFStringRef kSpeechPhonemeInfoHiliteEnd
	CFStringRef kSpeechPhonemeInfoHiliteStart
	CFStringRef kSpeechPhonemeInfoOpcode
	CFStringRef kSpeechPhonemeInfoSymbol
	CFStringRef kSpeechPhonemeOptionsProperty
	CFStringRef kSpeechPhonemeSymbolsProperty
	CFStringRef kSpeechPitchBaseProperty
	CFStringRef kSpeechPitchModProperty
	CFStringRef kSpeechPreflightThenPause
	CFStringRef kSpeechRateProperty
	CFStringRef kSpeechRecentSyncProperty
	CFStringRef kSpeechRefConProperty
	enum <anonymous> kSpeechRelativeDuration
	enum <anonymous> kSpeechRelativePitch
	CFStringRef kSpeechResetProperty
	enum <anonymous> kSpeechShowSyllables
	CFStringRef kSpeechSpeechDoneCallBack
	CFStringRef kSpeechStatusNumberOfCharactersLeft
	CFStringRef kSpeechStatusOutputBusy
	CFStringRef kSpeechStatusOutputPaused
	CFStringRef kSpeechStatusPhonemeCode
	CFStringRef kSpeechStatusProperty
	CFStringRef kSpeechSyncCallBack
	CFStringRef kSpeechSynthesizerInfoIdentifier
	CFStringRef kSpeechSynthesizerInfoManufacturer
	CFStringRef kSpeechSynthesizerInfoProperty
	CFStringRef kSpeechSynthesizerInfoVersion
	CFStringRef kSpeechTextDoneCallBack
	CFStringRef kSpeechVoiceCreator
	CFStringRef kSpeechVoiceID
	CFStringRef kSpeechVolumeProperty
	CFStringRef kSpeechWordCFCallBack
	enum <anonymous> kSpotlightImportersFolderType
	enum <anonymous> kSpotlightMetadataCacheFolderType
	enum <anonymous> kSpotlightSavedSearchesFolderType
	enum <anonymous> kSquaredLigaturesOffSelector
	enum <anonymous> kSquaredLigaturesOnSelector
	SSLSessionState kSSLAborted
	SSLClientCertificateState kSSLClientCertNone
	SSLClientCertificateState kSSLClientCertRejected
	SSLClientCertificateState kSSLClientCertRequested
	SSLClientCertificateState kSSLClientCertSent
	SSLProtocolSide kSSLClientSide
	SSLSessionState kSSLClosed
	SSLSessionState kSSLConnected
	SSLConnectionType kSSLDatagramType
	SSLSessionState kSSLHandshake
	SSLSessionState kSSLIdle
	SSLProtocol kSSLProtocol2
	SSLProtocol kSSLProtocol3
	SSLProtocol kSSLProtocol3Only
	SSLProtocol kSSLProtocolAll
	SSLProtocol kSSLProtocolUnknown
	SSLProtocolSide kSSLServerSide
	SSLSessionOption kSSLSessionOptionBreakOnCertRequested
	SSLSessionOption kSSLSessionOptionBreakOnClientAuth
	SSLSessionOption kSSLSessionOptionBreakOnServerAuth
	SSLConnectionType kSSLStreamType
	enum <anonymous> kSSpCantInstallErr
	enum <anonymous> kSSpInternalErr
	enum <anonymous> kSSpParallelUpVectorErr
	enum <anonymous> kSSpScaleToZeroErr
	enum <anonymous> kSSpVersionErr
	enum <anonymous> kStackDispatchedPascalStackBased
	enum <anonymous> kStackOverflowException
	enum <anonymous> kStackParameterMask
	enum <anonymous> kStackParameterPhase
	enum <anonymous> kStackParameterWidth
	enum <anonymous> kStartDateKCItemAttr
	enum <anonymous> kStartupFolderAliasType
	enum <anonymous> kStartupFolderIconResource
	enum <anonymous> kStartupFolderType
	enum <anonymous> kStartupItemsDisabledFolderIcon
	enum <anonymous> kStartupItemsDisabledFolderType
	enum <anonymous> kStartupItemsFolderIcon
	enum <anonymous> kStationeryFolderType
	enum <anonymous> kSTClassDeletedGlyph
	enum <anonymous> kSTClassEndOfLine
	enum <anonymous> kSTClassEndOfText
	enum <anonymous> kSTClassOutOfBounds
	enum <anonymous> kStillIdle
	enum <anonymous> kSTLigActionMask
	enum <anonymous> kSTMarkEnd
	enum <anonymous> kSTNoAdvance
	enum <anonymous> kStoppedThreadState
	enum <anonymous> kSTRearrVerbMask
	enum <anonymous> kSTSetMark
	enum <anonymous> kSTXHasLigAction
	enum <anonymous> kStyleOptionsType
	enum <anonymous> kStylisticAltEighteenOffSelector
	enum <anonymous> kStylisticAltEighteenOnSelector
	enum <anonymous> kStylisticAltEightOffSelector
	enum <anonymous> kStylisticAltEightOnSelector
	enum <anonymous> kStylisticAltElevenOffSelector
	enum <anonymous> kStylisticAltElevenOnSelector
	enum <anonymous> kStylisticAlternativesType
	enum <anonymous> kStylisticAltFifteenOffSelector
	enum <anonymous> kStylisticAltFifteenOnSelector
	enum <anonymous> kStylisticAltFiveOffSelector
	enum <anonymous> kStylisticAltFiveOnSelector
	enum <anonymous> kStylisticAltFourOffSelector
	enum <anonymous> kStylisticAltFourOnSelector
	enum <anonymous> kStylisticAltFourteenOffSelector
	enum <anonymous> kStylisticAltFourteenOnSelector
	enum <anonymous> kStylisticAltNineOffSelector
	enum <anonymous> kStylisticAltNineOnSelector
	enum <anonymous> kStylisticAltNineteenOffSelector
	enum <anonymous> kStylisticAltNineteenOnSelector
	enum <anonymous> kStylisticAltOneOffSelector
	enum <anonymous> kStylisticAltOneOnSelector
	enum <anonymous> kStylisticAltSevenOffSelector
	enum <anonymous> kStylisticAltSevenOnSelector
	enum <anonymous> kStylisticAltSeventeenOffSelector
	enum <anonymous> kStylisticAltSeventeenOnSelector
	enum <anonymous> kStylisticAltSixOffSelector
	enum <anonymous> kStylisticAltSixOnSelector
	enum <anonymous> kStylisticAltSixteenOffSelector
	enum <anonymous> kStylisticAltSixteenOnSelector
	enum <anonymous> kStylisticAltTenOffSelector
	enum <anonymous> kStylisticAltTenOnSelector
	enum <anonymous> kStylisticAltThirteenOffSelector
	enum <anonymous> kStylisticAltThirteenOnSelector
	enum <anonymous> kStylisticAltThreeOffSelector
	enum <anonymous> kStylisticAltThreeOnSelector
	enum <anonymous> kStylisticAltTwelveOffSelector
	enum <anonymous> kStylisticAltTwelveOnSelector
	enum <anonymous> kStylisticAltTwentyOffSelector
	enum <anonymous> kStylisticAltTwentyOnSelector
	enum <anonymous> kStylisticAltTwoOffSelector
	enum <anonymous> kStylisticAltTwoOnSelector
	enum <anonymous> kSubjectKCItemAttr
	enum <anonymous> kSubstituteVerticalFormsOffSelector
	enum <anonymous> kSubstituteVerticalFormsOnSelector
	enum <anonymous> kSuperiorsSelector
	enum <anonymous> kSuspendDemand
	enum <anonymous> kSuspendRequest
	enum <anonymous> kSuspendRevoke
	enum <anonymous> kSuspendWakeToDoze
	enum <anonymous> kSuspendWakeUp
	enum <anonymous> kSwashAlternatesOffSelector
	enum <anonymous> kSwashAlternatesOnSelector
	enum <anonymous> kSymbolLigaturesOffSelector
	enum <anonymous> kSymbolLigaturesOnSelector
	enum <anonymous> kSymLinkCreator
	enum <anonymous> kSymLinkFileType
	enum <anonymous> kSysSWTooOld
	enum <anonymous> kSystemControlPanelFolderType
	enum <anonymous> kSystemDesktopFolderType
	enum <anonymous> kSystemDomain
	enum <anonymous> kSystemEventKCEventMask
	enum <anonymous> kSystemExtensionDisabledFolderIcon
	enum <anonymous> kSystemExtensionDisabledFolderType
	enum <anonymous> kSystemFolderAliasType
	enum <anonymous> kSystemFolderIcon
	enum <anonymous> kSystemFolderIconResource
	enum <anonymous> kSystemFolderType
	enum <anonymous> kSystemIconsCreator
	enum <anonymous> kSystemKCEvent
	enum <anonymous> kSystemPPDDomain
	enum <anonymous> kSystemPreferencesFolderType
	enum <anonymous> kSystemProcess
	enum <anonymous> kSystemResFile
	enum <anonymous> kSystemSoundClientTimedOutError
	enum <anonymous> kSystemSoundNoError
	enum <anonymous> kSystemSoundsFolderType
	enum <anonymous> kSystemSoundUnspecifiedError
	enum <anonymous> kSystemSuitcaseIcon
	enum <anonymous> kSystemTrashFolderType
	enum <anonymous> kTallCapsSelector
	enum <anonymous> kTaskCreationException
	enum <anonymous> kTaskTerminationException
	enum <anonymous> kTEC_MIBEnumDontCare
	enum <anonymous> kTECAddFallbackInterruptBit
	enum <anonymous> kTECAddFallbackInterruptMask
	enum <anonymous> kTECAddForceASCIIChangesBit
	enum <anonymous> kTECAddForceASCIIChangesMask
	enum <anonymous> kTECAddTextRunHeuristicsBit
	enum <anonymous> kTECAddTextRunHeuristicsMask
	enum <anonymous> kTECArrayFullErr
	enum <anonymous> kTECAvailableEncodingsResType
	enum <anonymous> kTECAvailableSniffersResType
	enum <anonymous> kTECBadTextRunErr
	enum <anonymous> kTECBufferBelowMinimumSizeErr
	enum <anonymous> kTECChinesePluginSignature
	enum <anonymous> kTECConversionInfoResType
	enum <anonymous> kTECCorruptConverterErr
	enum <anonymous> kTECDirectionErr
	enum <anonymous> kTECDisableFallbacksBit
	enum <anonymous> kTECDisableFallbacksMask
	enum <anonymous> kTECDisableLooseMappingsBit
	enum <anonymous> kTECDisableLooseMappingsMask
	enum <anonymous> kTECFallbackTextLengthFixBit
	enum <anonymous> kTECFallbackTextLengthFixMask
	enum <anonymous> kTECGlobalsUnavailableErr
	enum <anonymous> kTECIncompleteElementErr
	enum <anonymous> kTECInfoCurrentFormat
	enum <anonymous> kTECInternetNameDefaultUsageMask
	enum <anonymous> kTECInternetNamesResType
	enum <anonymous> kTECInternetNameStrictUsageMask
	enum <anonymous> kTECInternetNameTolerantUsageMask
	enum <anonymous> kTECItemUnavailableErr
	enum <anonymous> kTECJapanesePluginSignature
	enum <anonymous> kTECKeepInfoFixBit
	enum <anonymous> kTECKeepInfoFixMask
	enum <anonymous> kTECKoreanPluginSignature
	enum <anonymous> kTECMailEncodingsResType
	enum <anonymous> kTECMissingTableErr
	enum <anonymous> kTECNeedFlushStatus
	enum <anonymous> kTECNoConversionPathErr
	enum <anonymous> kTECOutputBufferFullStatus
	enum <anonymous> kTECPartialCharErr
	enum <anonymous> kTECPluginCreator
	enum <anonymous> kTECPluginDispatchTableCurrentVersion
	enum <anonymous> kTECPluginDispatchTableVersion1
	enum <anonymous> kTECPluginDispatchTableVersion1_1
	enum <anonymous> kTECPluginDispatchTableVersion1_2
	enum <anonymous> kTECPluginManyToOne
	enum <anonymous> kTECPluginOneToMany
	enum <anonymous> kTECPluginOneToOne
	enum <anonymous> kTECPluginSniffObj
	enum <anonymous> kTECPluginType
	enum <anonymous> kTECPreferredEncodingFixBit
	enum <anonymous> kTECPreferredEncodingFixMask
	enum <anonymous> kTECResourceID
	enum <anonymous> kTECSignature
	enum <anonymous> kTECSubTextEncodingsResType
	enum <anonymous> kTECTableChecksumErr
	enum <anonymous> kTECTableFormatErr
	enum <anonymous> kTECTextRunBitClearFixBit
	enum <anonymous> kTECTextRunBitClearFixMask
	enum <anonymous> kTECTextToUnicodeScanFixBit
	enum <anonymous> kTECTextToUnicodeScanFixMask
	enum <anonymous> kTECUnicodePluginSignature
	enum <anonymous> kTECUnmappableElementErr
	enum <anonymous> kTECUsedFallbacksStatus
	enum <anonymous> kTECWebEncodingsResType
	enum <anonymous> kTemporaryFolderType
	enum <anonymous> kTemporaryItemsInCacheDataFolderType
	enum <anonymous> kTemporaryItemsInUserDomainFolderType
	enum <anonymous> kTextCenter
	enum <anonymous> kTextEncodingANSEL
	enum <anonymous> kTextEncodingBaseName
	enum <anonymous> kTextEncodingBig5
	enum <anonymous> kTextEncodingBig5_E
	enum <anonymous> kTextEncodingBig5_HKSCS_1999
	enum <anonymous> kTextEncodingCNS_11643_92_P1
	enum <anonymous> kTextEncodingCNS_11643_92_P2
	enum <anonymous> kTextEncodingCNS_11643_92_P3
	enum <anonymous> kTextEncodingDefaultFormat
	enum <anonymous> kTextEncodingDefaultVariant
	enum <anonymous> kTextEncodingDOSArabic
	enum <anonymous> kTextEncodingDOSBalticRim
	enum <anonymous> kTextEncodingDOSCanadianFrench
	enum <anonymous> kTextEncodingDOSChineseSimplif
	enum <anonymous> kTextEncodingDOSChineseTrad
	enum <anonymous> kTextEncodingDOSCyrillic
	enum <anonymous> kTextEncodingDOSGreek
	enum <anonymous> kTextEncodingDOSGreek1
	enum <anonymous> kTextEncodingDOSGreek2
	enum <anonymous> kTextEncodingDOSHebrew
	enum <anonymous> kTextEncodingDOSIcelandic
	enum <anonymous> kTextEncodingDOSJapanese
	enum <anonymous> kTextEncodingDOSKorean
	enum <anonymous> kTextEncodingDOSLatin1
	enum <anonymous> kTextEncodingDOSLatin2
	enum <anonymous> kTextEncodingDOSLatinUS
	enum <anonymous> kTextEncodingDOSNordic
	enum <anonymous> kTextEncodingDOSPortuguese
	enum <anonymous> kTextEncodingDOSRussian
	enum <anonymous> kTextEncodingDOSThai
	enum <anonymous> kTextEncodingDOSTurkish
	enum <anonymous> kTextEncodingEBCDIC_CP037
	enum <anonymous> kTextEncodingEBCDIC_LatinCore
	enum <anonymous> kTextEncodingEBCDIC_US
	enum <anonymous> kTextEncodingEUC_CN
	enum <anonymous> kTextEncodingEUC_JP
	enum <anonymous> kTextEncodingEUC_KR
	enum <anonymous> kTextEncodingEUC_TW
	enum <anonymous> kTextEncodingFormatName
	enum <anonymous> kTextEncodingFullName
	enum <anonymous> kTextEncodingGB_18030_2000
	enum <anonymous> kTextEncodingGB_18030_2005
	enum <anonymous> kTextEncodingGB_2312_80
	enum <anonymous> kTextEncodingGBK_95
	enum <anonymous> kTextEncodingHZ_GB_2312
	enum <anonymous> kTextEncodingISO10646_1993
	enum <anonymous> kTextEncodingISO_2022_CN
	enum <anonymous> kTextEncodingISO_2022_CN_EXT
	enum <anonymous> kTextEncodingISO_2022_JP
	enum <anonymous> kTextEncodingISO_2022_JP_1
	enum <anonymous> kTextEncodingISO_2022_JP_2
	enum <anonymous> kTextEncodingISO_2022_JP_3
	enum <anonymous> kTextEncodingISO_2022_KR
	enum <anonymous> kTextEncodingISOLatin1
	enum <anonymous> kTextEncodingISOLatin10
	enum <anonymous> kTextEncodingISOLatin2
	enum <anonymous> kTextEncodingISOLatin3
	enum <anonymous> kTextEncodingISOLatin4
	enum <anonymous> kTextEncodingISOLatin5
	enum <anonymous> kTextEncodingISOLatin6
	enum <anonymous> kTextEncodingISOLatin7
	enum <anonymous> kTextEncodingISOLatin8
	enum <anonymous> kTextEncodingISOLatin9
	enum <anonymous> kTextEncodingISOLatinArabic
	enum <anonymous> kTextEncodingISOLatinCyrillic
	enum <anonymous> kTextEncodingISOLatinGreek
	enum <anonymous> kTextEncodingISOLatinHebrew
	enum <anonymous> kTextEncodingJIS_C6226_78
	enum <anonymous> kTextEncodingJIS_X0201_76
	enum <anonymous> kTextEncodingJIS_X0208_83
	enum <anonymous> kTextEncodingJIS_X0208_90
	enum <anonymous> kTextEncodingJIS_X0212_90
	enum <anonymous> kTextEncodingJIS_X0213_MenKuTen
	enum <anonymous> kTextEncodingKOI8_R
	enum <anonymous> kTextEncodingKOI8_U
	enum <anonymous> kTextEncodingKSC_5601_87
	enum <anonymous> kTextEncodingKSC_5601_92_Johab
	enum <anonymous> kTextEncodingMacArabic
	enum <anonymous> kTextEncodingMacArmenian
	enum <anonymous> kTextEncodingMacBengali
	enum <anonymous> kTextEncodingMacBurmese
	enum <anonymous> kTextEncodingMacCeltic
	enum <anonymous> kTextEncodingMacCentralEurRoman
	enum <anonymous> kTextEncodingMacChineseSimp
	enum <anonymous> kTextEncodingMacChineseTrad
	enum <anonymous> kTextEncodingMacCroatian
	enum <anonymous> kTextEncodingMacCyrillic
	enum <anonymous> kTextEncodingMacDevanagari
	enum <anonymous> kTextEncodingMacDingbats
	enum <anonymous> kTextEncodingMacEastEurRoman
	enum <anonymous> kTextEncodingMacEthiopic
	enum <anonymous> kTextEncodingMacExtArabic
	enum <anonymous> kTextEncodingMacFarsi
	enum <anonymous> kTextEncodingMacGaelic
	enum <anonymous> kTextEncodingMacGeez
	enum <anonymous> kTextEncodingMacGeorgian
	enum <anonymous> kTextEncodingMacGreek
	enum <anonymous> kTextEncodingMacGujarati
	enum <anonymous> kTextEncodingMacGurmukhi
	enum <anonymous> kTextEncodingMacHebrew
	enum <anonymous> kTextEncodingMacHFS
	enum <anonymous> kTextEncodingMacIcelandic
	enum <anonymous> kTextEncodingMacInuit
	enum <anonymous> kTextEncodingMacJapanese
	enum <anonymous> kTextEncodingMacKannada
	enum <anonymous> kTextEncodingMacKeyboardGlyphs
	enum <anonymous> kTextEncodingMacKhmer
	enum <anonymous> kTextEncodingMacKorean
	enum <anonymous> kTextEncodingMacLaotian
	enum <anonymous> kTextEncodingMacMalayalam
	enum <anonymous> kTextEncodingMacMongolian
	enum <anonymous> kTextEncodingMacOriya
	enum <anonymous> kTextEncodingMacRoman
	enum <anonymous> kTextEncodingMacRomanian
	enum <anonymous> kTextEncodingMacRomanLatin1
	enum <anonymous> kTextEncodingMacRSymbol
	enum <anonymous> kTextEncodingMacSimpChinese
	enum <anonymous> kTextEncodingMacSinhalese
	enum <anonymous> kTextEncodingMacSymbol
	enum <anonymous> kTextEncodingMacTamil
	enum <anonymous> kTextEncodingMacTelugu
	enum <anonymous> kTextEncodingMacThai
	enum <anonymous> kTextEncodingMacTibetan
	enum <anonymous> kTextEncodingMacTradChinese
	enum <anonymous> kTextEncodingMacTurkish
	enum <anonymous> kTextEncodingMacUkrainian
	enum <anonymous> kTextEncodingMacUnicode
	enum <anonymous> kTextEncodingMacUninterp
	enum <anonymous> kTextEncodingMacVietnamese
	enum <anonymous> kTextEncodingMacVT100
	enum <anonymous> kTextEncodingMultiRun
	enum <anonymous> kTextEncodingNextStepJapanese
	enum <anonymous> kTextEncodingNextStepLatin
	enum <anonymous> kTextEncodingsFolderIcon
	enum <anonymous> kTextEncodingsFolderType
	enum <anonymous> kTextEncodingShiftJIS
	enum <anonymous> kTextEncodingShiftJIS_X0213
	enum <anonymous> kTextEncodingShiftJIS_X0213_00
	enum <anonymous> kTextEncodingUnicodeDefault
	enum <anonymous> kTextEncodingUnicodeV1_1
	enum <anonymous> kTextEncodingUnicodeV2_0
	enum <anonymous> kTextEncodingUnicodeV2_1
	enum <anonymous> kTextEncodingUnicodeV3_0
	enum <anonymous> kTextEncodingUnicodeV3_1
	enum <anonymous> kTextEncodingUnicodeV3_2
	enum <anonymous> kTextEncodingUnicodeV4_0
	enum <anonymous> kTextEncodingUnicodeV5_0
	enum <anonymous> kTextEncodingUnicodeV5_1
	enum <anonymous> kTextEncodingUnicodeV6_0
	enum <anonymous> kTextEncodingUnicodeV6_1
	enum <anonymous> kTextEncodingUnknown
	enum <anonymous> kTextEncodingUS_ASCII
	enum <anonymous> kTextEncodingVariantName
	enum <anonymous> kTextEncodingVISCII
	enum <anonymous> kTextEncodingWindowsANSI
	enum <anonymous> kTextEncodingWindowsArabic
	enum <anonymous> kTextEncodingWindowsBalticRim
	enum <anonymous> kTextEncodingWindowsCyrillic
	enum <anonymous> kTextEncodingWindowsGreek
	enum <anonymous> kTextEncodingWindowsHebrew
	enum <anonymous> kTextEncodingWindowsKoreanJohab
	enum <anonymous> kTextEncodingWindowsLatin1
	enum <anonymous> kTextEncodingWindowsLatin2
	enum <anonymous> kTextEncodingWindowsLatin5
	enum <anonymous> kTextEncodingWindowsVietnamese
	enum <anonymous> kTextFlushDefault
	enum <anonymous> kTextFlushLeft
	enum <anonymous> kTextFlushRight
	enum <anonymous> kTextLanguageDontCare
	enum <anonymous> kTextMalformedInputErr
	enum <anonymous> kTextRegionDontCare
	enum <anonymous> kTextScriptDontCare
	enum <anonymous> kTextServiceClass
	enum <anonymous> kTextSpacingType
	enum <anonymous> kTextToSpeechSynthType
	enum <anonymous> kTextToSpeechVoiceBundleType
	enum <anonymous> kTextToSpeechVoiceFileType
	enum <anonymous> kTextToSpeechVoiceType
	enum <anonymous> kTextUndefinedElementErr
	enum <anonymous> kTextUnsupportedEncodingErr
	enum <anonymous> kThemesFolderType
	enum <anonymous> kThinkCStackBased
	enum <anonymous> kThirdWidthNumbersSelector
	enum <anonymous> kThirdWidthTextSelector
	enum <anonymous> kThumbnail32BitData
	enum <anonymous> kThumbnail8BitMask
	enum <anonymous> kTickScale
	enum <anonymous> kTileIconVariant
	enum <anonymous> kTitlingCapsSelector
	SSLProtocol kTLSProtocol1
	SSLProtocol kTLSProtocol11
	SSLProtocol kTLSProtocol12
	SSLProtocol kTLSProtocol1Only
	enum <anonymous> kTMTaskActive
	enum <anonymous> kToolbarAdvancedIcon
	enum <anonymous> kToolbarApplicationsFolderIcon
	enum <anonymous> kToolbarCustomizeIcon
	enum <anonymous> kToolbarDeleteIcon
	enum <anonymous> kToolbarDesktopFolderIcon
	enum <anonymous> kToolbarDocumentsFolderIcon
	enum <anonymous> kToolbarDownloadsFolderIcon
	enum <anonymous> kToolbarFavoritesIcon
	enum <anonymous> kToolbarHomeIcon
	enum <anonymous> kToolbarInfoIcon
	enum <anonymous> kToolbarLabelsIcon
	enum <anonymous> kToolbarLibraryFolderIcon
	enum <anonymous> kToolbarMovieFolderIcon
	enum <anonymous> kToolbarMusicFolderIcon
	enum <anonymous> kToolbarPicturesFolderIcon
	enum <anonymous> kToolbarPublicFolderIcon
	enum <anonymous> kToolbarSitesFolderIcon
	enum <anonymous> kToolbarUtilitiesFolderIcon
	enum <anonymous> kTooManyIOWindowsErr
	enum <anonymous> kTraceException
	enum <anonymous> kTraditionalAltFiveSelector
	enum <anonymous> kTraditionalAltFourSelector
	enum <anonymous> kTraditionalAltOneSelector
	enum <anonymous> kTraditionalAltThreeSelector
	enum <anonymous> kTraditionalAltTwoSelector
	enum <anonymous> kTraditionalCharactersSelector
	enum <anonymous> kTraditionalNamesCharactersSelector
	enum <anonymous> kTRAKCurrentVersion
	enum <anonymous> kTRAKTag
	enum <anonymous> kTRAKUniformFormat
	enum <anonymous> kTranscodingCompositionOffSelector
	enum <anonymous> kTranscodingCompositionOnSelector
	enum <anonymous> kTransformDisabled
	enum <anonymous> kTransformLabel1
	enum <anonymous> kTransformLabel2
	enum <anonymous> kTransformLabel3
	enum <anonymous> kTransformLabel4
	enum <anonymous> kTransformLabel5
	enum <anonymous> kTransformLabel6
	enum <anonymous> kTransformLabel7
	enum <anonymous> kTransformNone
	enum <anonymous> kTransformOffline
	enum <anonymous> kTransformOpen
	enum <anonymous> kTransformSelected
	enum <anonymous> kTransformSelectedDisabled
	enum <anonymous> kTransformSelectedOffline
	enum <anonymous> kTransformSelectedOpen
	enum <anonymous> kTranslationDataTranslation
	enum <anonymous> kTranslationFileTranslation
	enum <anonymous> kTransliterationType
	enum <anonymous> kTransparentEncodedPixel
	enum <anonymous> kTransparentEncoding
	enum <anonymous> kTransparentEncodingShift
	enum <anonymous> kTrapException
	enum <anonymous> kTrashFolderType
	enum <anonymous> kTrashIcon
	enum <anonymous> kTrashIconResource
	enum <anonymous> kTrueTypeFlatFontIcon
	enum <anonymous> kTrueTypeFontIcon
	enum <anonymous> kTrueTypeMultiFlatFontIcon
	SSLAuthenticate kTryAuthenticate
	enum <anonymous> kTSMHiliteBlockFillText
	enum <anonymous> kTSMHiliteCaretPosition
	enum <anonymous> kTSMHiliteConvertedText
	enum <anonymous> kTSMHiliteNoHilite
	enum <anonymous> kTSMHiliteOutlineText
	enum <anonymous> kTSMHiliteRawText
	enum <anonymous> kTSMHiliteSelectedConvertedText
	enum <anonymous> kTSMHiliteSelectedRawText
	enum <anonymous> kTSMHiliteSelectedText
	enum <anonymous> kTSMInsideOfActiveInputArea
	enum <anonymous> kTSMInsideOfBody
	enum <anonymous> kTSMOutsideOfBody
	enum <anonymous> kTwoByteCode
	enum <anonymous> kTwoWayEncryptPassword
	enum <anonymous> kTXNAlreadyInitializedErr
	enum <anonymous> kTXNATSUIIsNotInstalledErr
	enum <anonymous> kTXNAttributeTagInvalidForRunErr
	enum <anonymous> kTXNBadDefaultFileTypeWarning
	enum <anonymous> kTXNCannotAddFrameErr
	enum <anonymous> kTXNCannotSetAutoIndentErr
	enum <anonymous> kTXNCannotTurnTSMOffWhenUsingUnicodeErr
	enum <anonymous> kTXNCopyNotAllowedInEchoModeErr
	enum <anonymous> kTXNDataTypeNotAllowedErr
	enum <anonymous> kTXNEndIterationErr
	enum <anonymous> kTXNIllegalToCrossDataBoundariesErr
	enum <anonymous> kTXNInvalidFrameIDErr
	enum <anonymous> kTXNInvalidRunIndex
	enum <anonymous> kTXNNoMatchErr
	enum <anonymous> kTXNOutsideOfFrameErr
	enum <anonymous> kTXNOutsideOfLineErr
	enum <anonymous> kTXNRunIndexOutofBoundsErr
	enum <anonymous> kTXNSomeOrAllTagsInvalidForRunErr
	enum <anonymous> kTXNUserCanceledOperationErr
	enum <anonymous> kTypeKCItemAttr
	enum <anonymous> kTypographicExtrasType
	enum <anonymous> kUAZoomFocusTypeInsertionPoint
	enum <anonymous> kUAZoomFocusTypeOther
	enum <anonymous> kUCBidiCatArabicNumber
	enum <anonymous> kUCBidiCatBlockSeparator
	enum <anonymous> kUCBidiCatBoundaryNeutral
	enum <anonymous> kUCBidiCatCommonNumberSeparator
	enum <anonymous> kUCBidiCatEuroNumber
	enum <anonymous> kUCBidiCatEuroNumberSeparator
	enum <anonymous> kUCBidiCatEuroNumberTerminator
	enum <anonymous> kUCBidiCatLeftRight
	enum <anonymous> kUCBidiCatLeftRightEmbedding
	enum <anonymous> kUCBidiCatLeftRightOverride
	enum <anonymous> kUCBidiCatNonSpacingMark
	enum <anonymous> kUCBidiCatNotApplicable
	enum <anonymous> kUCBidiCatOtherNeutral
	enum <anonymous> kUCBidiCatPopDirectionalFormat
	enum <anonymous> kUCBidiCatRightLeft
	enum <anonymous> kUCBidiCatRightLeftArabic
	enum <anonymous> kUCBidiCatRightLeftEmbedding
	enum <anonymous> kUCBidiCatRightLeftOverride
	enum <anonymous> kUCBidiCatSegmentSeparator
	enum <anonymous> kUCBidiCatWhitespace
	enum <anonymous> kUCCharPropTypeBidiCategory
	enum <anonymous> kUCCharPropTypeCombiningClass
	enum <anonymous> kUCCharPropTypeDecimalDigitValue
	enum <anonymous> kUCCharPropTypeGenlCategory
	enum <anonymous> kUCCollateCaseInsensitiveMask
	enum <anonymous> kUCCollateComposeInsensitiveMask
	enum <anonymous> kUCCollateDiacritInsensitiveMask
	enum <anonymous> kUCCollateDigitsAsNumberMask
	enum <anonymous> kUCCollateDigitsOverrideMask
	enum <anonymous> kUCCollatePunctuationSignificantMask
	enum <anonymous> kUCCollateStandardOptions
	enum <anonymous> kUCCollateTypeHFSExtended
	enum <anonymous> kUCCollateTypeMask
	enum <anonymous> kUCCollateTypeShiftBits
	enum <anonymous> kUCCollateTypeSourceMask
	enum <anonymous> kUCCollateWidthInsensitiveMask
	enum <anonymous> kUCGenlCatLetterLowercase
	enum <anonymous> kUCGenlCatLetterModifier
	enum <anonymous> kUCGenlCatLetterOther
	enum <anonymous> kUCGenlCatLetterTitlecase
	enum <anonymous> kUCGenlCatLetterUppercase
	enum <anonymous> kUCGenlCatMarkEnclosing
	enum <anonymous> kUCGenlCatMarkNonSpacing
	enum <anonymous> kUCGenlCatMarkSpacingCombining
	enum <anonymous> kUCGenlCatNumberDecimalDigit
	enum <anonymous> kUCGenlCatNumberLetter
	enum <anonymous> kUCGenlCatNumberOther
	enum <anonymous> kUCGenlCatOtherControl
	enum <anonymous> kUCGenlCatOtherFormat
	enum <anonymous> kUCGenlCatOtherNotAssigned
	enum <anonymous> kUCGenlCatOtherPrivateUse
	enum <anonymous> kUCGenlCatOtherSurrogate
	enum <anonymous> kUCGenlCatPunctClose
	enum <anonymous> kUCGenlCatPunctConnector
	enum <anonymous> kUCGenlCatPunctDash
	enum <anonymous> kUCGenlCatPunctFinalQuote
	enum <anonymous> kUCGenlCatPunctInitialQuote
	enum <anonymous> kUCGenlCatPunctOpen
	enum <anonymous> kUCGenlCatPunctOther
	enum <anonymous> kUCGenlCatSeparatorLine
	enum <anonymous> kUCGenlCatSeparatorParagraph
	enum <anonymous> kUCGenlCatSeparatorSpace
	enum <anonymous> kUCGenlCatSymbolCurrency
	enum <anonymous> kUCGenlCatSymbolMath
	enum <anonymous> kUCGenlCatSymbolModifier
	enum <anonymous> kUCGenlCatSymbolOther
	enum <anonymous> kUCHighSurrogateRangeEnd
	enum <anonymous> kUCHighSurrogateRangeStart
	enum <anonymous> kUCKeyActionAutoKey
	enum <anonymous> kUCKeyActionDisplay
	enum <anonymous> kUCKeyActionDown
	enum <anonymous> kUCKeyActionUp
	enum <anonymous> kUCKeyLayoutFeatureInfoFormat
	enum <anonymous> kUCKeyLayoutHeaderFormat
	enum <anonymous> kUCKeyModifiersToTableNumFormat
	enum <anonymous> kUCKeyOutputGetIndexMask
	enum <anonymous> kUCKeyOutputSequenceIndexMask
	enum <anonymous> kUCKeyOutputStateIndexMask
	enum <anonymous> kUCKeyOutputTestForIndexMask
	enum <anonymous> kUCKeySequenceDataIndexFormat
	enum <anonymous> kUCKeyStateEntryRangeFormat
	enum <anonymous> kUCKeyStateEntryTerminalFormat
	enum <anonymous> kUCKeyStateRecordsIndexFormat
	enum <anonymous> kUCKeyStateTerminatorsFormat
	enum <anonymous> kUCKeyToCharTableIndexFormat
	enum <anonymous> kUCKeyTranslateNoDeadKeysBit
	enum <anonymous> kUCKeyTranslateNoDeadKeysMask
	enum <anonymous> kUCLowSurrogateRangeEnd
	enum <anonymous> kUCLowSurrogateRangeStart
	enum <anonymous> kUCOutputBufferTooSmall
	enum <anonymous> kUCTextBreakCharMask
	enum <anonymous> kUCTextBreakClusterMask
	enum <anonymous> kUCTextBreakGoBackwardsMask
	enum <anonymous> kUCTextBreakIterateMask
	enum <anonymous> kUCTextBreakLeadingEdgeMask
	enum <anonymous> kUCTextBreakLineMask
	enum <anonymous> kUCTextBreakLocatorMissingType
	enum <anonymous> kUCTextBreakParagraphMask
	enum <anonymous> kUCTextBreakWordMask
	enum <anonymous> kUCTokenizerIterationFinished
	enum <anonymous> kUCTokenizerUnknownLang
	enum <anonymous> kUCTokenNotFound
	enum <anonymous> kUCTSDirectionNext
	enum <anonymous> kUCTSDirectionPrevious
	enum <anonymous> kUCTSNoKeysAddedToObjectErr
	enum <anonymous> kUCTSOptionsDataIsOrderedMask
	enum <anonymous> kUCTSOptionsNoneMask
	enum <anonymous> kUCTSOptionsReleaseStringMask
	enum <anonymous> kUCTSSearchListErr
	enum <anonymous> kUCTypeSelectMaxListSize
	enum <anonymous> kUnconnectedSelector
	enum <anonymous> kUnicode16BitFormat
	enum <anonymous> kUnicode32BitFormat
	enum <anonymous> kUnicodeByteOrderMark
	enum <anonymous> kUnicodeCanonicalCompVariant
	enum <anonymous> kUnicodeCanonicalDecompVariant
	enum <anonymous> kUnicodeCollationClass
	enum <anonymous> kUnicodeDecompositionType
	enum <anonymous> kUnicodeDefaultDirection
	enum <anonymous> kUnicodeDefaultDirectionMask
	enum <anonymous> kUnicodeDirectionalityBits
	enum <anonymous> kUnicodeDirectionalityMask
	enum <anonymous> kUnicodeFallbackCustomFirst
	enum <anonymous> kUnicodeFallbackCustomOnly
	enum <anonymous> kUnicodeFallbackDefaultFirst
	enum <anonymous> kUnicodeFallbackDefaultOnly
	enum <anonymous> kUnicodeFallbackInterruptSafeMask
	enum <anonymous> kUnicodeFallbackSequencingBits
	enum <anonymous> kUnicodeFallbackSequencingMask
	enum <anonymous> kUnicodeForceASCIIRangeBit
	enum <anonymous> kUnicodeForceASCIIRangeMask
	enum <anonymous> kUnicodeHFSPlusCompVariant
	enum <anonymous> kUnicodeHFSPlusDecompVariant
	enum <anonymous> kUnicodeKeepInfoBit
	enum <anonymous> kUnicodeKeepInfoMask
	enum <anonymous> kUnicodeKeepSameEncodingBit
	enum <anonymous> kUnicodeKeepSameEncodingMask
	enum <anonymous> kUnicodeLeftToRight
	enum <anonymous> kUnicodeLeftToRightMask
	enum <anonymous> kUnicodeLooseMappingsBit
	enum <anonymous> kUnicodeLooseMappingsMask
	enum <anonymous> kUnicodeMapLineFeedToReturnBit
	enum <anonymous> kUnicodeMapLineFeedToReturnMask
	enum <anonymous> kUnicodeMatchOtherBaseBit
	enum <anonymous> kUnicodeMatchOtherBaseMask
	enum <anonymous> kUnicodeMatchOtherFormatBit
	enum <anonymous> kUnicodeMatchOtherFormatMask
	enum <anonymous> kUnicodeMatchOtherVariantBit
	enum <anonymous> kUnicodeMatchOtherVariantMask
	enum <anonymous> kUnicodeMatchUnicodeBaseBit
	enum <anonymous> kUnicodeMatchUnicodeBaseMask
	enum <anonymous> kUnicodeMatchUnicodeFormatBit
	enum <anonymous> kUnicodeMatchUnicodeFormatMask
	enum <anonymous> kUnicodeMatchUnicodeVariantBit
	enum <anonymous> kUnicodeMatchUnicodeVariantMask
	enum <anonymous> kUnicodeMaxDecomposedVariant
	enum <anonymous> kUnicodeNoCompatibilityVariant
	enum <anonymous> kUnicodeNoComposedVariant
	enum <anonymous> kUnicodeNoCorporateVariant
	enum <anonymous> kUnicodeNoHalfwidthCharsBit
	enum <anonymous> kUnicodeNoHalfwidthCharsMask
	enum <anonymous> kUnicodeNormalizationFormC
	enum <anonymous> kUnicodeNormalizationFormD
	enum <anonymous> kUnicodeNoSubset
	enum <anonymous> kUnicodeNotAChar
	enum <anonymous> kUnicodeNotFromInputMethod
	enum <anonymous> kUnicodeObjectReplacement
	enum <anonymous> kUnicodeReplacementChar
	enum <anonymous> kUnicodeRightToLeft
	enum <anonymous> kUnicodeRightToLeftMask
	enum <anonymous> kUnicodeSCSUFormat
	enum <anonymous> kUnicodeStringUnterminatedBit
	enum <anonymous> kUnicodeStringUnterminatedMask
	enum <anonymous> kUnicodeSwappedByteOrderMark
	enum <anonymous> kUnicodeTextBreakClass
	enum <anonymous> kUnicodeTextRunBit
	enum <anonymous> kUnicodeTextRunHeuristicsBit
	enum <anonymous> kUnicodeTextRunHeuristicsMask
	enum <anonymous> kUnicodeTextRunMask
	enum <anonymous> kUnicodeUseExternalEncodingFormBit
	enum <anonymous> kUnicodeUseExternalEncodingFormMask
	enum <anonymous> kUnicodeUseFallbacksBit
	enum <anonymous> kUnicodeUseFallbacksMask
	enum <anonymous> kUnicodeUseHFSPlusMapping
	enum <anonymous> kUnicodeUseLatestMapping
	enum <anonymous> kUnicodeUTF16BEFormat
	enum <anonymous> kUnicodeUTF16Format
	enum <anonymous> kUnicodeUTF16LEFormat
	enum <anonymous> kUnicodeUTF32BEFormat
	enum <anonymous> kUnicodeUTF32Format
	enum <anonymous> kUnicodeUTF32LEFormat
	enum <anonymous> kUnicodeUTF7Format
	enum <anonymous> kUnicodeUTF8Format
	enum <anonymous> kUnicodeVerticalFormBit
	enum <anonymous> kUnicodeVerticalFormMask
	enum <anonymous> kUnknownException
	enum <anonymous> kUnknownFSObjectIcon
	enum <anonymous> kUnknownType
	enum <anonymous> kUnlockedIcon
	enum <anonymous> kUnlockKCEvent
	enum <anonymous> kUnlockKCEventMask
	enum <anonymous> kUnlockStateKCStatus
	enum <anonymous> kUnmappedMemoryException
	enum <anonymous> kUnresolvablePageFaultException
	enum <anonymous> kUnsupportedCardErr
	enum <anonymous> kUnsupportedFunctionErr
	enum <anonymous> kUnsupportedModeErr
	enum <anonymous> kUnsupportedVsErr
	enum <anonymous> kUnwrapKCItemAttr
	enum <anonymous> kUpdateActiveInputArea
	enum <anonymous> kUpdateKCEvent
	enum <anonymous> kUpdateKCEventMask
	enum <anonymous> kUpperAndLowerCaseSelector
	enum <anonymous> kUpperCaseNumbersSelector
	enum <anonymous> kUpperCasePetiteCapsSelector
	enum <anonymous> kUpperCaseSmallCapsSelector
	enum <anonymous> kUpperCaseType
	enum <anonymous> kURL68kNotSupportedError
	enum <anonymous> kURLAccessNotAvailableError
	enum <anonymous> kURLAuthenticationError
	enum <anonymous> kURLDestinationExistsError
	enum <anonymous> kURLExtensionFailureError
	enum <anonymous> kURLFileEmptyError
	enum <anonymous> kURLInvalidCallError
	enum <anonymous> kURLInvalidConfigurationError
	enum <anonymous> kURLInvalidURLError
	enum <anonymous> kURLInvalidURLReferenceError
	enum <anonymous> kURLProgressAlreadyDisplayedError
	enum <anonymous> kURLPropertyBufferTooSmallError
	enum <anonymous> kURLPropertyNotYetKnownError
	enum <anonymous> kURLServerBusyError
	enum <anonymous> kURLUnknownPropertyError
	enum <anonymous> kURLUnsettablePropertyError
	enum <anonymous> kURLUnsupportedSchemeError
	enum <anonymous> kUSBAbortedError
	enum <anonymous> kUSBAlreadyOpenErr
	enum <anonymous> kUSBBadDispatchTable
	enum <anonymous> kUSBBitstufErr
	enum <anonymous> kUSBBufOvrRunErr
	enum <anonymous> kUSBBufUnderRunErr
	enum <anonymous> kUSBCompletionError
	enum <anonymous> kUSBCRCErr
	enum <anonymous> kUSBDataToggleErr
	enum <anonymous> kUSBDeviceBusy
	enum <anonymous> kUSBDeviceDisconnected
	enum <anonymous> kUSBDeviceErr
	enum <anonymous> kUSBDeviceNotSuspended
	enum <anonymous> kUSBDevicePowerProblem
	enum <anonymous> kUSBDeviceSuspended
	enum <anonymous> kUSBEndpointStallErr
	enum <anonymous> kUSBFlagsError
	enum <anonymous> kUSBIncorrectTypeErr
	enum <anonymous> kUSBInternalErr
	enum <anonymous> kUSBInternalReserved1
	enum <anonymous> kUSBInternalReserved10
	enum <anonymous> kUSBInternalReserved2
	enum <anonymous> kUSBInternalReserved3
	enum <anonymous> kUSBInternalReserved4
	enum <anonymous> kUSBInternalReserved5
	enum <anonymous> kUSBInternalReserved6
	enum <anonymous> kUSBInternalReserved7
	enum <anonymous> kUSBInternalReserved8
	enum <anonymous> kUSBInternalReserved9
	enum <anonymous> kUSBInvalidBuffer
	enum <anonymous> kUSBLinkErr
	enum <anonymous> kUSBNoBandwidthError
	enum <anonymous> kUSBNoDelay
	enum <anonymous> kUSBNoDeviceErr
	enum <anonymous> kUSBNoErr
	enum <anonymous> kUSBNotFound
	enum <anonymous> kUSBNotHandled
	enum <anonymous> kUSBNoTran
	enum <anonymous> kUSBNotRespondingErr
	enum <anonymous> kUSBNotSent1Err
	enum <anonymous> kUSBNotSent2Err
	enum <anonymous> kUSBOutOfMemoryErr
	enum <anonymous> kUSBOverRunErr
	enum <anonymous> kUSBPBLengthError
	enum <anonymous> kUSBPBVersionError
	enum <anonymous> kUSBPending
	enum <anonymous> kUSBPIDCheckErr
	enum <anonymous> kUSBPipeIdleError
	enum <anonymous> kUSBPipeStalledError
	enum <anonymous> kUSBPortDisabled
	enum <anonymous> kUSBQueueAborted
	enum <anonymous> kUSBQueueFull
	enum <anonymous> kUSBRes1Err
	enum <anonymous> kUSBRes2Err
	enum <anonymous> kUSBRqErr
	enum <anonymous> kUSBTimedOut
	enum <anonymous> kUSBTooManyPipesErr
	enum <anonymous> kUSBTooManyTransactionsErr
	enum <anonymous> kUSBUnderRunErr
	enum <anonymous> kUSBUnknownDeviceErr
	enum <anonymous> kUSBUnknownInterfaceErr
	enum <anonymous> kUSBUnknownNotification
	enum <anonymous> kUSBUnknownPipeErr
	enum <anonymous> kUSBUnknownRequestErr
	enum <anonymous> kUSBWrongPIDErr
	enum <anonymous> kUseAtoB
	enum <anonymous> kUseBtoA
	enum <anonymous> kUseBtoB
	enum <anonymous> kUseCurrentISA
	enum <anonymous> kUseNativeISA
	enum <anonymous> kUsePremadeThread
	enum <anonymous> kUseProfileIntent
	enum <anonymous> kUserDomain
	enum <anonymous> kUserFolderIcon
	enum <anonymous> kUserIcon
	enum <anonymous> kUserIDiskIcon
	enum <anonymous> kUserPPDDomain
	enum <anonymous> kUsersFolderIcon
	enum <anonymous> kUsersFolderType
	enum <anonymous> kUserSpecificTmpFolderType
	enum <anonymous> kUseWidePositioning
	enum <anonymous> kUTCDefaultOptions
	enum <anonymous> kUTCOverflowErr
	enum <anonymous> kUTCUnderflowErr
	const CFStringRef kUTExportedTypeDeclarationsKey
	enum <anonymous> kUtilitiesFolderIcon
	enum <anonymous> kUtilitiesFolderType
	const CFStringRef kUTImportedTypeDeclarationsKey
	const CFStringRef kUTTagClassFilenameExtension
	const CFStringRef kUTTagClassMIMEType
	const CFStringRef kUTTagClassNSPboardType
	const CFStringRef kUTTagClassOSType
	const CFStringRef kUTTypeAliasFile
	const CFStringRef kUTTypeAliasRecord
	const CFStringRef kUTTypeAppleICNS
	const CFStringRef kUTTypeAppleProtectedMPEG4Audio
	const CFStringRef kUTTypeApplication
	const CFStringRef kUTTypeApplicationBundle
	const CFStringRef kUTTypeApplicationFile
	const CFStringRef kUTTypeArchive
	const CFStringRef kUTTypeAudio
	const CFStringRef kUTTypeAudiovisualContent
	const CFStringRef kUTTypeBMP
	const CFStringRef kUTTypeBundle
	const CFStringRef kUTTypeCHeader
	const CFStringRef kUTTypeCompositeContent
	const CFStringRef kUTTypeConformsToKey
	const CFStringRef kUTTypeContact
	const CFStringRef kUTTypeContent
	const CFStringRef kUTTypeCPlusPlusHeader
	const CFStringRef kUTTypeCPlusPlusSource
	const CFStringRef kUTTypeCSource
	const CFStringRef kUTTypeData
	const CFStringRef kUTTypeDescriptionKey
	const CFStringRef kUTTypeDirectory
	const CFStringRef kUTTypeDiskImage
	const CFStringRef kUTTypeFileURL
	const CFStringRef kUTTypeFlatRTFD
	const CFStringRef kUTTypeFolder
	const CFStringRef kUTTypeFramework
	const CFStringRef kUTTypeGIF
	const CFStringRef kUTTypeHTML
	const CFStringRef kUTTypeICO
	const CFStringRef kUTTypeIconFileKey
	const CFStringRef kUTTypeIdentifierKey
	const CFStringRef kUTTypeImage
	const CFStringRef kUTTypeInkText
	const CFStringRef kUTTypeItem
	const CFStringRef kUTTypeJavaSource
	const CFStringRef kUTTypeJPEG
	const CFStringRef kUTTypeJPEG2000
	const CFStringRef kUTTypeMessage
	const CFStringRef kUTTypeMountPoint
	const CFStringRef kUTTypeMovie
	const CFStringRef kUTTypeMP3
	const CFStringRef kUTTypeMPEG
	const CFStringRef kUTTypeMPEG4
	const CFStringRef kUTTypeMPEG4Audio
	const CFStringRef kUTTypeObjectiveCPlusPlusSource
	const CFStringRef kUTTypeObjectiveCSource
	const CFStringRef kUTTypePackage
	const CFStringRef kUTTypePDF
	const CFStringRef kUTTypePICT
	const CFStringRef kUTTypePlainText
	const CFStringRef kUTTypePNG
	const CFStringRef kUTTypeQuickTimeImage
	const CFStringRef kUTTypeQuickTimeMovie
	const CFStringRef kUTTypeReferenceURLKey
	const CFStringRef kUTTypeResolvable
	const CFStringRef kUTTypeRTF
	const CFStringRef kUTTypeRTFD
	const CFStringRef kUTTypeSourceCode
	const CFStringRef kUTTypeSymLink
	const CFStringRef kUTTypeTagSpecificationKey
	const CFStringRef kUTTypeText
	const CFStringRef kUTTypeTIFF
	const CFStringRef kUTTypeTXNTextAndMultimediaData
	const CFStringRef kUTTypeURL
	const CFStringRef kUTTypeUTF16ExternalPlainText
	const CFStringRef kUTTypeUTF16PlainText
	const CFStringRef kUTTypeUTF8PlainText
	const CFStringRef kUTTypeVCard
	const CFStringRef kUTTypeVersionKey
	const CFStringRef kUTTypeVideo
	const CFStringRef kUTTypeVolume
	const CFStringRef kUTTypeWebArchive
	const CFStringRef kUTTypeXML
	enum <anonymous> kUYVY422PixelFormat
	enum <anonymous> kVariableLengthArray
	enum <anonymous> kVCBFlagsHardwareGoneBit
	enum <anonymous> kVCBFlagsHardwareGoneMask
	enum <anonymous> kVCBFlagsHFSPlusAPIsBit
	enum <anonymous> kVCBFlagsHFSPlusAPIsMask
	enum <anonymous> kVCBFlagsIdleFlushBit
	enum <anonymous> kVCBFlagsIdleFlushMask
	enum <anonymous> kVCBFlagsVolumeDirtyBit
	enum <anonymous> kVCBFlagsVolumeDirtyMask
	enum <anonymous> kVerifyKCItemAttr
	enum <anonymous> kVerticalConstraint
	enum <anonymous> kVerticalFractionsSelector
	enum <anonymous> kVerticalPositionType
	enum <anonymous> kVerticalSubstitutionType
	enum <anonymous> kVLibTag2
	enum <anonymous> kVoicesFolderIcon
	enum <anonymous> kVoicesFolderType
	enum <anonymous> kVolumeKCItemAttr
	enum <anonymous> kVolumeRootFolderType
	enum <anonymous> kVolumeSettingsFolderType
	enum <anonymous> kWakeToDoze
	enum <anonymous> kWhereToEmptyTrashFolderType
	enum <anonymous> kWidePosOffsetBit
	enum <anonymous> kWidgetsFolderType
	enum <anonymous> kWindowsLatin1PalmVariant
	enum <anonymous> kWindowsLatin1StandardVariant
	enum <anonymous> kWordFinalSwashesOffSelector
	enum <anonymous> kWordFinalSwashesOnSelector
	enum <anonymous> kWordInitialSwashesOffSelector
	enum <anonymous> kWordInitialSwashesOnSelector
	enum <anonymous> kWorkgroupFolderIcon
	enum <anonymous> kWrapKCItemAttr
	enum <anonymous> kWriteFailureErr
	enum <anonymous> kWriteProtectedErr
	enum <anonymous> kWriteReference
	enum <anonymous> kWrPermKCStatus
	CFStringRef kWSDebugIncomingBody
	CFStringRef kWSDebugIncomingHeaders
	CFStringRef kWSDebugOutgoingBody
	CFStringRef kWSDebugOutgoingHeaders
	CFStringRef kWSFaultCode
	CFStringRef kWSFaultExtra
	CFStringRef kWSFaultString
	CFStringRef kWSHTTPExtraHeaders
	CFStringRef kWSHTTPFollowsRedirects
	CFStringRef kWSHTTPMessage
	CFStringRef kWSHTTPProxy
	CFStringRef kWSHTTPResponseMessage
	CFStringRef kWSHTTPVersion
	CFStringRef kWSMethodInvocationResult
	CFStringRef kWSMethodInvocationResultParameterName
	CFStringRef kWSMethodInvocationTimeoutValue
	CFStringRef kWSNetworkStreamFaultString
	CFStringRef kWSRecordNamespaceURI
	CFStringRef kWSRecordParameterOrder
	CFStringRef kWSRecordType
	CFStringRef kWSSOAP1999Protocol
	CFStringRef kWSSOAP2001Protocol
	CFStringRef kWSSOAPBodyEncodingStyle
	CFStringRef kWSSOAPMessageHeaders
	CFStringRef kWSSOAPMethodNamespaceURI
	CFStringRef kWSSOAPStyleDoc
	CFStringRef kWSSOAPStyleRPC
	CFStringRef kWSStreamErrorDomain
	CFStringRef kWSStreamErrorError
	CFStringRef kWSStreamErrorMessage
	CFStringRef kWSXMLRPCProtocol
	enum <anonymous> kX86ISA
	enum <anonymous> kX86RTA
	enum <anonymous> kXLibTag1
	enum <anonymous> kXLibVersion
	enum <anonymous> kYUV211PixelFormat
	enum <anonymous> kYUV411PixelFormat
	enum <anonymous> kYUVSPixelFormat
	enum <anonymous> kYUVUPixelFormat
	enum <anonymous> kYVU9PixelFormat
	enum <anonymous> kYVYU422PixelFormat
	enum <anonymous> laDictionaryNotOpenedErr
	enum <anonymous> laDictionaryTooManyErr
	enum <anonymous> laDictionaryUnknownErr
	enum <anonymous> laEngineNotFoundErr
	enum <anonymous> laEnvironmentBusyErr
	enum <anonymous> laEnvironmentExistErr
	enum <anonymous> laEnvironmentNotFoundErr
	enum <anonymous> laFailAnalysisErr
	enum <anonymous> laInvalidPathErr
	enum <anonymous> langAfricaans
	enum <anonymous> langAfrikaans
	enum <anonymous> langAlbanian
	enum <anonymous> langAmharic
	enum <anonymous> langArabic
	enum <anonymous> langArmenian
	enum <anonymous> langAssamese
	enum <anonymous> langAymara
	enum <anonymous> langAzerbaijanAr
	enum <anonymous> langAzerbaijani
	enum <anonymous> langAzerbaijanRoman
	enum <anonymous> langBasque
	enum <anonymous> langBelorussian
	enum <anonymous> langBengali
	enum <anonymous> langBreton
	enum <anonymous> langBulgarian
	enum <anonymous> langBurmese
	enum <anonymous> langByelorussian
	enum <anonymous> langCatalan
	enum <anonymous> langChewa
	enum <anonymous> langChinese
	enum <anonymous> langCroatian
	enum <anonymous> langCzech
	enum <anonymous> langDanish
	enum <anonymous> langDutch
	enum <anonymous> langDzongkha
	enum <anonymous> langEnglish
	enum <anonymous> langEsperanto
	enum <anonymous> langEstonian
	enum <anonymous> langFaeroese
	enum <anonymous> langFaroese
	enum <anonymous> langFarsi
	enum <anonymous> langFinnish
	enum <anonymous> langFlemish
	enum <anonymous> langFrench
	enum <anonymous> langGalician
	enum <anonymous> langGalla
	enum <anonymous> langGeorgian
	enum <anonymous> langGerman
	enum <anonymous> langGreek
	enum <anonymous> langGreekAncient
	enum <anonymous> langGreekPoly
	enum <anonymous> langGreenlandic
	enum <anonymous> langGuarani
	enum <anonymous> langGujarati
	enum <anonymous> langHebrew
	enum <anonymous> langHindi
	enum <anonymous> langHungarian
	enum <anonymous> langIcelandic
	enum <anonymous> langIndonesian
	enum <anonymous> langInuktitut
	enum <anonymous> langIrish
	enum <anonymous> langIrishGaelic
	enum <anonymous> langIrishGaelicScript
	enum <anonymous> langItalian
	enum <anonymous> langJapanese
	enum <anonymous> langJavaneseRom
	enum <anonymous> langKannada
	enum <anonymous> langKashmiri
	enum <anonymous> langKazakh
	enum <anonymous> langKhmer
	enum <anonymous> langKinyarwanda
	enum <anonymous> langKirghiz
	enum <anonymous> langKorean
	enum <anonymous> langKurdish
	enum <anonymous> langLao
	enum <anonymous> langLappish
	enum <anonymous> langLapponian
	enum <anonymous> langLatin
	enum <anonymous> langLatvian
	enum <anonymous> langLettish
	enum <anonymous> langLithuanian
	enum <anonymous> langMacedonian
	enum <anonymous> langMalagasy
	enum <anonymous> langMalayalam
	enum <anonymous> langMalayArabic
	enum <anonymous> langMalayRoman
	enum <anonymous> langMalta
	enum <anonymous> langMaltese
	enum <anonymous> langManxGaelic
	enum <anonymous> langMarathi
	enum <anonymous> langMoldavian
	enum <anonymous> langMongolian
	enum <anonymous> langMongolianCyr
	enum <anonymous> langNepali
	enum <anonymous> langNorwegian
	enum <anonymous> langNyanja
	enum <anonymous> langNynorsk
	enum <anonymous> langOriya
	enum <anonymous> langOromo
	enum <anonymous> langPashto
	enum <anonymous> langPersian
	enum <anonymous> langPolish
	enum <anonymous> langPortugese
	enum <anonymous> langPortuguese
	enum <anonymous> langPunjabi
	enum <anonymous> langQuechua
	enum <anonymous> langRomanian
	enum <anonymous> langRuanda
	enum <anonymous> langRundi
	enum <anonymous> langRussian
	enum <anonymous> langSaamisk
	enum <anonymous> langSami
	enum <anonymous> langSanskrit
	enum <anonymous> langScottishGaelic
	enum <anonymous> langSerbian
	enum <anonymous> langSimpChinese
	enum <anonymous> langSindhi
	enum <anonymous> langSinhalese
	enum <anonymous> langSlovak
	enum <anonymous> langSlovenian
	enum <anonymous> langSomali
	enum <anonymous> langSpanish
	enum <anonymous> langSundaneseRom
	enum <anonymous> langSwahili
	enum <anonymous> langSwedish
	enum <anonymous> langTagalog
	enum <anonymous> langTajiki
	enum <anonymous> langTamil
	enum <anonymous> langTatar
	enum <anonymous> langTelugu
	enum <anonymous> langThai
	enum <anonymous> langTibetan
	enum <anonymous> langTigrinya
	enum <anonymous> langTongan
	enum <anonymous> langTradChinese
	enum <anonymous> langTurkish
	enum <anonymous> langTurkmen
	enum <anonymous> langUighur
	enum <anonymous> langUkrainian
	enum <anonymous> langUnspecified
	enum <anonymous> langUrdu
	enum <anonymous> langUzbek
	enum <anonymous> langVietnamese
	enum <anonymous> langWelsh
	enum <anonymous> langYiddish
	enum <anonymous> langYugoslavian
	enum <anonymous> laNoMoreMorphemeErr
	enum <anonymous> lapProtErr
	enum <anonymous> laPropertyErr
	enum <anonymous> laPropertyIsReadOnlyErr
	enum <anonymous> laPropertyNotFoundErr
	enum <anonymous> laPropertyUnknownErr
	enum <anonymous> laPropertyValueErr
	enum <anonymous> large1BitMask
	enum <anonymous> large4BitData
	enum <anonymous> large8BitData
	enum <anonymous> lastDskErr
	enum <anonymous> laTextOverFlowErr
	enum <anonymous> laTooSmallBufferErr
	enum <anonymous> launchAllow24Bit
	enum <anonymous> launchContinue
	enum <anonymous> launchDontSwitch
	enum <anonymous> launchInhibitDaemon
	enum <anonymous> launchNoFileFlags
	enum <anonymous> launchUseMinimum
	enum <anonymous> leftOverChars
	enum <anonymous> leftSingGuillemet
	enum <anonymous> LESSTHAN
	enum <anonymous> limitReachedErr
	enum <anonymous> localOnlyErr
	enum <anonymous> lockPortBitsBadPortErr
	enum <anonymous> lockPortBitsBadSurfaceErr
	enum <anonymous> lockPortBitsSurfaceLostErr
	enum <anonymous> lockPortBitsWindowClippedErr
	enum <anonymous> lockPortBitsWindowMovedErr
	enum <anonymous> lockPortBitsWindowResizedErr
	enum <anonymous> lockPortBitsWrongGDeviceErr
	enum <anonymous> longDate
	enum <anonymous> longDateFound
	enum <anonymous> longDay
	enum <anonymous> longMonth
	enum <anonymous> longWeek
	enum <anonymous> longYear
	enum <anonymous> macDev
	enum <anonymous> MACE3Type
	enum <anonymous> MACE6Type
	mach_port_t mach_task_self_
	enum <anonymous> macron
	enum <anonymous> mapChanged
	enum <anonymous> mapChangedBit
	enum <anonymous> mapCompact
	enum <anonymous> mapCompactBit
	enum <anonymous> mapReadErr
	enum <anonymous> mapReadOnly
	enum <anonymous> mapReadOnlyBit
	enum <anonymous> MarkerID
	enum <anonymous> matrixErr
	enum <anonymous> maxCountry
	enum <anonymous> maxDateField
	enum <anonymous> maxSizeToGrowTooSmall
	enum <anonymous> mBarNFnd
	enum <anonymous> mdy
	enum <anonymous> mediaTypesDontMatch
	enum <anonymous> memAdrErr
	enum <anonymous> memAZErr
	enum <anonymous> memBCErr
	enum <anonymous> memFragErr
	enum <anonymous> memFullErr
	enum <anonymous> memLockedErr
	enum <anonymous> memPCErr
	enum <anonymous> memPurErr
	enum <anonymous> memROZErr
	enum <anonymous> memROZError
	enum <anonymous> memROZWarn
	enum <anonymous> memSCErr
	enum <anonymous> memWZErr
	enum <anonymous> menuInvalidErr
	enum <anonymous> menuItemNotFoundErr
	enum <anonymous> menuNotFoundErr
	enum <anonymous> menuPrgErr
	enum <anonymous> menuPropertyInvalid
	enum <anonymous> menuPropertyInvalidErr
	enum <anonymous> menuPropertyNotFoundErr
	enum <anonymous> menuUsesSystemDefErr
	enum <anonymous> mFulErr
	enum <anonymous> MIDIDataID
	enum <anonymous> midiDupIDErr
	enum <anonymous> midiInvalidCmdErr
	enum <anonymous> midiManagerAbsentOSErr
	enum <anonymous> midiNameLenErr
	enum <anonymous> midiNoClientErr
	enum <anonymous> midiNoConErr
	enum <anonymous> midiNoPortErr
	enum <anonymous> midiTooManyConsErr
	enum <anonymous> midiTooManyPortsErr
	enum <anonymous> midiVConnectErr
	enum <anonymous> midiVConnectMade
	enum <anonymous> midiVConnectRmvd
	enum <anonymous> midiWriteErr
	enum <anonymous> minCountry
	enum <anonymous> mini1BitMask
	enum <anonymous> mini4BitData
	enum <anonymous> mini8BitData
	enum <anonymous> minLeadingZ
	enum <anonymous> minuteField
	enum <anonymous> minuteMask
	enum <anonymous> missingRequiredParameterErr
	enum <anonymous> mmInternalError
	enum <anonymous> mntLdingZ
	enum <anonymous> mode32BitCompatible
	enum <anonymous> modeCanBackground
	enum <anonymous> modeControlPanel
	enum <anonymous> modeDeskAccessory
	enum <anonymous> modeDisplayManagerAware
	enum <anonymous> modeDoesActivateOnFGSwitch
	enum <anonymous> modeGetAppDiedMsg
	enum <anonymous> modeGetFrontClicks
	enum <anonymous> modeHighLevelEventAware
	enum <anonymous> modeLaunchDontSwitch
	enum <anonymous> modeLiteral
	enum <anonymous> modeLocalAndRemoteHLEvents
	enum <anonymous> modeMultiLaunch
	enum <anonymous> modeNeedSuspendResume
	enum <anonymous> modeNormal
	enum <anonymous> modeOnlyBackground
	enum <anonymous> modePhonemes
	enum <anonymous> modeReserved
	enum <anonymous> modeStationeryAware
	enum <anonymous> modeText
	enum <anonymous> modeTune
	enum <anonymous> modeUseTextEditServices
	enum <anonymous> monthField
	enum <anonymous> monthMask
	enum <anonymous> mountedFolderIconResource
	enum <anonymous> movieTextNotFoundErr
	enum <anonymous> movieToolboxUninitialized
	enum <anonymous> MPLibrary_DevelopmentRevision
	enum <anonymous> MPLibrary_MajorVersion
	enum <anonymous> MPLibrary_MinorVersion
	enum <anonymous> MPLibrary_Release
	enum <anonymous> mpWorkFlagCopyWorkBlock
	enum <anonymous> mpWorkFlagDoCompletion
	enum <anonymous> mpWorkFlagDontBlock
	enum <anonymous> mpWorkFlagDoWork
	enum <anonymous> mpWorkFlagGetIsRunning
	enum <anonymous> mpWorkFlagGetProcessorCount
	enum <anonymous> multiplePublisherWrn
	enum <anonymous> myd
	enum <anonymous> nameFontTableTag
	enum <anonymous> NameID
	enum <anonymous> nameTypeErr
	enum <anonymous> nbpBuffOvr
	enum <anonymous> nbpConfDiff
	enum <anonymous> nbpDuplicate
	enum <anonymous> nbpNISErr
	enum <anonymous> nbpNoConfirm
	enum <anonymous> nbpNotFound
	enum <anonymous> needClearScrapErr
	enum <anonymous> negZcbFreeErr
	enum <anonymous> NetActivity
	enum <anonymous> networkErr
	enum <anonymous> newLineBit
	enum <anonymous> newLineCharMask
	enum <anonymous> newLineMask
	enum <anonymous> nilHandleErr
	enum <anonymous> nilScrapFlavorDataErr
	enum <anonymous> nmType
	enum <anonymous> nmTypErr
	enum <anonymous> noAdrMkErr
	enum <anonymous> noBridgeErr
	enum <anonymous> noCacheBit
	enum <anonymous> noCacheMask
	enum <anonymous> noCalls
	enum <anonymous> noCodecErr
	enum <anonymous> noDataArea
	enum <anonymous> noDataHandler
	enum <anonymous> noDefaultDataRef
	enum <anonymous> noDefaultUserErr
	enum <anonymous> noDeviceForChannel
	enum <anonymous> noDMAErr
	enum <anonymous> noDriveErr
	enum <anonymous> noDtaMkErr
	enum <anonymous> noErr
	enum <anonymous> noExportProcAvailableErr
	enum <anonymous> noGlobalsErr
	enum <anonymous> noHardware
	enum <anonymous> noHardwareErr
	enum <anonymous> noHelpForItem
	enum <anonymous> noIconDataAvailableErr
	enum <anonymous> noInformErr
	enum <anonymous> NoLooping
	enum <anonymous> noMacDskErr
	enum <anonymous> noMachineNameErr
	enum <anonymous> noMaskFoundErr
	enum <anonymous> noMediaHandler
	enum <anonymous> noMemForPictPlaybackErr
	enum <anonymous> noMemoryNodeFailedInitialize
	enum <anonymous> noMMUErr
	enum <anonymous> noMoreFolderDescErr
	enum <anonymous> noMoreKeyColorsErr
	enum <anonymous> noMoreRealTime
	enum <anonymous> noMovieFound
	enum <anonymous> noMPPErr
	enum <anonymous> nonDragOriginatorErr
	enum <anonymous> NoneType
	enum <anonymous> nonGlyphID
	enum <anonymous> nonMatchingEditState
	enum <anonymous> noNybErr
	enum <anonymous> noOutstandingHLE
	enum <anonymous> noPasteboardPromiseKeeperErr
	enum <anonymous> noPathMappingErr
	enum <anonymous> noPortErr
	enum <anonymous> noPrefAppErr
	enum <anonymous> noRecordOfApp
	enum <anonymous> noRelErr
	enum <anonymous> noRequest
	enum <anonymous> noResponseErr
	enum <anonymous> normal
	enum <anonymous> noScrapErr
	enum <anonymous> noScrapPromiseKeeperErr
	enum <anonymous> noSendResp
	enum <anonymous> noSessionErr
	enum <anonymous> noSoundTrackInMovieErr
	enum <anonymous> noSourceTreeFoundErr
	enum <anonymous> noSuchIconErr
	enum <anonymous> noSuitableDisplaysErr
	enum <anonymous> noSynthFound
	enum <anonymous> notAFileErr
	enum <anonymous> notAllowedToSaveMovieErr
	enum <anonymous> notAppropriateForClassic
	enum <anonymous> notAQTVRMovieErr
	enum <anonymous> notARemountErr
	enum <anonymous> notBTree
	enum <anonymous> noteChannelNotAllocatedOSErr
	enum <anonymous> notEnoughBufferSpace
	enum <anonymous> notEnoughDataErr
	enum <anonymous> notEnoughDiskSpaceToGrab
	enum <anonymous> notEnoughHardware
	enum <anonymous> notEnoughHardwareErr
	enum <anonymous> notEnoughMemoryErr
	enum <anonymous> notEnoughMemoryToGrab
	enum <anonymous> notExactMatrixErr
	enum <anonymous> notExactSizeErr
	enum <anonymous> notHeldErr
	enum <anonymous> noThumbnailFoundErr
	enum <anonymous> notImplementedMusicOSErr
	enum <anonymous> notInitErr
	enum <anonymous> notLeafAtomErr
	enum <anonymous> notLockedErr
	enum <anonymous> notLoggedInErr
	enum <anonymous> noToolboxNameErr
	enum <anonymous> notOpenErr
	enum <anonymous> notPasteboardOwnerErr
	enum <anonymous> noTranslationPathErr
	enum <anonymous> notRegisteredSectionErr
	enum <anonymous> notThePublisherWrn
	enum <anonymous> noTypeErr
	enum <anonymous> noUserInteractionAllowed
	enum <anonymous> noUserNameErr
	enum <anonymous> noUserRecErr
	enum <anonymous> noUserRefErr
	enum <anonymous> noVideoTrackInMovieErr
	enum <anonymous> nrCallNotSupported
	enum <anonymous> nrDataTruncatedErr
	enum <anonymous> nrExitedIteratorScope
	enum <anonymous> nrInvalidEntryIterationOp
	enum <anonymous> nrInvalidNodeErr
	enum <anonymous> nrIterationDone
	enum <anonymous> nrLockedErr
	enum <anonymous> nrNameErr
	enum <anonymous> nrNotCreatedErr
	enum <anonymous> nrNotEnoughMemoryErr
	enum <anonymous> nrNotFoundErr
	enum <anonymous> nrNotModifiedErr
	enum <anonymous> nrNotSlotDeviceErr
	enum <anonymous> nrOverrunErr
	enum <anonymous> nrPathBufferTooSmall
	enum <anonymous> nrPathNotFound
	enum <anonymous> nrPowerErr
	enum <anonymous> nrPowerSwitchAbortErr
	enum <anonymous> nrPropertyAlreadyExists
	enum <anonymous> nrResultCodeBase
	enum <anonymous> nrTransactionAborted
	enum <anonymous> nrTypeMismatchErr
	enum <anonymous> NS_BigEndian
	enum <anonymous> NS_LittleEndian
	enum <anonymous> NS_UnknownByteOrder
	NSString * NSAbortModalException
	NSString * NSAbortPrintingException
	enum <anonymous> NSAboveBottom
	enum <anonymous> NSAboveTop
	NSString *const NSAccessibilityAllowedValuesAttribute
	NSString *const NSAccessibilityApplicationActivatedNotification
	NSString *const NSAccessibilityApplicationDeactivatedNotification
	NSString *const NSAccessibilityApplicationHiddenNotification
	NSString *const NSAccessibilityApplicationRole
	NSString *const NSAccessibilityApplicationShownNotification
	NSString *const NSAccessibilityAscendingSortDirectionValue
	NSString *const NSAccessibilityAttachmentTextAttribute
	NSString *const NSAccessibilityAttributedStringForRangeParameterizedAttribute
	NSString *const NSAccessibilityAutocorrectedTextAttribute
	NSString *const NSAccessibilityBackgroundColorTextAttribute
	NSString *const NSAccessibilityBoundsForRangeParameterizedAttribute
	NSString *const NSAccessibilityBrowserRole
	NSString *const NSAccessibilityBusyIndicatorRole
	NSString *const NSAccessibilityButtonRole
	NSString *const NSAccessibilityCancelAction
	NSString *const NSAccessibilityCancelButtonAttribute
	NSString *const NSAccessibilityCellForColumnAndRowParameterizedAttribute
	NSString *const NSAccessibilityCellRole
	NSString *const NSAccessibilityCenterTabStopMarkerTypeValue
	NSString *const NSAccessibilityCentimetersUnitValue
	NSString *const NSAccessibilityCheckBoxRole
	NSString *const NSAccessibilityChildrenAttribute
	NSString *const NSAccessibilityClearButtonAttribute
	NSString *const NSAccessibilityCloseButtonAttribute
	NSString *const NSAccessibilityCloseButtonSubrole
	NSString *const NSAccessibilityColorWellRole
	NSString *const NSAccessibilityColumnCountAttribute
	NSString *const NSAccessibilityColumnHeaderUIElementsAttribute
	NSString *const NSAccessibilityColumnIndexRangeAttribute
	NSString *const NSAccessibilityColumnRole
	NSString *const NSAccessibilityColumnsAttribute
	NSString *const NSAccessibilityColumnTitlesAttribute
	NSString *const NSAccessibilityComboBoxRole
	NSString *const NSAccessibilityConfirmAction
	NSString *const NSAccessibilityContentListSubrole
	NSString *const NSAccessibilityContentsAttribute
	NSString *const NSAccessibilityCreatedNotification
	NSString *const NSAccessibilityCriticalValueAttribute
	NSString *const NSAccessibilityDecimalTabStopMarkerTypeValue
	NSString *const NSAccessibilityDecrementAction
	NSString *const NSAccessibilityDecrementArrowSubrole
	NSString *const NSAccessibilityDecrementButtonAttribute
	NSString *const NSAccessibilityDecrementPageSubrole
	NSString *const NSAccessibilityDefaultButtonAttribute
	NSString *const NSAccessibilityDefinitionListSubrole
	NSString *const NSAccessibilityDeleteAction
	NSString *const NSAccessibilityDescendingSortDirectionValue
	NSString *const NSAccessibilityDescriptionAttribute
	NSString *const NSAccessibilityDialogSubrole
	NSString *const NSAccessibilityDisclosedByRowAttribute
	NSString *const NSAccessibilityDisclosedRowsAttribute
	NSString *const NSAccessibilityDisclosingAttribute
	NSString *const NSAccessibilityDisclosureLevelAttribute
	NSString *const NSAccessibilityDisclosureTriangleRole
	NSString *const NSAccessibilityDocumentAttribute
	NSString *const NSAccessibilityDrawerCreatedNotification
	NSString *const NSAccessibilityDrawerRole
	NSString *const NSAccessibilityEditedAttribute
	NSString *const NSAccessibilityEnabledAttribute
	NSString *const NSAccessibilityErrorCodeExceptionInfo
	NSString * NSAccessibilityException
	NSString *const NSAccessibilityExpandedAttribute
	NSString *const NSAccessibilityExtrasMenuBarAttribute
	NSString *const NSAccessibilityFilenameAttribute
	NSString *const NSAccessibilityFirstLineIndentMarkerTypeValue
	NSString *const NSAccessibilityFloatingWindowSubrole
	NSString *const NSAccessibilityFocusedAttribute
	NSString *const NSAccessibilityFocusedUIElementAttribute
	NSString *const NSAccessibilityFocusedUIElementChangedNotification
	NSString *const NSAccessibilityFocusedWindowAttribute
	NSString *const NSAccessibilityFocusedWindowChangedNotification
	NSString *const NSAccessibilityFontFamilyKey
	NSString *const NSAccessibilityFontNameKey
	NSString *const NSAccessibilityFontSizeKey
	NSString *const NSAccessibilityFontTextAttribute
	NSString *const NSAccessibilityForegroundColorTextAttribute
	NSString *const NSAccessibilityFrontmostAttribute
	NSString *const NSAccessibilityFullScreenButtonAttribute
	NSString *const NSAccessibilityFullScreenButtonSubrole
	NSString *const NSAccessibilityGridRole
	NSString *const NSAccessibilityGroupRole
	NSString *const NSAccessibilityGrowAreaAttribute
	NSString *const NSAccessibilityGrowAreaRole
	NSString *const NSAccessibilityHandleRole
	NSString *const NSAccessibilityHandlesAttribute
	NSString *const NSAccessibilityHeaderAttribute
	NSString *const NSAccessibilityHeadIndentMarkerTypeValue
	NSString *const NSAccessibilityHelpAttribute
	NSString *const NSAccessibilityHelpTagCreatedNotification
	NSString *const NSAccessibilityHelpTagRole
	NSString *const NSAccessibilityHiddenAttribute
	NSString *const NSAccessibilityHorizontalOrientationValue
	NSString *const NSAccessibilityHorizontalScrollBarAttribute
	NSString *const NSAccessibilityHorizontalUnitDescriptionAttribute
	NSString *const NSAccessibilityHorizontalUnitsAttribute
	NSString *const NSAccessibilityIdentifierAttribute
	NSString *const NSAccessibilityImageRole
	NSString *const NSAccessibilityInchesUnitValue
	NSString *const NSAccessibilityIncrementAction
	NSString *const NSAccessibilityIncrementArrowSubrole
	NSString *const NSAccessibilityIncrementButtonAttribute
	NSString *const NSAccessibilityIncrementorRole
	NSString *const NSAccessibilityIncrementPageSubrole
	NSString *const NSAccessibilityIndexAttribute
	NSString *const NSAccessibilityInsertionPointLineNumberAttribute
	NSString *const NSAccessibilityLabelUIElementsAttribute
	NSString *const NSAccessibilityLabelValueAttribute
	NSString *const NSAccessibilityLayoutAreaRole
	NSString *const NSAccessibilityLayoutItemRole
	NSString *const NSAccessibilityLayoutPointForScreenPointParameterizedAttribute
	NSString *const NSAccessibilityLayoutSizeForScreenSizeParameterizedAttribute
	NSString *const NSAccessibilityLeftTabStopMarkerTypeValue
	NSString *const NSAccessibilityLevelIndicatorRole
	NSString *const NSAccessibilityLineForIndexParameterizedAttribute
	NSString *const NSAccessibilityLinkedUIElementsAttribute
	NSString *const NSAccessibilityLinkRole
	NSString *const NSAccessibilityLinkTextAttribute
	NSString *const NSAccessibilityListRole
	NSString *const NSAccessibilityMainAttribute
	NSString *const NSAccessibilityMainWindowAttribute
	NSString *const NSAccessibilityMainWindowChangedNotification
	NSString *const NSAccessibilityMarkerGroupUIElementAttribute
	NSString *const NSAccessibilityMarkerTypeAttribute
	NSString *const NSAccessibilityMarkerTypeDescriptionAttribute
	NSString *const NSAccessibilityMarkerUIElementsAttribute
	NSString *const NSAccessibilityMarkerValuesAttribute
	NSString *const NSAccessibilityMatteContentUIElementAttribute
	NSString *const NSAccessibilityMatteHoleAttribute
	NSString *const NSAccessibilityMatteRole
	NSString *const NSAccessibilityMaxValueAttribute
	NSString *const NSAccessibilityMenuBarAttribute
	NSString *const NSAccessibilityMenuBarRole
	NSString *const NSAccessibilityMenuButtonRole
	NSString *const NSAccessibilityMenuItemRole
	NSString *const NSAccessibilityMenuRole
	NSString *const NSAccessibilityMinimizeButtonAttribute
	NSString *const NSAccessibilityMinimizeButtonSubrole
	NSString *const NSAccessibilityMinimizedAttribute
	NSString *const NSAccessibilityMinValueAttribute
	NSString *const NSAccessibilityMisspelledTextAttribute
	NSString *const NSAccessibilityModalAttribute
	NSString *const NSAccessibilityMovedNotification
	NSString *const NSAccessibilityNextContentsAttribute
	NSString *const NSAccessibilityNumberOfCharactersAttribute
	NSString *const NSAccessibilityOrderedByRowAttribute
	NSString *const NSAccessibilityOrientationAttribute
	NSString *const NSAccessibilityOutlineRole
	NSString *const NSAccessibilityOutlineRowSubrole
	NSString *const NSAccessibilityOverflowButtonAttribute
	NSString *const NSAccessibilityParentAttribute
	NSString *const NSAccessibilityPicasUnitValue
	NSString *const NSAccessibilityPickAction
	NSString *const NSAccessibilityPlaceholderValueAttribute
	NSString *const NSAccessibilityPointsUnitValue
	NSString *const NSAccessibilityPopoverRole
	NSString *const NSAccessibilityPopUpButtonRole
	NSString *const NSAccessibilityPositionAttribute
	NSString *const NSAccessibilityPressAction
	NSString *const NSAccessibilityPreviousContentsAttribute
	NSString *const NSAccessibilityProgressIndicatorRole
	NSString *const NSAccessibilityProxyAttribute
	NSString *const NSAccessibilityRadioButtonRole
	NSString *const NSAccessibilityRadioGroupRole
	NSString *const NSAccessibilityRaiseAction
	NSString *const NSAccessibilityRangeForIndexParameterizedAttribute
	NSString *const NSAccessibilityRangeForLineParameterizedAttribute
	NSString *const NSAccessibilityRangeForPositionParameterizedAttribute
	NSString *const NSAccessibilityRatingIndicatorSubrole
	NSString *const NSAccessibilityRelevanceIndicatorRole
	NSString *const NSAccessibilityResizedNotification
	NSString *const NSAccessibilityRightTabStopMarkerTypeValue
	NSString *const NSAccessibilityRoleAttribute
	NSString *const NSAccessibilityRoleDescriptionAttribute
	NSString *const NSAccessibilityRowCollapsedNotification
	NSString *const NSAccessibilityRowCountAttribute
	NSString *const NSAccessibilityRowCountChangedNotification
	NSString *const NSAccessibilityRowExpandedNotification
	NSString *const NSAccessibilityRowHeaderUIElementsAttribute
	NSString *const NSAccessibilityRowIndexRangeAttribute
	NSString *const NSAccessibilityRowRole
	NSString *const NSAccessibilityRowsAttribute
	NSString *const NSAccessibilityRTFForRangeParameterizedAttribute
	NSString *const NSAccessibilityRulerMarkerRole
	NSString *const NSAccessibilityRulerRole
	NSString *const NSAccessibilityScreenPointForLayoutPointParameterizedAttribute
	NSString *const NSAccessibilityScreenSizeForLayoutSizeParameterizedAttribute
	NSString *const NSAccessibilityScrollAreaRole
	NSString *const NSAccessibilityScrollBarRole
	NSString *const NSAccessibilitySearchButtonAttribute
	NSString *const NSAccessibilitySearchFieldSubrole
	NSString *const NSAccessibilitySearchMenuAttribute
	NSString *const NSAccessibilitySecureTextFieldSubrole
	NSString *const NSAccessibilitySelectedAttribute
	NSString *const NSAccessibilitySelectedCellsAttribute
	NSString *const NSAccessibilitySelectedCellsChangedNotification
	NSString *const NSAccessibilitySelectedChildrenAttribute
	NSString *const NSAccessibilitySelectedChildrenChangedNotification
	NSString *const NSAccessibilitySelectedChildrenMovedNotification
	NSString *const NSAccessibilitySelectedColumnsAttribute
	NSString *const NSAccessibilitySelectedColumnsChangedNotification
	NSString *const NSAccessibilitySelectedRowsAttribute
	NSString *const NSAccessibilitySelectedRowsChangedNotification
	NSString *const NSAccessibilitySelectedTextAttribute
	NSString *const NSAccessibilitySelectedTextChangedNotification
	NSString *const NSAccessibilitySelectedTextRangeAttribute
	NSString *const NSAccessibilitySelectedTextRangesAttribute
	NSString *const NSAccessibilityServesAsTitleForUIElementsAttribute
	NSString *const NSAccessibilityShadowTextAttribute
	NSString *const NSAccessibilitySharedCharacterRangeAttribute
	NSString *const NSAccessibilitySharedTextUIElementsAttribute
	NSString *const NSAccessibilitySheetCreatedNotification
	NSString *const NSAccessibilitySheetRole
	NSString *const NSAccessibilityShowMenuAction
	NSString *const NSAccessibilityShownMenuAttribute
	NSString *const NSAccessibilitySizeAttribute
	NSString *const NSAccessibilitySliderRole
	NSString *const NSAccessibilitySortButtonRole
	NSString *const NSAccessibilitySortButtonSubrole
	NSString *const NSAccessibilitySortDirectionAttribute
	NSString *const NSAccessibilitySplitGroupRole
	NSString *const NSAccessibilitySplitterRole
	NSString *const NSAccessibilitySplittersAttribute
	NSString *const NSAccessibilityStandardWindowSubrole
	NSString *const NSAccessibilityStaticTextRole
	NSString *const NSAccessibilityStrikethroughColorTextAttribute
	NSString *const NSAccessibilityStrikethroughTextAttribute
	NSString *const NSAccessibilityStringForRangeParameterizedAttribute
	NSString *const NSAccessibilityStyleRangeForIndexParameterizedAttribute
	NSString *const NSAccessibilitySubroleAttribute
	NSString *const NSAccessibilitySuperscriptTextAttribute
	NSString *const NSAccessibilitySystemDialogSubrole
	NSString *const NSAccessibilitySystemFloatingWindowSubrole
	NSString *const NSAccessibilitySystemWideRole
	NSString *const NSAccessibilityTabGroupRole
	NSString *const NSAccessibilityTableRole
	NSString *const NSAccessibilityTableRowSubrole
	NSString *const NSAccessibilityTabsAttribute
	NSString *const NSAccessibilityTailIndentMarkerTypeValue
	NSString *const NSAccessibilityTextAreaRole
	NSString *const NSAccessibilityTextAttachmentSubrole
	NSString *const NSAccessibilityTextFieldRole
	NSString *const NSAccessibilityTextLinkSubrole
	NSString *const NSAccessibilityTimelineSubrole
	NSString *const NSAccessibilityTitleAttribute
	NSString *const NSAccessibilityTitleChangedNotification
	NSString *const NSAccessibilityTitleUIElementAttribute
	NSString *const NSAccessibilityToolbarButtonAttribute
	NSString *const NSAccessibilityToolbarButtonSubrole
	NSString *const NSAccessibilityToolbarRole
	NSString *const NSAccessibilityTopLevelUIElementAttribute
	NSString *const NSAccessibilityUIElementDestroyedNotification
	NSString *const NSAccessibilityUnderlineColorTextAttribute
	NSString *const NSAccessibilityUnderlineTextAttribute
	NSString *const NSAccessibilityUnitDescriptionAttribute
	NSString *const NSAccessibilityUnitsAttribute
	NSString *const NSAccessibilityUnitsChangedNotification
	NSString *const NSAccessibilityUnknownMarkerTypeValue
	NSString *const NSAccessibilityUnknownOrientationValue
	NSString *const NSAccessibilityUnknownRole
	NSString *const NSAccessibilityUnknownSortDirectionValue
	NSString *const NSAccessibilityUnknownSubrole
	NSString *const NSAccessibilityUnknownUnitValue
	NSString *const NSAccessibilityURLAttribute
	NSString *const NSAccessibilityValueAttribute
	NSString *const NSAccessibilityValueChangedNotification
	NSString *const NSAccessibilityValueDescriptionAttribute
	NSString *const NSAccessibilityValueIndicatorRole
	NSString *const NSAccessibilityVerticalOrientationValue
	NSString *const NSAccessibilityVerticalScrollBarAttribute
	NSString *const NSAccessibilityVerticalUnitDescriptionAttribute
	NSString *const NSAccessibilityVerticalUnitsAttribute
	NSString *const NSAccessibilityVisibleCellsAttribute
	NSString *const NSAccessibilityVisibleCharacterRangeAttribute
	NSString *const NSAccessibilityVisibleChildrenAttribute
	NSString *const NSAccessibilityVisibleColumnsAttribute
	NSString *const NSAccessibilityVisibleNameKey
	NSString *const NSAccessibilityVisibleRowsAttribute
	NSString *const NSAccessibilityWarningValueAttribute
	NSString *const NSAccessibilityWindowAttribute
	NSString *const NSAccessibilityWindowCreatedNotification
	NSString *const NSAccessibilityWindowDeminiaturizedNotification
	NSString *const NSAccessibilityWindowMiniaturizedNotification
	NSString *const NSAccessibilityWindowMovedNotification
	NSString *const NSAccessibilityWindowResizedNotification
	NSString *const NSAccessibilityWindowRole
	NSString *const NSAccessibilityWindowsAttribute
	NSString *const NSAccessibilityZoomButtonAttribute
	NSString *const NSAccessibilityZoomButtonSubrole
	NSString *const NSAddedPersistentStoresKey
	enum <anonymous> NSAddEntityMappingType
	enum <anonymous> NSAddTraitFontAction
	enum <anonymous> NSAdminApplicationDirectory
	enum <anonymous> NSAdobeCNS1CharacterCollection
	enum <anonymous> NSAdobeGB1CharacterCollection
	enum <anonymous> NSAdobeJapan1CharacterCollection
	enum <anonymous> NSAdobeJapan2CharacterCollection
	enum <anonymous> NSAdobeKorea1CharacterCollection
	NSString *const NSAffectedObjectsErrorKey
	NSString *const NSAffectedStoresErrorKey
	enum <anonymous> NSAggregateExpressionType
	enum <anonymous> NSAlertAlternateReturn
	enum <anonymous> NSAlertDefaultReturn
	enum <anonymous> NSAlertErrorReturn
	enum <anonymous> NSAlertFirstButtonReturn
	enum <anonymous> NSAlertOtherReturn
	enum <anonymous> NSAlertSecondButtonReturn
	enum <anonymous> NSAlertThirdButtonReturn
	enum <anonymous> NSAlignAllEdgesInward
	enum <anonymous> NSAlignAllEdgesNearest
	enum <anonymous> NSAlignAllEdgesOutward
	enum <anonymous> NSAlignHeightInward
	enum <anonymous> NSAlignHeightNearest
	enum <anonymous> NSAlignHeightOutward
	enum <anonymous> NSAlignMaxXInward
	enum <anonymous> NSAlignMaxXNearest
	enum <anonymous> NSAlignMaxXOutward
	enum <anonymous> NSAlignMaxYInward
	enum <anonymous> NSAlignMaxYNearest
	enum <anonymous> NSAlignMaxYOutward
	NSString * NSAlignmentBinding
	enum <anonymous> NSAlignMinXInward
	enum <anonymous> NSAlignMinXNearest
	enum <anonymous> NSAlignMinXOutward
	enum <anonymous> NSAlignMinYInward
	enum <anonymous> NSAlignMinYNearest
	enum <anonymous> NSAlignMinYOutward
	enum <anonymous> NSAlignRectFlipped
	enum <anonymous> NSAlignWidthInward
	enum <anonymous> NSAlignWidthNearest
	enum <anonymous> NSAlignWidthOutward
	enum <anonymous> NSAllApplicationsDirectory
	enum <anonymous> NSAllDomainsMask
	enum <anonymous> NSAllLibrariesDirectory
	NSString * NSAllowsEditingMultipleValuesSelectionBindingOption
	NSString * NSAllowsNullArgumentBindingOption
	enum <anonymous> NSAllPredicateModifier
	NSString * NSAllRomanInputSourcesLocaleIdentifier
	enum <anonymous> NSAllScrollerParts
	enum <anonymous> NSAlphaFirstBitmapFormat
	enum <anonymous> NSAlphaNonpremultipliedBitmapFormat
	enum <anonymous> NSAlphaShiftKeyMask
	NSString * NSAlternateImageBinding
	enum <anonymous> NSAlternateKeyMask
	NSString * NSAlternateTitleBinding
	NSString * NSAlwaysPresentsApplicationModalAlertsBindingOption
	NSString *const NSAMPMDesignation
	enum <anonymous> NSAnchoredSearch
	enum <anonymous> NSAndPredicateType
	NSString * NSAnimateBinding
	enum <anonymous> NSAnimationBlocking
	NSString * NSAnimationDelayBinding
	enum <anonymous> NSAnimationEaseIn
	enum <anonymous> NSAnimationEaseInOut
	enum <anonymous> NSAnimationEaseOut
	enum <anonymous> NSAnimationEffectDisappearingItemDefault
	enum <anonymous> NSAnimationEffectPoof
	enum <anonymous> NSAnimationLinear
	enum <anonymous> NSAnimationNonblocking
	enum <anonymous> NSAnimationNonblockingThreaded
	NSString * NSAnimationProgressMark
	NSString * NSAnimationProgressMarkNotification
	NSString * NSAnimationTriggerOrderIn
	NSString * NSAnimationTriggerOrderOut
	NSString * NSAntialiasThresholdChangedNotification
	enum <anonymous> NSAnyEventMask
	enum <anonymous> NSAnyPredicateModifier
	enum <anonymous> NSAnyType
	id NSApp
	enum <anonymous> NSAppKitDefined
	enum <anonymous> NSAppKitDefinedMask
	NSString * NSAppKitIgnoredException
	const double NSAppKitVersionNumber
	NSString * NSAppKitVirtualMemoryException
	NSString * NSAppleEventManagerWillProcessFirstEventNotification
	const double NSAppleEventTimeOutDefault
	const double NSAppleEventTimeOutNone
	NSString *const NSAppleScriptErrorAppName
	NSString *const NSAppleScriptErrorBriefMessage
	NSString *const NSAppleScriptErrorMessage
	NSString *const NSAppleScriptErrorNumber
	NSString *const NSAppleScriptErrorRange
	enum <anonymous> NSApplicationActivateAllWindows
	enum <anonymous> NSApplicationActivatedEventType
	enum <anonymous> NSApplicationActivateIgnoringOtherApps
	enum <anonymous> NSApplicationActivationPolicyAccessory
	enum <anonymous> NSApplicationActivationPolicyProhibited
	enum <anonymous> NSApplicationActivationPolicyRegular
	enum <anonymous> NSApplicationDeactivatedEventType
	enum <anonymous> NSApplicationDefined
	enum <anonymous> NSApplicationDefinedMask
	enum <anonymous> NSApplicationDelegateReplyCancel
	enum <anonymous> NSApplicationDelegateReplyFailure
	enum <anonymous> NSApplicationDelegateReplySuccess
	NSString * NSApplicationDidBecomeActiveNotification
	NSString * NSApplicationDidChangeScreenParametersNotification
	NSString * NSApplicationDidFinishLaunchingNotification
	NSString *const NSApplicationDidFinishRestoringWindowsNotification
	NSString * NSApplicationDidHideNotification
	NSString * NSApplicationDidResignActiveNotification
	NSString * NSApplicationDidUnhideNotification
	NSString * NSApplicationDidUpdateNotification
	enum <anonymous> NSApplicationDirectory
	NSString * NSApplicationFileType
	NSString *const NSApplicationLaunchIsDefaultLaunchKey
	NSString *const NSApplicationLaunchRemoteNotificationKey
	NSString *const NSApplicationLaunchUserNotificationKey
	enum <anonymous> NSApplicationPresentationAutoHideDock
	enum <anonymous> NSApplicationPresentationAutoHideMenuBar
	enum <anonymous> NSApplicationPresentationAutoHideToolbar
	enum <anonymous> NSApplicationPresentationDefault
	enum <anonymous> NSApplicationPresentationDisableAppleMenu
	enum <anonymous> NSApplicationPresentationDisableForceQuit
	enum <anonymous> NSApplicationPresentationDisableHideApplication
	enum <anonymous> NSApplicationPresentationDisableMenuBarTransparency
	enum <anonymous> NSApplicationPresentationDisableProcessSwitching
	enum <anonymous> NSApplicationPresentationDisableSessionTermination
	enum <anonymous> NSApplicationPresentationFullScreen
	enum <anonymous> NSApplicationPresentationHideDock
	enum <anonymous> NSApplicationPresentationHideMenuBar
	enum <anonymous> NSApplicationScriptsDirectory
	enum <anonymous> NSApplicationSupportDirectory
	NSString * NSApplicationWillBecomeActiveNotification
	NSString * NSApplicationWillFinishLaunchingNotification
	NSString * NSApplicationWillHideNotification
	NSString * NSApplicationWillResignActiveNotification
	NSString * NSApplicationWillTerminateNotification
	NSString * NSApplicationWillUnhideNotification
	NSString * NSApplicationWillUpdateNotification
	NSString * NSArgumentBinding
	NSString *const NSArgumentDomain
	enum <anonymous> NSArgumentEvaluationScriptError
	enum <anonymous> NSArgumentsWrongScriptError
	enum <anonymous> NSAscendingPageOrder
	enum <anonymous> NSASCIIStringEncoding
	NSString *const NSAssertionHandlerKey
	enum <anonymous> NSAtBottom
	enum <anonymous> NSAtomicWrite
	NSString * NSAttachmentAttributeName
	enum <anonymous> NSAttachmentCharacter
	enum <anonymous> NSAtTop
	NSString * NSAttributedStringBinding
	enum <anonymous> NSAttributedStringEnumerationLongestEffectiveRangeNotRequired
	enum <anonymous> NSAttributedStringEnumerationReverse
	NSString * NSAuthorDocumentAttribute
	enum <anonymous> NSAutoPagination
	enum <anonymous> NSAutosaveAsOperation
	enum <anonymous> NSAutosavedInformationDirectory
	enum <anonymous> NSAutosaveElsewhereOperation
	enum <anonymous> NSAutosaveInPlaceOperation
	enum <anonymous> NSAutosaveOperation
	NSString *const NSAverageKeyValueOperator
	enum <anonymous> NSAWTEventType
	NSString * NSBackgroundColorAttributeName
	NSString * NSBackgroundColorDocumentAttribute
	enum <anonymous> NSBackgroundStyleDark
	enum <anonymous> NSBackgroundStyleLight
	enum <anonymous> NSBackgroundStyleLowered
	enum <anonymous> NSBackgroundStyleRaised
	enum <anonymous> NSBackgroundTab
	NSString *const NSBackingPropertyOldColorSpaceKey
	NSString *const NSBackingPropertyOldScaleFactorKey
	enum <anonymous> NSBackingStoreBuffered
	enum <anonymous> NSBackingStoreNonretained
	enum <anonymous> NSBackingStoreRetained
	enum <anonymous> NSBackspaceCharacter
	enum <anonymous> NSBackTabCharacter
	enum <anonymous> NSBacktabTextMovement
	enum <anonymous> NSBackwardsSearch
	NSString * NSBadBitmapParametersException
	NSString * NSBadComparisonException
	NSString * NSBadRTFColorTableException
	NSString * NSBadRTFDirectiveException
	NSString * NSBadRTFFontTableException
	NSString * NSBadRTFStyleSheetException
	NSString * NSBaselineOffsetAttributeName
	NSString * NSBaseURLDocumentOption
	enum <anonymous> NSBeginFunctionKey
	enum <anonymous> NSBeginsWithComparison
	enum <anonymous> NSBeginsWithPredicateOperatorType
	enum <anonymous> NSBelowBottom
	enum <anonymous> NSBelowTop
	enum <anonymous> NSBetweenPredicateOperatorType
	enum <anonymous> NSBevelLineJoinStyle
	enum <anonymous> NSBezelBorder
	enum <anonymous> NSBinaryDataAttributeType
	NSString *const NSBinaryExternalRecordType
	enum <anonymous> NSBinarySearchingFirstEqual
	enum <anonymous> NSBinarySearchingInsertionIndex
	enum <anonymous> NSBinarySearchingLastEqual
	NSString *const NSBinaryStoreType
	const CGFloat NSBlack
	enum <anonymous> NSBlockExpressionType
	enum <anonymous> NSBlueControlTint
	enum <anonymous> NSBMPFileType
	enum <anonymous> NSBoldFontMask
	enum <anonymous> NSBooleanAttributeType
	enum <anonymous> NSBorderlessWindowMask
	NSString * NSBottomMarginDocumentAttribute
	enum <anonymous> NSBottomTabsBezelBorder
	enum <anonymous> NSBoxCustom
	enum <anonymous> NSBoxOldStyle
	enum <anonymous> NSBoxPrimary
	enum <anonymous> NSBoxSecondary
	enum <anonymous> NSBoxSeparator
	enum <anonymous> NSBreakFunctionKey
	enum <anonymous> NSBrowserAutoColumnResizing
	NSString * NSBrowserColumnConfigurationDidChangeNotification
	enum <anonymous> NSBrowserDropAbove
	enum <anonymous> NSBrowserDropOn
	NSString * NSBrowserIllegalDelegateException
	enum <anonymous> NSBrowserNoColumnResizing
	enum <anonymous> NSBrowserUserColumnResizing
	NSString *const NSBuddhistCalendar
	NSString *const NSBundleDidLoadNotification
	enum <anonymous> NSBundleExecutableArchitectureI386
	enum <anonymous> NSBundleExecutableArchitecturePPC
	enum <anonymous> NSBundleExecutableArchitecturePPC64
	enum <anonymous> NSBundleExecutableArchitectureX86_64
	enum <anonymous> NSButtLineCapStyle
	enum <anonymous> NSByteCountFormatterCountStyleBinary
	enum <anonymous> NSByteCountFormatterCountStyleDecimal
	enum <anonymous> NSByteCountFormatterCountStyleFile
	enum <anonymous> NSByteCountFormatterCountStyleMemory
	enum <anonymous> NSByteCountFormatterUseAll
	enum <anonymous> NSByteCountFormatterUseBytes
	enum <anonymous> NSByteCountFormatterUseDefault
	enum <anonymous> NSByteCountFormatterUseEB
	enum <anonymous> NSByteCountFormatterUseGB
	enum <anonymous> NSByteCountFormatterUseKB
	enum <anonymous> NSByteCountFormatterUseMB
	enum <anonymous> NSByteCountFormatterUsePB
	enum <anonymous> NSByteCountFormatterUseTB
	enum <anonymous> NSByteCountFormatterUseYBOrHigher
	enum <anonymous> NSByteCountFormatterUseZB
	enum <anonymous> NSCachesDirectory
	enum <anonymous> NSCalculationDivideByZero
	enum <anonymous> NSCalculationLossOfPrecision
	enum <anonymous> NSCalculationNoError
	enum <anonymous> NSCalculationOverflow
	enum <anonymous> NSCalculationUnderflow
	enum <anonymous> NSCalendarCalendarUnit
	NSString * NSCalibratedBlackColorSpace
	NSString * NSCalibratedRGBColorSpace
	NSString * NSCalibratedWhiteColorSpace
	enum <anonymous> NSCancelButton
	enum <anonymous> NSCancelTextMovement
	enum <anonymous> NSCannotCreateScriptCommandError
	enum <anonymous> NSCarriageReturnCharacter
	enum <anonymous> NSCascadeDeleteRule
	enum <anonymous> NSCaseInsensitivePredicateOption
	enum <anonymous> NSCaseInsensitiveSearch
	NSString * NSCategoryDocumentAttribute
	enum <anonymous> NSCellAllowsMixedState
	enum <anonymous> NSCellChangesContents
	enum <anonymous> NSCellDisabled
	enum <anonymous> NSCellEditable
	enum <anonymous> NSCellHasImageHorizontal
	enum <anonymous> NSCellHasImageOnLeftOrBottom
	enum <anonymous> NSCellHasOverlappingImage
	enum <anonymous> NSCellHighlighted
	enum <anonymous> NSCellHitContentArea
	enum <anonymous> NSCellHitEditableTextArea
	enum <anonymous> NSCellHitNone
	enum <anonymous> NSCellHitTrackableArea
	enum <anonymous> NSCellIsBordered
	enum <anonymous> NSCellIsInsetButton
	enum <anonymous> NSCellLightsByBackground
	enum <anonymous> NSCellLightsByContents
	enum <anonymous> NSCellLightsByGray
	enum <anonymous> NSCellState
	enum <anonymous> NSCenterTabStopType
	enum <anonymous> NSCenterTextAlignment
	enum <anonymous> NSChangeAutosaved
	enum <anonymous> NSChangeBackgroundCell
	enum <anonymous> NSChangeBackgroundCellMask
	enum <anonymous> NSChangeCleared
	enum <anonymous> NSChangeDiscardable
	enum <anonymous> NSChangeDone
	enum <anonymous> NSChangeGrayCell
	enum <anonymous> NSChangeGrayCellMask
	enum <anonymous> NSChangeReadOtherContents
	enum <anonymous> NSChangeRedone
	enum <anonymous> NSChangeUndone
	NSString *const NSCharacterConversionException
	NSString * NSCharacterEncodingDocumentAttribute
	NSString * NSCharacterEncodingDocumentOption
	NSString * NSCharacterShapeAttributeName
	NSString *const NSChineseCalendar
	enum <anonymous> NSCircularBezelStyle
	enum <anonymous> NSCircularSlider
	NSString * NSClassDescriptionNeededForClassNotification
	enum <anonymous> NSClearControlTint
	enum <anonymous> NSClearDisplayFunctionKey
	enum <anonymous> NSClearLineFunctionKey
	enum <anonymous> NSClipPagination
	enum <anonymous> NSClockAndCalendarDatePickerStyle
	enum <anonymous> NSClosableWindowMask
	enum <anonymous> NSClosePathBezierPathElement
	enum <anonymous> NSCMYKColorSpaceModel
	enum <anonymous> NSCMYKModeColorPanel
	NSString *const NSCocoaErrorDomain
	NSString * NSCocoaVersionDocumentAttribute
	enum <anonymous> NSCollectionViewDropBefore
	enum <anonymous> NSCollectionViewDropOn
	enum <anonymous> NSCollectorDisabledOption
	NSString * NSColorListDidChangeNotification
	NSString * NSColorListIOException
	enum <anonymous> NSColorListModeColorPanel
	NSString * NSColorListNotEditableException
	enum <anonymous> NSColorPanelAllModesMask
	enum <anonymous> NSColorPanelCMYKModeMask
	NSString * NSColorPanelColorDidChangeNotification
	enum <anonymous> NSColorPanelColorListModeMask
	enum <anonymous> NSColorPanelCrayonModeMask
	enum <anonymous> NSColorPanelCustomPaletteModeMask
	enum <anonymous> NSColorPanelGrayModeMask
	enum <anonymous> NSColorPanelHSBModeMask
	enum <anonymous> NSColorPanelRGBModeMask
	enum <anonymous> NSColorPanelWheelModeMask
	NSString * NSColorPboardType
	enum <anonymous> NSColorRenderingIntentAbsoluteColorimetric
	enum <anonymous> NSColorRenderingIntentDefault
	enum <anonymous> NSColorRenderingIntentPerceptual
	enum <anonymous> NSColorRenderingIntentRelativeColorimetric
	enum <anonymous> NSColorRenderingIntentSaturation
	NSString * NSComboBoxSelectionDidChangeNotification
	NSString * NSComboBoxSelectionIsChangingNotification
	NSString * NSComboBoxWillDismissNotification
	NSString * NSComboBoxWillPopUpNotification
	enum <anonymous> NSCommandKeyMask
	NSString * NSCommentDocumentAttribute
	NSString * NSCompanyDocumentAttribute
	enum <anonymous> NSCompositeClear
	enum <anonymous> NSCompositeCopy
	enum <anonymous> NSCompositeDestinationAtop
	enum <anonymous> NSCompositeDestinationIn
	enum <anonymous> NSCompositeDestinationOut
	enum <anonymous> NSCompositeDestinationOver
	enum <anonymous> NSCompositeHighlight
	enum <anonymous> NSCompositePlusDarker
	enum <anonymous> NSCompositePlusLighter
	enum <anonymous> NSCompositeSourceAtop
	enum <anonymous> NSCompositeSourceIn
	enum <anonymous> NSCompositeSourceOut
	enum <anonymous> NSCompositeSourceOver
	enum <anonymous> NSCompositeXOR
	enum <anonymous> NSCompressedFontMask
	enum <anonymous> NSCondensedFontMask
	NSString * NSConditionallySetsEditableBindingOption
	NSString * NSConditionallySetsEnabledBindingOption
	NSString * NSConditionallySetsHiddenBindingOption
	enum <anonymous> NSConfinementConcurrencyType
	NSString *const NSConnectionDidDieNotification
	NSString *const NSConnectionDidInitializeNotification
	NSString *const NSConnectionReplyMode
	enum <anonymous> NSConstantValueExpressionType
	enum <anonymous> NSContainerSpecifierError
	enum <anonymous> NSContainsComparison
	enum <anonymous> NSContainsPredicateOperatorType
	NSString * NSContentArrayBinding
	NSString * NSContentArrayForMultipleSelectionBinding
	NSString * NSContentBinding
	NSString * NSContentDictionaryBinding
	NSString * NSContentHeightBinding
	NSString * NSContentObjectBinding
	NSString * NSContentObjectsBinding
	NSString * NSContentPlacementTagBindingOption
	enum <anonymous> NSContentsCellMask
	NSString * NSContentSetBinding
	NSString * NSContentValuesBinding
	NSString * NSContentWidthBinding
	NSString * NSContextHelpModeDidActivateNotification
	NSString * NSContextHelpModeDidDeactivateNotification
	enum <anonymous> NSContinuousCapacityLevelIndicatorStyle
	NSString * NSContinuouslyUpdatesValueBindingOption
	enum <anonymous> NSControlGlyph
	enum <anonymous> NSControlKeyMask
	NSString * NSControlTextDidBeginEditingNotification
	NSString * NSControlTextDidChangeNotification
	NSString * NSControlTextDidEndEditingNotification
	NSString * NSControlTintDidChangeNotification
	NSString * NSConvertedDocumentAttribute
	enum <anonymous> NSCopyEntityMappingType
	NSString * NSCopyrightDocumentAttribute
	enum <anonymous> NSCoreDataError
	double NSCoreDataVersionNumber
	enum <anonymous> NSCoreServiceDirectory
	enum <anonymous> NSCorrectionIndicatorTypeDefault
	enum <anonymous> NSCorrectionIndicatorTypeGuesses
	enum <anonymous> NSCorrectionIndicatorTypeReversion
	enum <anonymous> NSCorrectionResponseAccepted
	enum <anonymous> NSCorrectionResponseEdited
	enum <anonymous> NSCorrectionResponseIgnored
	enum <anonymous> NSCorrectionResponseNone
	enum <anonymous> NSCorrectionResponseRejected
	enum <anonymous> NSCorrectionResponseReverted
	NSString *const NSCountKeyValueOperator
	enum <anonymous> NSCountResultType
	enum <anonymous> NSCrayonModeColorPanel
	NSString * NSCreatesSortDescriptorBindingOption
	NSString * NSCreationTimeDocumentAttribute
	enum <anonymous> NSCriticalAlertStyle
	enum <anonymous> NSCriticalRequest
	NSString * NSCriticalValueBinding
	NSString *const NSCurrencySymbol
	NSString *const NSCurrentLocaleDidChangeNotification
	NSString * NSCursorAttributeName
	enum <anonymous> NSCursorPointingDevice
	enum <anonymous> NSCursorUpdate
	enum <anonymous> NSCursorUpdateMask
	enum <anonymous> NSCurveToBezierPathElement
	NSString * NSCustomColorSpace
	enum <anonymous> NSCustomEntityMappingType
	enum <anonymous> NSCustomPaletteModeColorPanel
	enum <anonymous> NSCustomSelectorPredicateOperatorType
	const CGFloat NSDarkGray
	NSString * NSDataBinding
	enum <anonymous> NSDataReadingMapped
	enum <anonymous> NSDataReadingMappedAlways
	enum <anonymous> NSDataReadingMappedIfSafe
	enum <anonymous> NSDataReadingUncached
	enum <anonymous> NSDataSearchAnchored
	enum <anonymous> NSDataSearchBackwards
	enum <anonymous> NSDataWritingAtomic
	enum <anonymous> NSDataWritingFileProtectionComplete
	enum <anonymous> NSDataWritingFileProtectionCompleteUnlessOpen
	enum <anonymous> NSDataWritingFileProtectionCompleteUntilFirstUserAuthentication
	enum <anonymous> NSDataWritingFileProtectionMask
	enum <anonymous> NSDataWritingFileProtectionNone
	enum <anonymous> NSDataWritingWithoutOverwriting
	enum <anonymous> NSDateAttributeType
	NSString *const NSDateFormatString
	enum <anonymous> NSDateFormatterBehavior10_0
	enum <anonymous> NSDateFormatterBehavior10_4
	enum <anonymous> NSDateFormatterBehaviorDefault
	enum <anonymous> NSDateFormatterFullStyle
	enum <anonymous> NSDateFormatterLongStyle
	enum <anonymous> NSDateFormatterMediumStyle
	enum <anonymous> NSDateFormatterNoStyle
	enum <anonymous> NSDateFormatterShortStyle
	NSString *const NSDateTimeOrdering
	enum <anonymous> NSDayCalendarUnit
	enum <anonymous> NSDecimalAttributeType
	NSString *const NSDecimalDigits
	NSString *const NSDecimalNumberDivideByZeroException
	NSString *const NSDecimalNumberExactnessException
	NSString *const NSDecimalNumberOverflowException
	NSString *const NSDecimalNumberUnderflowException
	NSString *const NSDecimalSeparator
	enum <anonymous> NSDecimalTabStopType
	NSString * NSDefaultAttributesDocumentOption
	enum <anonymous> NSDefaultControlTint
	NSString *const NSDefaultRunLoopMode
	NSString * NSDefaultTabIntervalDocumentAttribute
	enum <anonymous> NSDefaultTokenStyle
	NSString *const NSDefinitionPresentationTypeDictionaryApplication
	NSString *const NSDefinitionPresentationTypeKey
	NSString *const NSDefinitionPresentationTypeOverlay
	enum <anonymous> NSDeleteCharacter
	enum <anonymous> NSDeleteCharFunctionKey
	NSString *const NSDeletedObjectsKey
	enum <anonymous> NSDeleteFunctionKey
	enum <anonymous> NSDeleteLineFunctionKey
	NSString * NSDeletesObjectsOnRemoveBindingsOption
	enum <anonymous> NSDemoApplicationDirectory
	enum <anonymous> NSDenyDeleteRule
	enum <anonymous> NSDescendingPageOrder
	enum <anonymous> NSDesktopDirectory
	NSString *const NSDestinationInvalidException
	NSString *const NSDetailedErrorsKey
	enum <anonymous> NSDeveloperApplicationDirectory
	enum <anonymous> NSDeveloperDirectory
	NSString * NSDeviceBitsPerSample
	NSString * NSDeviceBlackColorSpace
	NSString * NSDeviceCMYKColorSpace
	NSString * NSDeviceColorSpaceName
	enum <anonymous> NSDeviceIndependentModifierFlagsMask
	NSString * NSDeviceIsPrinter
	NSString * NSDeviceIsScreen
	enum <anonymous> NSDeviceNColorSpaceModel
	NSString * NSDeviceResolution
	NSString * NSDeviceRGBColorSpace
	NSString * NSDeviceSize
	NSString * NSDeviceWhiteColorSpace
	enum <anonymous> NSDiacriticInsensitivePredicateOption
	enum <anonymous> NSDiacriticInsensitiveSearch
	enum <anonymous> NSDictionaryResultType
	NSString *const NSDidBecomeSingleThreadedNotification
	enum <anonymous> NSDirectoryEnumerationSkipsHiddenFiles
	enum <anonymous> NSDirectoryEnumerationSkipsPackageDescendants
	enum <anonymous> NSDirectoryEnumerationSkipsSubdirectoryDescendants
	NSString * NSDirectoryFileType
	enum <anonymous> NSDirectPredicateModifier
	enum <anonymous> NSDirectSelection
	enum <anonymous> NSDisclosureBezelStyle
	enum <anonymous> NSDiscreteCapacityLevelIndicatorStyle
	NSString * NSDisplayNameBindingOption
	NSString * NSDisplayPatternBindingOption
	NSString * NSDisplayPatternTitleBinding
	NSString * NSDisplayPatternValueBinding
	enum <anonymous> NSDisplayWindowRunLoopOrdering
	NSString *const NSDistinctUnionOfArraysKeyValueOperator
	NSString *const NSDistinctUnionOfObjectsKeyValueOperator
	NSString *const NSDistinctUnionOfSetsKeyValueOperator
	NSString * NSDocFormatTextDocumentType
	enum <anonymous> NSDocModalWindowMask
	enum <anonymous> NSDocumentationDirectory
	enum <anonymous> NSDocumentDirectory
	NSString * NSDocumentEditedBinding
	NSString * NSDocumentTypeDocumentAttribute
	NSString * NSDocumentTypeDocumentOption
	enum <anonymous> NSDoubleAttributeType
	NSString * NSDoubleClickArgumentBinding
	NSString * NSDoubleClickTargetBinding
	enum <anonymous> NSDoubleType
	enum <anonymous> NSDownArrowFunctionKey
	enum <anonymous> NSDownloadsDirectory
	enum <anonymous> NSDownTextMovement
	enum <anonymous> NSDraggingContextOutsideApplication
	enum <anonymous> NSDraggingContextWithinApplication
	NSString * NSDraggingException
	enum <anonymous> NSDraggingFormationDefault
	enum <anonymous> NSDraggingFormationList
	enum <anonymous> NSDraggingFormationNone
	enum <anonymous> NSDraggingFormationPile
	enum <anonymous> NSDraggingFormationStack
	NSString *const NSDraggingImageComponentIconKey
	NSString *const NSDraggingImageComponentLabelKey
	enum <anonymous> NSDraggingItemEnumerationClearNonenumeratedImages
	enum <anonymous> NSDraggingItemEnumerationConcurrent
	enum <anonymous> NSDragOperationAll_Obsolete
	enum <anonymous> NSDragOperationCopy
	enum <anonymous> NSDragOperationDelete
	enum <anonymous> NSDragOperationEvery
	enum <anonymous> NSDragOperationGeneric
	enum <anonymous> NSDragOperationLink
	enum <anonymous> NSDragOperationMove
	enum <anonymous> NSDragOperationNone
	enum <anonymous> NSDragOperationPrivate
	NSString * NSDragPboard
	enum <anonymous> NSDrawerClosedState
	enum <anonymous> NSDrawerClosingState
	NSString * NSDrawerDidCloseNotification
	NSString * NSDrawerDidOpenNotification
	enum <anonymous> NSDrawerOpeningState
	enum <anonymous> NSDrawerOpenState
	NSString * NSDrawerWillCloseNotification
	NSString * NSDrawerWillOpenNotification
	enum <anonymous> nsDrvErr
	NSString *const NSEarlierTimeDesignations
	NSString * NSEditableBinding
	NSString * NSEditorDocumentAttribute
	NSString * NSEnabledBinding
	enum <anonymous> NSEndFunctionKey
	enum <anonymous> NSEndsWithComparison
	enum <anonymous> NSEndsWithPredicateOperatorType
	enum <anonymous> NSEnterCharacter
	enum <anonymous> NSEntityMigrationPolicyError
	NSString *const NSEntityNameInPathKey
	enum <anonymous> NSEnumerationConcurrent
	enum <anonymous> NSEnumerationReverse
	enum <anonymous> NSEqualToComparison
	enum <anonymous> NSEqualToPredicateOperatorType
	enum <anonymous> NSEraCalendarUnit
	enum <anonymous> NSEraDatePickerElementFlag
	enum <anonymous> NSEraserPointingDevice
	NSString *const NSErrorFailingURLStringKey
	id NSErrorMergePolicy
	enum <anonymous> NSErrorMergePolicyType
	enum <anonymous> NSEvaluatedObjectExpressionType
	enum <anonymous> NSEvenOddWindingRule
	enum <anonymous> NSEventGestureAxisHorizontal
	enum <anonymous> NSEventGestureAxisNone
	enum <anonymous> NSEventGestureAxisVertical
	enum <anonymous> NSEventMaskBeginGesture
	enum <anonymous> NSEventMaskEndGesture
	enum <anonymous> NSEventMaskGesture
	enum <anonymous> NSEventMaskMagnify
	enum <anonymous> NSEventMaskRotate
	enum <anonymous> NSEventMaskSmartMagnify
	enum <anonymous> NSEventMaskSwipe
	enum <anonymous> NSEventPhaseBegan
	enum <anonymous> NSEventPhaseCancelled
	enum <anonymous> NSEventPhaseChanged
	enum <anonymous> NSEventPhaseEnded
	enum <anonymous> NSEventPhaseMayBegin
	enum <anonymous> NSEventPhaseNone
	enum <anonymous> NSEventPhaseStationary
	enum <anonymous> NSEventSwipeTrackingClampGestureAmount
	enum <anonymous> NSEventSwipeTrackingLockDirection
	NSString * NSEventTrackingRunLoopMode
	enum <anonymous> NSEventTypeBeginGesture
	enum <anonymous> NSEventTypeEndGesture
	enum <anonymous> NSEventTypeGesture
	enum <anonymous> NSEventTypeMagnify
	enum <anonymous> NSEventTypeQuickLook
	enum <anonymous> NSEventTypeRotate
	enum <anonymous> NSEventTypeSmartMagnify
	enum <anonymous> NSEventTypeSwipe
	enum <anonymous> NSEverySubelement
	enum <anonymous> NSExclude10_4ElementsIconCreationOption
	NSString * NSExcludedElementsDocumentAttribute
	NSString * NSExcludedKeysBinding
	enum <anonymous> NSExcludeQuickDrawElementsIconCreationOption
	enum <anonymous> NSExecutableArchitectureMismatchError
	enum <anonymous> NSExecutableErrorMaximum
	enum <anonymous> NSExecutableErrorMinimum
	enum <anonymous> NSExecutableLinkError
	enum <anonymous> NSExecutableLoadError
	enum <anonymous> NSExecutableNotLoadableError
	enum <anonymous> NSExecutableRuntimeMismatchError
	enum <anonymous> NSExecuteFunctionKey
	enum <anonymous> NSExpandedFontMask
	NSString * NSExpansionAttributeName
	NSString *const NSExternalRecordExtensionOption
	enum <anonymous> NSExternalRecordImportError
	NSString *const NSExternalRecordsDirectoryOption
	NSString *const NSExternalRecordsFileFormatOption
	enum <anonymous> NSF10FunctionKey
	enum <anonymous> NSF11FunctionKey
	enum <anonymous> NSF12FunctionKey
	enum <anonymous> NSF13FunctionKey
	enum <anonymous> NSF14FunctionKey
	enum <anonymous> NSF15FunctionKey
	enum <anonymous> NSF16FunctionKey
	enum <anonymous> NSF17FunctionKey
	enum <anonymous> NSF18FunctionKey
	enum <anonymous> NSF19FunctionKey
	enum <anonymous> NSF1FunctionKey
	enum <anonymous> NSF20FunctionKey
	enum <anonymous> NSF21FunctionKey
	enum <anonymous> NSF22FunctionKey
	enum <anonymous> NSF23FunctionKey
	enum <anonymous> NSF24FunctionKey
	enum <anonymous> NSF25FunctionKey
	enum <anonymous> NSF26FunctionKey
	enum <anonymous> NSF27FunctionKey
	enum <anonymous> NSF28FunctionKey
	enum <anonymous> NSF29FunctionKey
	enum <anonymous> NSF2FunctionKey
	enum <anonymous> NSF30FunctionKey
	enum <anonymous> NSF31FunctionKey
	enum <anonymous> NSF32FunctionKey
	enum <anonymous> NSF33FunctionKey
	enum <anonymous> NSF34FunctionKey
	enum <anonymous> NSF35FunctionKey
	enum <anonymous> NSF3FunctionKey
	enum <anonymous> NSF4FunctionKey
	enum <anonymous> NSF5FunctionKey
	enum <anonymous> NSF6FunctionKey
	enum <anonymous> NSF7FunctionKey
	enum <anonymous> NSF8FunctionKey
	enum <anonymous> NSF9FunctionKey
	NSString *const NSFailedAuthenticationException
	enum <anonymous> NSFeatureUnsupportedError
	enum <anonymous> NSFetchRequestExpressionType
	enum <anonymous> NSFetchRequestType
	NSString *const NSFileAppendOnly
	NSString *const NSFileBusy
	NSString * NSFileContentsPboardType
	enum <anonymous> NSFileCoordinatorReadingResolvesSymbolicLink
	enum <anonymous> NSFileCoordinatorReadingWithoutChanges
	enum <anonymous> NSFileCoordinatorWritingForDeleting
	enum <anonymous> NSFileCoordinatorWritingForMerging
	enum <anonymous> NSFileCoordinatorWritingForMoving
	enum <anonymous> NSFileCoordinatorWritingForReplacing
	NSString *const NSFileCreationDate
	NSString *const NSFileDeviceIdentifier
	enum <anonymous> NSFileErrorMaximum
	enum <anonymous> NSFileErrorMinimum
	NSString *const NSFileExtensionHidden
	NSString *const NSFileGroupOwnerAccountID
	NSString *const NSFileGroupOwnerAccountName
	NSString *const NSFileHandleConnectionAcceptedNotification
	NSString *const NSFileHandleDataAvailableNotification
	NSString *const NSFileHandleNotificationDataItem
	NSString *const NSFileHandleNotificationFileHandleItem
	NSString *const NSFileHandleNotificationMonitorModes
	NSString *const NSFileHandleOperationException
	NSString *const NSFileHandleReadCompletionNotification
	NSString *const NSFileHandleReadToEndOfFileCompletionNotification
	enum <anonymous> NSFileHandlingPanelCancelButton
	enum <anonymous> NSFileHandlingPanelOKButton
	NSString *const NSFileHFSCreatorCode
	NSString *const NSFileHFSTypeCode
	NSString *const NSFileImmutable
	enum <anonymous> NSFileLockingError
	enum <anonymous> NSFileManagerItemReplacementUsingNewMetadataOnly
	enum <anonymous> NSFileManagerItemReplacementWithoutDeletingBackupItem
	NSString *const NSFileModificationDate
	NSString * NSFilenamesPboardType
	enum <anonymous> NSFileNoSuchFileError
	NSString *const NSFileOwnerAccountID
	NSString *const NSFileOwnerAccountName
	NSString *const NSFilePathErrorKey
	NSString *const NSFilePosixPermissions
	NSString *const NSFileProtectionComplete
	NSString *const NSFileProtectionCompleteUnlessOpen
	NSString *const NSFileProtectionCompleteUntilFirstUserAuthentication
	NSString *const NSFileProtectionKey
	NSString *const NSFileProtectionNone
	enum <anonymous> NSFileReadCorruptFileError
	enum <anonymous> NSFileReadInapplicableStringEncodingError
	enum <anonymous> NSFileReadInvalidFileNameError
	enum <anonymous> NSFileReadNoPermissionError
	enum <anonymous> NSFileReadNoSuchFileError
	enum <anonymous> NSFileReadTooLargeError
	enum <anonymous> NSFileReadUnknownError
	enum <anonymous> NSFileReadUnknownStringEncodingError
	enum <anonymous> NSFileReadUnsupportedSchemeError
	NSString *const NSFileReferenceCount
	NSString *const NSFileSize
	NSString * NSFilesPromisePboardType
	NSString *const NSFileSystemFileNumber
	NSString * NSFilesystemFileType
	NSString *const NSFileSystemFreeNodes
	NSString *const NSFileSystemFreeSize
	NSString *const NSFileSystemNodes
	NSString *const NSFileSystemNumber
	NSString *const NSFileSystemSize
	NSString *const NSFileType
	NSString *const NSFileTypeBlockSpecial
	NSString *const NSFileTypeCharacterSpecial
	NSString *const NSFileTypeDirectory
	NSString * NSFileTypeDocumentAttribute
	NSString * NSFileTypeDocumentOption
	NSString *const NSFileTypeRegular
	NSString *const NSFileTypeSocket
	NSString *const NSFileTypeSymbolicLink
	NSString *const NSFileTypeUnknown
	enum <anonymous> NSFileVersionAddingByMoving
	enum <anonymous> NSFileVersionReplacingByMoving
	enum <anonymous> NSFileWrapperReadingImmediate
	enum <anonymous> NSFileWrapperReadingWithoutMapping
	enum <anonymous> NSFileWrapperWritingAtomic
	enum <anonymous> NSFileWrapperWritingWithNameUpdating
	enum <anonymous> NSFileWriteFileExistsError
	enum <anonymous> NSFileWriteInapplicableStringEncodingError
	enum <anonymous> NSFileWriteInvalidFileNameError
	enum <anonymous> NSFileWriteNoPermissionError
	enum <anonymous> NSFileWriteOutOfSpaceError
	enum <anonymous> NSFileWriteUnknownError
	enum <anonymous> NSFileWriteUnsupportedSchemeError
	enum <anonymous> NSFileWriteVolumeReadOnlyError
	NSString * NSFilterPredicateBinding
	enum <anonymous> NSFindFunctionKey
	enum <anonymous> NSFindPanelActionNext
	enum <anonymous> NSFindPanelActionPrevious
	enum <anonymous> NSFindPanelActionReplace
	enum <anonymous> NSFindPanelActionReplaceAll
	enum <anonymous> NSFindPanelActionReplaceAllInSelection
	enum <anonymous> NSFindPanelActionReplaceAndFind
	enum <anonymous> NSFindPanelActionSelectAll
	enum <anonymous> NSFindPanelActionSelectAllInSelection
	enum <anonymous> NSFindPanelActionSetFindString
	enum <anonymous> NSFindPanelActionShowFindPanel
	NSString * NSFindPanelCaseInsensitiveSearch
	NSString * NSFindPanelSearchOptionsPboardType
	NSString * NSFindPanelSubstringMatch
	enum <anonymous> NSFindPanelSubstringMatchTypeContains
	enum <anonymous> NSFindPanelSubstringMatchTypeEndsWith
	enum <anonymous> NSFindPanelSubstringMatchTypeFullWord
	enum <anonymous> NSFindPanelSubstringMatchTypeStartsWith
	NSString * NSFindPboard
	enum <anonymous> NSFitPagination
	enum <anonymous> NSFixedPitchFontMask
	enum <anonymous> NSFlagsChanged
	enum <anonymous> NSFlagsChangedMask
	enum <anonymous> NSFloatAttributeType
	enum <anonymous> NSFloatingPointSamplesBitmapFormat
	enum <anonymous> NSFloatType
	enum <anonymous> NSFocusRingAbove
	enum <anonymous> NSFocusRingBelow
	enum <anonymous> NSFocusRingOnly
	enum <anonymous> NSFocusRingTypeDefault
	enum <anonymous> NSFocusRingTypeExterior
	enum <anonymous> NSFocusRingTypeNone
	enum <anonymous> NSFontAntialiasedIntegerAdvancementsRenderingMode
	enum <anonymous> NSFontAntialiasedRenderingMode
	NSString * NSFontAttributeName
	NSString * NSFontBinding
	NSString * NSFontBoldBinding
	enum <anonymous> NSFontBoldTrait
	NSString * NSFontCascadeListAttribute
	NSString * NSFontCharacterSetAttribute
	enum <anonymous> NSFontClarendonSerifsClass
	NSString *const NSFontCollectionActionKey
	NSString *const NSFontCollectionAllFonts
	enum <anonymous> NSFontCollectionApplicationOnlyMask
	NSString *const NSFontCollectionDidChangeNotification
	NSString *const NSFontCollectionDisallowAutoActivationOption
	NSString *const NSFontCollectionFavorites
	NSString *const NSFontCollectionIncludeDisabledFontsOption
	NSString *const NSFontCollectionNameKey
	NSString *const NSFontCollectionOldNameKey
	NSString *const NSFontCollectionRecentlyUsed
	NSString *const NSFontCollectionRemoveDuplicatesOption
	NSString *const NSFontCollectionUser
	enum <anonymous> NSFontCollectionVisibilityComputer
	NSString *const NSFontCollectionVisibilityKey
	enum <anonymous> NSFontCollectionVisibilityProcess
	enum <anonymous> NSFontCollectionVisibilityUser
	NSString *const NSFontCollectionWasHidden
	NSString *const NSFontCollectionWasRenamed
	NSString *const NSFontCollectionWasShown
	NSString * NSFontColorAttribute
	enum <anonymous> NSFontCondensedTrait
	enum <anonymous> NSFontDefaultRenderingMode
	enum <anonymous> NSFontExpandedTrait
	NSString * NSFontFaceAttribute
	NSString * NSFontFamilyAttribute
	enum <anonymous> NSFontFamilyClassMask
	NSString * NSFontFamilyNameBinding
	NSString * NSFontFeatureSelectorIdentifierKey
	NSString * NSFontFeatureSettingsAttribute
	NSString * NSFontFeatureTypeIdentifierKey
	NSString * NSFontFixedAdvanceAttribute
	enum <anonymous> NSFontFreeformSerifsClass
	const CGFloat * NSFontIdentityMatrix
	enum <anonymous> NSFontIntegerAdvancementsRenderingMode
	NSString * NSFontItalicBinding
	enum <anonymous> NSFontItalicTrait
	NSString * NSFontMatrixAttribute
	enum <anonymous> NSFontModernSerifsClass
	enum <anonymous> NSFontMonoSpaceTrait
	NSString * NSFontNameAttribute
	NSString * NSFontNameBinding
	enum <anonymous> NSFontOldStyleSerifsClass
	enum <anonymous> NSFontOrnamentalsClass
	enum <anonymous> NSFontPanelAllEffectsModeMask
	enum <anonymous> NSFontPanelAllModesMask
	enum <anonymous> NSFontPanelCollectionModeMask
	enum <anonymous> NSFontPanelDocumentColorEffectModeMask
	enum <anonymous> NSFontPanelFaceModeMask
	enum <anonymous> NSFontPanelShadowEffectModeMask
	enum <anonymous> NSFontPanelSizeModeMask
	enum <anonymous> NSFontPanelStandardModesMask
	enum <anonymous> NSFontPanelStrikethroughEffectModeMask
	enum <anonymous> NSFontPanelTextColorEffectModeMask
	enum <anonymous> NSFontPanelUnderlineEffectModeMask
	NSString * NSFontPboard
	NSString * NSFontPboardType
	enum <anonymous> NSFontSansSerifClass
	enum <anonymous> NSFontScriptsClass
	NSString * NSFontSetChangedNotification
	NSString * NSFontSizeAttribute
	NSString * NSFontSizeBinding
	enum <anonymous> NSFontSlabSerifsClass
	NSString * NSFontSlantTrait
	enum <anonymous> NSFontSymbolicClass
	NSString * NSFontSymbolicTrait
	NSString * NSFontTraitsAttribute
	enum <anonymous> NSFontTransitionalSerifsClass
	enum <anonymous> NSFontUIOptimizedTrait
	NSString * NSFontUnavailableException
	enum <anonymous> NSFontUnknownClass
	NSString * NSFontVariationAttribute
	NSString * NSFontVariationAxisDefaultValueKey
	NSString * NSFontVariationAxisIdentifierKey
	NSString * NSFontVariationAxisMaximumValueKey
	NSString * NSFontVariationAxisMinimumValueKey
	NSString * NSFontVariationAxisNameKey
	enum <anonymous> NSFontVerticalTrait
	NSString * NSFontVisibleNameAttribute
	NSString * NSFontWeightTrait
	NSString * NSFontWidthTrait
	enum <anonymous> NSForcedOrderingSearch
	NSString * NSForegroundColorAttributeName
	enum <anonymous> NSFormattingError
	enum <anonymous> NSFormattingErrorMaximum
	enum <anonymous> NSFormattingErrorMinimum
	enum <anonymous> NSFormFeedCharacter
	double NSFoundationVersionNumber
	enum <anonymous> NSFPCurrentField
	enum <anonymous> NSFPPreviewButton
	enum <anonymous> NSFPPreviewField
	enum <anonymous> NSFPRevertButton
	enum <anonymous> NSFPSetButton
	enum <anonymous> NSFPSizeField
	enum <anonymous> NSFPSizeTitle
	NSString * NSFTPPropertyActiveTransferModeKey
	NSString * NSFTPPropertyFileOffsetKey
	NSString * NSFTPPropertyFTPProxy
	NSString * NSFTPPropertyUserLoginKey
	NSString * NSFTPPropertyUserPasswordKey
	NSString *const NSFullScreenModeAllScreens
	NSString *const NSFullScreenModeApplicationPresentationOptions
	NSString *const NSFullScreenModeSetting
	NSString *const NSFullScreenModeWindowLevel
	enum <anonymous> NSFullScreenWindowMask
	enum <anonymous> NSFunctionExpressionType
	enum <anonymous> NSFunctionKeyMask
	NSString * NSGeneralPboard
	NSString *const NSGenericException
	enum <anonymous> NSGIFFileType
	NSString *const NSGlobalDomain
	enum <anonymous> NSGlyphAttributeBidiLevel
	enum <anonymous> NSGlyphAttributeElastic
	enum <anonymous> NSGlyphAttributeInscribe
	enum <anonymous> NSGlyphAttributeSoft
	NSString * NSGlyphInfoAttributeName
	enum <anonymous> NSGlyphInscribeAbove
	enum <anonymous> NSGlyphInscribeBase
	enum <anonymous> NSGlyphInscribeBelow
	enum <anonymous> NSGlyphInscribeOverBelow
	enum <anonymous> NSGlyphInscribeOverstrike
	enum <anonymous> NSGradientConcaveStrong
	enum <anonymous> NSGradientConcaveWeak
	enum <anonymous> NSGradientConvexStrong
	enum <anonymous> NSGradientConvexWeak
	enum <anonymous> NSGradientDrawsAfterEndingLocation
	enum <anonymous> NSGradientDrawsBeforeStartingLocation
	enum <anonymous> NSGradientNone
	NSString *const NSGrammarCorrections
	NSString *const NSGrammarRange
	NSString *const NSGrammarUserDescription
	NSString * NSGraphicsContextDestinationAttributeName
	NSString * NSGraphicsContextPDFFormat
	NSString * NSGraphicsContextPSFormat
	NSString * NSGraphicsContextRepresentationFormatAttributeName
	enum <anonymous> NSGraphiteControlTint
	enum <anonymous> NSGrayColorSpaceModel
	enum <anonymous> NSGrayModeColorPanel
	enum <anonymous> NSGreaterThanComparison
	enum <anonymous> NSGreaterThanOrEqualToComparison
	enum <anonymous> NSGreaterThanOrEqualToPredicateOperatorType
	enum <anonymous> NSGreaterThanPredicateOperatorType
	NSString *const NSGregorianCalendar
	enum <anonymous> NSGrooveBorder
	NSString * NSHandlesContentAsCompoundValueBindingOption
	enum <anonymous> NSHashTableCopyIn
	enum <anonymous> NSHashTableObjectPointerPersonality
	enum <anonymous> NSHashTableStrongMemory
	enum <anonymous> NSHashTableWeakMemory
	enum <anonymous> NSHashTableZeroingWeakMemory
	NSString * NSHeaderTitleBinding
	enum <anonymous> NSHeavierFontAction
	NSString *const NSHebrewCalendar
	NSString *const NSHelpAnchorErrorKey
	enum <anonymous> NSHelpButtonBezelStyle
	enum <anonymous> NSHelpFunctionKey
	enum <anonymous> NSHelpKeyMask
	NSString * NSHiddenBinding
	enum <anonymous> NSHighlightModeMatrix
	enum <anonymous> NSHomeFunctionKey
	enum <anonymous> NSHorizontalRuler
	enum <anonymous> NSHourCalendarUnit
	enum <anonymous> NSHourMinuteDatePickerElementFlag
	enum <anonymous> NSHourMinuteSecondDatePickerElementFlag
	NSString *const NSHourNameDesignations
	enum <anonymous> NSHPUXOperatingSystem
	enum <anonymous> NSHSBModeColorPanel
	NSString * NSHTMLPboardType
	NSString * NSHTMLTextDocumentType
	enum <anonymous> NSHTTPCookieAcceptPolicyAlways
	enum <anonymous> NSHTTPCookieAcceptPolicyNever
	enum <anonymous> NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain
	NSString *const NSHTTPCookieComment
	NSString *const NSHTTPCookieCommentURL
	NSString *const NSHTTPCookieDiscard
	NSString *const NSHTTPCookieDomain
	NSString *const NSHTTPCookieExpires
	NSString *const NSHTTPCookieManagerAcceptPolicyChangedNotification
	NSString *const NSHTTPCookieManagerCookiesChangedNotification
	NSString *const NSHTTPCookieMaximumAge
	NSString *const NSHTTPCookieName
	NSString *const NSHTTPCookieOriginURL
	NSString *const NSHTTPCookiePath
	NSString *const NSHTTPCookiePort
	NSString *const NSHTTPCookieSecure
	NSString *const NSHTTPCookieValue
	NSString *const NSHTTPCookieVersion
	NSString * NSHTTPPropertyErrorPageDataKey
	NSString * NSHTTPPropertyHTTPProxy
	NSString * NSHTTPPropertyRedirectionHeadersKey
	NSString * NSHTTPPropertyServerHTTPVersionKey
	NSString * NSHTTPPropertyStatusCodeKey
	NSString * NSHTTPPropertyStatusReasonKey
	enum <anonymous> NSHUDWindowMask
	NSString * NSHyphenationFactorDocumentAttribute
	enum <anonymous> NSIdentityMappingCharacterCollection
	NSString *const NSIgnorePersistentStoreVersioningOption
	NSString * NSIllegalSelectorException
	enum <anonymous> NSIllegalTextMovement
	enum <anonymous> NSImageAbove
	enum <anonymous> NSImageAlignBottom
	enum <anonymous> NSImageAlignBottomLeft
	enum <anonymous> NSImageAlignBottomRight
	enum <anonymous> NSImageAlignCenter
	enum <anonymous> NSImageAlignLeft
	enum <anonymous> NSImageAlignRight
	enum <anonymous> NSImageAlignTop
	enum <anonymous> NSImageAlignTopLeft
	enum <anonymous> NSImageAlignTopRight
	enum <anonymous> NSImageBelow
	NSString * NSImageBinding
	enum <anonymous> NSImageCacheAlways
	enum <anonymous> NSImageCacheBySize
	enum <anonymous> NSImageCacheDefault
	NSString * NSImageCacheException
	enum <anonymous> NSImageCacheNever
	enum <anonymous> NSImageCellType
	NSString * NSImageColorSyncProfileData
	NSString * NSImageCompressionFactor
	NSString * NSImageCompressionMethod
	NSString * NSImageCurrentFrame
	NSString * NSImageCurrentFrameDuration
	NSString * NSImageDitherTransparency
	NSString * NSImageEXIFData
	NSString * NSImageFallbackBackgroundColor
	enum <anonymous> NSImageFrameButton
	NSString * NSImageFrameCount
	enum <anonymous> NSImageFrameGrayBezel
	enum <anonymous> NSImageFrameGroove
	enum <anonymous> NSImageFrameNone
	enum <anonymous> NSImageFramePhoto
	NSString * NSImageGamma
	NSString *const NSImageHintCTM
	NSString *const NSImageHintInterpolation
	NSString * NSImageInterlaced
	enum <anonymous> NSImageInterpolationDefault
	enum <anonymous> NSImageInterpolationHigh
	enum <anonymous> NSImageInterpolationLow
	enum <anonymous> NSImageInterpolationMedium
	enum <anonymous> NSImageInterpolationNone
	enum <anonymous> NSImageLeft
	enum <anonymous> NSImageLoadStatusCancelled
	enum <anonymous> NSImageLoadStatusCompleted
	enum <anonymous> NSImageLoadStatusInvalidData
	enum <anonymous> NSImageLoadStatusReadError
	enum <anonymous> NSImageLoadStatusUnexpectedEOF
	NSString * NSImageLoopCount
	NSString *const NSImageNameActionTemplate
	NSString *const NSImageNameAddTemplate
	NSString *const NSImageNameAdvanced
	NSString *const NSImageNameApplicationIcon
	NSString *const NSImageNameBluetoothTemplate
	NSString *const NSImageNameBonjour
	NSString *const NSImageNameBookmarksTemplate
	NSString *const NSImageNameCaution
	NSString *const NSImageNameColorPanel
	NSString *const NSImageNameColumnViewTemplate
	NSString *const NSImageNameComputer
	NSString *const NSImageNameDotMac
	NSString *const NSImageNameEnterFullScreenTemplate
	NSString *const NSImageNameEveryone
	NSString *const NSImageNameExitFullScreenTemplate
	NSString *const NSImageNameFlowViewTemplate
	NSString *const NSImageNameFolder
	NSString *const NSImageNameFolderBurnable
	NSString *const NSImageNameFolderSmart
	NSString *const NSImageNameFollowLinkFreestandingTemplate
	NSString *const NSImageNameFontPanel
	NSString *const NSImageNameGoLeftTemplate
	NSString *const NSImageNameGoRightTemplate
	NSString *const NSImageNameHomeTemplate
	NSString *const NSImageNameIChatTheaterTemplate
	NSString *const NSImageNameIconViewTemplate
	NSString *const NSImageNameInfo
	NSString *const NSImageNameInvalidDataFreestandingTemplate
	NSString *const NSImageNameLeftFacingTriangleTemplate
	NSString *const NSImageNameListViewTemplate
	NSString *const NSImageNameLockLockedTemplate
	NSString *const NSImageNameLockUnlockedTemplate
	NSString *const NSImageNameMenuMixedStateTemplate
	NSString *const NSImageNameMenuOnStateTemplate
	NSString *const NSImageNameMobileMe
	NSString *const NSImageNameMultipleDocuments
	NSString *const NSImageNameNetwork
	NSString *const NSImageNamePathTemplate
	NSString *const NSImageNamePreferencesGeneral
	NSString *const NSImageNameQuickLookTemplate
	NSString *const NSImageNameRefreshFreestandingTemplate
	NSString *const NSImageNameRefreshTemplate
	NSString *const NSImageNameRemoveTemplate
	NSString *const NSImageNameRevealFreestandingTemplate
	NSString *const NSImageNameRightFacingTriangleTemplate
	NSString *const NSImageNameShareTemplate
	NSString *const NSImageNameSlideshowTemplate
	NSString *const NSImageNameSmartBadgeTemplate
	NSString *const NSImageNameStatusAvailable
	NSString *const NSImageNameStatusNone
	NSString *const NSImageNameStatusPartiallyAvailable
	NSString *const NSImageNameStatusUnavailable
	NSString *const NSImageNameStopProgressFreestandingTemplate
	NSString *const NSImageNameStopProgressTemplate
	NSString *const NSImageNameTrashEmpty
	NSString *const NSImageNameTrashFull
	NSString *const NSImageNameUser
	NSString *const NSImageNameUserAccounts
	NSString *const NSImageNameUserGroup
	NSString *const NSImageNameUserGuest
	enum <anonymous> NSImageOnly
	enum <anonymous> NSImageOverlaps
	NSString * NSImageProgressive
	enum <anonymous> NSImageRepLoadStatusCompleted
	enum <anonymous> NSImageRepLoadStatusInvalidData
	enum <anonymous> NSImageRepLoadStatusReadingHeader
	enum <anonymous> NSImageRepLoadStatusUnexpectedEOF
	enum <anonymous> NSImageRepLoadStatusUnknownType
	enum <anonymous> NSImageRepLoadStatusWillNeedAllData
	enum <anonymous> NSImageRepMatchesDevice
	NSString * NSImageRepRegistryDidChangeNotification
	NSString * NSImageRGBColorTable
	enum <anonymous> NSImageRight
	enum <anonymous> NSImageScaleAxesIndependently
	enum <anonymous> NSImageScaleNone
	enum <anonymous> NSImageScaleProportionallyDown
	enum <anonymous> NSImageScaleProportionallyUpOrDown
	NSString * NSIncludedKeysBinding
	NSString *const NSInconsistentArchiveException
	enum <anonymous> NSIndexedColorSpaceModel
	enum <anonymous> NSIndexSubelement
	NSString *const NSIndianCalendar
	NSString *const NSInferMappingModelAutomaticallyOption
	enum <anonymous> NSInferredMappingModelError
	enum <anonymous> NSInformationalAlertStyle
	enum <anonymous> NSInformationalRequest
	NSString * NSInitialKeyBinding
	NSString * NSInitialValueBinding
	NSString * NSInkTextPboardType
	enum <anonymous> NSInlineBezelStyle
	NSString *const NSInMemoryStoreType
	enum <anonymous> NSInPredicateOperatorType
	enum <anonymous> NSInputMethodsDirectory
	enum <anonymous> NSInsertCharFunctionKey
	NSString *const NSInsertedObjectsKey
	enum <anonymous> NSInsertFunctionKey
	enum <anonymous> NSInsertLineFunctionKey
	NSString * NSInsertsNullPlaceholderBindingOption
	enum <anonymous> NSInteger16AttributeType
	enum <anonymous> NSInteger32AttributeType
	enum <anonymous> NSInteger64AttributeType
	const NSHashTableCallBacks NSIntegerHashCallBacks
	const NSMapTableKeyCallBacks NSIntegerMapKeyCallBacks
	const NSMapTableValueCallBacks NSIntegerMapValueCallBacks
	NSString * NSInterfaceStyleDefault
	NSString *const NSInternalInconsistencyException
	enum <anonymous> NSInternalScriptError
	enum <anonymous> NSInternalSpecifierError
	NSString *const NSInternationalCurrencyString
	enum <anonymous> NSIntersectSetExpressionType
	const NSHashTableCallBacks NSIntHashCallBacks
	const NSMapTableKeyCallBacks NSIntMapKeyCallBacks
	const NSMapTableValueCallBacks NSIntMapValueCallBacks
	enum <anonymous> NSIntType
	NSString *const NSInvalidArchiveOperationException
	NSString *const NSInvalidArgumentException
	NSString *const NSInvalidatedAllObjectsKey
	NSString *const NSInvalidatedObjectsKey
	enum <anonymous> NSInvalidIndexSpecifierError
	NSString *const NSInvalidReceivePortException
	NSString *const NSInvalidSendPortException
	NSString *const NSInvalidUnarchiveOperationException
	NSString *const NSInvocationOperationCancelledException
	NSString *const NSInvocationOperationVoidResultException
	NSString * NSInvokesSeparatelyWithArrayObjectsBindingOption
	NSString * NSIsIndeterminateBinding
	NSString *const NSIslamicCalendar
	NSString *const NSIslamicCivilCalendar
	NSString *const NSIsNilTransformerName
	NSString *const NSIsNotNilTransformerName
	enum <anonymous> NSISO2022JPStringEncoding
	NSString *const NSISO8601Calendar
	enum <anonymous> NSISOLatin1StringEncoding
	enum <anonymous> NSISOLatin2StringEncoding
	enum <anonymous> NSItalicFontMask
	enum <anonymous> NSItemReplacementDirectory
	NSString *const NSJapaneseCalendar
	enum <anonymous> NSJapaneseEUCStringEncoding
	enum <anonymous> NSJPEG2000FileType
	enum <anonymous> NSJPEGFileType
	enum <anonymous> NSJSONReadingAllowFragments
	enum <anonymous> NSJSONReadingMutableContainers
	enum <anonymous> NSJSONReadingMutableLeaves
	enum <anonymous> NSJSONWritingPrettyPrinted
	enum <anonymous> NSJustifiedTextAlignment
	NSString * NSKernAttributeName
	enum <anonymous> NSKeyDown
	enum <anonymous> NSKeyDownMask
	NSString *const NSKeyedUnarchiveFromDataTransformerName
	enum <anonymous> NSKeyPathExpressionType
	enum <anonymous> NSKeySpecifierEvaluationScriptError
	enum <anonymous> NSKeyUp
	enum <anonymous> NSKeyUpMask
	NSString *const NSKeyValueChangeIndexesKey
	enum <anonymous> NSKeyValueChangeInsertion
	NSString *const NSKeyValueChangeKindKey
	NSString *const NSKeyValueChangeNewKey
	NSString *const NSKeyValueChangeNotificationIsPriorKey
	NSString *const NSKeyValueChangeOldKey
	enum <anonymous> NSKeyValueChangeRemoval
	enum <anonymous> NSKeyValueChangeReplacement
	enum <anonymous> NSKeyValueChangeSetting
	enum <anonymous> NSKeyValueIntersectSetMutation
	enum <anonymous> NSKeyValueMinusSetMutation
	enum <anonymous> NSKeyValueObservingOptionInitial
	enum <anonymous> NSKeyValueObservingOptionNew
	enum <anonymous> NSKeyValueObservingOptionOld
	enum <anonymous> NSKeyValueObservingOptionPrior
	enum <anonymous> NSKeyValueSetSetMutation
	enum <anonymous> NSKeyValueUnionSetMutation
	enum <anonymous> NSKeyValueValidationError
	NSString * NSKeywordsDocumentAttribute
	enum <anonymous> NSLABColorSpaceModel
	NSString * NSLabelBinding
	enum <anonymous> NSLandscapeOrientation
	NSString *const NSLaterTimeDesignations
	enum <anonymous> NSLayoutAttributeBaseline
	enum <anonymous> NSLayoutAttributeBottom
	enum <anonymous> NSLayoutAttributeCenterX
	enum <anonymous> NSLayoutAttributeCenterY
	enum <anonymous> NSLayoutAttributeHeight
	enum <anonymous> NSLayoutAttributeLeading
	enum <anonymous> NSLayoutAttributeLeft
	enum <anonymous> NSLayoutAttributeNotAnAttribute
	enum <anonymous> NSLayoutAttributeRight
	enum <anonymous> NSLayoutAttributeTop
	enum <anonymous> NSLayoutAttributeTrailing
	enum <anonymous> NSLayoutAttributeWidth
	enum <anonymous> NSLayoutConstraintOrientationHorizontal
	enum <anonymous> NSLayoutConstraintOrientationVertical
	enum <anonymous> NSLayoutFormatAlignAllBaseline
	enum <anonymous> NSLayoutFormatAlignAllBottom
	enum <anonymous> NSLayoutFormatAlignAllCenterX
	enum <anonymous> NSLayoutFormatAlignAllCenterY
	enum <anonymous> NSLayoutFormatAlignAllLeading
	enum <anonymous> NSLayoutFormatAlignAllLeft
	enum <anonymous> NSLayoutFormatAlignAllRight
	enum <anonymous> NSLayoutFormatAlignAllTop
	enum <anonymous> NSLayoutFormatAlignAllTrailing
	enum <anonymous> NSLayoutFormatAlignmentMask
	enum <anonymous> NSLayoutFormatDirectionLeadingToTrailing
	enum <anonymous> NSLayoutFormatDirectionLeftToRight
	enum <anonymous> NSLayoutFormatDirectionMask
	enum <anonymous> NSLayoutFormatDirectionRightToLeft
	enum <anonymous> NSLayoutPriorityDefaultHigh
	enum <anonymous> NSLayoutPriorityDefaultLow
	enum <anonymous> NSLayoutPriorityDragThatCannotResizeWindow
	enum <anonymous> NSLayoutPriorityDragThatCanResizeWindow
	enum <anonymous> NSLayoutPriorityFittingSizeCompression
	enum <anonymous> NSLayoutPriorityRequired
	enum <anonymous> NSLayoutPriorityWindowSizeStayPut
	enum <anonymous> NSLayoutRelationEqual
	enum <anonymous> NSLayoutRelationGreaterThanOrEqual
	enum <anonymous> NSLayoutRelationLessThanOrEqual
	enum <anonymous> NSLeftArrowFunctionKey
	NSString * NSLeftMarginDocumentAttribute
	enum <anonymous> NSLeftMouseDown
	enum <anonymous> NSLeftMouseDownMask
	enum <anonymous> NSLeftMouseDragged
	enum <anonymous> NSLeftMouseDraggedMask
	enum <anonymous> NSLeftMouseUp
	enum <anonymous> NSLeftMouseUpMask
	enum <anonymous> NSLeftTabsBezelBorder
	enum <anonymous> NSLeftTabStopType
	enum <anonymous> NSLeftTextAlignment
	enum <anonymous> NSLeftTextMovement
	enum <anonymous> NSLessThanComparison
	enum <anonymous> NSLessThanOrEqualToComparison
	enum <anonymous> NSLessThanOrEqualToPredicateOperatorType
	enum <anonymous> NSLessThanPredicateOperatorType
	enum <anonymous> NSLibraryDirectory
	NSString * NSLigatureAttributeName
	enum <anonymous> NSLighterFontAction
	const CGFloat NSLightGray
	enum <anonymous> NSLikePredicateOperatorType
	enum <anonymous> NSLinearSlider
	enum <anonymous> NSLineBorder
	enum <anonymous> NSLineBreakByCharWrapping
	enum <anonymous> NSLineBreakByClipping
	enum <anonymous> NSLineBreakByTruncatingHead
	enum <anonymous> NSLineBreakByTruncatingMiddle
	enum <anonymous> NSLineBreakByTruncatingTail
	enum <anonymous> NSLineBreakByWordWrapping
	enum <anonymous> NSLineDoesntMove
	enum <anonymous> NSLineMovesDown
	enum <anonymous> NSLineMovesLeft
	enum <anonymous> NSLineMovesRight
	enum <anonymous> NSLineMovesUp
	enum <anonymous> NSLineSeparatorCharacter
	enum <anonymous> NSLineSweepDown
	enum <anonymous> NSLineSweepLeft
	enum <anonymous> NSLineSweepRight
	enum <anonymous> NSLineSweepUp
	enum <anonymous> NSLineToBezierPathElement
	NSString *const NSLinguisticTagAdjective
	NSString *const NSLinguisticTagAdverb
	NSString *const NSLinguisticTagClassifier
	NSString *const NSLinguisticTagCloseParenthesis
	NSString *const NSLinguisticTagCloseQuote
	NSString *const NSLinguisticTagConjunction
	NSString *const NSLinguisticTagDash
	NSString *const NSLinguisticTagDeterminer
	enum <anonymous> NSLinguisticTaggerJoinNames
	enum <anonymous> NSLinguisticTaggerOmitOther
	enum <anonymous> NSLinguisticTaggerOmitPunctuation
	enum <anonymous> NSLinguisticTaggerOmitWhitespace
	enum <anonymous> NSLinguisticTaggerOmitWords
	NSString *const NSLinguisticTagIdiom
	NSString *const NSLinguisticTagInterjection
	NSString *const NSLinguisticTagNoun
	NSString *const NSLinguisticTagNumber
	NSString *const NSLinguisticTagOpenParenthesis
	NSString *const NSLinguisticTagOpenQuote
	NSString *const NSLinguisticTagOrganizationName
	NSString *const NSLinguisticTagOther
	NSString *const NSLinguisticTagOtherPunctuation
	NSString *const NSLinguisticTagOtherWhitespace
	NSString *const NSLinguisticTagOtherWord
	NSString *const NSLinguisticTagParagraphBreak
	NSString *const NSLinguisticTagParticle
	NSString *const NSLinguisticTagPersonalName
	NSString *const NSLinguisticTagPlaceName
	NSString *const NSLinguisticTagPreposition
	NSString *const NSLinguisticTagPronoun
	NSString *const NSLinguisticTagPunctuation
	NSString *const NSLinguisticTagSchemeLanguage
	NSString *const NSLinguisticTagSchemeLemma
	NSString *const NSLinguisticTagSchemeLexicalClass
	NSString *const NSLinguisticTagSchemeNameType
	NSString *const NSLinguisticTagSchemeNameTypeOrLexicalClass
	NSString *const NSLinguisticTagSchemeScript
	NSString *const NSLinguisticTagSchemeTokenType
	NSString *const NSLinguisticTagSentenceTerminator
	NSString *const NSLinguisticTagVerb
	NSString *const NSLinguisticTagWhitespace
	NSString *const NSLinguisticTagWord
	NSString *const NSLinguisticTagWordJoiner
	NSString * NSLinkAttributeName
	enum <anonymous> NSListModeMatrix
	enum <anonymous> NSLiteralSearch
	NSString *const NSLoadedClasses
	enum <anonymous> NSLocalDomainMask
	NSString *const NSLocaleAlternateQuotationBeginDelimiterKey
	NSString *const NSLocaleAlternateQuotationEndDelimiterKey
	NSString *const NSLocaleCalendar
	NSString *const NSLocaleCollationIdentifier
	NSString *const NSLocaleCollatorIdentifier
	NSString *const NSLocaleCountryCode
	NSString *const NSLocaleCurrencyCode
	NSString *const NSLocaleCurrencySymbol
	NSString *const NSLocaleDecimalSeparator
	NSString *const NSLocaleExemplarCharacterSet
	NSString *const NSLocaleGroupingSeparator
	NSString *const NSLocaleIdentifier
	NSString *const NSLocaleLanguageCode
	enum <anonymous> NSLocaleLanguageDirectionBottomToTop
	enum <anonymous> NSLocaleLanguageDirectionLeftToRight
	enum <anonymous> NSLocaleLanguageDirectionRightToLeft
	enum <anonymous> NSLocaleLanguageDirectionTopToBottom
	enum <anonymous> NSLocaleLanguageDirectionUnknown
	NSString *const NSLocaleMeasurementSystem
	NSString *const NSLocaleQuotationBeginDelimiterKey
	NSString *const NSLocaleQuotationEndDelimiterKey
	NSString *const NSLocaleScriptCode
	NSString *const NSLocaleUsesMetricSystem
	NSString *const NSLocaleVariantCode
	NSString *const NSLocalizedDescriptionKey
	NSString *const NSLocalizedFailureReasonErrorKey
	NSString * NSLocalizedKeyDictionaryBinding
	NSString *const NSLocalizedRecoveryOptionsErrorKey
	NSString *const NSLocalizedRecoverySuggestionErrorKey
	NSString *const NSLocalNotificationCenterType
	NSString *const NSMachErrorDomain
	enum <anonymous> NSMACHOperatingSystem
	enum <anonymous> NSMachPortDeallocateNone
	enum <anonymous> NSMachPortDeallocateReceiveRight
	enum <anonymous> NSMachPortDeallocateSendRight
	enum <anonymous> NSMacintoshInterfaceStyle
	enum <anonymous> NSMacOSRomanStringEncoding
	NSString * NSMacSimpleTextDocumentType
	enum <anonymous> NSMainQueueConcurrencyType
	NSString *const NSMallocException
	NSString * NSManagedObjectContextBinding
	NSString *const NSManagedObjectContextDidSaveNotification
	enum <anonymous> NSManagedObjectContextLockingError
	NSString *const NSManagedObjectContextObjectsDidChangeNotification
	NSString *const NSManagedObjectContextWillSaveNotification
	enum <anonymous> NSManagedObjectExternalRelationshipError
	enum <anonymous> NSManagedObjectIDResultType
	enum <anonymous> NSManagedObjectMergeError
	enum <anonymous> NSManagedObjectReferentialIntegrityError
	enum <anonymous> NSManagedObjectResultType
	enum <anonymous> NSManagedObjectValidationError
	NSString * NSManagerDocumentAttribute
	enum <anonymous> NSMappedRead
	enum <anonymous> NSMapTableCopyIn
	enum <anonymous> NSMapTableObjectPointerPersonality
	enum <anonymous> NSMapTableStrongMemory
	enum <anonymous> NSMapTableWeakMemory
	enum <anonymous> NSMapTableZeroingWeakMemory
	NSString * NSMarkedClauseSegmentAttributeName
	enum <anonymous> NSMatchesPredicateOperatorType
	enum <anonymous> NSMatchingAnchored
	enum <anonymous> NSMatchingCompleted
	enum <anonymous> NSMatchingHitEnd
	enum <anonymous> NSMatchingInternalError
	enum <anonymous> NSMatchingProgress
	enum <anonymous> NSMatchingReportCompletion
	enum <anonymous> NSMatchingReportProgress
	enum <anonymous> NSMatchingRequiredEnd
	enum <anonymous> NSMatchingWithoutAnchoringBounds
	enum <anonymous> NSMatchingWithTransparentBounds
	NSString *const NSMaximumKeyValueOperator
	NSString * NSMaximumRecentsBinding
	NSString * NSMaxValueBinding
	NSString * NSMaxWidthBinding
	NSString * NSMenuDidAddItemNotification
	NSString * NSMenuDidBeginTrackingNotification
	NSString * NSMenuDidChangeItemNotification
	NSString * NSMenuDidEndTrackingNotification
	NSString * NSMenuDidRemoveItemNotification
	NSString * NSMenuDidSendActionNotification
	enum <anonymous> NSMenuFunctionKey
	enum <anonymous> NSMenuPropertyItemAccessibilityDescription
	enum <anonymous> NSMenuPropertyItemAttributedTitle
	enum <anonymous> NSMenuPropertyItemEnabled
	enum <anonymous> NSMenuPropertyItemImage
	enum <anonymous> NSMenuPropertyItemKeyEquivalent
	enum <anonymous> NSMenuPropertyItemTitle
	NSString * NSMenuWillSendActionNotification
	id NSMergeByPropertyObjectTrumpMergePolicy
	enum <anonymous> NSMergeByPropertyObjectTrumpMergePolicyType
	id NSMergeByPropertyStoreTrumpMergePolicy
	enum <anonymous> NSMergeByPropertyStoreTrumpMergePolicyType
	NSString *const NSMetadataItemDisplayNameKey
	NSString *const NSMetadataItemFSContentChangeDateKey
	NSString *const NSMetadataItemFSCreationDateKey
	NSString *const NSMetadataItemFSNameKey
	NSString *const NSMetadataItemFSSizeKey
	NSString *const NSMetadataItemIsUbiquitousKey
	NSString *const NSMetadataItemPathKey
	NSString *const NSMetadataItemURLKey
	NSString *const NSMetadataQueryDidFinishGatheringNotification
	NSString *const NSMetadataQueryDidStartGatheringNotification
	NSString *const NSMetadataQueryDidUpdateNotification
	NSString *const NSMetadataQueryGatheringProgressNotification
	NSString *const NSMetadataQueryLocalComputerScope
	NSString *const NSMetadataQueryNetworkScope
	NSString *const NSMetadataQueryResultContentRelevanceAttribute
	NSString *const NSMetadataQueryUbiquitousDataScope
	NSString *const NSMetadataQueryUbiquitousDocumentsScope
	NSString *const NSMetadataQueryUserHomeScope
	NSString *const NSMetadataUbiquitousItemHasUnresolvedConflictsKey
	NSString *const NSMetadataUbiquitousItemIsDownloadedKey
	NSString *const NSMetadataUbiquitousItemIsDownloadingKey
	NSString *const NSMetadataUbiquitousItemIsUploadedKey
	NSString *const NSMetadataUbiquitousItemIsUploadingKey
	NSString *const NSMetadataUbiquitousItemPercentDownloadedKey
	NSString *const NSMetadataUbiquitousItemPercentUploadedKey
	enum <anonymous> NSMiddleSubelement
	NSString *const NSMigratePersistentStoresAutomaticallyOption
	enum <anonymous> NSMigrationCancelledError
	NSString *const NSMigrationDestinationObjectKey
	NSString *const NSMigrationEntityMappingKey
	NSString *const NSMigrationEntityPolicyKey
	enum <anonymous> NSMigrationError
	enum <anonymous> NSMigrationManagerDestinationStoreError
	NSString *const NSMigrationManagerKey
	enum <anonymous> NSMigrationManagerSourceStoreError
	enum <anonymous> NSMigrationMissingMappingModelError
	enum <anonymous> NSMigrationMissingSourceModelError
	NSString *const NSMigrationPropertyMappingKey
	NSString *const NSMigrationSourceObjectKey
	enum <anonymous> NSMiniaturizableWindowMask
	enum <anonymous> NSMiniControlSize
	NSString *const NSMinimumKeyValueOperator
	enum <anonymous> NSMinusSetExpressionType
	enum <anonymous> NSMinuteCalendarUnit
	NSString * NSMinValueBinding
	NSString * NSMinWidthBinding
	enum <anonymous> NSMiterLineJoinStyle
	enum <anonymous> NSMixedState
	NSString * NSMixedStateImageBinding
	NSString * NSModalPanelRunLoopMode
	NSString *const NSModelPathKey
	enum <anonymous> NSModeSwitchFunctionKey
	NSString * NSModificationTimeDocumentAttribute
	enum <anonymous> NSMomentaryChangeButton
	enum <anonymous> NSMomentaryLight
	enum <anonymous> NSMomentaryLightButton
	enum <anonymous> NSMomentaryPushButton
	enum <anonymous> NSMomentaryPushInButton
	enum <anonymous> NSMonthCalendarUnit
	NSString *const NSMonthNameArray
	enum <anonymous> NSMouseEntered
	enum <anonymous> NSMouseEnteredMask
	enum <anonymous> NSMouseEventSubtype
	enum <anonymous> NSMouseExited
	enum <anonymous> NSMouseExitedMask
	enum <anonymous> NSMouseMoved
	enum <anonymous> NSMouseMovedMask
	enum <anonymous> NSMoveToBezierPathElement
	enum <anonymous> NSMoviesDirectory
	NSString * NSMultipleTextSelectionPboardType
	id NSMultipleValuesMarker
	NSString * NSMultipleValuesPlaceholderBindingOption
	enum <anonymous> NSMusicDirectory
	NSString * NSNamedColorSpace
	enum <anonymous> NSNarrowFontMask
	enum <anonymous> NSNativeShortGlyphPacking
	enum <anonymous> NSNaturalTextAlignment
	NSString *const NSNegateBooleanTransformerName
	NSString *const NSNegativeCurrencyFormatString
	enum <anonymous> NSNetServiceNoAutoRename
	enum <anonymous> NSNetServicesActivityInProgress
	enum <anonymous> NSNetServicesBadArgumentError
	enum <anonymous> NSNetServicesCancelledError
	enum <anonymous> NSNetServicesCollisionError
	NSString *const NSNetServicesErrorCode
	NSString *const NSNetServicesErrorDomain
	enum <anonymous> NSNetServicesInvalidError
	enum <anonymous> NSNetServicesNotFoundError
	enum <anonymous> NSNetServicesTimeoutError
	enum <anonymous> NSNetServicesUnknownError
	enum <anonymous> NSNetworkDomainMask
	enum <anonymous> NSNewlineCharacter
	NSString *const NSNextDayDesignations
	enum <anonymous> NSNextFunctionKey
	NSString *const NSNextNextDayDesignations
	enum <anonymous> NSNextStepInterfaceStyle
	enum <anonymous> NSNEXTSTEPStringEncoding
	NSString * NSNibLoadingException
	NSString * NSNibOwner
	NSString * NSNibTopLevelObjects
	enum <anonymous> NSNoActionDeleteRule
	enum <anonymous> NSNoBorder
	enum <anonymous> NSNoCellMask
	enum <anonymous> NSNoFontChangeAction
	enum <anonymous> NSNoImage
	enum <anonymous> NSNoInterfaceStyle
	enum <anonymous> NSNoModeColorPanel
	enum <anonymous> NSNonactivatingPanelMask
	enum <anonymous> NSNonLossyASCIIStringEncoding
	const NSHashTableCallBacks NSNonOwnedPointerHashCallBacks
	const NSMapTableKeyCallBacks NSNonOwnedPointerMapKeyCallBacks
	const NSMapTableValueCallBacks NSNonOwnedPointerMapValueCallBacks
	const NSMapTableKeyCallBacks NSNonOwnedPointerOrNullMapKeyCallBacks
	const NSHashTableCallBacks NSNonRetainedObjectHashCallBacks
	const NSMapTableKeyCallBacks NSNonRetainedObjectMapKeyCallBacks
	const NSMapTableValueCallBacks NSNonRetainedObjectMapValueCallBacks
	enum <anonymous> NSNonStandardCharacterSetFontMask
	enum <anonymous> NSNonZeroWindingRule
	enum <anonymous> NSNormalizedPredicateOption
	enum <anonymous> NSNoScriptError
	enum <anonymous> NSNoScrollerParts
	id NSNoSelectionMarker
	NSString * NSNoSelectionPlaceholderBindingOption
	enum <anonymous> NSNoSpecifierError
	enum <anonymous> NSNoSubelement
	enum <anonymous> NSNoTabsBezelBorder
	enum <anonymous> NSNoTabsLineBorder
	enum <anonymous> NSNoTabsNoBorder
	id NSNotApplicableMarker
	NSString * NSNotApplicablePlaceholderBindingOption
	enum <anonymous> NSNotEqualToPredicateOperatorType
	enum <anonymous> NSNotFound
	enum <anonymous> NSNotificationCoalescingOnName
	enum <anonymous> NSNotificationCoalescingOnSender
	enum <anonymous> NSNotificationDeliverImmediately
	enum <anonymous> NSNotificationNoCoalescing
	enum <anonymous> NSNotificationPostToAllSessions
	enum <anonymous> NSNotificationSuspensionBehaviorCoalesce
	enum <anonymous> NSNotificationSuspensionBehaviorDeliverImmediately
	enum <anonymous> NSNotificationSuspensionBehaviorDrop
	enum <anonymous> NSNotificationSuspensionBehaviorHold
	enum <anonymous> NSNoTitle
	enum <anonymous> NSNoTopLevelContainersSpecifierError
	enum <anonymous> NSNotPredicateType
	enum <anonymous> NSNoUnderlineStyle
	enum <anonymous> NSNullCellType
	enum <anonymous> NSNullGlyph
	enum <anonymous> NSNullifyDeleteRule
	NSString * NSNullPlaceholderBindingOption
	enum <anonymous> NSNumberFormatterBehavior10_0
	enum <anonymous> NSNumberFormatterBehavior10_4
	enum <anonymous> NSNumberFormatterBehaviorDefault
	enum <anonymous> NSNumberFormatterCurrencyStyle
	enum <anonymous> NSNumberFormatterDecimalStyle
	enum <anonymous> NSNumberFormatterNoStyle
	enum <anonymous> NSNumberFormatterPadAfterPrefix
	enum <anonymous> NSNumberFormatterPadAfterSuffix
	enum <anonymous> NSNumberFormatterPadBeforePrefix
	enum <anonymous> NSNumberFormatterPadBeforeSuffix
	enum <anonymous> NSNumberFormatterPercentStyle
	enum <anonymous> NSNumberFormatterRoundCeiling
	enum <anonymous> NSNumberFormatterRoundDown
	enum <anonymous> NSNumberFormatterRoundFloor
	enum <anonymous> NSNumberFormatterRoundHalfDown
	enum <anonymous> NSNumberFormatterRoundHalfEven
	enum <anonymous> NSNumberFormatterRoundHalfUp
	enum <anonymous> NSNumberFormatterRoundUp
	enum <anonymous> NSNumberFormatterScientificStyle
	enum <anonymous> NSNumberFormatterSpellOutStyle
	enum <anonymous> NSNumericPadKeyMask
	enum <anonymous> NSNumericSearch
	const NSHashTableCallBacks NSObjectHashCallBacks
	enum <anonymous> NSObjectIDAttributeType
	NSString *const NSObjectInaccessibleException
	const NSMapTableKeyCallBacks NSObjectMapKeyCallBacks
	const NSMapTableValueCallBacks NSObjectMapValueCallBacks
	NSString *const NSObjectNotAvailableException
	NSString *const NSObjectURIKey
	NSString * NSObliquenessAttributeName
	NSString * NSObservedKeyPathKey
	NSString * NSObservedObjectKey
	NSString * NSOfficeOpenXMLTextDocumentType
	enum <anonymous> NSOffState
	NSString * NSOffStateImageBinding
	enum <anonymous> NSOKButton
	NSString *const NSOldStyleException
	enum <anonymous> NSOnlyScrollerArrows
	enum <anonymous> NSOnOffButton
	enum <anonymous> NSOnState
	NSString * NSOnStateImageBinding
	NSString * NSOpenDocumentTextDocumentType
	NSOpenGLContextParameter NSOpenGLCPCurrentRendererID
	NSOpenGLContextParameter NSOpenGLCPGPUFragmentProcessing
	NSOpenGLContextParameter NSOpenGLCPGPUVertexProcessing
	NSOpenGLContextParameter NSOpenGLCPHasDrawable
	NSOpenGLContextParameter NSOpenGLCPMPSwapsInFlight
	NSOpenGLContextParameter NSOpenGLCPRasterizationEnable
	NSOpenGLContextParameter NSOpenGLCPReclaimResources
	NSOpenGLContextParameter NSOpenGLCPStateValidation
	NSOpenGLContextParameter NSOpenGLCPSurfaceBackingSize
	NSOpenGLContextParameter NSOpenGLCPSurfaceOpacity
	NSOpenGLContextParameter NSOpenGLCPSurfaceOrder
	NSOpenGLContextParameter NSOpenGLCPSurfaceSurfaceVolatile
	NSOpenGLContextParameter NSOpenGLCPSwapInterval
	NSOpenGLContextParameter NSOpenGLCPSwapRectangle
	NSOpenGLContextParameter NSOpenGLCPSwapRectangleEnable
	NSOpenGLGlobalOption NSOpenGLGOClearFormatCache
	NSOpenGLGlobalOption NSOpenGLGOFormatCacheSize
	NSOpenGLGlobalOption NSOpenGLGOResetLibrary
	NSOpenGLGlobalOption NSOpenGLGORetainRenderers
	NSOpenGLGlobalOption NSOpenGLGOUseBuildCache
	enum <anonymous> NSOpenGLPFAAccelerated
	enum <anonymous> NSOpenGLPFAAcceleratedCompute
	enum <anonymous> NSOpenGLPFAAccumSize
	enum <anonymous> NSOpenGLPFAAllowOfflineRenderers
	enum <anonymous> NSOpenGLPFAAllRenderers
	enum <anonymous> NSOpenGLPFAAlphaSize
	enum <anonymous> NSOpenGLPFAAuxBuffers
	enum <anonymous> NSOpenGLPFAAuxDepthStencil
	enum <anonymous> NSOpenGLPFABackingStore
	enum <anonymous> NSOpenGLPFAClosestPolicy
	enum <anonymous> NSOpenGLPFAColorFloat
	enum <anonymous> NSOpenGLPFAColorSize
	enum <anonymous> NSOpenGLPFACompliant
	enum <anonymous> NSOpenGLPFADepthSize
	enum <anonymous> NSOpenGLPFADoubleBuffer
	enum <anonymous> NSOpenGLPFAFullScreen
	enum <anonymous> NSOpenGLPFAMaximumPolicy
	enum <anonymous> NSOpenGLPFAMinimumPolicy
	enum <anonymous> NSOpenGLPFAMPSafe
	enum <anonymous> NSOpenGLPFAMultisample
	enum <anonymous> NSOpenGLPFAMultiScreen
	enum <anonymous> NSOpenGLPFANoRecovery
	enum <anonymous> NSOpenGLPFAOffScreen
	enum <anonymous> NSOpenGLPFAOpenGLProfile
	enum <anonymous> NSOpenGLPFAPixelBuffer
	enum <anonymous> NSOpenGLPFARemotePixelBuffer
	enum <anonymous> NSOpenGLPFARendererID
	enum <anonymous> NSOpenGLPFARobust
	enum <anonymous> NSOpenGLPFASampleAlpha
	enum <anonymous> NSOpenGLPFASampleBuffers
	enum <anonymous> NSOpenGLPFASamples
	enum <anonymous> NSOpenGLPFAScreenMask
	enum <anonymous> NSOpenGLPFASingleRenderer
	enum <anonymous> NSOpenGLPFAStencilSize
	enum <anonymous> NSOpenGLPFAStereo
	enum <anonymous> NSOpenGLPFASupersample
	enum <anonymous> NSOpenGLPFATripleBuffer
	enum <anonymous> NSOpenGLPFAVirtualScreenCount
	enum <anonymous> NSOpenGLPFAWindow
	enum <anonymous> NSOpenGLProfileVersion3_2Core
	enum <anonymous> NSOpenGLProfileVersionLegacy
	enum <anonymous> NSOpenStepUnicodeReservedBase
	NSString * NSOperationNotSupportedForKeyException
	enum <anonymous> NSOperationNotSupportedForKeyScriptError
	enum <anonymous> NSOperationNotSupportedForKeySpecifierError
	enum <anonymous> NSOperationQueueDefaultMaxConcurrentOperationCount
	enum <anonymous> NSOperationQueuePriorityHigh
	enum <anonymous> NSOperationQueuePriorityLow
	enum <anonymous> NSOperationQueuePriorityNormal
	enum <anonymous> NSOperationQueuePriorityVeryHigh
	enum <anonymous> NSOperationQueuePriorityVeryLow
	NSString * NSOptionsKey
	enum <anonymous> NSOrderedAscending
	enum <anonymous> NSOrderedDescending
	enum <anonymous> NSOrderedSame
	enum <anonymous> NSOrPredicateType
	enum <anonymous> NSOSF1OperatingSystem
	NSString *const NSOSStatusErrorDomain
	enum <anonymous> NSOtherMouseDown
	enum <anonymous> NSOtherMouseDownMask
	enum <anonymous> NSOtherMouseDragged
	enum <anonymous> NSOtherMouseDraggedMask
	enum <anonymous> NSOtherMouseUp
	enum <anonymous> NSOtherMouseUpMask
	enum <anonymous> NSOtherTextMovement
	NSString * NSOutlineViewColumnDidMoveNotification
	NSString * NSOutlineViewColumnDidResizeNotification
	enum <anonymous> NSOutlineViewDropOnItemIndex
	NSString * NSOutlineViewItemDidCollapseNotification
	NSString * NSOutlineViewItemDidExpandNotification
	NSString * NSOutlineViewItemWillCollapseNotification
	NSString * NSOutlineViewItemWillExpandNotification
	NSString * NSOutlineViewSelectionDidChangeNotification
	NSString * NSOutlineViewSelectionIsChangingNotification
	id NSOverwriteMergePolicy
	enum <anonymous> NSOverwriteMergePolicyType
	const NSHashTableCallBacks NSOwnedObjectIdentityHashCallBacks
	const NSHashTableCallBacks NSOwnedPointerHashCallBacks
	const NSMapTableKeyCallBacks NSOwnedPointerMapKeyCallBacks
	const NSMapTableValueCallBacks NSOwnedPointerMapValueCallBacks
	enum <anonymous> NSPageControllerTransitionStyleHorizontalStrip
	enum <anonymous> NSPageControllerTransitionStyleStackBook
	enum <anonymous> NSPageControllerTransitionStyleStackHistory
	enum <anonymous> NSPageDownFunctionKey
	enum <anonymous> NSPageUpFunctionKey
	NSString * NSPaperSizeDocumentAttribute
	enum <anonymous> NSParagraphSeparatorCharacter
	NSString * NSParagraphStyleAttributeName
	NSString *const NSParseErrorException
	NSString * NSPasteboardCommunicationException
	enum <anonymous> NSPasteboardReadingAsData
	enum <anonymous> NSPasteboardReadingAsKeyedArchive
	enum <anonymous> NSPasteboardReadingAsPropertyList
	enum <anonymous> NSPasteboardReadingAsString
	NSString *const NSPasteboardTypeColor
	NSString *const NSPasteboardTypeFindPanelSearchOptions
	NSString *const NSPasteboardTypeFont
	NSString *const NSPasteboardTypeHTML
	NSString *const NSPasteboardTypeMultipleTextSelection
	NSString *const NSPasteboardTypePDF
	NSString *const NSPasteboardTypePNG
	NSString *const NSPasteboardTypeRTF
	NSString *const NSPasteboardTypeRTFD
	NSString *const NSPasteboardTypeRuler
	NSString *const NSPasteboardTypeSound
	NSString *const NSPasteboardTypeString
	NSString *const NSPasteboardTypeTabularText
	NSString *const NSPasteboardTypeTextFinderOptions
	NSString *const NSPasteboardTypeTIFF
	NSString *const NSPasteboardURLReadingContentsConformToTypesKey
	NSString *const NSPasteboardURLReadingFileURLsOnlyKey
	enum <anonymous> NSPasteboardWritingPromised
	enum <anonymous> NSPathStyleNavigationBar
	enum <anonymous> NSPathStylePopUp
	enum <anonymous> NSPathStyleStandard
	NSString * NSPatternColorSpace
	enum <anonymous> NSPatternColorSpaceModel
	enum <anonymous> NSPauseFunctionKey
	NSString * NSPDFPboardType
	enum <anonymous> NSPenLowerSideMask
	enum <anonymous> NSPenPointingDevice
	enum <anonymous> NSPenTipMask
	enum <anonymous> NSPenUpperSideMask
	enum <anonymous> NSPeriodic
	enum <anonymous> NSPeriodicMask
	NSString *const NSPersianCalendar
	enum <anonymous> NSPersistentStoreCoordinatorLockingError
	NSString *const NSPersistentStoreCoordinatorStoresDidChangeNotification
	NSString *const NSPersistentStoreCoordinatorWillRemoveStoreNotification
	NSString *const NSPersistentStoreDidImportUbiquitousContentChangesNotification
	enum <anonymous> NSPersistentStoreIncompatibleSchemaError
	enum <anonymous> NSPersistentStoreIncompatibleVersionHashError
	enum <anonymous> NSPersistentStoreIncompleteSaveError
	enum <anonymous> NSPersistentStoreInvalidTypeError
	enum <anonymous> NSPersistentStoreOpenError
	enum <anonymous> NSPersistentStoreOperationError
	NSString *const NSPersistentStoreOSCompatibility
	enum <anonymous> NSPersistentStoreSaveConflictsError
	NSString *const NSPersistentStoreSaveConflictsErrorKey
	enum <anonymous> NSPersistentStoreSaveError
	enum <anonymous> NSPersistentStoreTimeoutError
	NSString *const NSPersistentStoreTimeoutOption
	enum <anonymous> NSPersistentStoreTypeMismatchError
	NSString *const NSPersistentStoreUbiquitousContentNameKey
	NSString *const NSPersistentStoreUbiquitousContentURLKey
	enum <anonymous> NSPersistentStoreUnsupportedRequestTypeError
	NSString * NSPICTPboardType
	enum <anonymous> NSPicturesDirectory
	NSString * NSPlainFileType
	NSString * NSPlainTextDocumentType
	enum <anonymous> NSPlainTextTokenStyle
	enum <anonymous> NSPNGFileType
	enum <anonymous> NSPointerFunctionsCopyIn
	enum <anonymous> NSPointerFunctionsCStringPersonality
	enum <anonymous> NSPointerFunctionsIntegerPersonality
	enum <anonymous> NSPointerFunctionsMachVirtualMemory
	enum <anonymous> NSPointerFunctionsMallocMemory
	enum <anonymous> NSPointerFunctionsObjectPersonality
	enum <anonymous> NSPointerFunctionsObjectPointerPersonality
	enum <anonymous> NSPointerFunctionsOpaqueMemory
	enum <anonymous> NSPointerFunctionsOpaquePersonality
	enum <anonymous> NSPointerFunctionsStrongMemory
	enum <anonymous> NSPointerFunctionsStructPersonality
	enum <anonymous> NSPointerFunctionsWeakMemory
	enum <anonymous> NSPointerFunctionsZeroingWeakMemory
	const NSHashTableCallBacks NSPointerToStructHashCallBacks
	enum <anonymous> NSPopoverAppearanceHUD
	enum <anonymous> NSPopoverAppearanceMinimal
	enum <anonymous> NSPopoverBehaviorApplicationDefined
	enum <anonymous> NSPopoverBehaviorSemitransient
	enum <anonymous> NSPopoverBehaviorTransient
	NSString *const NSPopoverCloseReasonDetachToWindow
	NSString *const NSPopoverCloseReasonKey
	NSString *const NSPopoverCloseReasonStandard
	NSString *const NSPopoverDidCloseNotification
	NSString *const NSPopoverDidShowNotification
	NSString *const NSPopoverWillCloseNotification
	NSString *const NSPopoverWillShowNotification
	enum <anonymous> NSPopUpArrowAtBottom
	enum <anonymous> NSPopUpArrowAtCenter
	NSString * NSPopUpButtonCellWillPopUpNotification
	NSString * NSPopUpButtonWillPopUpNotification
	enum <anonymous> NSPopUpNoArrow
	NSString *const NSPortDidBecomeInvalidNotification
	enum <anonymous> NSPortraitOrientation
	NSString *const NSPortReceiveException
	NSString *const NSPortSendException
	NSString *const NSPortTimeoutException
	enum <anonymous> NSPositionAfter
	enum <anonymous> NSPositionBefore
	enum <anonymous> NSPositionBeginning
	enum <anonymous> NSPositionEnd
	NSString * NSPositioningRectBinding
	enum <anonymous> NSPositionReplace
	NSString *const NSPositiveCurrencyFormatString
	enum <anonymous> NSPositiveDoubleType
	enum <anonymous> NSPositiveFloatType
	enum <anonymous> NSPositiveIntType
	NSString *const NSPOSIXErrorDomain
	enum <anonymous> NSPostASAP
	enum <anonymous> NSPosterFontMask
	enum <anonymous> NSPostNow
	NSString * NSPostScriptPboardType
	enum <anonymous> NSPostWhenIdle
	enum <anonymous> NSPowerOffEventType
	NSString * NSPPDIncludeNotFoundException
	NSString * NSPPDIncludeStackOverflowException
	NSString * NSPPDIncludeStackUnderflowException
	NSString * NSPPDParseException
	NSString * NSPredicateBinding
	NSString * NSPredicateFormatBindingOption
	enum <anonymous> NSPreferencePanesDirectory
	NSString *const NSPreferredScrollerStyleDidChangeNotification
	NSString * NSPrefixSpacesDocumentAttribute
	enum <anonymous> NSPressedTab
	enum <anonymous> NSPrevFunctionKey
	NSString *const NSPrintAllPages
	NSString *const NSPrintAllPresetsJobStyleHint
	NSString *const NSPrintBottomMargin
	NSString *const NSPrintCancelJob
	NSString *const NSPrintCopies
	NSString *const NSPrintDetailedErrorReporting
	enum <anonymous> NSPrinterDescriptionDirectory
	enum <anonymous> NSPrinterTableError
	enum <anonymous> NSPrinterTableNotFound
	enum <anonymous> NSPrinterTableOK
	NSString *const NSPrintFaxNumber
	NSString *const NSPrintFirstPage
	NSString *const NSPrintFormName
	enum <anonymous> NSPrintFunctionKey
	NSString *const NSPrintHeaderAndFooter
	NSString *const NSPrintHorizontallyCentered
	NSString *const NSPrintHorizontalPagination
	enum <anonymous> NSPrintingCancelled
	NSString * NSPrintingCommunicationException
	enum <anonymous> NSPrintingFailure
	enum <anonymous> NSPrintingReplyLater
	enum <anonymous> NSPrintingSuccess
	NSString *const NSPrintJobDisposition
	NSString *const NSPrintJobFeatures
	NSString *const NSPrintJobSavingFileNameExtensionHidden
	NSString *const NSPrintJobSavingURL
	NSString *const NSPrintLastPage
	NSString *const NSPrintLeftMargin
	NSString *const NSPrintManualFeed
	NSString *const NSPrintMustCollate
	NSString *const NSPrintNoPresetsJobStyleHint
	NSString * NSPrintOperationExistsException
	NSString *const NSPrintOrientation
	NSString * NSPrintPackageException
	NSString *const NSPrintPagesAcross
	NSString *const NSPrintPagesDown
	NSString *const NSPrintPagesPerSheet
	NSString *const NSPrintPanelAccessorySummaryItemDescriptionKey
	NSString *const NSPrintPanelAccessorySummaryItemNameKey
	enum <anonymous> NSPrintPanelShowsCopies
	enum <anonymous> NSPrintPanelShowsOrientation
	enum <anonymous> NSPrintPanelShowsPageRange
	enum <anonymous> NSPrintPanelShowsPageSetupAccessory
	enum <anonymous> NSPrintPanelShowsPaperSize
	enum <anonymous> NSPrintPanelShowsPreview
	enum <anonymous> NSPrintPanelShowsPrintSelection
	enum <anonymous> NSPrintPanelShowsScaling
	NSString *const NSPrintPaperFeed
	NSString *const NSPrintPaperName
	NSString *const NSPrintPaperSize
	NSString *const NSPrintPhotoJobStyleHint
	NSString *const NSPrintPreviewJob
	NSString *const NSPrintPrinter
	NSString *const NSPrintPrinterName
	enum <anonymous> NSPrintRenderingQualityBest
	enum <anonymous> NSPrintRenderingQualityResponsive
	NSString *const NSPrintReversePageOrder
	NSString *const NSPrintRightMargin
	NSString *const NSPrintSaveJob
	NSString *const NSPrintSavePath
	NSString *const NSPrintScalingFactor
	enum <anonymous> NSPrintScreenFunctionKey
	NSString *const NSPrintSelectionOnly
	NSString *const NSPrintSpoolJob
	NSString *const NSPrintTime
	NSString *const NSPrintTopMargin
	NSString *const NSPrintVerticallyCentered
	NSString *const NSPrintVerticalPagination
	NSString *const NSPriorDayDesignations
	enum <anonymous> NSPrivateQueueConcurrencyType
	enum <anonymous> NSProgressIndicatorBarStyle
	enum <anonymous> NSProgressIndicatorPreferredAquaThickness
	enum <anonymous> NSProgressIndicatorPreferredLargeThickness
	enum <anonymous> NSProgressIndicatorPreferredSmallThickness
	enum <anonymous> NSProgressIndicatorPreferredThickness
	enum <anonymous> NSProgressIndicatorSpinningStyle
	enum <anonymous> NSPropertyListBinaryFormat_v1_0
	enum <anonymous> NSPropertyListErrorMaximum
	enum <anonymous> NSPropertyListErrorMinimum
	enum <anonymous> NSPropertyListImmutable
	enum <anonymous> NSPropertyListMutableContainers
	enum <anonymous> NSPropertyListMutableContainersAndLeaves
	enum <anonymous> NSPropertyListOpenStepFormat
	enum <anonymous> NSPropertyListReadCorruptError
	enum <anonymous> NSPropertyListReadStreamError
	enum <anonymous> NSPropertyListReadUnknownVersionError
	enum <anonymous> NSPropertyListWriteStreamError
	enum <anonymous> NSPropertyListXMLFormat_v1_0
	enum <anonymous> NSProprietaryStringEncoding
	enum <anonymous> NSPushInCell
	enum <anonymous> NSPushInCellMask
	enum <anonymous> NSPushOnPushOffButton
	enum <anonymous> NSQuarterCalendarUnit
	enum <anonymous> NSRadioButton
	enum <anonymous> NSRadioModeMatrix
	NSString * NSRaisesForNotApplicableKeysBindingOption
	enum <anonymous> NSRandomSubelement
	enum <anonymous> NSRangeDateMode
	NSString *const NSRangeException
	enum <anonymous> NSRatingLevelIndicatorStyle
	NSString * NSReadOnlyDocumentAttribute
	NSString *const NSReadOnlyPersistentStoreOption
	enum <anonymous> NSReceiverEvaluationScriptError
	enum <anonymous> NSReceiversCantHandleCommandScriptError
	NSString * NSRecentSearchesBinding
	enum <anonymous> NSRecessedBezelStyle
	NSString *const NSRecoveryAttempterErrorKey
	enum <anonymous> NSRedoFunctionKey
	NSString *const NSRefreshedObjectsKey
	NSString *const NSRegistrationDomain
	enum <anonymous> NSRegularControlSize
	enum <anonymous> NSRegularExpressionAllowCommentsAndWhitespace
	enum <anonymous> NSRegularExpressionAnchorsMatchLines
	enum <anonymous> NSRegularExpressionCaseInsensitive
	enum <anonymous> NSRegularExpressionDotMatchesLineSeparators
	enum <anonymous> NSRegularExpressionIgnoreMetacharacters
	enum <anonymous> NSRegularExpressionSearch
	enum <anonymous> NSRegularExpressionUseUnicodeWordBoundaries
	enum <anonymous> NSRegularExpressionUseUnixLineSeparators
	enum <anonymous> NSRegularSquareBezelStyle
	enum <anonymous> NSRelativeAfter
	enum <anonymous> NSRelativeBefore
	enum <anonymous> NSRelevancyLevelIndicatorStyle
	enum <anonymous> NSRemoteNotificationTypeAlert
	enum <anonymous> NSRemoteNotificationTypeBadge
	enum <anonymous> NSRemoteNotificationTypeNone
	enum <anonymous> NSRemoteNotificationTypeSound
	NSString *const NSRemovedPersistentStoresKey
	enum <anonymous> NSRemoveEntityMappingType
	enum <anonymous> NSRemoveTraitFontAction
	NSString * NSRepresentedFilenameBinding
	NSString *const NSRepublicOfChinaCalendar
	enum <anonymous> NSRequiredArgumentsMissingScriptError
	enum <anonymous> NSResetCursorRectsRunLoopOrdering
	enum <anonymous> NSResetFunctionKey
	enum <anonymous> NSResizableWindowMask
	enum <anonymous> NSReturnTextMovement
	enum <anonymous> NSRGBColorSpaceModel
	enum <anonymous> NSRGBModeColorPanel
	enum <anonymous> NSRightArrowFunctionKey
	NSString * NSRightMarginDocumentAttribute
	enum <anonymous> NSRightMouseDown
	enum <anonymous> NSRightMouseDownMask
	enum <anonymous> NSRightMouseDragged
	enum <anonymous> NSRightMouseDraggedMask
	enum <anonymous> NSRightMouseUp
	enum <anonymous> NSRightMouseUpMask
	enum <anonymous> NSRightTabsBezelBorder
	enum <anonymous> NSRightTabStopType
	enum <anonymous> NSRightTextAlignment
	enum <anonymous> NSRightTextMovement
	id NSRollbackMergePolicy
	enum <anonymous> NSRollbackMergePolicyType
	enum <anonymous> NSRoundBankers
	enum <anonymous> NSRoundDown
	enum <anonymous> NSRoundedBezelStyle
	enum <anonymous> NSRoundedDisclosureBezelStyle
	enum <anonymous> NSRoundedTokenStyle
	enum <anonymous> NSRoundLineCapStyle
	enum <anonymous> NSRoundLineJoinStyle
	enum <anonymous> NSRoundPlain
	enum <anonymous> NSRoundRectBezelStyle
	enum <anonymous> NSRoundUp
	NSString * NSRowHeightBinding
	NSString * NSRTFDPboardType
	NSString * NSRTFDTextDocumentType
	NSString * NSRTFPboardType
	NSString * NSRTFPropertyStackOverflowException
	NSString * NSRTFTextDocumentType
	enum <anonymous> NSRuleEditorNestingModeCompound
	enum <anonymous> NSRuleEditorNestingModeList
	enum <anonymous> NSRuleEditorNestingModeSimple
	enum <anonymous> NSRuleEditorNestingModeSingle
	NSString *const NSRuleEditorPredicateComparisonModifier
	NSString *const NSRuleEditorPredicateCompoundType
	NSString *const NSRuleEditorPredicateCustomSelector
	NSString *const NSRuleEditorPredicateLeftExpression
	NSString *const NSRuleEditorPredicateOperatorType
	NSString *const NSRuleEditorPredicateOptions
	NSString *const NSRuleEditorPredicateRightExpression
	NSString *const NSRuleEditorRowsDidChangeNotification
	enum <anonymous> NSRuleEditorRowTypeCompound
	enum <anonymous> NSRuleEditorRowTypeSimple
	NSString * NSRulerPboard
	NSString * NSRulerPboardType
	enum <anonymous> NSRunAbortedResponse
	enum <anonymous> NSRunContinuesResponse
	NSString *const NSRunLoopCommonModes
	enum <anonymous> NSRunStoppedResponse
	enum <anonymous> NSSaveAsOperation
	enum <anonymous> NSSaveOperation
	enum <anonymous> NSSaveOptionsAsk
	enum <anonymous> NSSaveOptionsNo
	enum <anonymous> NSSaveOptionsYes
	enum <anonymous> NSSaveRequestType
	enum <anonymous> NSSaveToOperation
	enum <anonymous> NSScaleNone
	enum <anonymous> NSScaleProportionally
	enum <anonymous> NSScaleToFit
	enum <anonymous> NSScannedOption
	enum <anonymous> NSScreenChangedEventType
	NSString *const NSScreenColorSpaceDidChangeNotification
	enum <anonymous> NSScrollElasticityAllowed
	enum <anonymous> NSScrollElasticityAutomatic
	enum <anonymous> NSScrollElasticityNone
	enum <anonymous> NSScrollerArrowsDefaultSetting
	enum <anonymous> NSScrollerArrowsMaxEnd
	enum <anonymous> NSScrollerArrowsMinEnd
	enum <anonymous> NSScrollerArrowsNone
	enum <anonymous> NSScrollerDecrementArrow
	enum <anonymous> NSScrollerDecrementLine
	enum <anonymous> NSScrollerDecrementPage
	enum <anonymous> NSScrollerIncrementArrow
	enum <anonymous> NSScrollerIncrementLine
	enum <anonymous> NSScrollerIncrementPage
	enum <anonymous> NSScrollerKnob
	enum <anonymous> NSScrollerKnobSlot
	enum <anonymous> NSScrollerKnobStyleDark
	enum <anonymous> NSScrollerKnobStyleDefault
	enum <anonymous> NSScrollerKnobStyleLight
	enum <anonymous> NSScrollerNoPart
	enum <anonymous> NSScrollerStyleLegacy
	enum <anonymous> NSScrollerStyleOverlay
	enum <anonymous> NSScrollLockFunctionKey
	NSString *const NSScrollViewDidEndLiveMagnifyNotification
	enum <anonymous> NSScrollViewFindBarPositionAboveContent
	enum <anonymous> NSScrollViewFindBarPositionAboveHorizontalRuler
	enum <anonymous> NSScrollViewFindBarPositionBelowContent
	NSString *const NSScrollViewWillStartLiveMagnifyNotification
	enum <anonymous> NSScrollWheel
	enum <anonymous> NSScrollWheelMask
	enum <anonymous> NSSecondCalendarUnit
	enum <anonymous> NSSegmentStyleAutomatic
	enum <anonymous> NSSegmentStyleCapsule
	enum <anonymous> NSSegmentStyleRounded
	enum <anonymous> NSSegmentStyleRoundRect
	enum <anonymous> NSSegmentStyleSmallSquare
	enum <anonymous> NSSegmentStyleTexturedRounded
	enum <anonymous> NSSegmentStyleTexturedSquare
	enum <anonymous> NSSegmentSwitchTrackingMomentary
	enum <anonymous> NSSegmentSwitchTrackingSelectAny
	enum <anonymous> NSSegmentSwitchTrackingSelectOne
	enum <anonymous> NSSelectByCharacter
	enum <anonymous> NSSelectByParagraph
	enum <anonymous> NSSelectByWord
	NSString * NSSelectedIdentifierBinding
	NSString * NSSelectedIndexBinding
	NSString * NSSelectedLabelBinding
	NSString * NSSelectedObjectBinding
	NSString * NSSelectedObjectsBinding
	enum <anonymous> NSSelectedTab
	NSString * NSSelectedTagBinding
	NSString * NSSelectedValueBinding
	NSString * NSSelectedValuesBinding
	enum <anonymous> NSSelectFunctionKey
	enum <anonymous> NSSelectingNext
	enum <anonymous> NSSelectingPrevious
	enum <anonymous> NSSelectionAffinityDownstream
	enum <anonymous> NSSelectionAffinityUpstream
	NSString * NSSelectionIndexesBinding
	NSString * NSSelectionIndexPathsBinding
	NSString * NSSelectorNameBindingOption
	NSString * NSSelectsAllWhenSettingContentBindingOption
	enum <anonymous> NSServiceApplicationLaunchFailedError
	enum <anonymous> NSServiceApplicationNotFoundError
	enum <anonymous> NSServiceErrorMaximum
	enum <anonymous> NSServiceErrorMinimum
	enum <anonymous> NSServiceInvalidPasteboardDataError
	enum <anonymous> NSServiceMalformedServiceDictionaryError
	enum <anonymous> NSServiceMiscellaneousError
	enum <anonymous> NSServiceRequestTimedOutError
	NSString * NSShadowAttributeName
	enum <anonymous> NSShadowlessSquareBezelStyle
	enum <anonymous> NSSharedPublicDirectory
	enum <anonymous> NSSharingContentScopeFull
	enum <anonymous> NSSharingContentScopeItem
	enum <anonymous> NSSharingContentScopePartial
	NSString *const NSSharingServiceNameAddToAperture
	NSString *const NSSharingServiceNameAddToIPhoto
	NSString *const NSSharingServiceNameAddToSafariReadingList
	NSString *const NSSharingServiceNameComposeEmail
	NSString *const NSSharingServiceNameComposeMessage
	NSString *const NSSharingServiceNamePostImageOnFlickr
	NSString *const NSSharingServiceNamePostOnFacebook
	NSString *const NSSharingServiceNamePostOnSinaWeibo
	NSString *const NSSharingServiceNamePostOnTwitter
	NSString *const NSSharingServiceNamePostVideoOnTudou
	NSString *const NSSharingServiceNamePostVideoOnVimeo
	NSString *const NSSharingServiceNamePostVideoOnYouku
	NSString *const NSSharingServiceNameSendViaAirDrop
	NSString *const NSSharingServiceNameUseAsDesktopPicture
	NSString *const NSSharingServiceNameUseAsTwitterProfileImage
	NSString * NSShellCommandFileType
	enum <anonymous> NSShiftJISStringEncoding
	enum <anonymous> NSShiftKeyMask
	NSString *const NSShortDateFormatString
	NSString *const NSShortMonthNameArray
	NSString *const NSShortTimeDateFormatString
	NSString *const NSShortWeekDayNameArray
	enum <anonymous> NSShowControlGlyphs
	enum <anonymous> NSShowInvisibleGlyphs
	enum <anonymous> NSSingleDateMode
	enum <anonymous> NSSingleUnderlineStyle
	enum <anonymous> NSSizeDownFontAction
	enum <anonymous> NSSizeUpFontAction
	enum <anonymous> NSSmallCapsFontMask
	enum <anonymous> NSSmallControlSize
	enum <anonymous> NSSmallIconButtonBezelStyle
	enum <anonymous> NSSmallSquareBezelStyle
	enum <anonymous> NSSnapshotEventMergePolicy
	enum <anonymous> NSSnapshotEventRefresh
	enum <anonymous> NSSnapshotEventRollback
	enum <anonymous> NSSnapshotEventUndoDeletion
	enum <anonymous> NSSnapshotEventUndoInsertion
	enum <anonymous> NSSnapshotEventUndoUpdate
	enum <anonymous> NSSolarisOperatingSystem
	enum <anonymous> NSSortConcurrent
	NSString * NSSortDescriptorsBinding
	enum <anonymous> NSSortStable
	NSString *const NSSoundPboardType
	enum <anonymous> NSSpecialPageOrder
	NSString *const NSSpeechCharacterModeProperty
	NSString *const NSSpeechCommandDelimiterProperty
	NSString *const NSSpeechCommandPrefix
	NSString *const NSSpeechCommandSuffix
	NSString *const NSSpeechCurrentVoiceProperty
	NSString *const NSSpeechDictionaryAbbreviations
	NSString *const NSSpeechDictionaryEntryPhonemes
	NSString *const NSSpeechDictionaryEntrySpelling
	NSString *const NSSpeechDictionaryLocaleIdentifier
	NSString *const NSSpeechDictionaryModificationDate
	NSString *const NSSpeechDictionaryPronunciations
	NSString *const NSSpeechErrorCount
	NSString *const NSSpeechErrorNewestCharacterOffset
	NSString *const NSSpeechErrorNewestCode
	NSString *const NSSpeechErrorOldestCharacterOffset
	NSString *const NSSpeechErrorOldestCode
	NSString *const NSSpeechErrorsProperty
	enum <anonymous> NSSpeechImmediateBoundary
	NSString *const NSSpeechInputModeProperty
	NSString *const NSSpeechModeLiteral
	NSString *const NSSpeechModeNormal
	NSString *const NSSpeechModePhoneme
	NSString *const NSSpeechModeText
	NSString *const NSSpeechNumberModeProperty
	NSString *const NSSpeechOutputToFileURLProperty
	NSString *const NSSpeechPhonemeInfoExample
	NSString *const NSSpeechPhonemeInfoHiliteEnd
	NSString *const NSSpeechPhonemeInfoHiliteStart
	NSString *const NSSpeechPhonemeInfoOpcode
	NSString *const NSSpeechPhonemeInfoSymbol
	NSString *const NSSpeechPhonemeSymbolsProperty
	NSString *const NSSpeechPitchBaseProperty
	NSString *const NSSpeechPitchModProperty
	NSString *const NSSpeechRateProperty
	NSString *const NSSpeechRecentSyncProperty
	NSString *const NSSpeechResetProperty
	enum <anonymous> NSSpeechSentenceBoundary
	NSString *const NSSpeechStatusNumberOfCharactersLeft
	NSString *const NSSpeechStatusOutputBusy
	NSString *const NSSpeechStatusOutputPaused
	NSString *const NSSpeechStatusPhonemeCode
	NSString *const NSSpeechStatusProperty
	NSString *const NSSpeechSynthesizerInfoIdentifier
	NSString *const NSSpeechSynthesizerInfoProperty
	NSString *const NSSpeechSynthesizerInfoVersion
	NSString *const NSSpeechVolumeProperty
	enum <anonymous> NSSpeechWordBoundary
	NSString *const NSSpellCheckerDidChangeAutomaticSpellingCorrectionNotification
	NSString *const NSSpellCheckerDidChangeAutomaticTextReplacementNotification
	NSString * NSSpellingStateAttributeName
	enum <anonymous> NSSpellingStateGrammarFlag
	enum <anonymous> NSSpellingStateSpellingFlag
	NSString * NSSplitViewDidResizeSubviewsNotification
	enum <anonymous> NSSplitViewDividerStylePaneSplitter
	enum <anonymous> NSSplitViewDividerStyleThick
	enum <anonymous> NSSplitViewDividerStyleThin
	NSString * NSSplitViewWillResizeSubviewsNotification
	NSString *const NSSQLiteAnalyzeOption
	enum <anonymous> NSSQLiteError
	NSString *const NSSQLiteErrorDomain
	NSString *const NSSQLiteManualVacuumOption
	NSString *const NSSQLitePragmasOption
	NSString *const NSSQLiteStoreType
	enum <anonymous> NSSquareLineCapStyle
	enum <anonymous> nsStackErr
	enum <anonymous> NSStopFunctionKey
	NSString *const NSStoreModelVersionHashesKey
	NSString *const NSStoreModelVersionIdentifiersKey
	NSString *const NSStorePathKey
	NSString *const NSStoreTypeKey
	NSString *const NSStoreUUIDInPathKey
	NSString *const NSStoreUUIDKey
	NSString *const NSStreamDataWrittenToMemoryStreamKey
	enum <anonymous> NSStreamEventEndEncountered
	enum <anonymous> NSStreamEventErrorOccurred
	enum <anonymous> NSStreamEventHasBytesAvailable
	enum <anonymous> NSStreamEventHasSpaceAvailable
	enum <anonymous> NSStreamEventNone
	enum <anonymous> NSStreamEventOpenCompleted
	NSString *const NSStreamFileCurrentOffsetKey
	NSString *const NSStreamNetworkServiceType
	NSString *const NSStreamNetworkServiceTypeBackground
	NSString *const NSStreamNetworkServiceTypeVideo
	NSString *const NSStreamNetworkServiceTypeVoice
	NSString *const NSStreamNetworkServiceTypeVoIP
	NSString *const NSStreamSocketSecurityLevelKey
	NSString *const NSStreamSocketSecurityLevelNegotiatedSSL
	NSString *const NSStreamSocketSecurityLevelNone
	NSString *const NSStreamSocketSecurityLevelSSLv2
	NSString *const NSStreamSocketSecurityLevelSSLv3
	NSString *const NSStreamSocketSecurityLevelTLSv1
	NSString *const NSStreamSocketSSLErrorDomain
	NSString *const NSStreamSOCKSErrorDomain
	NSString *const NSStreamSOCKSProxyConfigurationKey
	NSString *const NSStreamSOCKSProxyHostKey
	NSString *const NSStreamSOCKSProxyPasswordKey
	NSString *const NSStreamSOCKSProxyPortKey
	NSString *const NSStreamSOCKSProxyUserKey
	NSString *const NSStreamSOCKSProxyVersion4
	NSString *const NSStreamSOCKSProxyVersion5
	NSString *const NSStreamSOCKSProxyVersionKey
	enum <anonymous> NSStreamStatusAtEnd
	enum <anonymous> NSStreamStatusClosed
	enum <anonymous> NSStreamStatusError
	enum <anonymous> NSStreamStatusNotOpen
	enum <anonymous> NSStreamStatusOpen
	enum <anonymous> NSStreamStatusOpening
	enum <anonymous> NSStreamStatusReading
	enum <anonymous> NSStreamStatusWriting
	NSString * NSStrikethroughColorAttributeName
	NSString * NSStrikethroughStyleAttributeName
	enum <anonymous> NSStringAttributeType
	enum <anonymous> NSStringDrawingDisableScreenFontSubstitution
	enum <anonymous> NSStringDrawingOneShot
	enum <anonymous> NSStringDrawingTruncatesLastVisibleLine
	enum <anonymous> NSStringDrawingUsesDeviceMetrics
	enum <anonymous> NSStringDrawingUsesFontLeading
	enum <anonymous> NSStringDrawingUsesLineFragmentOrigin
	enum <anonymous> NSStringEncodingConversionAllowLossy
	enum <anonymous> NSStringEncodingConversionExternalRepresentation
	NSString *const NSStringEncodingErrorKey
	enum <anonymous> NSStringEnumerationByComposedCharacterSequences
	enum <anonymous> NSStringEnumerationByLines
	enum <anonymous> NSStringEnumerationByParagraphs
	enum <anonymous> NSStringEnumerationBySentences
	enum <anonymous> NSStringEnumerationByWords
	enum <anonymous> NSStringEnumerationLocalized
	enum <anonymous> NSStringEnumerationReverse
	enum <anonymous> NSStringEnumerationSubstringNotRequired
	NSString * NSStringPboardType
	NSString * NSStrokeColorAttributeName
	NSString * NSStrokeWidthAttributeName
	NSString * NSSubjectDocumentAttribute
	enum <anonymous> NSSubqueryExpressionType
	NSString *const NSSumKeyValueOperator
	enum <anonymous> NSSunOSOperatingSystem
	NSString * NSSuperscriptAttributeName
	enum <anonymous> NSSwitchButton
	enum <anonymous> NSSymbolStringEncoding
	enum <anonymous> NSSysReqFunctionKey
	NSString *const NSSystemClockDidChangeNotification
	NSString * NSSystemColorsDidChangeNotification
	enum <anonymous> NSSystemDefined
	enum <anonymous> NSSystemDefinedMask
	enum <anonymous> NSSystemDomainMask
	enum <anonymous> NSSystemFunctionKey
	NSString *const NSSystemTimeZoneDidChangeNotification
	enum <anonymous> NSTabCharacter
	NSString * NSTabColumnTerminatorsAttributeName
	enum <anonymous> NSTableColumnAutoresizingMask
	enum <anonymous> NSTableColumnNoResizing
	enum <anonymous> NSTableColumnUserResizingMask
	enum <anonymous> NSTabletPoint
	enum <anonymous> NSTabletPointEventSubtype
	enum <anonymous> NSTabletPointMask
	enum <anonymous> NSTabletProximity
	enum <anonymous> NSTabletProximityEventSubtype
	enum <anonymous> NSTabletProximityMask
	enum <anonymous> NSTableViewAnimationEffectFade
	enum <anonymous> NSTableViewAnimationEffectGap
	enum <anonymous> NSTableViewAnimationEffectNone
	enum <anonymous> NSTableViewAnimationSlideDown
	enum <anonymous> NSTableViewAnimationSlideLeft
	enum <anonymous> NSTableViewAnimationSlideRight
	enum <anonymous> NSTableViewAnimationSlideUp
	NSString * NSTableViewColumnDidMoveNotification
	NSString * NSTableViewColumnDidResizeNotification
	enum <anonymous> NSTableViewDashedHorizontalGridLineMask
	enum <anonymous> NSTableViewDraggingDestinationFeedbackStyleNone
	enum <anonymous> NSTableViewDraggingDestinationFeedbackStyleRegular
	enum <anonymous> NSTableViewDraggingDestinationFeedbackStyleSourceList
	enum <anonymous> NSTableViewDropAbove
	enum <anonymous> NSTableViewDropOn
	enum <anonymous> NSTableViewFirstColumnOnlyAutoresizingStyle
	enum <anonymous> NSTableViewGridNone
	enum <anonymous> NSTableViewLastColumnOnlyAutoresizingStyle
	enum <anonymous> NSTableViewNoColumnAutoresizing
	enum <anonymous> NSTableViewReverseSequentialColumnAutoresizingStyle
	enum <anonymous> NSTableViewRowSizeStyleCustom
	enum <anonymous> NSTableViewRowSizeStyleDefault
	enum <anonymous> NSTableViewRowSizeStyleLarge
	enum <anonymous> NSTableViewRowSizeStyleMedium
	enum <anonymous> NSTableViewRowSizeStyleSmall
	NSString *const NSTableViewRowViewKey
	NSString * NSTableViewSelectionDidChangeNotification
	enum <anonymous> NSTableViewSelectionHighlightStyleNone
	enum <anonymous> NSTableViewSelectionHighlightStyleRegular
	enum <anonymous> NSTableViewSelectionHighlightStyleSourceList
	NSString * NSTableViewSelectionIsChangingNotification
	enum <anonymous> NSTableViewSequentialColumnAutoresizingStyle
	enum <anonymous> NSTableViewSolidHorizontalGridLineMask
	enum <anonymous> NSTableViewSolidVerticalGridLineMask
	enum <anonymous> NSTableViewUniformColumnAutoresizingStyle
	enum <anonymous> NSTabTextMovement
	NSString * NSTabularTextPboardType
	NSString * NSTargetBinding
	NSString *const NSTaskDidTerminateNotification
	enum <anonymous> NSTaskTerminationReasonExit
	enum <anonymous> NSTaskTerminationReasonUncaughtSignal
	enum <anonymous> NSTerminateCancel
	enum <anonymous> NSTerminateLater
	enum <anonymous> NSTerminateNow
	NSString * NSTextAlternativesAttributeName
	NSString * NSTextAlternativesSelectedAlternativeStringNotification
	enum <anonymous> NSTextBlockAbsoluteValueType
	enum <anonymous> NSTextBlockBaselineAlignment
	enum <anonymous> NSTextBlockBorder
	enum <anonymous> NSTextBlockBottomAlignment
	enum <anonymous> NSTextBlockHeight
	enum <anonymous> NSTextBlockMargin
	enum <anonymous> NSTextBlockMaximumHeight
	enum <anonymous> NSTextBlockMaximumWidth
	enum <anonymous> NSTextBlockMiddleAlignment
	enum <anonymous> NSTextBlockMinimumHeight
	enum <anonymous> NSTextBlockMinimumWidth
	enum <anonymous> NSTextBlockPadding
	enum <anonymous> NSTextBlockPercentageValueType
	enum <anonymous> NSTextBlockTopAlignment
	enum <anonymous> NSTextBlockWidth
	enum <anonymous> NSTextCellType
	NSString *const NSTextCheckingAirlineKey
	enum <anonymous> NSTextCheckingAllCustomTypes
	enum <anonymous> NSTextCheckingAllSystemTypes
	enum <anonymous> NSTextCheckingAllTypes
	NSString *const NSTextCheckingCityKey
	NSString *const NSTextCheckingCountryKey
	NSString * NSTextCheckingDocumentAuthorKey
	NSString * NSTextCheckingDocumentTitleKey
	NSString * NSTextCheckingDocumentURLKey
	NSString *const NSTextCheckingFlightKey
	NSString *const NSTextCheckingJobTitleKey
	NSString *const NSTextCheckingNameKey
	NSString *const NSTextCheckingOrganizationKey
	NSString * NSTextCheckingOrthographyKey
	NSString *const NSTextCheckingPhoneKey
	NSString * NSTextCheckingQuotesKey
	NSString * NSTextCheckingReferenceDateKey
	NSString * NSTextCheckingReferenceTimeZoneKey
	NSString * NSTextCheckingRegularExpressionsKey
	NSString * NSTextCheckingReplacementsKey
	NSString *const NSTextCheckingStateKey
	NSString *const NSTextCheckingStreetKey
	enum <anonymous> NSTextCheckingTypeAddress
	enum <anonymous> NSTextCheckingTypeCorrection
	enum <anonymous> NSTextCheckingTypeDash
	enum <anonymous> NSTextCheckingTypeDate
	enum <anonymous> NSTextCheckingTypeGrammar
	enum <anonymous> NSTextCheckingTypeLink
	enum <anonymous> NSTextCheckingTypeOrthography
	enum <anonymous> NSTextCheckingTypePhoneNumber
	enum <anonymous> NSTextCheckingTypeQuote
	enum <anonymous> NSTextCheckingTypeRegularExpression
	enum <anonymous> NSTextCheckingTypeReplacement
	enum <anonymous> NSTextCheckingTypeSpelling
	enum <anonymous> NSTextCheckingTypeTransitInformation
	NSString *const NSTextCheckingZIPKey
	NSString * NSTextColorBinding
	NSString * NSTextDidBeginEditingNotification
	NSString * NSTextDidChangeNotification
	NSString * NSTextDidEndEditingNotification
	NSString * NSTextEncodingNameDocumentAttribute
	NSString * NSTextEncodingNameDocumentOption
	enum <anonymous> NSTextFieldAndStepperDatePickerStyle
	enum <anonymous> NSTextFieldDatePickerStyle
	enum <anonymous> NSTextFieldRoundedBezel
	enum <anonymous> NSTextFieldSquareBezel
	enum <anonymous> NSTextFinderActionHideFindInterface
	enum <anonymous> NSTextFinderActionHideReplaceInterface
	enum <anonymous> NSTextFinderActionNextMatch
	enum <anonymous> NSTextFinderActionPreviousMatch
	enum <anonymous> NSTextFinderActionReplace
	enum <anonymous> NSTextFinderActionReplaceAll
	enum <anonymous> NSTextFinderActionReplaceAllInSelection
	enum <anonymous> NSTextFinderActionReplaceAndFind
	enum <anonymous> NSTextFinderActionSelectAll
	enum <anonymous> NSTextFinderActionSelectAllInSelection
	enum <anonymous> NSTextFinderActionSetSearchString
	enum <anonymous> NSTextFinderActionShowFindInterface
	enum <anonymous> NSTextFinderActionShowReplaceInterface
	NSString *const NSTextFinderCaseInsensitiveKey
	enum <anonymous> NSTextFinderMatchingTypeContains
	enum <anonymous> NSTextFinderMatchingTypeEndsWith
	enum <anonymous> NSTextFinderMatchingTypeFullWord
	NSString *const NSTextFinderMatchingTypeKey
	enum <anonymous> NSTextFinderMatchingTypeStartsWith
	NSString * NSTextInputContextKeyboardSelectionDidChangeNotification
	enum <anonymous> NSTextLayoutOrientationHorizontal
	enum <anonymous> NSTextLayoutOrientationVertical
	NSString * NSTextLayoutSectionOrientation
	NSString * NSTextLayoutSectionRange
	NSString * NSTextLayoutSectionsAttribute
	NSString * NSTextLineTooLongException
	enum <anonymous> NSTextListPrependEnclosingMarker
	NSString * NSTextNoSelectionException
	NSString * NSTextReadException
	enum <anonymous> NSTextReadInapplicableDocumentTypeError
	enum <anonymous> NSTextReadWriteErrorMaximum
	enum <anonymous> NSTextReadWriteErrorMinimum
	NSString * NSTextSizeMultiplierDocumentOption
	NSString * NSTextStorageDidProcessEditingNotification
	enum <anonymous> NSTextStorageEditedAttributes
	enum <anonymous> NSTextStorageEditedCharacters
	NSString * NSTextStorageWillProcessEditingNotification
	enum <anonymous> NSTextTableAutomaticLayoutAlgorithm
	enum <anonymous> NSTextTableFixedLayoutAlgorithm
	enum <anonymous> NSTexturedBackgroundWindowMask
	enum <anonymous> NSTexturedRoundedBezelStyle
	enum <anonymous> NSTexturedSquareBezelStyle
	NSString * NSTextViewDidChangeSelectionNotification
	NSString * NSTextViewDidChangeTypingAttributesNotification
	NSString * NSTextViewWillChangeNotifyingTextViewNotification
	NSString * NSTextWriteException
	enum <anonymous> NSTextWriteInapplicableDocumentTypeError
	enum <anonymous> NSTextWritingDirectionEmbedding
	enum <anonymous> NSTextWritingDirectionOverride
	enum <anonymous> NSThickerSquareBezelStyle
	enum <anonymous> NSThickSquareBezelStyle
	NSString *const NSThisDayDesignations
	NSString *const NSThousandsSeparator
	NSString *const NSThreadWillExitNotification
	enum <anonymous> NSTickMarkAbove
	enum <anonymous> NSTickMarkBelow
	enum <anonymous> NSTickMarkLeft
	enum <anonymous> NSTickMarkRight
	enum <anonymous> NSTIFFCompressionCCITTFAX3
	enum <anonymous> NSTIFFCompressionCCITTFAX4
	enum <anonymous> NSTIFFCompressionJPEG
	enum <anonymous> NSTIFFCompressionLZW
	enum <anonymous> NSTIFFCompressionNEXT
	enum <anonymous> NSTIFFCompressionNone
	enum <anonymous> NSTIFFCompressionOldJPEG
	enum <anonymous> NSTIFFCompressionPackBits
	NSString * NSTIFFException
	enum <anonymous> NSTIFFFileType
	NSString * NSTIFFPboardType
	NSString *const NSTimeDateFormatString
	NSString *const NSTimeFormatString
	NSString * NSTimeoutDocumentOption
	enum <anonymous> NSTimeZoneCalendarUnit
	enum <anonymous> NSTimeZoneDatePickerElementFlag
	enum <anonymous> NSTimeZoneNameStyleDaylightSaving
	enum <anonymous> NSTimeZoneNameStyleGeneric
	enum <anonymous> NSTimeZoneNameStyleShortDaylightSaving
	enum <anonymous> NSTimeZoneNameStyleShortGeneric
	enum <anonymous> NSTimeZoneNameStyleShortStandard
	enum <anonymous> NSTimeZoneNameStyleStandard
	NSString * NSTitleBinding
	NSString * NSTitleDocumentAttribute
	enum <anonymous> NSTitledWindowMask
	enum <anonymous> NSToggleButton
	NSString * NSToolbarCustomizeToolbarItemIdentifier
	NSString * NSToolbarDidRemoveItemNotification
	enum <anonymous> NSToolbarDisplayModeDefault
	enum <anonymous> NSToolbarDisplayModeIconAndLabel
	enum <anonymous> NSToolbarDisplayModeIconOnly
	enum <anonymous> NSToolbarDisplayModeLabelOnly
	NSString * NSToolbarFlexibleSpaceItemIdentifier
	enum <anonymous> NSToolbarItemVisibilityPriorityHigh
	enum <anonymous> NSToolbarItemVisibilityPriorityLow
	enum <anonymous> NSToolbarItemVisibilityPriorityStandard
	enum <anonymous> NSToolbarItemVisibilityPriorityUser
	NSString * NSToolbarPrintItemIdentifier
	NSString * NSToolbarSeparatorItemIdentifier
	NSString * NSToolbarShowColorsItemIdentifier
	NSString * NSToolbarShowFontsItemIdentifier
	enum <anonymous> NSToolbarSizeModeDefault
	enum <anonymous> NSToolbarSizeModeRegular
	enum <anonymous> NSToolbarSizeModeSmall
	NSString * NSToolbarSpaceItemIdentifier
	NSString * NSToolbarWillAddItemNotification
	NSString * NSToolTipAttributeName
	NSString * NSToolTipBinding
	NSString * NSTopMarginDocumentAttribute
	enum <anonymous> NSTopTabsBezelBorder
	enum <anonymous> NSTouchEventSubtype
	enum <anonymous> NSTouchPhaseAny
	enum <anonymous> NSTouchPhaseBegan
	enum <anonymous> NSTouchPhaseCancelled
	enum <anonymous> NSTouchPhaseEnded
	enum <anonymous> NSTouchPhaseMoved
	enum <anonymous> NSTouchPhaseStationary
	enum <anonymous> NSTouchPhaseTouching
	enum <anonymous> NSTrackingActiveAlways
	enum <anonymous> NSTrackingActiveInActiveApp
	enum <anonymous> NSTrackingActiveInKeyWindow
	enum <anonymous> NSTrackingActiveWhenFirstResponder
	enum <anonymous> NSTrackingAssumeInside
	enum <anonymous> NSTrackingCursorUpdate
	enum <anonymous> NSTrackingEnabledDuringMouseDrag
	enum <anonymous> NSTrackingInVisibleRect
	enum <anonymous> NSTrackingMouseEnteredAndExited
	enum <anonymous> NSTrackingMouseMoved
	enum <anonymous> NSTrackModeMatrix
	enum <anonymous> NSTransformableAttributeType
	enum <anonymous> NSTransformEntityMappingType
	NSString * NSTransparentBinding
	enum <anonymous> NSTrashDirectory
	NSString * NSTypedStreamVersionException
	enum <anonymous> NSTypesetterBehavior_10_2
	enum <anonymous> NSTypesetterBehavior_10_2_WithCompatibility
	enum <anonymous> NSTypesetterBehavior_10_3
	enum <anonymous> NSTypesetterBehavior_10_4
	enum <anonymous> NSTypesetterContainerBreakAction
	enum <anonymous> NSTypesetterHorizontalTabAction
	enum <anonymous> NSTypesetterLatestBehavior
	enum <anonymous> NSTypesetterLineBreakAction
	enum <anonymous> NSTypesetterOriginalBehavior
	enum <anonymous> NSTypesetterParagraphBreakAction
	enum <anonymous> NSTypesetterWhitespaceAction
	enum <anonymous> NSTypesetterZeroAdvancementAction
	enum <anonymous> NSUbiquitousKeyValueStoreAccountChange
	NSString *const NSUbiquitousKeyValueStoreChangedKeysKey
	NSString *const NSUbiquitousKeyValueStoreChangeReasonKey
	NSString *const NSUbiquitousKeyValueStoreDidChangeExternallyNotification
	enum <anonymous> NSUbiquitousKeyValueStoreInitialSyncChange
	enum <anonymous> NSUbiquitousKeyValueStoreQuotaViolationChange
	enum <anonymous> NSUbiquitousKeyValueStoreServerChange
	NSString *const NSUbiquityIdentityDidChangeNotification
	NSString *const NSUnarchiveFromDataTransformerName
	enum <anonymous> NSUnboldFontMask
	enum <anonymous> NSUncachedRead
	enum <anonymous> NSUndefinedAttributeType
	enum <anonymous> NSUndefinedDateComponent
	enum <anonymous> NSUndefinedEntityMappingType
	NSString *const NSUndefinedKeyException
	NSUInteger NSUnderlineByWordMask
	NSString * NSUnderlineColorAttributeName
	enum <anonymous> NSUnderlinePatternDash
	enum <anonymous> NSUnderlinePatternDashDot
	enum <anonymous> NSUnderlinePatternDashDotDot
	enum <anonymous> NSUnderlinePatternDot
	enum <anonymous> NSUnderlinePatternSolid
	NSUInteger NSUnderlineStrikethroughMask
	NSString * NSUnderlineStyleAttributeName
	enum <anonymous> NSUnderlineStyleDouble
	enum <anonymous> NSUnderlineStyleNone
	enum <anonymous> NSUnderlineStyleSingle
	enum <anonymous> NSUnderlineStyleThick
	NSString *const NSUnderlyingErrorKey
	enum <anonymous> NSUndoCloseGroupingRunLoopOrdering
	enum <anonymous> NSUndoFunctionKey
	NSString *const NSUndoManagerCheckpointNotification
	NSString *const NSUndoManagerDidCloseUndoGroupNotification
	NSString *const NSUndoManagerDidOpenUndoGroupNotification
	NSString *const NSUndoManagerDidRedoChangeNotification
	NSString *const NSUndoManagerDidUndoChangeNotification
	NSString *const NSUndoManagerGroupIsDiscardableKey
	NSString *const NSUndoManagerWillCloseUndoGroupNotification
	NSString *const NSUndoManagerWillRedoChangeNotification
	NSString *const NSUndoManagerWillUndoChangeNotification
	enum <anonymous> NSUnicodeStringEncoding
	enum <anonymous> NSUnifiedTitleAndToolbarWindowMask
	NSString *const NSUnionOfArraysKeyValueOperator
	NSString *const NSUnionOfObjectsKeyValueOperator
	NSString *const NSUnionOfSetsKeyValueOperator
	enum <anonymous> NSUnionSetExpressionType
	enum <anonymous> NSUnitalicFontMask
	enum <anonymous> NSUnknownColorSpaceModel
	enum <anonymous> NSUnknownKeyScriptError
	enum <anonymous> NSUnknownKeySpecifierError
	enum <anonymous> NSUnknownPageOrder
	enum <anonymous> NSUnknownPointingDevice
	enum <anonymous> NSUnscaledWindowMask
	enum <anonymous> NSUpArrowFunctionKey
	NSString *const NSUpdatedObjectsKey
	enum <anonymous> NSUpdateWindowsRunLoopOrdering
	enum <anonymous> NSUpTextMovement
	NSString *const NSURLAttributeModificationDateKey
	NSString *const NSURLAuthenticationMethodClientCertificate
	NSString *const NSURLAuthenticationMethodDefault
	NSString *const NSURLAuthenticationMethodHTMLForm
	NSString *const NSURLAuthenticationMethodHTTPBasic
	NSString *const NSURLAuthenticationMethodHTTPDigest
	NSString *const NSURLAuthenticationMethodNegotiate
	NSString *const NSURLAuthenticationMethodNTLM
	NSString *const NSURLAuthenticationMethodServerTrust
	enum <anonymous> NSURLBookmarkCreationMinimalBookmark
	enum <anonymous> NSURLBookmarkCreationPreferFileIDResolution
	enum <anonymous> NSURLBookmarkCreationSecurityScopeAllowOnlyReadAccess
	enum <anonymous> NSURLBookmarkCreationSuitableForBookmarkFile
	enum <anonymous> NSURLBookmarkCreationWithSecurityScope
	enum <anonymous> NSURLBookmarkResolutionWithoutMounting
	enum <anonymous> NSURLBookmarkResolutionWithoutUI
	enum <anonymous> NSURLBookmarkResolutionWithSecurityScope
	enum <anonymous> NSURLCacheStorageAllowed
	enum <anonymous> NSURLCacheStorageAllowedInMemoryOnly
	enum <anonymous> NSURLCacheStorageNotAllowed
	NSString *const NSURLContentAccessDateKey
	NSString *const NSURLContentModificationDateKey
	NSString *const NSURLCreationDateKey
	enum <anonymous> NSURLCredentialPersistenceForSession
	enum <anonymous> NSURLCredentialPersistenceNone
	enum <anonymous> NSURLCredentialPersistencePermanent
	NSString *const NSURLCredentialStorageChangedNotification
	NSString *const NSURLCustomIconKey
	NSString *const NSURLEffectiveIconKey
	enum <anonymous> NSURLErrorBadServerResponse
	enum <anonymous> NSURLErrorBadURL
	enum <anonymous> NSURLErrorCallIsActive
	enum <anonymous> NSURLErrorCancelled
	enum <anonymous> NSURLErrorCannotCloseFile
	enum <anonymous> NSURLErrorCannotConnectToHost
	enum <anonymous> NSURLErrorCannotCreateFile
	enum <anonymous> NSURLErrorCannotDecodeContentData
	enum <anonymous> NSURLErrorCannotDecodeRawData
	enum <anonymous> NSURLErrorCannotFindHost
	enum <anonymous> NSURLErrorCannotLoadFromNetwork
	enum <anonymous> NSURLErrorCannotMoveFile
	enum <anonymous> NSURLErrorCannotOpenFile
	enum <anonymous> NSURLErrorCannotParseResponse
	enum <anonymous> NSURLErrorCannotRemoveFile
	enum <anonymous> NSURLErrorCannotWriteToFile
	enum <anonymous> NSURLErrorClientCertificateRejected
	enum <anonymous> NSURLErrorClientCertificateRequired
	enum <anonymous> NSURLErrorDataLengthExceedsMaximum
	enum <anonymous> NSURLErrorDataNotAllowed
	enum <anonymous> NSURLErrorDNSLookupFailed
	NSString *const NSURLErrorDomain
	enum <anonymous> NSURLErrorDownloadDecodingFailedMidStream
	enum <anonymous> NSURLErrorDownloadDecodingFailedToComplete
	NSString *const NSURLErrorFailingURLErrorKey
	NSString *const NSURLErrorFailingURLPeerTrustErrorKey
	NSString *const NSURLErrorFailingURLStringErrorKey
	enum <anonymous> NSURLErrorFileDoesNotExist
	enum <anonymous> NSURLErrorFileIsDirectory
	enum <anonymous> NSURLErrorHTTPTooManyRedirects
	enum <anonymous> NSURLErrorInternationalRoamingOff
	NSString *const NSURLErrorKey
	enum <anonymous> NSURLErrorNetworkConnectionLost
	enum <anonymous> NSURLErrorNoPermissionsToReadFile
	enum <anonymous> NSURLErrorNotConnectedToInternet
	enum <anonymous> NSURLErrorRedirectToNonExistentLocation
	enum <anonymous> NSURLErrorRequestBodyStreamExhausted
	enum <anonymous> NSURLErrorResourceUnavailable
	enum <anonymous> NSURLErrorSecureConnectionFailed
	enum <anonymous> NSURLErrorServerCertificateHasBadDate
	enum <anonymous> NSURLErrorServerCertificateHasUnknownRoot
	enum <anonymous> NSURLErrorServerCertificateNotYetValid
	enum <anonymous> NSURLErrorServerCertificateUntrusted
	enum <anonymous> NSURLErrorTimedOut
	enum <anonymous> NSURLErrorUnknown
	enum <anonymous> NSURLErrorUnsupportedURL
	enum <anonymous> NSURLErrorUserAuthenticationRequired
	enum <anonymous> NSURLErrorUserCancelledAuthentication
	enum <anonymous> NSURLErrorZeroByteResource
	NSString *const NSURLFileAllocatedSizeKey
	NSString *const NSURLFileResourceIdentifierKey
	NSString *const NSURLFileResourceTypeBlockSpecial
	NSString *const NSURLFileResourceTypeCharacterSpecial
	NSString *const NSURLFileResourceTypeDirectory
	NSString *const NSURLFileResourceTypeKey
	NSString *const NSURLFileResourceTypeNamedPipe
	NSString *const NSURLFileResourceTypeRegular
	NSString *const NSURLFileResourceTypeSocket
	NSString *const NSURLFileResourceTypeSymbolicLink
	NSString *const NSURLFileResourceTypeUnknown
	NSString * NSURLFileScheme
	NSString *const NSURLFileSecurityKey
	NSString *const NSURLFileSizeKey
	enum <anonymous> NSURLHandleLoadFailed
	enum <anonymous> NSURLHandleLoadInProgress
	enum <anonymous> NSURLHandleLoadSucceeded
	enum <anonymous> NSURLHandleNotLoaded
	NSString *const NSURLHasHiddenExtensionKey
	NSString *const NSURLIsAliasFileKey
	NSString *const NSURLIsDirectoryKey
	NSString *const NSURLIsExcludedFromBackupKey
	NSString *const NSURLIsExecutableKey
	NSString *const NSURLIsHiddenKey
	NSString *const NSURLIsMountTriggerKey
	NSString *const NSURLIsPackageKey
	NSString *const NSURLIsReadableKey
	NSString *const NSURLIsRegularFileKey
	NSString *const NSURLIsSymbolicLinkKey
	NSString *const NSURLIsSystemImmutableKey
	NSString *const NSURLIsUbiquitousItemKey
	NSString *const NSURLIsUserImmutableKey
	NSString *const NSURLIsVolumeKey
	NSString *const NSURLIsWritableKey
	NSString *const NSURLKeysOfUnsetValuesKey
	NSString *const NSURLLabelColorKey
	NSString *const NSURLLabelNumberKey
	NSString *const NSURLLinkCountKey
	NSString *const NSURLLocalizedLabelKey
	NSString *const NSURLLocalizedNameKey
	NSString *const NSURLLocalizedTypeDescriptionKey
	NSString *const NSURLNameKey
	enum <anonymous> NSURLNetworkServiceTypeBackground
	enum <anonymous> NSURLNetworkServiceTypeDefault
	enum <anonymous> NSURLNetworkServiceTypeVideo
	enum <anonymous> NSURLNetworkServiceTypeVoice
	enum <anonymous> NSURLNetworkServiceTypeVoIP
	NSString *const NSURLParentDirectoryURLKey
	NSString *const NSURLPathKey
	NSString * NSURLPboardType
	NSString *const NSURLPreferredIOBlockSizeKey
	NSString *const NSURLProtectionSpaceFTP
	NSString *const NSURLProtectionSpaceFTPProxy
	NSString *const NSURLProtectionSpaceHTTP
	NSString *const NSURLProtectionSpaceHTTPProxy
	NSString *const NSURLProtectionSpaceHTTPS
	NSString *const NSURLProtectionSpaceHTTPSProxy
	NSString *const NSURLProtectionSpaceSOCKSProxy
	enum <anonymous> NSURLRequestReloadIgnoringCacheData
	enum <anonymous> NSURLRequestReloadIgnoringLocalAndRemoteCacheData
	enum <anonymous> NSURLRequestReloadIgnoringLocalCacheData
	enum <anonymous> NSURLRequestReloadRevalidatingCacheData
	enum <anonymous> NSURLRequestReturnCacheDataDontLoad
	enum <anonymous> NSURLRequestReturnCacheDataElseLoad
	enum <anonymous> NSURLRequestUseProtocolCachePolicy
	NSString *const NSURLTotalFileAllocatedSizeKey
	NSString *const NSURLTotalFileSizeKey
	NSString *const NSURLTypeIdentifierKey
	NSString *const NSURLUbiquitousItemHasUnresolvedConflictsKey
	NSString *const NSURLUbiquitousItemIsDownloadedKey
	NSString *const NSURLUbiquitousItemIsDownloadingKey
	NSString *const NSURLUbiquitousItemIsUploadedKey
	NSString *const NSURLUbiquitousItemIsUploadingKey
	NSString *const NSURLUbiquitousItemPercentDownloadedKey
	NSString *const NSURLUbiquitousItemPercentUploadedKey
	NSString *const NSURLVolumeAvailableCapacityKey
	NSString *const NSURLVolumeCreationDateKey
	NSString *const NSURLVolumeIdentifierKey
	NSString *const NSURLVolumeIsAutomountedKey
	NSString *const NSURLVolumeIsBrowsableKey
	NSString *const NSURLVolumeIsEjectableKey
	NSString *const NSURLVolumeIsInternalKey
	NSString *const NSURLVolumeIsJournalingKey
	NSString *const NSURLVolumeIsLocalKey
	NSString *const NSURLVolumeIsReadOnlyKey
	NSString *const NSURLVolumeIsRemovableKey
	NSString *const NSURLVolumeLocalizedFormatDescriptionKey
	NSString *const NSURLVolumeLocalizedNameKey
	NSString *const NSURLVolumeMaximumFileSizeKey
	NSString *const NSURLVolumeNameKey
	NSString *const NSURLVolumeResourceCountKey
	NSString *const NSURLVolumeSupportsAdvisoryFileLockingKey
	NSString *const NSURLVolumeSupportsCasePreservedNamesKey
	NSString *const NSURLVolumeSupportsCaseSensitiveNamesKey
	NSString *const NSURLVolumeSupportsExtendedSecurityKey
	NSString *const NSURLVolumeSupportsHardLinksKey
	NSString *const NSURLVolumeSupportsJournalingKey
	NSString *const NSURLVolumeSupportsPersistentIDsKey
	NSString *const NSURLVolumeSupportsRenamingKey
	NSString *const NSURLVolumeSupportsRootDirectoryDatesKey
	NSString *const NSURLVolumeSupportsSparseFilesKey
	NSString *const NSURLVolumeSupportsSymbolicLinksKey
	NSString *const NSURLVolumeSupportsVolumeSizesKey
	NSString *const NSURLVolumeSupportsZeroRunsKey
	NSString *const NSURLVolumeTotalCapacityKey
	NSString *const NSURLVolumeURLForRemountingKey
	NSString *const NSURLVolumeURLKey
	NSString *const NSURLVolumeUUIDStringKey
	enum <anonymous> NSUserCancelledError
	NSString *const NSUserDefaultsDidChangeNotification
	enum <anonymous> NSUserDirectory
	enum <anonymous> NSUserDomainMask
	enum <anonymous> NSUserFunctionKey
	enum <anonymous> NSUserInterfaceLayoutDirectionLeftToRight
	enum <anonymous> NSUserInterfaceLayoutDirectionRightToLeft
	enum <anonymous> NSUserNotificationActivationTypeActionButtonClicked
	enum <anonymous> NSUserNotificationActivationTypeContentsClicked
	enum <anonymous> NSUserNotificationActivationTypeNone
	NSString *const NSUserNotificationDefaultSoundName
	NSString * NSUsesScreenFontsDocumentAttribute
	enum <anonymous> NSUTF16BigEndianStringEncoding
	enum <anonymous> NSUTF16LittleEndianStringEncoding
	enum <anonymous> NSUTF16StringEncoding
	enum <anonymous> NSUTF32BigEndianStringEncoding
	enum <anonymous> NSUTF32LittleEndianStringEncoding
	enum <anonymous> NSUTF32StringEncoding
	enum <anonymous> NSUTF8StringEncoding
	enum <anonymous> NSUtilityWindowMask
	NSString *const NSUUIDChangedPersistentStoresKey
	NSString * NSValidatesImmediatelyBindingOption
	NSString *const NSValidateXMLStoreOption
	enum <anonymous> NSValidationDateTooLateError
	enum <anonymous> NSValidationDateTooSoonError
	enum <anonymous> NSValidationErrorMaximum
	enum <anonymous> NSValidationErrorMinimum
	enum <anonymous> NSValidationInvalidDateError
	NSString *const NSValidationKeyErrorKey
	enum <anonymous> NSValidationMissingMandatoryPropertyError
	enum <anonymous> NSValidationMultipleErrorsError
	enum <anonymous> NSValidationNumberTooLargeError
	enum <anonymous> NSValidationNumberTooSmallError
	NSString *const NSValidationObjectErrorKey
	NSString *const NSValidationPredicateErrorKey
	enum <anonymous> NSValidationRelationshipDeniedDeleteError
	enum <anonymous> NSValidationRelationshipExceedsMaximumCountError
	enum <anonymous> NSValidationRelationshipLacksMinimumCountError
	enum <anonymous> NSValidationStringPatternMatchingError
	enum <anonymous> NSValidationStringTooLongError
	enum <anonymous> NSValidationStringTooShortError
	NSString *const NSValidationValueErrorKey
	NSString * NSValueBinding
	NSString * NSValuePathBinding
	NSString * NSValueTransformerBindingOption
	NSString * NSValueTransformerNameBindingOption
	NSString * NSValueURLBinding
	enum <anonymous> NSVariableExpressionType
	NSString * NSVCardPboardType
	enum <anonymous> nsvErr
	NSString * NSVerticalGlyphFormAttributeName
	enum <anonymous> NSVerticalRuler
	enum <anonymous> NSViaPanelFontAction
	NSString * NSViewAnimationEffectKey
	NSString * NSViewAnimationEndFrameKey
	NSString * NSViewAnimationFadeInEffect
	NSString * NSViewAnimationFadeOutEffect
	NSString * NSViewAnimationStartFrameKey
	NSString * NSViewAnimationTargetKey
	NSString * NSViewBoundsDidChangeNotification
	NSString * NSViewDidUpdateTrackingAreasNotification
	NSString * NSViewFocusDidChangeNotification
	NSString * NSViewFrameDidChangeNotification
	NSString * NSViewGlobalFrameDidChangeNotification
	enum <anonymous> NSViewHeightSizable
	enum <anonymous> NSViewLayerContentsPlacementBottom
	enum <anonymous> NSViewLayerContentsPlacementBottomLeft
	enum <anonymous> NSViewLayerContentsPlacementBottomRight
	enum <anonymous> NSViewLayerContentsPlacementCenter
	enum <anonymous> NSViewLayerContentsPlacementLeft
	enum <anonymous> NSViewLayerContentsPlacementRight
	enum <anonymous> NSViewLayerContentsPlacementScaleAxesIndependently
	enum <anonymous> NSViewLayerContentsPlacementScaleProportionallyToFill
	enum <anonymous> NSViewLayerContentsPlacementScaleProportionallyToFit
	enum <anonymous> NSViewLayerContentsPlacementTop
	enum <anonymous> NSViewLayerContentsPlacementTopLeft
	enum <anonymous> NSViewLayerContentsPlacementTopRight
	enum <anonymous> NSViewLayerContentsRedrawBeforeViewResize
	enum <anonymous> NSViewLayerContentsRedrawDuringViewResize
	enum <anonymous> NSViewLayerContentsRedrawNever
	enum <anonymous> NSViewLayerContentsRedrawOnSetNeedsDisplay
	enum <anonymous> NSViewMaxXMargin
	enum <anonymous> NSViewMaxYMargin
	enum <anonymous> NSViewMinXMargin
	enum <anonymous> NSViewMinYMargin
	NSString * NSViewModeDocumentAttribute
	const CGFloat NSViewNoInstrinsicMetric
	enum <anonymous> NSViewNotSizable
	NSString * NSViewSizeDocumentAttribute
	enum <anonymous> NSViewWidthSizable
	NSString * NSViewZoomDocumentAttribute
	NSString * NSVisibleBinding
	NSString *const NSVoiceAge
	NSString *const NSVoiceDemoText
	NSString *const NSVoiceGender
	NSString *const NSVoiceGenderFemale
	NSString *const NSVoiceGenderMale
	NSString *const NSVoiceGenderNeuter
	NSString *const NSVoiceIdentifier
	NSString *const NSVoiceIndividuallySpokenCharacters
	NSString *const NSVoiceLanguage
	NSString *const NSVoiceLocaleIdentifier
	NSString *const NSVoiceName
	NSString *const NSVoiceSupportedCharacters
	enum <anonymous> NSVolumeEnumerationProduceFileReferenceURLs
	enum <anonymous> NSVolumeEnumerationSkipHiddenVolumes
	enum <anonymous> NSWantsBidiLevels
	enum <anonymous> NSWarningAlertStyle
	NSString * NSWarningValueBinding
	NSString * NSWebArchiveTextDocumentType
	NSString * NSWebPreferencesDocumentOption
	NSString * NSWebResourceLoadDelegateDocumentOption
	enum <anonymous> NSWeekCalendarUnit
	enum <anonymous> NSWeekdayCalendarUnit
	NSString *const NSWeekDayNameArray
	enum <anonymous> NSWeekdayOrdinalCalendarUnit
	enum <anonymous> NSWeekOfMonthCalendarUnit
	enum <anonymous> NSWeekOfYearCalendarUnit
	enum <anonymous> NSWheelModeColorPanel
	const CGFloat NSWhite
	NSString * NSWidthBinding
	enum <anonymous> NSWidthInsensitiveSearch
	NSString *const NSWillBecomeMultiThreadedNotification
	enum <anonymous> NSWindowAbove
	enum <anonymous> NSWindowAnimationBehaviorAlertPanel
	enum <anonymous> NSWindowAnimationBehaviorDefault
	enum <anonymous> NSWindowAnimationBehaviorDocumentWindow
	enum <anonymous> NSWindowAnimationBehaviorNone
	enum <anonymous> NSWindowAnimationBehaviorUtilityWindow
	enum <anonymous> NSWindowBackingLocationDefault
	enum <anonymous> NSWindowBackingLocationMainMemory
	enum <anonymous> NSWindowBackingLocationVideoMemory
	enum <anonymous> NSWindowBelow
	enum <anonymous> NSWindowCloseButton
	enum <anonymous> NSWindowCollectionBehaviorCanJoinAllSpaces
	enum <anonymous> NSWindowCollectionBehaviorDefault
	enum <anonymous> NSWindowCollectionBehaviorFullScreenAuxiliary
	enum <anonymous> NSWindowCollectionBehaviorFullScreenPrimary
	enum <anonymous> NSWindowCollectionBehaviorIgnoresCycle
	enum <anonymous> NSWindowCollectionBehaviorManaged
	enum <anonymous> NSWindowCollectionBehaviorMoveToActiveSpace
	enum <anonymous> NSWindowCollectionBehaviorParticipatesInCycle
	enum <anonymous> NSWindowCollectionBehaviorStationary
	enum <anonymous> NSWindowCollectionBehaviorTransient
	enum <anonymous> NSWindowDepthOnehundredtwentyeightBitRGB
	enum <anonymous> NSWindowDepthSixtyfourBitRGB
	enum <anonymous> NSWindowDepthTwentyfourBitRGB
	NSString * NSWindowDidBecomeKeyNotification
	NSString * NSWindowDidBecomeMainNotification
	NSString *const NSWindowDidChangeBackingPropertiesNotification
	NSString * NSWindowDidChangeScreenNotification
	NSString * NSWindowDidChangeScreenProfileNotification
	NSString * NSWindowDidDeminiaturizeNotification
	NSString *const NSWindowDidEndLiveResizeNotification
	NSString * NSWindowDidEndSheetNotification
	NSString *const NSWindowDidEnterFullScreenNotification
	NSString *const NSWindowDidEnterVersionBrowserNotification
	NSString *const NSWindowDidExitFullScreenNotification
	NSString *const NSWindowDidExitVersionBrowserNotification
	NSString * NSWindowDidExposeNotification
	NSString * NSWindowDidMiniaturizeNotification
	NSString * NSWindowDidMoveNotification
	NSString * NSWindowDidResignKeyNotification
	NSString * NSWindowDidResignMainNotification
	NSString * NSWindowDidResizeNotification
	NSString * NSWindowDidUpdateNotification
	enum <anonymous> NSWindowDocumentIconButton
	enum <anonymous> NSWindowDocumentVersionsButton
	enum <anonymous> NSWindowExposedEventType
	enum <anonymous> NSWindowFullScreenButton
	enum <anonymous> NSWindowMiniaturizeButton
	enum <anonymous> NSWindowMovedEventType
	enum <anonymous> NSWindowNumberListAllApplications
	enum <anonymous> NSWindowNumberListAllSpaces
	enum <anonymous> NSWindowOut
	enum <anonymous> NSWindows95InterfaceStyle
	enum <anonymous> NSWindows95OperatingSystem
	enum <anonymous> NSWindowsCP1250StringEncoding
	enum <anonymous> NSWindowsCP1251StringEncoding
	enum <anonymous> NSWindowsCP1252StringEncoding
	enum <anonymous> NSWindowsCP1253StringEncoding
	enum <anonymous> NSWindowsCP1254StringEncoding
	NSString * NSWindowServerCommunicationException
	enum <anonymous> NSWindowSharingNone
	enum <anonymous> NSWindowSharingReadOnly
	enum <anonymous> NSWindowSharingReadWrite
	enum <anonymous> NSWindowsNTOperatingSystem
	enum <anonymous> NSWindowToolbarButton
	NSString * NSWindowWillBeginSheetNotification
	NSString * NSWindowWillCloseNotification
	NSString *const NSWindowWillEnterFullScreenNotification
	NSString *const NSWindowWillEnterVersionBrowserNotification
	NSString *const NSWindowWillExitFullScreenNotification
	NSString *const NSWindowWillExitVersionBrowserNotification
	NSString * NSWindowWillMiniaturizeNotification
	NSString * NSWindowWillMoveNotification
	NSString *const NSWindowWillStartLiveResizeNotification
	enum <anonymous> NSWindowZoomButton
	NSString * NSWordMLTextDocumentType
	NSString * NSWordTablesReadException
	NSString * NSWordTablesWriteException
	NSString *const NSWorkspaceActiveSpaceDidChangeNotification
	NSString *const NSWorkspaceApplicationKey
	NSString * NSWorkspaceCompressOperation
	NSString * NSWorkspaceCopyOperation
	NSString * NSWorkspaceDecompressOperation
	NSString * NSWorkspaceDecryptOperation
	NSString *const NSWorkspaceDesktopImageAllowClippingKey
	NSString *const NSWorkspaceDesktopImageFillColorKey
	NSString *const NSWorkspaceDesktopImageScalingKey
	NSString * NSWorkspaceDestroyOperation
	NSString *const NSWorkspaceDidActivateApplicationNotification
	NSString *const NSWorkspaceDidChangeFileLabelsNotification
	NSString *const NSWorkspaceDidDeactivateApplicationNotification
	NSString *const NSWorkspaceDidHideApplicationNotification
	NSString * NSWorkspaceDidLaunchApplicationNotification
	NSString * NSWorkspaceDidMountNotification
	NSString * NSWorkspaceDidPerformFileOperationNotification
	NSString *const NSWorkspaceDidRenameVolumeNotification
	NSString * NSWorkspaceDidTerminateApplicationNotification
	NSString *const NSWorkspaceDidUnhideApplicationNotification
	NSString * NSWorkspaceDidUnmountNotification
	NSString * NSWorkspaceDidWakeNotification
	NSString * NSWorkspaceDuplicateOperation
	NSString * NSWorkspaceEncryptOperation
	enum <anonymous> NSWorkspaceLaunchAllowingClassicStartup
	enum <anonymous> NSWorkspaceLaunchAndHide
	enum <anonymous> NSWorkspaceLaunchAndHideOthers
	enum <anonymous> NSWorkspaceLaunchAndPrint
	enum <anonymous> NSWorkspaceLaunchAsync
	NSString *const NSWorkspaceLaunchConfigurationAppleEvent
	NSString *const NSWorkspaceLaunchConfigurationArchitecture
	NSString *const NSWorkspaceLaunchConfigurationArguments
	NSString *const NSWorkspaceLaunchConfigurationEnvironment
	enum <anonymous> NSWorkspaceLaunchDefault
	enum <anonymous> NSWorkspaceLaunchInhibitingBackgroundOnly
	enum <anonymous> NSWorkspaceLaunchNewInstance
	enum <anonymous> NSWorkspaceLaunchPreferringClassic
	enum <anonymous> NSWorkspaceLaunchWithoutActivation
	enum <anonymous> NSWorkspaceLaunchWithoutAddingToRecents
	NSString * NSWorkspaceLinkOperation
	NSString * NSWorkspaceMoveOperation
	NSString * NSWorkspaceRecycleOperation
	NSString *const NSWorkspaceScreensDidSleepNotification
	NSString *const NSWorkspaceScreensDidWakeNotification
	NSString * NSWorkspaceSessionDidBecomeActiveNotification
	NSString * NSWorkspaceSessionDidResignActiveNotification
	NSString *const NSWorkspaceVolumeLocalizedNameKey
	NSString *const NSWorkspaceVolumeOldLocalizedNameKey
	NSString *const NSWorkspaceVolumeOldURLKey
	NSString *const NSWorkspaceVolumeURLKey
	NSString * NSWorkspaceWillLaunchApplicationNotification
	NSString *const NSWorkspaceWillPowerOffNotification
	NSString * NSWorkspaceWillSleepNotification
	NSString * NSWorkspaceWillUnmountNotification
	enum <anonymous> NSWrapCalendarComponents
	NSString * NSWritingDirectionAttributeName
	enum <anonymous> NSWritingDirectionLeftToRight
	enum <anonymous> NSWritingDirectionNatural
	enum <anonymous> NSWritingDirectionRightToLeft
	enum <anonymous> NSXMLAttributeCDATAKind
	enum <anonymous> NSXMLAttributeDeclarationKind
	enum <anonymous> NSXMLAttributeEntitiesKind
	enum <anonymous> NSXMLAttributeEntityKind
	enum <anonymous> NSXMLAttributeEnumerationKind
	enum <anonymous> NSXMLAttributeIDKind
	enum <anonymous> NSXMLAttributeIDRefKind
	enum <anonymous> NSXMLAttributeIDRefsKind
	enum <anonymous> NSXMLAttributeKind
	enum <anonymous> NSXMLAttributeNMTokenKind
	enum <anonymous> NSXMLAttributeNMTokensKind
	enum <anonymous> NSXMLAttributeNotationKind
	enum <anonymous> NSXMLCommentKind
	enum <anonymous> NSXMLDocumentHTMLKind
	enum <anonymous> NSXMLDocumentIncludeContentTypeDeclaration
	enum <anonymous> NSXMLDocumentKind
	enum <anonymous> NSXMLDocumentTextKind
	enum <anonymous> NSXMLDocumentTidyHTML
	enum <anonymous> NSXMLDocumentTidyXML
	enum <anonymous> NSXMLDocumentValidate
	enum <anonymous> NSXMLDocumentXHTMLKind
	enum <anonymous> NSXMLDocumentXInclude
	enum <anonymous> NSXMLDocumentXMLKind
	enum <anonymous> NSXMLDTDKind
	enum <anonymous> NSXMLElementDeclarationAnyKind
	enum <anonymous> NSXMLElementDeclarationElementKind
	enum <anonymous> NSXMLElementDeclarationEmptyKind
	enum <anonymous> NSXMLElementDeclarationKind
	enum <anonymous> NSXMLElementDeclarationMixedKind
	enum <anonymous> NSXMLElementDeclarationUndefinedKind
	enum <anonymous> NSXMLElementKind
	enum <anonymous> NSXMLEntityDeclarationKind
	enum <anonymous> NSXMLEntityGeneralKind
	enum <anonymous> NSXMLEntityParameterKind
	enum <anonymous> NSXMLEntityParsedKind
	enum <anonymous> NSXMLEntityPredefined
	enum <anonymous> NSXMLEntityUnparsedKind
	NSString *const NSXMLExternalRecordType
	enum <anonymous> NSXMLInvalidKind
	enum <anonymous> NSXMLNamespaceKind
	enum <anonymous> NSXMLNodeCompactEmptyElement
	enum <anonymous> NSXMLNodeExpandEmptyElement
	enum <anonymous> NSXMLNodeIsCDATA
	enum <anonymous> NSXMLNodeLoadExternalEntitiesAlways
	enum <anonymous> NSXMLNodeLoadExternalEntitiesNever
	enum <anonymous> NSXMLNodeLoadExternalEntitiesSameOriginOnly
	enum <anonymous> NSXMLNodeOptionsNone
	enum <anonymous> NSXMLNodePreserveAll
	enum <anonymous> NSXMLNodePreserveAttributeOrder
	enum <anonymous> NSXMLNodePreserveCDATA
	enum <anonymous> NSXMLNodePreserveCharacterReferences
	enum <anonymous> NSXMLNodePreserveDTD
	enum <anonymous> NSXMLNodePreserveEmptyElements
	enum <anonymous> NSXMLNodePreserveEntities
	enum <anonymous> NSXMLNodePreserveNamespaceOrder
	enum <anonymous> NSXMLNodePreservePrefixes
	enum <anonymous> NSXMLNodePreserveQuotes
	enum <anonymous> NSXMLNodePreserveWhitespace
	enum <anonymous> NSXMLNodePrettyPrint
	enum <anonymous> NSXMLNodeUseDoubleQuotes
	enum <anonymous> NSXMLNodeUseSingleQuotes
	enum <anonymous> NSXMLNotationDeclarationKind
	enum <anonymous> NSXMLParserAttributeHasNoValueError
	enum <anonymous> NSXMLParserAttributeListNotFinishedError
	enum <anonymous> NSXMLParserAttributeListNotStartedError
	enum <anonymous> NSXMLParserAttributeNotFinishedError
	enum <anonymous> NSXMLParserAttributeNotStartedError
	enum <anonymous> NSXMLParserAttributeRedefinedError
	enum <anonymous> NSXMLParserCDATANotFinishedError
	enum <anonymous> NSXMLParserCharacterRefAtEOFError
	enum <anonymous> NSXMLParserCharacterRefInDTDError
	enum <anonymous> NSXMLParserCharacterRefInEpilogError
	enum <anonymous> NSXMLParserCharacterRefInPrologError
	enum <anonymous> NSXMLParserCommentContainsDoubleHyphenError
	enum <anonymous> NSXMLParserCommentNotFinishedError
	enum <anonymous> NSXMLParserConditionalSectionNotFinishedError
	enum <anonymous> NSXMLParserConditionalSectionNotStartedError
	enum <anonymous> NSXMLParserDelegateAbortedParseError
	enum <anonymous> NSXMLParserDOCTYPEDeclNotFinishedError
	enum <anonymous> NSXMLParserDocumentStartError
	enum <anonymous> NSXMLParserElementContentDeclNotFinishedError
	enum <anonymous> NSXMLParserElementContentDeclNotStartedError
	enum <anonymous> NSXMLParserEmptyDocumentError
	enum <anonymous> NSXMLParserEncodingNotSupportedError
	enum <anonymous> NSXMLParserEntityBoundaryError
	enum <anonymous> NSXMLParserEntityIsExternalError
	enum <anonymous> NSXMLParserEntityIsParameterError
	enum <anonymous> NSXMLParserEntityNotFinishedError
	enum <anonymous> NSXMLParserEntityNotStartedError
	enum <anonymous> NSXMLParserEntityRefAtEOFError
	enum <anonymous> NSXMLParserEntityReferenceMissingSemiError
	enum <anonymous> NSXMLParserEntityReferenceWithoutNameError
	enum <anonymous> NSXMLParserEntityRefInDTDError
	enum <anonymous> NSXMLParserEntityRefInEpilogError
	enum <anonymous> NSXMLParserEntityRefInPrologError
	enum <anonymous> NSXMLParserEntityRefLoopError
	enum <anonymous> NSXMLParserEntityValueRequiredError
	enum <anonymous> NSXMLParserEqualExpectedError
	NSString *const NSXMLParserErrorDomain
	enum <anonymous> NSXMLParserExternalStandaloneEntityError
	enum <anonymous> NSXMLParserExternalSubsetNotFinishedError
	enum <anonymous> NSXMLParserExtraContentError
	enum <anonymous> NSXMLParserGTRequiredError
	enum <anonymous> NSXMLParserInternalError
	enum <anonymous> NSXMLParserInvalidCharacterError
	enum <anonymous> NSXMLParserInvalidCharacterInEntityError
	enum <anonymous> NSXMLParserInvalidCharacterRefError
	enum <anonymous> NSXMLParserInvalidConditionalSectionError
	enum <anonymous> NSXMLParserInvalidDecimalCharacterRefError
	enum <anonymous> NSXMLParserInvalidEncodingError
	enum <anonymous> NSXMLParserInvalidEncodingNameError
	enum <anonymous> NSXMLParserInvalidHexCharacterRefError
	enum <anonymous> NSXMLParserInvalidURIError
	enum <anonymous> NSXMLParserLessThanSymbolInAttributeError
	enum <anonymous> NSXMLParserLiteralNotFinishedError
	enum <anonymous> NSXMLParserLiteralNotStartedError
	enum <anonymous> NSXMLParserLTRequiredError
	enum <anonymous> NSXMLParserLTSlashRequiredError
	enum <anonymous> NSXMLParserMisplacedCDATAEndStringError
	enum <anonymous> NSXMLParserMisplacedXMLDeclarationError
	enum <anonymous> NSXMLParserMixedContentDeclNotFinishedError
	enum <anonymous> NSXMLParserMixedContentDeclNotStartedError
	enum <anonymous> NSXMLParserNAMERequiredError
	enum <anonymous> NSXMLParserNamespaceDeclarationError
	enum <anonymous> NSXMLParserNMTOKENRequiredError
	enum <anonymous> NSXMLParserNoDTDError
	enum <anonymous> NSXMLParserNotationNotFinishedError
	enum <anonymous> NSXMLParserNotationNotStartedError
	enum <anonymous> NSXMLParserNotWellBalancedError
	enum <anonymous> NSXMLParserOutOfMemoryError
	enum <anonymous> NSXMLParserParsedEntityRefAtEOFError
	enum <anonymous> NSXMLParserParsedEntityRefInEpilogError
	enum <anonymous> NSXMLParserParsedEntityRefInInternalError
	enum <anonymous> NSXMLParserParsedEntityRefInInternalSubsetError
	enum <anonymous> NSXMLParserParsedEntityRefInPrologError
	enum <anonymous> NSXMLParserParsedEntityRefMissingSemiError
	enum <anonymous> NSXMLParserParsedEntityRefNoNameError
	enum <anonymous> NSXMLParserPCDATARequiredError
	enum <anonymous> NSXMLParserPrematureDocumentEndError
	enum <anonymous> NSXMLParserProcessingInstructionNotFinishedError
	enum <anonymous> NSXMLParserProcessingInstructionNotStartedError
	enum <anonymous> NSXMLParserPublicIdentifierRequiredError
	enum <anonymous> NSXMLParserSeparatorRequiredError
	enum <anonymous> NSXMLParserSpaceRequiredError
	enum <anonymous> NSXMLParserStandaloneValueError
	enum <anonymous> NSXMLParserStringNotClosedError
	enum <anonymous> NSXMLParserStringNotStartedError
	enum <anonymous> NSXMLParserTagNameMismatchError
	enum <anonymous> NSXMLParserUndeclaredEntityError
	enum <anonymous> NSXMLParserUnfinishedTagError
	enum <anonymous> NSXMLParserUnknownEncodingError
	enum <anonymous> NSXMLParserUnparsedEntityError
	enum <anonymous> NSXMLParserURIFragmentError
	enum <anonymous> NSXMLParserURIRequiredError
	enum <anonymous> NSXMLParserXMLDeclNotFinishedError
	enum <anonymous> NSXMLParserXMLDeclNotStartedError
	enum <anonymous> NSXMLProcessingInstructionKind
	NSString *const NSXMLStoreType
	enum <anonymous> NSXMLTextKind
	enum <anonymous> NSXPCConnectionErrorMaximum
	enum <anonymous> NSXPCConnectionErrorMinimum
	enum <anonymous> NSXPCConnectionInterrupted
	enum <anonymous> NSXPCConnectionInvalid
	enum <anonymous> NSXPCConnectionPrivileged
	enum <anonymous> NSXPCConnectionReplyInvalid
	enum <anonymous> NSYearCalendarUnit
	enum <anonymous> NSYearForWeekOfYearCalendarUnit
	enum <anonymous> NSYearMonthDatePickerElementFlag
	enum <anonymous> NSYearMonthDayDatePickerElementFlag
	NSString *const NSYearMonthWeekDesignations
	const NSPoint NSZeroPoint
	const NSRect NSZeroRect
	const NSSize NSZeroSize
	enum <anonymous> nulDev
	enum <anonymous> numberFormattingBadCurrencyPositionErr
	enum <anonymous> numberFormattingBadFormatErr
	enum <anonymous> numberFormattingBadNumberFormattingObjectErr
	enum <anonymous> numberFormattingBadOptionsErr
	enum <anonymous> numberFormattingBadTokenErr
	enum <anonymous> numberFormattingDelimiterMissingErr
	enum <anonymous> numberFormattingEmptyFormatErr
	enum <anonymous> numberFormattingLiteralMissingErr
	enum <anonymous> numberFormattingNotADigitErr
	enum <anonymous> numberFormattingNotANumberErr
	enum <anonymous> numberFormattingOverflowInDestinationErr
	enum <anonymous> numberFormattingSpuriousCharErr
	enum <anonymous> numberFormattingUnOrderedCurrencyRangeErr
	enum <anonymous> numberFormattingUnOrdredCurrencyRangeErr
	enum <anonymous> numberFortmattingNotADigitErr
	NXMouseButton NX_LeftButton
	NXMouseButton NX_OneButton
	NXMouseButton NX_RightButton
	enum <anonymous> offLinErr
	enum <anonymous> ogonek
	enum <anonymous> openErr
	enum <anonymous> openFolderIconResource
	char * optarg
	int opterr
	int optind
	int optopt
	int optreset
	enum <anonymous> opWrErr
	enum <anonymous> os2FontTableTag
	enum <anonymous> OSAControlFlowError
	enum <anonymous> OSADuplicateHandler
	enum <anonymous> OSADuplicateParameter
	enum <anonymous> OSADuplicateProperty
	enum <anonymous> OSAIllegalAccess
	enum <anonymous> OSAIllegalAssign
	enum <anonymous> OSAIllegalIndex
	enum <anonymous> OSAIllegalRange
	enum <anonymous> OSAInconsistentDeclarations
	enum <anonymous> OSAMessageNotUnderstood
	enum <anonymous> OSAMissingParameter
	enum <anonymous> OSAParameterMismatch
	enum <anonymous> OSASyntaxError
	enum <anonymous> OSASyntaxTypeError
	enum <anonymous> OSATokenTooLong
	enum <anonymous> OSAUndefinedHandler
	enum <anonymous> OSAUndefinedVariable
	enum <anonymous> OSBigEndian
	enum <anonymous> OSLittleEndian
	enum <anonymous> OSUnknownByteOrder
	enum <anonymous> outline
	enum <anonymous> OverallAct
	enum <anonymous> overDot
	enum <anonymous> ownedFolderIconResource
	idtype_t P_ALL
	idtype_t P_PGID
	idtype_t P_PID
	enum <anonymous> paramErr
	enum <anonymous> pArcAngle
	enum <anonymous> pasteDev
	enum <anonymous> pathNotVerifiedErr
	enum <anonymous> pathTooLongErr
	enum <anonymous> pATMachine
	enum <anonymous> pATType
	enum <anonymous> pATZone
	enum <anonymous> pBackgroundColor
	enum <anonymous> pBackgroundPattern
	enum <anonymous> pBestType
	enum <anonymous> pBounds
	enum <anonymous> pClass
	enum <anonymous> pClipboard
	enum <anonymous> pColor
	enum <anonymous> pColorTable
	enum <anonymous> pConduit
	enum <anonymous> pContents
	enum <anonymous> pCornerCurveHeight
	enum <anonymous> pCornerCurveWidth
	enum <anonymous> pDashStyle
	enum <anonymous> pDCMAccessMethod
	enum <anonymous> pDCMClass
	enum <anonymous> pDCMCopyright
	enum <anonymous> pDCMListing
	enum <anonymous> pDCMLocale
	enum <anonymous> pDCMMaintenance
	enum <anonymous> pDCMPermission
	enum <anonymous> pDefaultType
	enum <anonymous> pDefinitionRect
	enum <anonymous> pDeviceAddress
	enum <anonymous> pDeviceType
	enum <anonymous> pDNS
	enum <anonymous> pDNSForm
	enum <anonymous> pDottedDecimal
	enum <anonymous> pEnabled
	enum <anonymous> pEndPoint
	enum <anonymous> permErr
	enum <anonymous> perThousand
	enum <anonymous> pFillColor
	enum <anonymous> pFillPattern
	enum <anonymous> pFont
	enum <anonymous> pFormula
	enum <anonymous> pFTPKind
	enum <anonymous> pGraphicObjects
	enum <anonymous> pHasCloseBox
	enum <anonymous> pHasTitleBar
	enum <anonymous> pHost
	const double_t pi
	enum <anonymous> pickerCantLive
	enum <anonymous> pickerResourceError
	enum <anonymous> pictInfoIDErr
	enum <anonymous> pictInfoVerbErr
	enum <anonymous> pictInfoVersionErr
	enum <anonymous> pictureDataErr
	enum <anonymous> pID
	enum <anonymous> pIndex
	enum <anonymous> pInsertionLoc
	enum <anonymous> pIsFloating
	enum <anonymous> pIsFrontProcess
	enum <anonymous> pIsModal
	enum <anonymous> pIsModified
	enum <anonymous> pIsResizable
	enum <anonymous> pIsStationeryPad
	enum <anonymous> pIsZoomable
	enum <anonymous> pIsZoomed
	enum <anonymous> pItemNumber
	enum <anonymous> pixMapTooDeepErr
	enum <anonymous> pJustification
	enum <anonymous> pKeyKind
	enum <anonymous> pKeystrokeKey
	enum <anonymous> platform68k
	enum <anonymous> platformAIXppc
	enum <anonymous> platformIA32NativeEntryPoint
	enum <anonymous> platformInterpreted
	enum <anonymous> platformIRIXmips
	enum <anonymous> platformLinuxintel
	enum <anonymous> platformLinuxppc
	enum <anonymous> platformMacOSx86
	enum <anonymous> platformNeXT68k
	enum <anonymous> platformNeXTIntel
	enum <anonymous> platformNeXTppc
	enum <anonymous> platformNeXTsparc
	enum <anonymous> platformPowerPC
	enum <anonymous> platformPowerPC64NativeEntryPoint
	enum <anonymous> platformPowerPCNativeEntryPoint
	enum <anonymous> platformSunOSintel
	enum <anonymous> platformSunOSsparc
	enum <anonymous> platformWin32
	enum <anonymous> platformX86_64NativeEntryPoint
	enum <anonymous> pleaseCacheBit
	enum <anonymous> pleaseCacheMask
	enum <anonymous> pLineArrow
	enum <anonymous> pmBusyErr
	enum <anonymous> pMenuID
	enum <anonymous> pmField
	enum <anonymous> pmMask
	enum <anonymous> pModifiers
	enum <anonymous> pmRecvEndErr
	enum <anonymous> pmRecvStartErr
	enum <anonymous> pmReplyTOErr
	enum <anonymous> pmSendEndErr
	enum <anonymous> pmSendStartErr
	enum <anonymous> pName
	enum <anonymous> pNetwork
	enum <anonymous> pNewElementLoc
	enum <anonymous> pNode
	enum <anonymous> portClosedErr
	enum <anonymous> portInUse
	enum <anonymous> portNameExistsErr
	enum <anonymous> portNotCf
	enum <anonymous> portNotPwr
	enum <anonymous> posErr
	enum <anonymous> pPath
	enum <anonymous> pPenColor
	enum <anonymous> pPenPattern
	enum <anonymous> pPenWidth
	enum <anonymous> pPixelDepth
	enum <anonymous> pPointList
	enum <anonymous> pPointSize
	enum <anonymous> pPort
	enum <anonymous> pProtection
	enum <anonymous> pProtocol
	enum <anonymous> preferencesFolderIconResource
	enum <anonymous> prInitErr
	enum <anonymous> printerStatusOpCodeNotSupportedErr
	enum <anonymous> printMonitorFolderIconResource
	enum <anonymous> privateFolderIconResource
	enum <anonymous> processStateIncorrectErr
	enum <anonymous> procNotFound
	enum <anonymous> progressProcAborted
	enum <anonymous> propertyNotSupportedByNodeErr
	enum <anonymous> pRotation
	enum <anonymous> protocolErr
	enum <anonymous> prWrErr
	enum <anonymous> pScale
	enum <anonymous> pScheme
	enum <anonymous> pScript
	enum <anonymous> pScriptTag
	enum <anonymous> pSCSIBus
	enum <anonymous> pSCSILUN
	enum <anonymous> pSelected
	enum <anonymous> pSelection
	enum <anonymous> pSocket
	enum <anonymous> pStartAngle
	enum <anonymous> pStartPoint
	enum <anonymous> pTextColor
	enum <anonymous> pTextEncoding
	enum <anonymous> pTextFont
	enum <anonymous> pTextItemDelimiters
	enum <anonymous> pTextPointSize
	enum <anonymous> pTextStyles
	enum <anonymous> pTransferMode
	enum <anonymous> pTranslation
	enum <anonymous> pUniformStyles
	enum <anonymous> pUpdateOn
	enum <anonymous> pURL
	enum <anonymous> pUserName
	enum <anonymous> pUserPassword
	enum <anonymous> pUserSelection
	enum <anonymous> pVersion
	enum <anonymous> pVisible
	enum <anonymous> qErr
	enum <anonymous> qfcbNotCreatedErr
	enum <anonymous> qfcbNotFoundErr
	enum <anonymous> qtActionNotHandledErr
	enum <anonymous> qtmlDllEntryNotFoundErr
	enum <anonymous> qtmlDllLoadErr
	enum <anonymous> qtmlUninitialized
	enum <anonymous> qtNetworkAlreadyAllocatedErr
	enum <anonymous> qtParamErr
	enum <anonymous> qtsAddressBusyErr
	enum <anonymous> qtsBadDataErr
	enum <anonymous> qtsBadSelectorErr
	enum <anonymous> qtsBadStateErr
	enum <anonymous> qtsConnectionFailedErr
	enum <anonymous> qtsTimeoutErr
	enum <anonymous> qtsTooMuchDataErr
	enum <anonymous> qtsUnknownValueErr
	enum <anonymous> qtsUnsupportedDataTypeErr
	enum <anonymous> qtsUnsupportedFeatureErr
	enum <anonymous> qtsUnsupportedRateErr
	enum <anonymous> qtvrLibraryLoadErr
	enum <anonymous> qtvrUninitialized
	enum <anonymous> qtXMLApplicationErr
	enum <anonymous> qtXMLParseErr
	enum <anonymous> queueFull
	enum <anonymous> rAliasType
	enum <anonymous> rcDBAsyncNotSupp
	enum <anonymous> rcDBBadAsyncPB
	enum <anonymous> rcDBBadDDEV
	enum <anonymous> rcDBBadSessID
	enum <anonymous> rcDBBadSessNum
	enum <anonymous> rcDBBadType
	enum <anonymous> rcDBBreak
	enum <anonymous> rcDBError
	enum <anonymous> rcDBExec
	enum <anonymous> rcDBNoHandler
	enum <anonymous> rcDBNull
	enum <anonymous> rcDBPackNotInited
	enum <anonymous> rcDBValue
	enum <anonymous> rcDBWrongVersion
	enum <anonymous> rcvrErr
	enum <anonymous> rdVerify
	enum <anonymous> rdVerifyBit
	enum <anonymous> rdVerifyMask
	enum <anonymous> readErr
	enum <anonymous> readQErr
	enum <anonymous> readReference
	enum <anonymous> recNotFnd
	enum <anonymous> recordDataTooBigErr
	enum <anonymous> registerComponentAfterExisting
	enum <anonymous> registerComponentAliasesOnly
	enum <anonymous> registerComponentGlobal
	enum <anonymous> registerComponentNoDuplicates
	enum <anonymous> reqAborted
	enum <anonymous> reqFailed
	enum <anonymous> requiredFlagsDontMatch
	enum <anonymous> res1Field
	enum <anonymous> res2Field
	enum <anonymous> res3Field
	enum <anonymous> resAttrErr
	enum <anonymous> resChanged
	enum <anonymous> resChangedBit
	enum <anonymous> resFNotFound
	enum <anonymous> resLocked
	enum <anonymous> resLockedBit
	enum <anonymous> resNotFound
	enum <anonymous> resourceInMemory
	enum <anonymous> resPreload
	enum <anonymous> resPreloadBit
	enum <anonymous> resProblem
	enum <anonymous> resProtected
	enum <anonymous> resProtectedBit
	enum <anonymous> resPurgeable
	enum <anonymous> resPurgeableBit
	enum <anonymous> resSysHeap
	enum <anonymous> resSysHeapBit
	enum <anonymous> resSysRefBit
	enum <anonymous> retryComponentRegistrationErr
	enum <anonymous> rfNumErr
	enum <anonymous> rgnOverflowErr
	enum <anonymous> rgnTooBigErr
	enum <anonymous> rgnTooBigError
	enum <anonymous> rightSingGuillemet
	enum <anonymous> ringMark
	enum <anonymous> rmvRefFailed
	enum <anonymous> rmvResFailed
	enum <anonymous> romanAppFond
	enum <anonymous> romanFlags
	enum <anonymous> romanSysFond
	enum <anonymous> routingNotFoundErr
	enum <anonymous> sameFileErr
	enum <anonymous> samplesAlreadyInMediaErr
	enum <anonymous> scrapFlavorFlagsMismatchErr
	enum <anonymous> scrapFlavorNotFoundErr
	enum <anonymous> scrapFlavorSizeMismatchErr
	enum <anonymous> scrapPromiseNotKeptErr
	enum <anonymous> scriptCurLang
	enum <anonymous> scriptDefLang
	enum <anonymous> scTypeNotFoundErr
	enum <anonymous> sdmInitErr
	enum <anonymous> sdmJTInitErr
	enum <anonymous> sdmPRAMInitErr
	enum <anonymous> sdmPriInitErr
	enum <anonymous> sdmSRTInitErr
	enum <anonymous> secLeadingZ
	enum <anonymous> secondField
	enum <anonymous> secondMask
	enum <anonymous> sectNFErr
	enum <anonymous> seekErr
	enum <anonymous> selectorNotSupportedByNodeErr
	enum <anonymous> seNoDB
	enum <anonymous> sepNotConsistent
	enum <anonymous> sepNotIntlSep
	enum <anonymous> seqGrabInfoNotAvailable
	enum <anonymous> sessClosedErr
	enum <anonymous> sessTableErr
	enum <anonymous> settingNotSupportedByNodeErr
	enum <anonymous> shadow
	enum <anonymous> sharedFolderIconResource
	enum <anonymous> shortDate
	enum <anonymous> shutDownAlert
	enum <anonymous> siBadDeviceName
	enum <anonymous> siBadRefNum
	enum <anonymous> siBadSoundInDevice
	enum <anonymous> siDeviceBusyErr
	int signgam
	enum <anonymous> siHardDriveTooSlow
	enum <anonymous> siInitSDTblErr
	enum <anonymous> siInitSPTblErr
	enum <anonymous> siInitVBLQsErr
	enum <anonymous> siInputDeviceErr
	enum <anonymous> siInvalidCompression
	enum <anonymous> siInvalidSampleRate
	enum <anonymous> siInvalidSampleSize
	enum <anonymous> siNoBufferSpecified
	enum <anonymous> siNoSoundInHardware
	enum <anonymous> sIQType
	enum <anonymous> siUnknownInfoType
	enum <anonymous> siUnknownQuality
	enum <anonymous> siVBRCompressionNotSupported
	enum <anonymous> sizeof_sfntCMapEncoding
	enum <anonymous> sizeof_sfntCMapExtendedSubHeader
	enum <anonymous> sizeof_sfntCMapHeader
	enum <anonymous> sizeof_sfntCMapSubHeader
	enum <anonymous> sizeof_sfntDescriptorHeader
	enum <anonymous> sizeof_sfntDirectory
	enum <anonymous> sizeof_sfntInstance
	enum <anonymous> sizeof_sfntNameHeader
	enum <anonymous> sizeof_sfntNameRecord
	enum <anonymous> sizeof_sfntVariationAxis
	enum <anonymous> sizeof_sfntVariationHeader
	enum <anonymous> sktClosedErr
	enum <anonymous> sleepQType
	enum <anonymous> slotNumErr
	enum <anonymous> slpQType
	enum <anonymous> SlpTypeErr
	enum <anonymous> small1BitMask
	enum <anonymous> small4BitData
	enum <anonymous> small8BitData
	enum <anonymous> smallDateBit
	enum <anonymous> smAllScripts
	enum <anonymous> smAmharic
	enum <anonymous> smArabic
	enum <anonymous> smArmenian
	enum <anonymous> smBadBoardId
	enum <anonymous> smBadRefId
	enum <anonymous> smBadScript
	enum <anonymous> smBadsList
	enum <anonymous> smBadsPtrErr
	enum <anonymous> smBadVerb
	enum <anonymous> smBengali
	enum <anonymous> smBLFieldBad
	enum <anonymous> smBlkMoveErr
	enum <anonymous> smBurmese
	enum <anonymous> smBusErrTO
	enum <anonymous> smByteLanesErr
	enum <anonymous> smcClassMask
	enum <anonymous> smcDoubleMask
	enum <anonymous> smCentralEuroRoman
	enum <anonymous> smChar1byte
	enum <anonymous> smChar2byte
	enum <anonymous> smCharAscii
	enum <anonymous> smCharBidirect
	enum <anonymous> smCharBopomofo
	enum <anonymous> smCharContextualLR
	enum <anonymous> smCharEuro
	enum <anonymous> smCharExtAscii
	enum <anonymous> smCharFISGana
	enum <anonymous> smCharFISGreek
	enum <anonymous> smCharFISIdeo
	enum <anonymous> smCharFISKana
	enum <anonymous> smCharFISRussian
	enum <anonymous> smCharGanaKana
	enum <anonymous> smCharHangul
	enum <anonymous> smCharHiragana
	enum <anonymous> smCharHorizontal
	enum <anonymous> smCharIdeographic
	enum <anonymous> smCharJamo
	enum <anonymous> smCharKatakana
	enum <anonymous> smCharLeft
	enum <anonymous> smCharLower
	enum <anonymous> smCharNonContextualLR
	enum <anonymous> smCharPunct
	enum <anonymous> smCharRight
	enum <anonymous> smCharTwoByteGreek
	enum <anonymous> smCharTwoByteRussian
	enum <anonymous> smCharUpper
	enum <anonymous> smCharVertical
	enum <anonymous> smChinese
	enum <anonymous> smCkStatusErr
	enum <anonymous> smCodeRevErr
	enum <anonymous> smcOrientationMask
	enum <anonymous> smCPUErr
	enum <anonymous> smCRCFail
	enum <anonymous> smcReserved
	enum <anonymous> smcRightMask
	enum <anonymous> smcTypeMask
	enum <anonymous> smcUpperMask
	enum <anonymous> smCurrentScript
	enum <anonymous> smCyrillic
	enum <anonymous> smDevanagari
	enum <anonymous> smDisabledSlot
	enum <anonymous> smDisDrvrNamErr
	enum <anonymous> smDisposePErr
	enum <anonymous> smEastEurRoman
	enum <anonymous> smEmptySlot
	enum <anonymous> smEthiopic
	enum <anonymous> smExtArabic
	enum <anonymous> smfDisableKeyScriptSync
	enum <anonymous> smfDisableKeyScriptSyncMask
	enum <anonymous> smfDualCaret
	enum <anonymous> smFHBlkDispErr
	enum <anonymous> smFHBlockRdErr
	enum <anonymous> smFirstByte
	enum <anonymous> smFISClassLvl1
	enum <anonymous> smFISClassLvl2
	enum <anonymous> smFISClassUser
	enum <anonymous> smfNameTagEnab
	enum <anonymous> smFondEnd
	enum <anonymous> smFondStart
	enum <anonymous> smFormatErr
	enum <anonymous> smfShowIcon
	enum <anonymous> smfUseAssocFontInfo
	enum <anonymous> smGeez
	enum <anonymous> smGeorgian
	enum <anonymous> smGetDrvrNamErr
	enum <anonymous> smGetPRErr
	enum <anonymous> smGreek
	enum <anonymous> smGujarati
	enum <anonymous> smGurmukhi
	enum <anonymous> smHebrew
	enum <anonymous> smIdeographicLevel1
	enum <anonymous> smIdeographicLevel2
	enum <anonymous> smIdeographicUser
	enum <anonymous> smInitStatVErr
	enum <anonymous> smInitTblVErr
	enum <anonymous> smJamoBogJaeum
	enum <anonymous> smJamoBogMoeum
	enum <anonymous> smJamoJaeum
	enum <anonymous> smJamoMoeum
	enum <anonymous> smJapanese
	enum <anonymous> smKanaHardOK
	enum <anonymous> smKanaSmall
	enum <anonymous> smKanaSoftOK
	enum <anonymous> smKannada
	enum <anonymous> smKCHRCache
	enum <anonymous> smKeyDisableKybds
	enum <anonymous> smKeyDisableKybdSwitch
	enum <anonymous> smKeyEnableKybds
	enum <anonymous> smKeyForceKeyScriptBit
	enum <anonymous> smKeyForceKeyScriptMask
	enum <anonymous> smKeyNextInputMethod
	enum <anonymous> smKeyNextKybd
	enum <anonymous> smKeyNextScript
	enum <anonymous> smKeyRoman
	enum <anonymous> smKeyScript
	enum <anonymous> smKeySetDirLeftRight
	enum <anonymous> smKeySetDirRightLeft
	enum <anonymous> smKeySwapInputMethod
	enum <anonymous> smKeySwapKybd
	enum <anonymous> smKeySwapScript
	enum <anonymous> smKeySysScript
	enum <anonymous> smKeyToggleDirection
	enum <anonymous> smKeyToggleInline
	enum <anonymous> smKhmer
	enum <anonymous> smKlingon
	enum <anonymous> smKorean
	enum <anonymous> smLao
	enum <anonymous> smLaotian
	enum <anonymous> smLastByte
	enum <anonymous> smMalayalam
	enum <anonymous> smMaskAll
	enum <anonymous> smMaskAscii
	enum <anonymous> smMaskAscii1
	enum <anonymous> smMaskAscii2
	enum <anonymous> smMaskBopomofo2
	enum <anonymous> smMaskGana2
	enum <anonymous> smMaskHangul2
	enum <anonymous> smMaskJamo2
	enum <anonymous> smMaskKana1
	enum <anonymous> smMaskKana2
	enum <anonymous> smMaskNative
	enum <anonymous> smMiddleByte
	enum <anonymous> smMongolian
	enum <anonymous> smNewPErr
	enum <anonymous> smNilsBlockErr
	enum <anonymous> smNoBoardId
	enum <anonymous> smNoBoardSRsrc
	enum <anonymous> smNoDir
	enum <anonymous> smNoGoodOpens
	enum <anonymous> smNoJmpTbl
	enum <anonymous> smNoMoresRsrcs
	enum <anonymous> smNosInfoArray
	enum <anonymous> smNotInstalled
	enum <anonymous> smNumberPartsTable
	enum <anonymous> smOffsetErr
	enum <anonymous> smOriya
	enum <anonymous> smPRAMInitErr
	enum <anonymous> smPriInitErr
	enum <anonymous> smPunctBlank
	enum <anonymous> smPunctGraphic
	enum <anonymous> smPunctNormal
	enum <anonymous> smPunctNumber
	enum <anonymous> smPunctRepeat
	enum <anonymous> smPunctSymbol
	enum <anonymous> smRecNotFnd
	enum <anonymous> smRegionCode
	enum <anonymous> smReservedErr
	enum <anonymous> smReservedSlot
	enum <anonymous> smResrvErr
	enum <anonymous> smRevisionErr
	enum <anonymous> smRoman
	enum <anonymous> smRSymbol
	enum <anonymous> smRussian
	enum <anonymous> smSDMInitErr
	enum <anonymous> smSelOOBErr
	enum <anonymous> smsfAutoInit
	enum <anonymous> smsfB0Digits
	enum <anonymous> smsfContext
	enum <anonymous> smsfForms
	enum <anonymous> smsfIntellCP
	enum <anonymous> smsfLigatures
	enum <anonymous> smsfNatCase
	enum <anonymous> smsfNoForceFont
	enum <anonymous> smsfReverse
	enum <anonymous> smsfSingByte
	enum <anonymous> smsfSynchUnstyledTE
	enum <anonymous> smsfUnivExt
	enum <anonymous> smsGetDrvrErr
	enum <anonymous> smSimpChinese
	enum <anonymous> smSindhi
	enum <anonymous> smSingleByte
	enum <anonymous> smSinhalese
	enum <anonymous> smSlavic
	enum <anonymous> smSlotOOBErr
	enum <anonymous> smsPointerNil
	enum <anonymous> smSRTInitErr
	enum <anonymous> smSRTOvrFlErr
	enum <anonymous> smSysScript
	enum <anonymous> smSystemScript
	enum <anonymous> smTamil
	enum <anonymous> smTelugu
	enum <anonymous> smThai
	enum <anonymous> smTibetan
	enum <anonymous> smTradChinese
	enum <anonymous> smTransAscii
	enum <anonymous> smTransAscii1
	enum <anonymous> smTransAscii2
	enum <anonymous> smTransBopomofo2
	enum <anonymous> smTransCase
	enum <anonymous> smTransGana2
	enum <anonymous> smTransHangul2
	enum <anonymous> smTransHangulFormat
	enum <anonymous> smTransJamo2
	enum <anonymous> smTransKana1
	enum <anonymous> smTransKana2
	enum <anonymous> smTransLower
	enum <anonymous> smTransNative
	enum <anonymous> smTransPreDoubleByting
	enum <anonymous> smTransPreLowerCasing
	enum <anonymous> smTransRuleBaseFormat
	enum <anonymous> smTransSystem
	enum <anonymous> smTransUpper
	enum <anonymous> smUnExBusErr
	enum <anonymous> smUnicodeScript
	enum <anonymous> smUninterp
	enum <anonymous> smUnTokenTable
	enum <anonymous> smUprHalfCharSet
	enum <anonymous> smVietnamese
	enum <anonymous> smWhiteSpaceList
	enum <anonymous> smWordSelectTable
	enum <anonymous> smWordWrapTable
	enum <anonymous> soCharacterMode
	enum <anonymous> soCommandDelimiter
	enum <anonymous> soCurrentA5
	enum <anonymous> soCurrentVoice
	enum <anonymous> soErrorCallBack
	enum <anonymous> soErrors
	enum <anonymous> soInputMode
	enum <anonymous> soNumberMode
	enum <anonymous> soOutputToAudioDevice
	enum <anonymous> soOutputToExtAudioFile
	enum <anonymous> soOutputToFileWithCFURL
	enum <anonymous> soPhonemeCallBack
	enum <anonymous> soPhonemeOptions
	enum <anonymous> soPhonemeSymbols
	enum <anonymous> soPitchBase
	enum <anonymous> soPitchMod
	enum <anonymous> soRate
	enum <anonymous> soRecentSync
	enum <anonymous> soRefCon
	enum <anonymous> soReset
	enum <anonymous> sortsAfter
	enum <anonymous> sortsBefore
	enum <anonymous> sortsEqual
	enum <anonymous> soSoundOutput
	enum <anonymous> soSpeechDoneCallBack
	enum <anonymous> soStatus
	enum <anonymous> soSyncCallBack
	enum <anonymous> soSynthExtension
	enum <anonymous> soSynthType
	enum <anonymous> soTextDoneCallBack
	enum <anonymous> SoundDataID
	enum <anonymous> soundSupportNotAvailableErr
	enum <anonymous> sourceNotFoundErr
	enum <anonymous> soVoiceDescription
	enum <anonymous> soVoiceFile
	enum <anonymous> soVolume
	enum <anonymous> soWordCallBack
	enum <anonymous> spdAdjErr
	enum <anonymous> srcCopy
	enum <anonymous> SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA
	enum <anonymous> SSL_DH_anon_EXPORT_WITH_RC4_40_MD5
	enum <anonymous> SSL_DH_anon_WITH_3DES_EDE_CBC_SHA
	enum <anonymous> SSL_DH_anon_WITH_DES_CBC_SHA
	enum <anonymous> SSL_DH_anon_WITH_RC4_128_MD5
	enum <anonymous> SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA
	enum <anonymous> SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA
	enum <anonymous> SSL_DH_DSS_WITH_DES_CBC_SHA
	enum <anonymous> SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA
	enum <anonymous> SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA
	enum <anonymous> SSL_DH_RSA_WITH_DES_CBC_SHA
	enum <anonymous> SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA
	enum <anonymous> SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA
	enum <anonymous> SSL_DHE_DSS_WITH_DES_CBC_SHA
	enum <anonymous> SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA
	enum <anonymous> SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA
	enum <anonymous> SSL_DHE_RSA_WITH_DES_CBC_SHA
	enum <anonymous> SSL_FORTEZZA_DMS_WITH_FORTEZZA_CBC_SHA
	enum <anonymous> SSL_FORTEZZA_DMS_WITH_NULL_SHA
	enum <anonymous> SSL_NO_SUCH_CIPHERSUITE
	enum <anonymous> SSL_NULL_WITH_NULL_NULL
	enum <anonymous> SSL_RSA_EXPORT_WITH_DES40_CBC_SHA
	enum <anonymous> SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5
	enum <anonymous> SSL_RSA_EXPORT_WITH_RC4_40_MD5
	enum <anonymous> SSL_RSA_WITH_3DES_EDE_CBC_MD5
	enum <anonymous> SSL_RSA_WITH_3DES_EDE_CBC_SHA
	enum <anonymous> SSL_RSA_WITH_DES_CBC_MD5
	enum <anonymous> SSL_RSA_WITH_DES_CBC_SHA
	enum <anonymous> SSL_RSA_WITH_IDEA_CBC_MD5
	enum <anonymous> SSL_RSA_WITH_IDEA_CBC_SHA
	enum <anonymous> SSL_RSA_WITH_NULL_MD5
	enum <anonymous> SSL_RSA_WITH_NULL_SHA
	enum <anonymous> SSL_RSA_WITH_RC2_CBC_MD5
	enum <anonymous> SSL_RSA_WITH_RC4_128_MD5
	enum <anonymous> SSL_RSA_WITH_RC4_128_SHA
	enum <anonymous> staleEditState
	enum <anonymous> startupFolderIconResource
	enum <anonymous> statusErr
	enum <anonymous> streamingNodeNotReadyErr
	enum <anonymous> stringOverflow
	enum <anonymous> strUserBreak
	char * suboptarg
	enum <anonymous> supDay
	enum <anonymous> supMonth
	enum <anonymous> supWeek
	enum <anonymous> supYear
	enum <anonymous> svAll1BitData
	enum <anonymous> svAll4BitData
	enum <anonymous> svAll8BitData
	enum <anonymous> svAllAvailableData
	enum <anonymous> svAllLargeData
	enum <anonymous> svAllMiniData
	enum <anonymous> svAllSmallData
	enum <anonymous> svDisabled
	enum <anonymous> svLarge1Bit
	enum <anonymous> svLarge4Bit
	enum <anonymous> svLarge8Bit
	enum <anonymous> svMini1Bit
	enum <anonymous> svMini4Bit
	enum <anonymous> svMini8Bit
	enum <anonymous> svSmall1Bit
	enum <anonymous> svSmall4Bit
	enum <anonymous> svSmall8Bit
	enum <anonymous> svTempDisable
	enum <anonymous> synthesizerNotRespondingOSErr
	enum <anonymous> synthesizerOSErr
	enum <anonymous> synthNotReady
	enum <anonymous> synthOpenFailed
	const char *const [] sys_errlist
	const int sys_nerr
	const char *const [32] sys_siglist
	const char *const [32] sys_signame
	enum <anonymous> systemCurLang
	enum <anonymous> systemDefLang
	enum <anonymous> systemFolderIconResource
	task_role TASK_BACKGROUND_APPLICATION
	task_role TASK_CONTROL_APPLICATION
	task_role TASK_DEFAULT_APPLICATION
	task_role TASK_FOREGROUND_APPLICATION
	task_role TASK_GRAPHICS_SERVER
	task_role TASK_NONUI_APPLICATION
	task_role TASK_RENICED
	task_role TASK_THROTTLE_APPLICATION
	task_role TASK_UNSPECIFIED
	enum <anonymous> telAlreadyOpen
	enum <anonymous> telAPattNotSupp
	enum <anonymous> telAutoAnsNotOn
	enum <anonymous> telBadAPattErr
	enum <anonymous> telBadBearerType
	enum <anonymous> telBadCAErr
	enum <anonymous> telBadCodeResource
	enum <anonymous> telBadDisplayMode
	enum <anonymous> telBadDNDType
	enum <anonymous> telBadDNErr
	enum <anonymous> telBadDNType
	enum <anonymous> telBadFeatureID
	enum <anonymous> telBadFunction
	enum <anonymous> telBadFwdType
	enum <anonymous> telBadHandErr
	enum <anonymous> telBadHTypeErr
	enum <anonymous> telBadIndex
	enum <anonymous> telBadIntercomID
	enum <anonymous> telBadIntExt
	enum <anonymous> telBadLevelErr
	enum <anonymous> telBadPageID
	enum <anonymous> telBadParkID
	enum <anonymous> telBadPickupGroupID
	enum <anonymous> telBadProcErr
	enum <anonymous> telBadProcID
	enum <anonymous> telBadRate
	enum <anonymous> telBadSampleRate
	enum <anonymous> telBadSelect
	enum <anonymous> telBadStateErr
	enum <anonymous> telBadSWErr
	enum <anonymous> telBadTermErr
	enum <anonymous> telBadVTypeErr
	enum <anonymous> telCANotAcceptable
	enum <anonymous> telCANotDeflectable
	enum <anonymous> telCANotRejectable
	enum <anonymous> telCAUnavail
	enum <anonymous> telCBErr
	enum <anonymous> telConfErr
	enum <anonymous> telConfLimitErr
	enum <anonymous> telConfLimitExceeded
	enum <anonymous> telConfNoLimit
	enum <anonymous> telConfRej
	enum <anonymous> telDetAlreadyOn
	enum <anonymous> telDeviceNotFound
	enum <anonymous> telDisplayModeNotSupp
	enum <anonymous> telDNDTypeNotSupp
	enum <anonymous> telDNTypeNotSupp
	enum <anonymous> telFeatActive
	enum <anonymous> telFeatNotAvail
	enum <anonymous> telFeatNotSub
	enum <anonymous> telFeatNotSupp
	enum <anonymous> telFwdTypeNotSupp
	enum <anonymous> telGenericError
	enum <anonymous> telHTypeNotSupp
	enum <anonymous> telIndexNotSupp
	enum <anonymous> telInitFailed
	enum <anonymous> telIntExtNotSupp
	enum <anonymous> telNoCallbackRef
	enum <anonymous> telNoCommFolder
	enum <anonymous> telNoErr
	enum <anonymous> telNoMemErr
	enum <anonymous> telNoOpenErr
	enum <anonymous> telNoSuchTool
	enum <anonymous> telNotEnoughdspBW
	enum <anonymous> telNoTools
	enum <anonymous> telPBErr
	enum <anonymous> telStateNotSupp
	enum <anonymous> telStillNeeded
	enum <anonymous> telTermNotOpen
	enum <anonymous> telTransferErr
	enum <anonymous> telTransferRej
	enum <anonymous> telUnknownErr
	enum <anonymous> telValidateFailed
	enum <anonymous> telVTypeNotSupp
	enum <anonymous> teScrapSizeErr
	enum <anonymous> textParserBadParamErr
	enum <anonymous> textParserBadParserObjectErr
	enum <anonymous> textParserBadTextEncodingErr
	enum <anonymous> textParserBadTextLanguageErr
	enum <anonymous> textParserBadTokenValueErr
	enum <anonymous> textParserNoMoreTextErr
	enum <anonymous> textParserNoMoreTokensErr
	enum <anonymous> textParserNoSuchTokenFoundErr
	enum <anonymous> textParserObjectNotFoundErr
	enum <anonymous> textParserParamErr
	enum <anonymous> themeBadCursorIndexErr
	enum <anonymous> themeBadTextColorErr
	enum <anonymous> themeHasNoAccentsErr
	enum <anonymous> themeInvalidBrushErr
	enum <anonymous> themeMonitorDepthNotSupportedErr
	enum <anonymous> themeNoAppropriateBrushErr
	enum <anonymous> themeProcessNotRegisteredErr
	enum <anonymous> themeProcessRegisteredErr
	enum <anonymous> themeScriptFontNotFoundErr
	enum <anonymous> threadBadAppContextErr
	enum <anonymous> threadNotFoundErr
	enum <anonymous> threadProtocolErr
	enum <anonymous> threadTooManyReqsErr
	enum <anonymous> tilde
	enum <anonymous> timeCycle12
	enum <anonymous> timeCycle24
	enum <anonymous> timeCycleZero
	enum <anonymous> timeNotInMedia
	enum <anonymous> timeNotInTrack
	enum <anonymous> timeNotInViewErr
	long timezone
	enum <anonymous> tk0BadErr
	enum <anonymous> TLS_DH_anon_WITH_3DES_EDE_CBC_SHA
	enum <anonymous> TLS_DH_anon_WITH_AES_128_CBC_SHA
	enum <anonymous> TLS_DH_anon_WITH_AES_128_CBC_SHA256
	enum <anonymous> TLS_DH_anon_WITH_AES_128_GCM_SHA256
	enum <anonymous> TLS_DH_anon_WITH_AES_256_CBC_SHA
	enum <anonymous> TLS_DH_anon_WITH_AES_256_CBC_SHA256
	enum <anonymous> TLS_DH_anon_WITH_AES_256_GCM_SHA384
	enum <anonymous> TLS_DH_anon_WITH_RC4_128_MD5
	enum <anonymous> TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA
	enum <anonymous> TLS_DH_DSS_WITH_AES_128_CBC_SHA
	enum <anonymous> TLS_DH_DSS_WITH_AES_128_CBC_SHA256
	enum <anonymous> TLS_DH_DSS_WITH_AES_128_GCM_SHA256
	enum <anonymous> TLS_DH_DSS_WITH_AES_256_CBC_SHA
	enum <anonymous> TLS_DH_DSS_WITH_AES_256_CBC_SHA256
	enum <anonymous> TLS_DH_DSS_WITH_AES_256_GCM_SHA384
	enum <anonymous> TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA
	enum <anonymous> TLS_DH_RSA_WITH_AES_128_CBC_SHA
	enum <anonymous> TLS_DH_RSA_WITH_AES_128_CBC_SHA256
	enum <anonymous> TLS_DH_RSA_WITH_AES_128_GCM_SHA256
	enum <anonymous> TLS_DH_RSA_WITH_AES_256_CBC_SHA
	enum <anonymous> TLS_DH_RSA_WITH_AES_256_CBC_SHA256
	enum <anonymous> TLS_DH_RSA_WITH_AES_256_GCM_SHA384
	enum <anonymous> TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA
	enum <anonymous> TLS_DHE_DSS_WITH_AES_128_CBC_SHA
	enum <anonymous> TLS_DHE_DSS_WITH_AES_128_CBC_SHA256
	enum <anonymous> TLS_DHE_DSS_WITH_AES_128_GCM_SHA256
	enum <anonymous> TLS_DHE_DSS_WITH_AES_256_CBC_SHA
	enum <anonymous> TLS_DHE_DSS_WITH_AES_256_CBC_SHA256
	enum <anonymous> TLS_DHE_DSS_WITH_AES_256_GCM_SHA384
	enum <anonymous> TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
	enum <anonymous> TLS_DHE_RSA_WITH_AES_128_CBC_SHA
	enum <anonymous> TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
	enum <anonymous> TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
	enum <anonymous> TLS_DHE_RSA_WITH_AES_256_CBC_SHA
	enum <anonymous> TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
	enum <anonymous> TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
	enum <anonymous> TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA
	enum <anonymous> TLS_ECDH_anon_WITH_AES_128_CBC_SHA
	enum <anonymous> TLS_ECDH_anon_WITH_AES_256_CBC_SHA
	enum <anonymous> TLS_ECDH_anon_WITH_NULL_SHA
	enum <anonymous> TLS_ECDH_anon_WITH_RC4_128_SHA
	enum <anonymous> TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA
	enum <anonymous> TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA
	enum <anonymous> TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256
	enum <anonymous> TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
	enum <anonymous> TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA
	enum <anonymous> TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384
	enum <anonymous> TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
	enum <anonymous> TLS_ECDH_ECDSA_WITH_NULL_SHA
	enum <anonymous> TLS_ECDH_ECDSA_WITH_RC4_128_SHA
	enum <anonymous> TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA
	enum <anonymous> TLS_ECDH_RSA_WITH_AES_128_CBC_SHA
	enum <anonymous> TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256
	enum <anonymous> TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256
	enum <anonymous> TLS_ECDH_RSA_WITH_AES_256_CBC_SHA
	enum <anonymous> TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384
	enum <anonymous> TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384
	enum <anonymous> TLS_ECDH_RSA_WITH_NULL_SHA
	enum <anonymous> TLS_ECDH_RSA_WITH_RC4_128_SHA
	enum <anonymous> TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA
	enum <anonymous> TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
	enum <anonymous> TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
	enum <anonymous> TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
	enum <anonymous> TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
	enum <anonymous> TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
	enum <anonymous> TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
	enum <anonymous> TLS_ECDHE_ECDSA_WITH_NULL_SHA
	enum <anonymous> TLS_ECDHE_ECDSA_WITH_RC4_128_SHA
	enum <anonymous> TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
	enum <anonymous> TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
	enum <anonymous> TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
	enum <anonymous> TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
	enum <anonymous> TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
	enum <anonymous> TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
	enum <anonymous> TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
	enum <anonymous> TLS_ECDHE_RSA_WITH_NULL_SHA
	enum <anonymous> TLS_ECDHE_RSA_WITH_RC4_128_SHA
	enum <anonymous> TLS_EMPTY_RENEGOTIATION_INFO_SCSV
	enum <anonymous> TLS_NULL_WITH_NULL_NULL
	enum <anonymous> TLS_RSA_WITH_3DES_EDE_CBC_SHA
	enum <anonymous> TLS_RSA_WITH_AES_128_CBC_SHA
	enum <anonymous> TLS_RSA_WITH_AES_128_CBC_SHA256
	enum <anonymous> TLS_RSA_WITH_AES_128_GCM_SHA256
	enum <anonymous> TLS_RSA_WITH_AES_256_CBC_SHA
	enum <anonymous> TLS_RSA_WITH_AES_256_CBC_SHA256
	enum <anonymous> TLS_RSA_WITH_AES_256_GCM_SHA384
	enum <anonymous> TLS_RSA_WITH_NULL_MD5
	enum <anonymous> TLS_RSA_WITH_NULL_SHA
	enum <anonymous> TLS_RSA_WITH_NULL_SHA256
	enum <anonymous> TLS_RSA_WITH_RC4_128_MD5
	enum <anonymous> TLS_RSA_WITH_RC4_128_SHA
	enum <anonymous> tmfoErr
	enum <anonymous> tmwdoErr
	enum <anonymous> togChar12HourBit
	enum <anonymous> togCharZCycleBit
	enum <anonymous> togDelta12HourBit
	enum <anonymous> toggleBadChar
	enum <anonymous> toggleBadDelta
	enum <anonymous> toggleBadField
	enum <anonymous> toggleBadNum
	enum <anonymous> toggleErr3
	enum <anonymous> toggleErr4
	enum <anonymous> toggleErr5
	enum <anonymous> toggleOK
	enum <anonymous> toggleOutOfRange
	enum <anonymous> toggleUndefined
	enum <anonymous> toggleUnknown
	enum <anonymous> tokDecPoint
	enum <anonymous> tokEMinus
	enum <anonymous> token1Quote
	enum <anonymous> token2Equal
	enum <anonymous> token2Quote
	enum <anonymous> tokenAlpha
	enum <anonymous> tokenAltNum
	enum <anonymous> tokenAltReal
	enum <anonymous> tokenAmpersand
	enum <anonymous> tokenAsterisk
	enum <anonymous> tokenAtSign
	enum <anonymous> tokenBackSlash
	enum <anonymous> tokenBar
	enum <anonymous> tokenCapPi
	enum <anonymous> tokenCarat
	enum <anonymous> tokenCaret
	enum <anonymous> tokenCenterDot
	enum <anonymous> tokenColon
	enum <anonymous> tokenColonEqual
	enum <anonymous> tokenComma
	enum <anonymous> tokenDivide
	enum <anonymous> tokenDollar
	enum <anonymous> tokenEllipsis
	enum <anonymous> tokenEmpty
	enum <anonymous> tokenEqual
	enum <anonymous> tokenErr
	enum <anonymous> tokenEscape
	enum <anonymous> tokenExclam
	enum <anonymous> tokenExclamEqual
	enum <anonymous> tokenFraction
	enum <anonymous> tokenGreat
	enum <anonymous> tokenGreatEqual1
	enum <anonymous> tokenGreatEqual2
	enum <anonymous> tokenHash
	enum <anonymous> tokenInfinity
	enum <anonymous> tokenIntegral
	enum <anonymous> tokenIntl
	enum <anonymous> tokenIntlCurrency
	enum <anonymous> tokenLeft1Quote
	enum <anonymous> tokenLeft2Quote
	enum <anonymous> tokenLeftBracket
	enum <anonymous> tokenLeftComment
	enum <anonymous> tokenLeftCurly
	enum <anonymous> tokenLeftEnclose
	enum <anonymous> tokenLeftLit
	enum <anonymous> tokenLeftParen
	enum <anonymous> tokenLeftSingGuillemet
	enum <anonymous> tokenLess
	enum <anonymous> tokenLessEqual1
	enum <anonymous> tokenLessEqual2
	enum <anonymous> tokenLessGreat
	enum <anonymous> tokenLiteral
	enum <anonymous> tokenMicro
	enum <anonymous> tokenMinus
	enum <anonymous> tokenNewLine
	enum <anonymous> tokenNil
	enum <anonymous> tokenNoBreakSpace
	enum <anonymous> tokenNotEqual
	enum <anonymous> tokenNumeric
	enum <anonymous> tokenOK
	enum <anonymous> tokenOverflow
	enum <anonymous> tokenPercent
	enum <anonymous> tokenPeriod
	enum <anonymous> tokenPerThousand
	enum <anonymous> tokenPi
	enum <anonymous> tokenPlus
	enum <anonymous> tokenPlusMinus
	enum <anonymous> tokenQuestion
	enum <anonymous> tokenRealNum
	enum <anonymous> tokenReserve1
	enum <anonymous> tokenReserve2
	enum <anonymous> tokenRight1Quote
	enum <anonymous> tokenRight2Quote
	enum <anonymous> tokenRightBracket
	enum <anonymous> tokenRightComment
	enum <anonymous> tokenRightCurly
	enum <anonymous> tokenRightEnclose
	enum <anonymous> tokenRightLit
	enum <anonymous> tokenRightParen
	enum <anonymous> tokenRightSingGuillemet
	enum <anonymous> tokenRoot
	enum <anonymous> tokenSemicolon
	enum <anonymous> tokenSigma
	enum <anonymous> tokenSlash
	enum <anonymous> tokenTilda
	enum <anonymous> tokenTilde
	enum <anonymous> tokenUnderline
	enum <anonymous> tokenUnknown
	enum <anonymous> tokenWhite
	enum <anonymous> tokEPlus
	enum <anonymous> tokEscape
	enum <anonymous> tokLeader
	enum <anonymous> tokLeadPlacer
	enum <anonymous> tokLeftQuote
	enum <anonymous> tokMaxSymbols
	enum <anonymous> tokMinusSign
	enum <anonymous> tokNonLeader
	enum <anonymous> tokPercent
	enum <anonymous> tokPlusSign
	enum <anonymous> tokReserved
	enum <anonymous> tokRightQuote
	enum <anonymous> tokSeparator
	enum <anonymous> tokThousands
	enum <anonymous> tokZeroLead
	enum <anonymous> tooManyReqs
	enum <anonymous> tooManySeps
	enum <anonymous> tooManySkts
	enum <anonymous> trackIDNotFound
	enum <anonymous> trackNotInMovie
	enum <anonymous> trashIconResource
	enum <anonymous> true32b
	enum <anonymous> tsmAlreadyRegisteredErr
	enum <anonymous> tsmCantChangeForcedClassStateErr
	enum <anonymous> tsmCantOpenComponentErr
	enum <anonymous> tsmComponentAlreadyOpenErr
	enum <anonymous> tsmComponentNoErr
	enum <anonymous> tsmComponentPropertyNotFoundErr
	enum <anonymous> tsmComponentPropertyUnsupportedErr
	enum <anonymous> tsmDefaultIsNotInputMethodErr
	enum <anonymous> tsmDocNotActiveErr
	enum <anonymous> tsmDocPropertyBufferTooSmallErr
	enum <anonymous> tsmDocPropertyNotFoundErr
	enum <anonymous> tsmDocumentOpenErr
	enum <anonymous> tsmInputMethodIsOldErr
	enum <anonymous> tsmInputMethodNotFoundErr
	enum <anonymous> tsmInputModeChangeFailedErr
	enum <anonymous> tsmInvalidContext
	enum <anonymous> tsmInvalidDocIDErr
	enum <anonymous> tsmNeverRegisteredErr
	enum <anonymous> tsmNoHandler
	enum <anonymous> tsmNoMoreTokens
	enum <anonymous> tsmNoOpenTSErr
	enum <anonymous> tsmNoStem
	enum <anonymous> tsmNotAnAppErr
	enum <anonymous> tsmScriptHasNoIMErr
	enum <anonymous> tsmTextServiceNotFoundErr
	enum <anonymous> tsmTSHasNoMenuErr
	enum <anonymous> tsmTSMDocBusyErr
	enum <anonymous> tsmTSNotOpenErr
	enum <anonymous> tsmUnknownErr
	enum <anonymous> tsmUnsupportedTypeErr
	enum <anonymous> tsmUnsupScriptLanguageErr
	enum <anonymous> tsmUseInputWindowErr
	enum <anonymous> ttDisabled
	enum <anonymous> ttLabel1
	enum <anonymous> ttLabel2
	enum <anonymous> ttLabel3
	enum <anonymous> ttLabel4
	enum <anonymous> ttLabel5
	enum <anonymous> ttLabel6
	enum <anonymous> ttLabel7
	enum <anonymous> ttNone
	enum <anonymous> ttOffline
	enum <anonymous> ttOpen
	enum <anonymous> ttSelected
	enum <anonymous> ttSelectedDisabled
	enum <anonymous> ttSelectedOffline
	enum <anonymous> ttSelectedOpen
	enum <anonymous> tuneParseOSErr
	enum <anonymous> tunePlayerFullOSErr
	enum <anonymous> twoSideErr
	enum <anonymous> type128BitFloatingPoint
	enum <anonymous> typeAbsoluteOrdinal
	enum <anonymous> typeAEHomographAccent
	enum <anonymous> typeAEHomographDicInfo
	enum <anonymous> typeAEHomographWeight
	enum <anonymous> typeAEList
	enum <anonymous> typeAEMorphemePartOfSpeechCode
	enum <anonymous> typeAEMorphemeTextRange
	enum <anonymous> typeAERecord
	enum <anonymous> typeAEText
	enum <anonymous> typeAlias
	enum <anonymous> typeAppleEvent
	enum <anonymous> typeApplicationBundleID
	enum <anonymous> typeApplicationURL
	enum <anonymous> typeApplSignature
	enum <anonymous> typeAppParameters
	enum <anonymous> typeArc
	enum <anonymous> typeAuditToken
	enum <anonymous> typeBest
	enum <anonymous> typeBookmarkData
	enum <anonymous> typeBoolean
	enum <anonymous> typeCell
	enum <anonymous> typeCentimeters
	enum <anonymous> typeCFAbsoluteTime
	enum <anonymous> typeCFArrayRef
	enum <anonymous> typeCFAttributedStringRef
	enum <anonymous> typeCFBooleanRef
	enum <anonymous> typeCFDictionaryRef
	enum <anonymous> typeCFMutableArrayRef
	enum <anonymous> typeCFMutableAttributedStringRef
	enum <anonymous> typeCFMutableDictionaryRef
	enum <anonymous> typeCFMutableStringRef
	enum <anonymous> typeCFNumberRef
	enum <anonymous> typeCFStringRef
	enum <anonymous> typeCFTypeRef
	enum <anonymous> typeChar
	enum <anonymous> typeClassInfo
	enum <anonymous> typeColorTable
	enum <anonymous> typeColumn
	enum <anonymous> typeCompDescriptor
	enum <anonymous> typeComponentInstance
	enum <anonymous> typeCString
	enum <anonymous> typeCubicCentimeter
	enum <anonymous> typeCubicFeet
	enum <anonymous> typeCubicInches
	enum <anonymous> typeCubicMeters
	enum <anonymous> typeCubicYards
	enum <anonymous> typeCurrentContainer
	enum <anonymous> typeDashStyle
	enum <anonymous> typeData
	enum <anonymous> typeDCMFieldAttributes
	enum <anonymous> typeDCMFindMethod
	enum <anonymous> typeDecimalStruct
	enum <anonymous> typeDegreesC
	enum <anonymous> typeDegreesF
	enum <anonymous> typeDegreesK
	enum <anonymous> typeDrawingArea
	enum <anonymous> typeElemInfo
	enum <anonymous> typeEncodedString
	enum <anonymous> typeEnumerated
	enum <anonymous> typeEnumeration
	enum <anonymous> typeEPS
	enum <anonymous> typeEventInfo
	enum <anonymous> typeEventRecord
	enum <anonymous> typeEventRef
	enum <anonymous> typeFalse
	enum <anonymous> typeFeet
	enum <anonymous> typeFileURL
	enum <anonymous> typeFinderWindow
	enum <anonymous> typeFixed
	enum <anonymous> typeFixedPoint
	enum <anonymous> typeFixedRectangle
	enum <anonymous> typeFSRef
	enum <anonymous> typeGallons
	enum <anonymous> typeGIF
	enum <anonymous> typeGlyphInfoArray
	enum <anonymous> typeGrams
	enum <anonymous> typeGraphicLine
	enum <anonymous> typeGraphicText
	enum <anonymous> typeGroupedGraphic
	enum <anonymous> typeHIMenu
	enum <anonymous> typeHIWindow
	enum <anonymous> typeIEEE32BitFloatingPoint
	enum <anonymous> typeIEEE64BitFloatingPoint
	enum <anonymous> typeInches
	enum <anonymous> typeIndexDescriptor
	enum <anonymous> typeInsertionLoc
	enum <anonymous> typeIntlText
	enum <anonymous> typeIntlWritingCode
	enum <anonymous> typeISO8601DateTime
	enum <anonymous> typeJPEG
	enum <anonymous> typeKernelProcessID
	enum <anonymous> typeKeyword
	enum <anonymous> typeKilograms
	enum <anonymous> typeKilometers
	enum <anonymous> typeLAHomograph
	enum <anonymous> typeLAMorpheme
	enum <anonymous> typeLAMorphemeBundle
	enum <anonymous> typeLAMorphemePath
	enum <anonymous> typeLiters
	enum <anonymous> typeLogicalDescriptor
	enum <anonymous> typeLongDateTime
	enum <anonymous> typeLongFixed
	enum <anonymous> typeLongFixedPoint
	enum <anonymous> typeLongFixedRectangle
	enum <anonymous> typeLongPoint
	enum <anonymous> typeLongRectangle
	enum <anonymous> typeLowLevelEventRecord
	enum <anonymous> typeMachineLoc
	enum <anonymous> typeMachPort
	enum <anonymous> typeMeters
	enum <anonymous> typeMiles
	enum <anonymous> typeNull
	enum <anonymous> typeObjectBeingExamined
	enum <anonymous> typeObjectSpecifier
	enum <anonymous> typeOffsetArray
	enum <anonymous> typeOSLTokenList
	enum <anonymous> typeOunces
	enum <anonymous> typeOval
	enum <anonymous> typeParamInfo
	enum <anonymous> typePict
	enum <anonymous> typePixelMap
	enum <anonymous> typePixMapMinus
	enum <anonymous> typePolygon
	enum <anonymous> typePounds
	enum <anonymous> typeProcessSerialNumber
	enum <anonymous> typeProperty
	enum <anonymous> typePropInfo
	enum <anonymous> typePString
	enum <anonymous> typePtr
	enum <anonymous> typeQDPoint
	enum <anonymous> typeQDRectangle
	enum <anonymous> typeQDRegion
	enum <anonymous> typeQuarts
	enum <anonymous> typeRangeDescriptor
	enum <anonymous> typeRectangle
	enum <anonymous> typeRelativeDescriptor
	enum <anonymous> typeReplyPortAttr
	enum <anonymous> typeRGB16
	enum <anonymous> typeRGB96
	enum <anonymous> typeRGBColor
	enum <anonymous> typeRotation
	enum <anonymous> typeRoundedRectangle
	enum <anonymous> typeRow
	enum <anonymous> typeScrapStyles
	enum <anonymous> typeScript
	enum <anonymous> typeSectionH
	enum <anonymous> typeSInt16
	enum <anonymous> typeSInt32
	enum <anonymous> typeSInt64
	enum <anonymous> typeSquareFeet
	enum <anonymous> typeSquareKilometers
	enum <anonymous> typeSquareMeters
	enum <anonymous> typeSquareMiles
	enum <anonymous> typeSquareYards
	enum <anonymous> typeStyledText
	enum <anonymous> typeStyledUnicodeText
	enum <anonymous> typeSuiteInfo
	enum <anonymous> typeTable
	enum <anonymous> typeText
	enum <anonymous> typeTextRange
	enum <anonymous> typeTextRangeArray
	enum <anonymous> typeTextStyles
	enum <anonymous> typeTIFF
	enum <anonymous> typeToken
	enum <anonymous> typeTrue
	enum <anonymous> typeType
	enum <anonymous> typeUInt16
	enum <anonymous> typeUInt32
	enum <anonymous> typeUInt64
	enum <anonymous> typeUnicodeText
	enum <anonymous> typeUTF16ExternalRepresentation
	enum <anonymous> typeUTF8Text
	enum <anonymous> typeVersion
	enum <anonymous> typeWhoseDescriptor
	enum <anonymous> typeWhoseRange
	enum <anonymous> typeWildCard
	enum <anonymous> typeYards
	char *[] tzname
	enum <anonymous> underline
	enum <anonymous> undoDev
	enum <anonymous> unicodeBufErr
	enum <anonymous> unicodeCharErr
	enum <anonymous> unicodeChecksumErr
	enum <anonymous> unicodeContextualErr
	enum <anonymous> unicodeDirectionErr
	enum <anonymous> unicodeElementErr
	enum <anonymous> unicodeFallbacksErr
	enum <anonymous> unicodeNoTableErr
	enum <anonymous> unicodeNotFoundErr
	enum <anonymous> unicodePartConvertErr
	enum <anonymous> unicodeTableFormatErr
	enum <anonymous> unicodeTextEncodingDataErr
	enum <anonymous> unicodeVariantErr
	enum <anonymous> unimpErr
	enum <anonymous> unitEmptyErr
	enum <anonymous> unitTblFullErr
	enum <anonymous> unknownFormatErr
	enum <anonymous> unknownInsertModeErr
	enum <anonymous> UNORDERED
	enum <anonymous> unresolvedComponentDLLErr
	enum <anonymous> unsupportedAuxiliaryImportData
	enum <anonymous> unsupportedForPlatformErr
	enum <anonymous> unsupportedOSErr
	enum <anonymous> unsupportedProcessorErr
	enum <anonymous> updateDev
	enum <anonymous> updPixMemErr
	enum <anonymous> uppCallComponentCanDoProcInfo
	enum <anonymous> uppCallComponentCloseProcInfo
	enum <anonymous> uppCallComponentGetMPWorkFunctionProcInfo
	enum <anonymous> uppCallComponentGetPublicResourceProcInfo
	enum <anonymous> uppCallComponentOpenProcInfo
	enum <anonymous> uppCallComponentRegisterProcInfo
	enum <anonymous> uppCallComponentTargetProcInfo
	enum <anonymous> uppCallComponentUnregisterProcInfo
	enum <anonymous> uppCallComponentVersionProcInfo
	enum <anonymous> uppComponentFunctionImplementedProcInfo
	enum <anonymous> uppComponentSetTargetProcInfo
	enum <anonymous> uppGetComponentVersionProcInfo
	enum <anonymous> urlDataHFTPBadNameListErr
	enum <anonymous> urlDataHFTPBadPasswordErr
	enum <anonymous> urlDataHFTPBadUserErr
	enum <anonymous> urlDataHFTPDataConnectionErr
	enum <anonymous> urlDataHFTPFilenameErr
	enum <anonymous> urlDataHFTPNeedPasswordErr
	enum <anonymous> urlDataHFTPNoDirectoryErr
	enum <anonymous> urlDataHFTPNoNetDriverErr
	enum <anonymous> urlDataHFTPNoPasswordErr
	enum <anonymous> urlDataHFTPPermissionsErr
	enum <anonymous> urlDataHFTPProtocolErr
	enum <anonymous> urlDataHFTPQuotaErr
	enum <anonymous> urlDataHFTPServerDisconnectedErr
	enum <anonymous> urlDataHFTPServerErr
	enum <anonymous> urlDataHFTPShutdownErr
	enum <anonymous> urlDataHFTPURLErr
	enum <anonymous> urlDataHHTTPNoNetDriverErr
	enum <anonymous> urlDataHHTTPProtocolErr
	enum <anonymous> urlDataHHTTPRedirectErr
	enum <anonymous> urlDataHHTTPURLErr
	enum <anonymous> useAsync
	enum <anonymous> useATalk
	enum <anonymous> useExtClk
	enum <anonymous> useFree
	enum <anonymous> useMIDI
	enum <anonymous> userBreak
	enum <anonymous> userCanceledErr
	enum <anonymous> userDataItemNotFound
	enum <anonymous> userRejectErr
	enum <anonymous> UsrActivity
	enum <anonymous> validDateFields
	enum <anonymous> validInstancesExist
	enum <anonymous> variationFontTableTag
	enum <anonymous> verAfrikaans
	enum <anonymous> verAlternateGr
	enum <anonymous> verArabia
	enum <anonymous> verArabic
	enum <anonymous> verArmenia
	enum <anonymous> verArmenian
	enum <anonymous> verAustralia
	enum <anonymous> verAustria
	enum <anonymous> verAustriaGerman
	enum <anonymous> verBelarus
	enum <anonymous> verBelgiumLux
	enum <anonymous> verBelgiumLuxPoint
	enum <anonymous> verBengali
	enum <anonymous> verBhutan
	enum <anonymous> verBrazil
	enum <anonymous> verBreton
	enum <anonymous> verBritain
	enum <anonymous> verBrittany
	enum <anonymous> verBulgaria
	enum <anonymous> verByeloRussian
	enum <anonymous> verCanadaComma
	enum <anonymous> verCanadaPoint
	enum <anonymous> verCatalonia
	enum <anonymous> verChina
	enum <anonymous> verCroatia
	enum <anonymous> verCyprus
	enum <anonymous> verCzech
	enum <anonymous> verDenmark
	enum <anonymous> verEastAsiaGeneric
	enum <anonymous> verEngCanada
	enum <anonymous> verErr
	enum <anonymous> verEsperanto
	enum <anonymous> verEstonia
	enum <anonymous> verFaeroeIsl
	enum <anonymous> verFarEastGeneric
	enum <anonymous> verFaroeIsl
	enum <anonymous> verFinland
	enum <anonymous> verFlemish
	enum <anonymous> verFlemishPoint
	enum <anonymous> verFrance
	enum <anonymous> verFrBelgium
	enum <anonymous> verFrBelgiumLux
	enum <anonymous> verFrCanada
	enum <anonymous> verFrenchUniversal
	enum <anonymous> verFrSwiss
	enum <anonymous> verGenericFE
	enum <anonymous> verGeorgia
	enum <anonymous> verGeorgian
	enum <anonymous> verGermanReformed
	enum <anonymous> verGermany
	enum <anonymous> verGreece
	enum <anonymous> verGreeceAlt
	enum <anonymous> verGreecePoly
	enum <anonymous> verGreekAncient
	enum <anonymous> verGreenland
	enum <anonymous> verGrSwiss
	enum <anonymous> verGujarati
	enum <anonymous> verHungary
	enum <anonymous> verIceland
	enum <anonymous> verIndia
	enum <anonymous> verIndiaHindi
	enum <anonymous> verIndiaUrdu
	enum <anonymous> verInternational
	enum <anonymous> verIran
	enum <anonymous> verIreland
	enum <anonymous> verIrelandEnglish
	enum <anonymous> verIrishGaelicScript
	enum <anonymous> verIsrael
	enum <anonymous> verItalianSwiss
	enum <anonymous> verItaly
	enum <anonymous> verJapan
	enum <anonymous> verKorea
	enum <anonymous> verLapland
	enum <anonymous> verLatvia
	enum <anonymous> verLithuania
	enum <anonymous> verMacedonia
	enum <anonymous> verMacedonian
	enum <anonymous> verMagyar
	enum <anonymous> verMalta
	enum <anonymous> verManxGaelic
	enum <anonymous> verMarathi
	enum <anonymous> verMultilingual
	enum <anonymous> verNepal
	enum <anonymous> verNetherlands
	enum <anonymous> verNetherlandsComma
	enum <anonymous> verNorway
	enum <anonymous> verNunavut
	enum <anonymous> verNynorsk
	enum <anonymous> verPakistan
	enum <anonymous> verPakistanUrdu
	enum <anonymous> verPoland
	enum <anonymous> verPortugal
	enum <anonymous> verPunjabi
	enum <anonymous> verRomania
	enum <anonymous> verRumania
	enum <anonymous> verRussia
	enum <anonymous> verSami
	enum <anonymous> verScottishGaelic
	enum <anonymous> verScriptGeneric
	enum <anonymous> verSerbia
	enum <anonymous> verSerbian
	enum <anonymous> verSingapore
	enum <anonymous> verSlovak
	enum <anonymous> verSlovenia
	enum <anonymous> verSlovenian
	enum <anonymous> verSpain
	enum <anonymous> verSpLatinAmerica
	enum <anonymous> verSweden
	enum <anonymous> verTaiwan
	enum <anonymous> verThailand
	enum <anonymous> verTibet
	enum <anonymous> verTibetan
	enum <anonymous> verTonga
	enum <anonymous> verTurkey
	enum <anonymous> verTurkishModified
	enum <anonymous> verUkraine
	enum <anonymous> verUkrania
	enum <anonymous> verUnspecified
	enum <anonymous> verUS
	enum <anonymous> verUzbek
	enum <anonymous> vervariantDenmark
	enum <anonymous> vervariantNorway
	enum <anonymous> vervariantPortugal
	enum <anonymous> verVietnam
	enum <anonymous> verWales
	enum <anonymous> verWelsh
	enum <anonymous> verYugoCroatian
	enum <anonymous> verYugoslavia
	enum <anonymous> videoOutputInUseErr
	enum <anonymous> vLckdErr
	vm_size_t vm_page_mask
	int vm_page_shift
	vm_size_t vm_page_size
	enum <anonymous> vmAddressNotInFileViewErr
	enum <anonymous> vmBadDriver
	enum <anonymous> vmBusyBackingFileErr
	enum <anonymous> vmFileViewAccessErr
	enum <anonymous> vmInvalidBackingFileIDErr
	enum <anonymous> vmInvalidFileViewIDErr
	enum <anonymous> vmInvalidOwningProcessErr
	enum <anonymous> vmKernelMMUInitErr
	enum <anonymous> vmMappingPrivilegesErr
	enum <anonymous> vmMemLckdErr
	enum <anonymous> vmMorePhysicalThanVirtualErr
	enum <anonymous> vmNoMoreBackingFilesErr
	enum <anonymous> vmNoMoreFileViewsErr
	enum <anonymous> vmNoVectorErr
	enum <anonymous> vmOffErr
	enum <anonymous> voiceNotFound
	enum <anonymous> volGoneErr
	enum <anonymous> volMountChangedBit
	enum <anonymous> volMountChangedMask
	enum <anonymous> volMountExtendedFlagsBit
	enum <anonymous> volMountExtendedFlagsMask
	enum <anonymous> volMountFSReservedMask
	enum <anonymous> volMountInteractBit
	enum <anonymous> volMountInteractMask
	enum <anonymous> volMountNoLoginMsgFlagBit
	enum <anonymous> volMountNoLoginMsgFlagMask
	enum <anonymous> volMountSysReservedMask
	enum <anonymous> volOffLinErr
	enum <anonymous> volOnLinErr
	enum <anonymous> volVMBusyErr
	int (*)(const char *, __va_list_tag *) vprintf_stderr_func
	enum <anonymous> vType
	enum <anonymous> vTypErr
	enum <anonymous> wackBadFileErr
	enum <anonymous> wackBadMetaDataErr
	enum <anonymous> wackForkNotFoundErr
	enum <anonymous> WDEFNFnd
	enum <anonymous> weekOfYearField
	enum <anonymous> weekOfYearMask
	enum <anonymous> wfFileNotFound
	enum <anonymous> windowAppModalStateAlreadyExistsErr
	enum <anonymous> windowAttributeImmutableErr
	enum <anonymous> windowAttributesConflictErr
	enum <anonymous> windowGroupInvalidErr
	enum <anonymous> windowManagerInternalErr
	enum <anonymous> windowNoAppModalStateErr
	enum <anonymous> windowWrongStateErr
	enum <anonymous> wPrErr
	enum <anonymous> wrgVolTypErr
	enum <anonymous> writeReference
	enum <anonymous> writErr
	enum <anonymous> writingPastEnd
	enum <anonymous> wrongApplicationPlatform
	enum <anonymous> wrPermErr
	enum <anonymous> wrUnderrun
	enum <anonymous> ydm
	enum <anonymous> yearField
	enum <anonymous> yearMask
	enum <anonymous> ymd
	enum <anonymous> zeroCycle
Methods:
	void  _dispatch_object_validate(dispatch_object_t object )
	void  _dispatch_once(dispatch_once_t *predicate , ^(void)block )
	void  _dispatch_once_f(dispatch_once_t *predicate , void *context , dispatch_function_t function )
	void  _exit(int )
	kern_return_t  _kernelrpc_mach_port_allocate_trap(mach_port_name_t target , mach_port_right_t right , mach_port_name_t *name )
	kern_return_t  _kernelrpc_mach_port_deallocate_trap(mach_port_name_t target , mach_port_name_t name )
	kern_return_t  _kernelrpc_mach_port_destroy_trap(mach_port_name_t target , mach_port_name_t name )
	kern_return_t  _kernelrpc_mach_port_extract_member_trap(mach_port_name_t target , mach_port_name_t name , mach_port_name_t pset )
	kern_return_t  _kernelrpc_mach_port_insert_member_trap(mach_port_name_t target , mach_port_name_t name , mach_port_name_t pset )
	kern_return_t  _kernelrpc_mach_port_insert_right_trap(mach_port_name_t target , mach_port_name_t name , mach_port_name_t poly , mach_msg_type_name_t polyPoly )
	kern_return_t  _kernelrpc_mach_port_mod_refs_trap(mach_port_name_t target , mach_port_name_t name , mach_port_right_t right , mach_port_delta_t delta )
	kern_return_t  _kernelrpc_mach_port_move_member_trap(mach_port_name_t target , mach_port_name_t member , mach_port_name_t after )
	kern_return_t  _kernelrpc_mach_vm_allocate_trap(mach_port_name_t target , mach_vm_offset_t *addr , mach_vm_size_t size , int flags )
	kern_return_t  _kernelrpc_mach_vm_deallocate_trap(mach_port_name_t target , mach_vm_address_t address , mach_vm_size_t size )
	kern_return_t  _kernelrpc_mach_vm_protect_trap(mach_port_name_t target , mach_vm_address_t address , mach_vm_size_t size , boolean_t set_maximum , vm_prot_t new_protection )
	void  _longjmp(int * , int )
	__m128i  _mm_add_epi16(__m128i a , __m128i b )
	__m128i  _mm_add_epi32(__m128i a , __m128i b )
	__m128i  _mm_add_epi64(__m128i a , __m128i b )
	__m128i  _mm_add_epi8(__m128i a , __m128i b )
	__m128d  _mm_add_pd(__m128d a , __m128d b )
	__m64  _mm_add_pi16(__m64 __m1 , __m64 __m2 )
	__m64  _mm_add_pi32(__m64 __m1 , __m64 __m2 )
	__m64  _mm_add_pi8(__m64 __m1 , __m64 __m2 )
	__m128  _mm_add_ps(__m128 a , __m128 b )
	__m128d  _mm_add_sd(__m128d a , __m128d b )
	__m64  _mm_add_si64(__m64 a , __m64 b )
	__m128  _mm_add_ss(__m128 a , __m128 b )
	__m128i  _mm_adds_epi16(__m128i a , __m128i b )
	__m128i  _mm_adds_epi8(__m128i a , __m128i b )
	__m128i  _mm_adds_epu16(__m128i a , __m128i b )
	__m128i  _mm_adds_epu8(__m128i a , __m128i b )
	__m64  _mm_adds_pi16(__m64 __m1 , __m64 __m2 )
	__m64  _mm_adds_pi8(__m64 __m1 , __m64 __m2 )
	__m64  _mm_adds_pu16(__m64 __m1 , __m64 __m2 )
	__m64  _mm_adds_pu8(__m64 __m1 , __m64 __m2 )
	__m128d  _mm_and_pd(__m128d a , __m128d b )
	__m128  _mm_and_ps(__m128 a , __m128 b )
	__m128i  _mm_and_si128(__m128i a , __m128i b )
	__m64  _mm_and_si64(__m64 __m1 , __m64 __m2 )
	__m128d  _mm_andnot_pd(__m128d a , __m128d b )
	__m128  _mm_andnot_ps(__m128 a , __m128 b )
	__m128i  _mm_andnot_si128(__m128i a , __m128i b )
	__m64  _mm_andnot_si64(__m64 __m1 , __m64 __m2 )
	__m128i  _mm_avg_epu16(__m128i a , __m128i b )
	__m128i  _mm_avg_epu8(__m128i a , __m128i b )
	__m64  _mm_avg_pu16(__m64 a , __m64 b )
	__m64  _mm_avg_pu8(__m64 a , __m64 b )
	__m128  _mm_castpd_ps(__m128d in )
	__m128i  _mm_castpd_si128(__m128d in )
	__m128d  _mm_castps_pd(__m128 in )
	__m128i  _mm_castps_si128(__m128 in )
	__m128d  _mm_castsi128_pd(__m128i in )
	__m128  _mm_castsi128_ps(__m128i in )
	void  _mm_clflush(const void *p )
	__m128i  _mm_cmpeq_epi16(__m128i a , __m128i b )
	__m128i  _mm_cmpeq_epi32(__m128i a , __m128i b )
	__m128i  _mm_cmpeq_epi8(__m128i a , __m128i b )
	__m128d  _mm_cmpeq_pd(__m128d a , __m128d b )
	__m64  _mm_cmpeq_pi16(__m64 __m1 , __m64 __m2 )
	__m64  _mm_cmpeq_pi32(__m64 __m1 , __m64 __m2 )
	__m64  _mm_cmpeq_pi8(__m64 __m1 , __m64 __m2 )
	__m128  _mm_cmpeq_ps(__m128 a , __m128 b )
	__m128d  _mm_cmpeq_sd(__m128d a , __m128d b )
	__m128  _mm_cmpeq_ss(__m128 a , __m128 b )
	__m128d  _mm_cmpge_pd(__m128d a , __m128d b )
	__m128  _mm_cmpge_ps(__m128 a , __m128 b )
	__m128d  _mm_cmpge_sd(__m128d a , __m128d b )
	__m128  _mm_cmpge_ss(__m128 a , __m128 b )
	__m128i  _mm_cmpgt_epi16(__m128i a , __m128i b )
	__m128i  _mm_cmpgt_epi32(__m128i a , __m128i b )
	__m128i  _mm_cmpgt_epi8(__m128i a , __m128i b )
	__m128d  _mm_cmpgt_pd(__m128d a , __m128d b )
	__m64  _mm_cmpgt_pi16(__m64 __m1 , __m64 __m2 )
	__m64  _mm_cmpgt_pi32(__m64 __m1 , __m64 __m2 )
	__m64  _mm_cmpgt_pi8(__m64 __m1 , __m64 __m2 )
	__m128  _mm_cmpgt_ps(__m128 a , __m128 b )
	__m128d  _mm_cmpgt_sd(__m128d a , __m128d b )
	__m128  _mm_cmpgt_ss(__m128 a , __m128 b )
	__m128d  _mm_cmple_pd(__m128d a , __m128d b )
	__m128  _mm_cmple_ps(__m128 a , __m128 b )
	__m128d  _mm_cmple_sd(__m128d a , __m128d b )
	__m128  _mm_cmple_ss(__m128 a , __m128 b )
	__m128i  _mm_cmplt_epi16(__m128i a , __m128i b )
	__m128i  _mm_cmplt_epi32(__m128i a , __m128i b )
	__m128i  _mm_cmplt_epi8(__m128i a , __m128i b )
	__m128d  _mm_cmplt_pd(__m128d a , __m128d b )
	__m128  _mm_cmplt_ps(__m128 a , __m128 b )
	__m128d  _mm_cmplt_sd(__m128d a , __m128d b )
	__m128  _mm_cmplt_ss(__m128 a , __m128 b )
	__m128d  _mm_cmpneq_pd(__m128d a , __m128d b )
	__m128  _mm_cmpneq_ps(__m128 a , __m128 b )
	__m128d  _mm_cmpneq_sd(__m128d a , __m128d b )
	__m128  _mm_cmpneq_ss(__m128 a , __m128 b )
	__m128d  _mm_cmpnge_pd(__m128d a , __m128d b )
	__m128  _mm_cmpnge_ps(__m128 a , __m128 b )
	__m128d  _mm_cmpnge_sd(__m128d a , __m128d b )
	__m128  _mm_cmpnge_ss(__m128 a , __m128 b )
	__m128d  _mm_cmpngt_pd(__m128d a , __m128d b )
	__m128  _mm_cmpngt_ps(__m128 a , __m128 b )
	__m128d  _mm_cmpngt_sd(__m128d a , __m128d b )
	__m128  _mm_cmpngt_ss(__m128 a , __m128 b )
	__m128d  _mm_cmpnle_pd(__m128d a , __m128d b )
	__m128  _mm_cmpnle_ps(__m128 a , __m128 b )
	__m128d  _mm_cmpnle_sd(__m128d a , __m128d b )
	__m128  _mm_cmpnle_ss(__m128 a , __m128 b )
	__m128d  _mm_cmpnlt_pd(__m128d a , __m128d b )
	__m128  _mm_cmpnlt_ps(__m128 a , __m128 b )
	__m128d  _mm_cmpnlt_sd(__m128d a , __m128d b )
	__m128  _mm_cmpnlt_ss(__m128 a , __m128 b )
	__m128d  _mm_cmpord_pd(__m128d a , __m128d b )
	__m128  _mm_cmpord_ps(__m128 a , __m128 b )
	__m128d  _mm_cmpord_sd(__m128d a , __m128d b )
	__m128  _mm_cmpord_ss(__m128 a , __m128 b )
	__m128d  _mm_cmpunord_pd(__m128d a , __m128d b )
	__m128  _mm_cmpunord_ps(__m128 a , __m128 b )
	__m128d  _mm_cmpunord_sd(__m128d a , __m128d b )
	__m128  _mm_cmpunord_ss(__m128 a , __m128 b )
	int  _mm_comieq_sd(__m128d a , __m128d b )
	int  _mm_comieq_ss(__m128 a , __m128 b )
	int  _mm_comige_sd(__m128d a , __m128d b )
	int  _mm_comige_ss(__m128 a , __m128 b )
	int  _mm_comigt_sd(__m128d a , __m128d b )
	int  _mm_comigt_ss(__m128 a , __m128 b )
	int  _mm_comile_sd(__m128d a , __m128d b )
	int  _mm_comile_ss(__m128 a , __m128 b )
	int  _mm_comilt_sd(__m128d a , __m128d b )
	int  _mm_comilt_ss(__m128 a , __m128 b )
	int  _mm_comineq_sd(__m128d a , __m128d b )
	int  _mm_comineq_ss(__m128 a , __m128 b )
	__m128  _mm_cvt_pi2ps(__m128 a , __m64 b )
	__m64  _mm_cvt_ps2pi(__m128 a )
	__m128  _mm_cvt_si2ss(__m128 a , int b )
	int  _mm_cvt_ss2si(__m128 a )
	__m128d  _mm_cvtepi32_pd(__m128i a )
	__m128  _mm_cvtepi32_ps(__m128i a )
	long long  _mm_cvtm64_si64(__m64 __m )
	__m128i  _mm_cvtpd_epi32(__m128d a )
	__m64  _mm_cvtpd_pi32(__m128d a )
	__m128  _mm_cvtpd_ps(__m128d a )
	__m128  _mm_cvtpi16_ps(__m64 a )
	__m128d  _mm_cvtpi32_pd(__m64 a )
	__m128  _mm_cvtpi32_ps(__m128 a , __m64 b )
	__m128  _mm_cvtpi32x2_ps(__m64 a , __m64 b )
	__m128  _mm_cvtpi8_ps(__m64 a )
	__m128i  _mm_cvtps_epi32(__m128 a )
	__m128d  _mm_cvtps_pd(__m128 a )
	__m64  _mm_cvtps_pi16(__m128 a )
	__m64  _mm_cvtps_pi32(__m128 a )
	__m64  _mm_cvtps_pi8(__m128 a )
	__m128  _mm_cvtpu16_ps(__m64 a )
	__m128  _mm_cvtpu8_ps(__m64 a )
	double  _mm_cvtsd_f64(__m128d a )
	int  _mm_cvtsd_si32(__m128d a )
	long long  _mm_cvtsd_si64(__m128d a )
	__m128  _mm_cvtsd_ss(__m128 a , __m128d b )
	int  _mm_cvtsi128_si32(__m128i a )
	long long  _mm_cvtsi128_si64(__m128i a )
	__m128d  _mm_cvtsi32_sd(__m128d a , int b )
	__m128i  _mm_cvtsi32_si128(int a )
	__m64  _mm_cvtsi32_si64(int __i )
	__m128  _mm_cvtsi32_ss(__m128 a , int b )
	__m64  _mm_cvtsi64_m64(long long __i )
	__m128d  _mm_cvtsi64_sd(__m128d a , long long b )
	__m128i  _mm_cvtsi64_si128(long long a )
	int  _mm_cvtsi64_si32(__m64 __m )
	__m128  _mm_cvtsi64_ss(__m128 a , long long b )
	float  _mm_cvtss_f32(__m128 a )
	__m128d  _mm_cvtss_sd(__m128d a , __m128 b )
	int  _mm_cvtss_si32(__m128 a )
	long long  _mm_cvtss_si64(__m128 a )
	__m64  _mm_cvtt_ps2pi(__m128 a )
	int  _mm_cvtt_ss2si(__m128 a )
	__m128i  _mm_cvttpd_epi32(__m128d a )
	__m64  _mm_cvttpd_pi32(__m128d a )
	__m128i  _mm_cvttps_epi32(__m128 a )
	__m64  _mm_cvttps_pi32(__m128 a )
	int  _mm_cvttsd_si32(__m128d a )
	long long  _mm_cvttsd_si64(__m128d a )
	int  _mm_cvttss_si32(__m128 a )
	long long  _mm_cvttss_si64(__m128 a )
	__m128d  _mm_div_pd(__m128d a , __m128d b )
	__m128  _mm_div_ps(__m128 a , __m128 b )
	__m128d  _mm_div_sd(__m128d a , __m128d b )
	__m128  _mm_div_ss(__m128 a , __m128 b )
	void  _mm_empty()
	int  _mm_extract_epi16(__m128i a , int imm )
	int  _mm_extract_pi16(__m64 a , int n )
	void  _mm_free(void *p )
	unsigned int  _mm_getcsr()
	__m128i  _mm_insert_epi16(__m128i a , int b , int imm )
	__m64  _mm_insert_pi16(__m64 a , int d , int n )
	void  _mm_lfence()
	__m128d  _mm_load1_pd(const double *dp )
	__m128  _mm_load1_ps(const float *p )
	__m128d  _mm_load_pd(const double *dp )
	__m128  _mm_load_ps(const float *p )
	__m128d  _mm_load_sd(const double *dp )
	__m128i  _mm_load_si128(const __m128i *p )
	__m128  _mm_load_ss(const float *p )
	__m128d  _mm_loadh_pd(__m128d a , const double *dp )
	__m128  _mm_loadh_pi(__m128 a , const __m64 *p )
	__m128i  _mm_loadl_epi64(const __m128i *p )
	__m128d  _mm_loadl_pd(__m128d a , const double *dp )
	__m128  _mm_loadl_pi(__m128 a , const __m64 *p )
	__m128d  _mm_loadr_pd(const double *dp )
	__m128  _mm_loadr_ps(const float *p )
	__m128d  _mm_loadu_pd(const double *dp )
	__m128  _mm_loadu_ps(const float *p )
	__m128i  _mm_loadu_si128(const __m128i *p )
	__m128i  _mm_madd_epi16(__m128i a , __m128i b )
	__m64  _mm_madd_pi16(__m64 __m1 , __m64 __m2 )
	void *  _mm_malloc(size_t size , size_t align )
	void  _mm_maskmove_si64(__m64 d , __m64 n , char *p )
	void  _mm_maskmoveu_si128(__m128i d , __m128i n , char *p )
	__m128i  _mm_max_epi16(__m128i a , __m128i b )
	__m128i  _mm_max_epu8(__m128i a , __m128i b )
	__m128d  _mm_max_pd(__m128d a , __m128d b )
	__m64  _mm_max_pi16(__m64 a , __m64 b )
	__m128  _mm_max_ps(__m128 a , __m128 b )
	__m64  _mm_max_pu8(__m64 a , __m64 b )
	__m128d  _mm_max_sd(__m128d a , __m128d b )
	__m128  _mm_max_ss(__m128 a , __m128 b )
	void  _mm_mfence()
	__m128i  _mm_min_epi16(__m128i a , __m128i b )
	__m128i  _mm_min_epu8(__m128i a , __m128i b )
	__m128d  _mm_min_pd(__m128d a , __m128d b )
	__m64  _mm_min_pi16(__m64 a , __m64 b )
	__m128  _mm_min_ps(__m128 a , __m128 b )
	__m64  _mm_min_pu8(__m64 a , __m64 b )
	__m128d  _mm_min_sd(__m128d a , __m128d b )
	__m128  _mm_min_ss(__m128 a , __m128 b )
	__m128i  _mm_move_epi64(__m128i a )
	__m128d  _mm_move_sd(__m128d a , __m128d b )
	__m128  _mm_move_ss(__m128 a , __m128 b )
	__m128  _mm_movehl_ps(__m128 a , __m128 b )
	__m128  _mm_movelh_ps(__m128 a , __m128 b )
	int  _mm_movemask_epi8(__m128i a )
	int  _mm_movemask_pd(__m128d a )
	int  _mm_movemask_pi8(__m64 a )
	int  _mm_movemask_ps(__m128 a )
	__m64  _mm_movepi64_pi64(__m128i a )
	__m128i  _mm_movpi64_pi64(__m64 a )
	__m128i  _mm_mul_epu32(__m128i a , __m128i b )
	__m128d  _mm_mul_pd(__m128d a , __m128d b )
	__m128  _mm_mul_ps(__m128 a , __m128 b )
	__m128d  _mm_mul_sd(__m128d a , __m128d b )
	__m128  _mm_mul_ss(__m128 a , __m128 b )
	__m64  _mm_mul_su32(__m64 a , __m64 b )
	__m128i  _mm_mulhi_epi16(__m128i a , __m128i b )
	__m128i  _mm_mulhi_epu16(__m128i a , __m128i b )
	__m64  _mm_mulhi_pi16(__m64 __m1 , __m64 __m2 )
	__m64  _mm_mulhi_pu16(__m64 a , __m64 b )
	__m128i  _mm_mullo_epi16(__m128i a , __m128i b )
	__m64  _mm_mullo_pi16(__m64 __m1 , __m64 __m2 )
	__m128d  _mm_or_pd(__m128d a , __m128d b )
	__m128  _mm_or_ps(__m128 a , __m128 b )
	__m128i  _mm_or_si128(__m128i a , __m128i b )
	__m64  _mm_or_si64(__m64 __m1 , __m64 __m2 )
	__m128i  _mm_packs_epi16(__m128i a , __m128i b )
	__m128i  _mm_packs_epi32(__m128i a , __m128i b )
	__m64  _mm_packs_pi16(__m64 __m1 , __m64 __m2 )
	__m64  _mm_packs_pi32(__m64 __m1 , __m64 __m2 )
	__m64  _mm_packs_pu16(__m64 __m1 , __m64 __m2 )
	__m128i  _mm_packus_epi16(__m128i a , __m128i b )
	void  _mm_pause()
	__m128  _mm_rcp_ps(__m128 a )
	__m128  _mm_rcp_ss(__m128 a )
	__m128  _mm_rsqrt_ps(__m128 a )
	__m128  _mm_rsqrt_ss(__m128 a )
	__m128i  _mm_sad_epu8(__m128i a , __m128i b )
	__m64  _mm_sad_pu8(__m64 a , __m64 b )
	__m128i  _mm_set1_epi16(short w )
	__m128i  _mm_set1_epi32(int i )
	__m128i  _mm_set1_epi64(__m64 q )
	__m128i  _mm_set1_epi64x(long long q )
	__m128i  _mm_set1_epi8(char b )
	__m128d  _mm_set1_pd(double w )
	__m64  _mm_set1_pi16(short __w )
	__m64  _mm_set1_pi32(int __i )
	__m64  _mm_set1_pi8(char __b )
	__m128  _mm_set1_ps(float w )
	__m128i  _mm_set_epi16(short w7 , short w6 , short w5 , short w4 , short w3 , short w2 , short w1 , short w0 )
	__m128i  _mm_set_epi32(int i3 , int i2 , int i1 , int i0 )
	__m128i  _mm_set_epi64(__m64 q1 , __m64 q0 )
	__m128i  _mm_set_epi64x(long long q1 , long long q0 )
	__m128i  _mm_set_epi8(char b15 , char b14 , char b13 , char b12 , char b11 , char b10 , char b9 , char b8 , char b7 , char b6 , char b5 , char b4 , char b3 , char b2 , char b1 , char b0 )
	__m128d  _mm_set_pd(double w , double x )
	__m64  _mm_set_pi16(short __s3 , short __s2 , short __s1 , short __s0 )
	__m64  _mm_set_pi32(int __i1 , int __i0 )
	__m64  _mm_set_pi8(char __b7 , char __b6 , char __b5 , char __b4 , char __b3 , char __b2 , char __b1 , char __b0 )
	__m128  _mm_set_ps(float z , float y , float x , float w )
	__m128  _mm_set_ps1(float w )
	__m128d  _mm_set_sd(double w )
	__m128  _mm_set_ss(float w )
	void  _mm_setcsr(unsigned int i )
	__m128i  _mm_setr_epi16(short w0 , short w1 , short w2 , short w3 , short w4 , short w5 , short w6 , short w7 )
	__m128i  _mm_setr_epi32(int i0 , int i1 , int i2 , int i3 )
	__m128i  _mm_setr_epi64(__m64 q0 , __m64 q1 )
	__m128i  _mm_setr_epi8(char b0 , char b1 , char b2 , char b3 , char b4 , char b5 , char b6 , char b7 , char b8 , char b9 , char b10 , char b11 , char b12 , char b13 , char b14 , char b15 )
	__m128d  _mm_setr_pd(double w , double x )
	__m64  _mm_setr_pi16(short __w0 , short __w1 , short __w2 , short __w3 )
	__m64  _mm_setr_pi32(int __i0 , int __i1 )
	__m64  _mm_setr_pi8(char __b0 , char __b1 , char __b2 , char __b3 , char __b4 , char __b5 , char __b6 , char __b7 )
	__m128  _mm_setr_ps(float z , float y , float x , float w )
	__m128d  _mm_setzero_pd()
	__m128  _mm_setzero_ps()
	__m128i  _mm_setzero_si128()
	__m64  _mm_setzero_si64()
	void  _mm_sfence()
	__m128i  _mm_sll_epi16(__m128i a , __m128i count )
	__m128i  _mm_sll_epi32(__m128i a , __m128i count )
	__m128i  _mm_sll_epi64(__m128i a , __m128i count )
	__m64  _mm_sll_pi16(__m64 __m , __m64 __count )
	__m64  _mm_sll_pi32(__m64 __m , __m64 __count )
	__m64  _mm_sll_si64(__m64 __m , __m64 __count )
	__m128i  _mm_slli_epi16(__m128i a , int count )
	__m128i  _mm_slli_epi32(__m128i a , int count )
	__m128i  _mm_slli_epi64(__m128i a , int count )
	__m64  _mm_slli_pi16(__m64 __m , int __count )
	__m64  _mm_slli_pi32(__m64 __m , int __count )
	__m64  _mm_slli_si64(__m64 __m , int __count )
	__m128d  _mm_sqrt_pd(__m128d a )
	__m128  _mm_sqrt_ps(__m128 a )
	__m128d  _mm_sqrt_sd(__m128d a , __m128d b )
	__m128  _mm_sqrt_ss(__m128 a )
	__m128i  _mm_sra_epi16(__m128i a , __m128i count )
	__m128i  _mm_sra_epi32(__m128i a , __m128i count )
	__m64  _mm_sra_pi16(__m64 __m , __m64 __count )
	__m64  _mm_sra_pi32(__m64 __m , __m64 __count )
	__m128i  _mm_srai_epi16(__m128i a , int count )
	__m128i  _mm_srai_epi32(__m128i a , int count )
	__m64  _mm_srai_pi16(__m64 __m , int __count )
	__m64  _mm_srai_pi32(__m64 __m , int __count )
	__m128i  _mm_srl_epi16(__m128i a , __m128i count )
	__m128i  _mm_srl_epi32(__m128i a , __m128i count )
	__m128i  _mm_srl_epi64(__m128i a , __m128i count )
	__m64  _mm_srl_pi16(__m64 __m , __m64 __count )
	__m64  _mm_srl_pi32(__m64 __m , __m64 __count )
	__m64  _mm_srl_si64(__m64 __m , __m64 __count )
	__m128i  _mm_srli_epi16(__m128i a , int count )
	__m128i  _mm_srli_epi32(__m128i a , int count )
	__m128i  _mm_srli_epi64(__m128i a , int count )
	__m64  _mm_srli_pi16(__m64 __m , int __count )
	__m64  _mm_srli_pi32(__m64 __m , int __count )
	__m64  _mm_srli_si64(__m64 __m , int __count )
	void  _mm_store1_pd(double *dp , __m128d a )
	void  _mm_store1_ps(float *p , __m128 a )
	void  _mm_store_pd(double *dp , __m128d a )
	void  _mm_store_ps(float *p , __m128 a )
	void  _mm_store_ps1(float *p , __m128 a )
	void  _mm_store_sd(double *dp , __m128d a )
	void  _mm_store_si128(__m128i *p , __m128i b )
	void  _mm_store_ss(float *p , __m128 a )
	void  _mm_storeh_pd(double *dp , __m128d a )
	void  _mm_storeh_pi(__m64 *p , __m128 a )
	void  _mm_storel_epi64(__m128i *p , __m128i a )
	void  _mm_storel_pd(double *dp , __m128d a )
	void  _mm_storel_pi(__m64 *p , __m128 a )
	void  _mm_storer_pd(double *dp , __m128d a )
	void  _mm_storer_ps(float *p , __m128 a )
	void  _mm_storeu_pd(double *dp , __m128d a )
	void  _mm_storeu_ps(float *p , __m128 a )
	void  _mm_storeu_si128(__m128i *p , __m128i b )
	void  _mm_stream_pd(double *p , __m128d a )
	void  _mm_stream_pi(__m64 *p , __m64 a )
	void  _mm_stream_ps(float *p , __m128 a )
	void  _mm_stream_si128(__m128i *p , __m128i a )
	void  _mm_stream_si32(int *p , int a )
	__m128i  _mm_sub_epi16(__m128i a , __m128i b )
	__m128i  _mm_sub_epi32(__m128i a , __m128i b )
	__m128i  _mm_sub_epi64(__m128i a , __m128i b )
	__m128i  _mm_sub_epi8(__m128i a , __m128i b )
	__m128d  _mm_sub_pd(__m128d a , __m128d b )
	__m64  _mm_sub_pi16(__m64 __m1 , __m64 __m2 )
	__m64  _mm_sub_pi32(__m64 __m1 , __m64 __m2 )
	__m64  _mm_sub_pi8(__m64 __m1 , __m64 __m2 )
	__m128  _mm_sub_ps(__m128 a , __m128 b )
	__m128d  _mm_sub_sd(__m128d a , __m128d b )
	__m64  _mm_sub_si64(__m64 a , __m64 b )
	__m128  _mm_sub_ss(__m128 a , __m128 b )
	__m128i  _mm_subs_epi16(__m128i a , __m128i b )
	__m128i  _mm_subs_epi8(__m128i a , __m128i b )
	__m128i  _mm_subs_epu16(__m128i a , __m128i b )
	__m128i  _mm_subs_epu8(__m128i a , __m128i b )
	__m64  _mm_subs_pi16(__m64 __m1 , __m64 __m2 )
	__m64  _mm_subs_pi8(__m64 __m1 , __m64 __m2 )
	__m64  _mm_subs_pu16(__m64 __m1 , __m64 __m2 )
	__m64  _mm_subs_pu8(__m64 __m1 , __m64 __m2 )
	int  _mm_ucomieq_sd(__m128d a , __m128d b )
	int  _mm_ucomieq_ss(__m128 a , __m128 b )
	int  _mm_ucomige_sd(__m128d a , __m128d b )
	int  _mm_ucomige_ss(__m128 a , __m128 b )
	int  _mm_ucomigt_sd(__m128d a , __m128d b )
	int  _mm_ucomigt_ss(__m128 a , __m128 b )
	int  _mm_ucomile_sd(__m128d a , __m128d b )
	int  _mm_ucomile_ss(__m128 a , __m128 b )
	int  _mm_ucomilt_sd(__m128d a , __m128d b )
	int  _mm_ucomilt_ss(__m128 a , __m128 b )
	int  _mm_ucomineq_sd(__m128d a , __m128d b )
	int  _mm_ucomineq_ss(__m128 a , __m128 b )
	__m128i  _mm_unpackhi_epi16(__m128i a , __m128i b )
	__m128i  _mm_unpackhi_epi32(__m128i a , __m128i b )
	__m128i  _mm_unpackhi_epi64(__m128i a , __m128i b )
	__m128i  _mm_unpackhi_epi8(__m128i a , __m128i b )
	__m128d  _mm_unpackhi_pd(__m128d a , __m128d b )
	__m64  _mm_unpackhi_pi16(__m64 __m1 , __m64 __m2 )
	__m64  _mm_unpackhi_pi32(__m64 __m1 , __m64 __m2 )
	__m64  _mm_unpackhi_pi8(__m64 __m1 , __m64 __m2 )
	__m128  _mm_unpackhi_ps(__m128 a , __m128 b )
	__m128i  _mm_unpacklo_epi16(__m128i a , __m128i b )
	__m128i  _mm_unpacklo_epi32(__m128i a , __m128i b )
	__m128i  _mm_unpacklo_epi64(__m128i a , __m128i b )
	__m128i  _mm_unpacklo_epi8(__m128i a , __m128i b )
	__m128d  _mm_unpacklo_pd(__m128d a , __m128d b )
	__m64  _mm_unpacklo_pi16(__m64 __m1 , __m64 __m2 )
	__m64  _mm_unpacklo_pi32(__m64 __m1 , __m64 __m2 )
	__m64  _mm_unpacklo_pi8(__m64 __m1 , __m64 __m2 )
	__m128  _mm_unpacklo_ps(__m128 a , __m128 b )
	__m128d  _mm_xor_pd(__m128d a , __m128d b )
	__m128  _mm_xor_ps(__m128 a , __m128 b )
	__m128i  _mm_xor_si128(__m128i a , __m128i b )
	__m64  _mm_xor_si64(__m64 __m1 , __m64 __m2 )
	int  _setjmp(int * )
	void  _xpc_object_validate(xpc_object_t object )
	long  a64l(const char * )
	void  abort()
	int  abs(int )
	Duration  AbsoluteDeltaToDuration(AbsoluteTime leftAbsoluteTime , AbsoluteTime rightAbsoluteTime )
	Nanoseconds  AbsoluteDeltaToNanoseconds(AbsoluteTime leftAbsoluteTime , AbsoluteTime rightAbsoluteTime )
	Duration  AbsoluteToDuration(AbsoluteTime absoluteTime )
	Nanoseconds  AbsoluteToNanoseconds(AbsoluteTime absoluteTime )
	int  access(const char * , int )
	int  accessx_np(const struct accessx_descriptor * , size_t , int * , uid_t )
	int  acct(const char * )
	int  acl_add_flag_np(acl_flagset_t flagset_d , acl_flag_t flag )
	int  acl_add_perm(acl_permset_t permset_d , acl_perm_t perm )
	int  acl_calc_mask(acl_t *acl_p )
	int  acl_clear_flags_np(acl_flagset_t flagset_d )
	int  acl_clear_perms(acl_permset_t permset_d )
	int  acl_copy_entry(acl_entry_t dest_d , acl_entry_t src_d )
	ssize_t  acl_copy_ext(void *buf_p , acl_t acl , ssize_t size )
	ssize_t  acl_copy_ext_native(void *buf_p , acl_t acl , ssize_t size )
	acl_t  acl_copy_int(const void *buf_p )
	acl_t  acl_copy_int_native(const void *buf_p )
	int  acl_create_entry(acl_t *acl_p , acl_entry_t *entry_p )
	int  acl_create_entry_np(acl_t *acl_p , acl_entry_t *entry_p , int entry_index )
	int  acl_delete_def_file(const char *path_p )
	int  acl_delete_entry(acl_t acl , acl_entry_t entry_d )
	int  acl_delete_flag_np(acl_flagset_t flagset_d , acl_flag_t flag )
	int  acl_delete_perm(acl_permset_t permset_d , acl_perm_t perm )
	acl_t  acl_dup(acl_t acl )
	int  acl_free(void *obj_p )
	acl_t  acl_from_text(const char *buf_p )
	int  acl_get_entry(acl_t acl , int entry_id , acl_entry_t *entry_p )
	acl_t  acl_get_fd(int fd )
	acl_t  acl_get_fd_np(int fd , acl_type_t type )
	acl_t  acl_get_file(const char *path_p , acl_type_t type )
	int  acl_get_flag_np(acl_flagset_t flagset_d , acl_flag_t flag )
	int  acl_get_flagset_np(void *obj_p , acl_flagset_t *flagset_p )
	acl_t  acl_get_link_np(const char *path_p , acl_type_t type )
	int  acl_get_perm_np(acl_permset_t permset_d , acl_perm_t perm )
	int  acl_get_permset(acl_entry_t entry_d , acl_permset_t *permset_p )
	int  acl_get_permset_mask_np(acl_entry_t entry_d , acl_permset_mask_t *mask_p )
	void *  acl_get_qualifier(acl_entry_t entry_d )
	int  acl_get_tag_type(acl_entry_t entry_d , acl_tag_t *tag_type_p )
	acl_t  acl_init(int count )
	int  acl_maximal_permset_mask_np(acl_permset_mask_t *mask_p )
	int  acl_set_fd(int fd , acl_t acl )
	int  acl_set_fd_np(int fd , acl_t acl , acl_type_t acl_type )
	int  acl_set_file(const char *path_p , acl_type_t type , acl_t acl )
	int  acl_set_flagset_np(void *obj_p , acl_flagset_t flagset_d )
	int  acl_set_link_np(const char *path_p , acl_type_t type , acl_t acl )
	int  acl_set_permset(acl_entry_t entry_d , acl_permset_t permset_d )
	int  acl_set_permset_mask_np(acl_entry_t entry_d , acl_permset_mask_t mask )
	int  acl_set_qualifier(acl_entry_t entry_d , const void *tag_qualifier_p )
	int  acl_set_tag_type(acl_entry_t entry_d , acl_tag_t tag_type )
	ssize_t  acl_size(acl_t acl )
	char *  acl_to_text(acl_t acl , ssize_t *len_p )
	int  acl_valid(acl_t acl )
	int  acl_valid_fd_np(int fd , acl_type_t type , acl_t acl )
	int  acl_valid_file_np(const char *path , acl_type_t type , acl_t acl )
	int  acl_valid_link_np(const char *path , acl_type_t type , acl_t acl )
	double  acos(double )
	float  acosf(float )
	double  acosh(double )
	float  acoshf(float )
	long double  acoshl(long double )
	long double  acosl(long double )
	OSErr  AcquireIconRef(IconRef theIconRef )
	int  add_profil(char * , size_t , unsigned long , unsigned int )
	AbsoluteTime  AddAbsoluteToAbsolute(AbsoluteTime absoluteTime1 , AbsoluteTime absoluteTime2 )
	SInt32  AddAtomic(SInt32 amount , SInt32 *address )
	SInt16  AddAtomic16(SInt32 amount , SInt16 *address )
	SInt8  AddAtomic8(SInt32 amount , SInt8 *address )
	OSErr  AddCollectionItem(Collection c , CollectionTag tag , SInt32 id , SInt32 itemSize , const void *itemData )
	OSErr  AddCollectionItemHdl(Collection aCollection , CollectionTag tag , SInt32 id , Handle itemData )
	AbsoluteTime  AddDurationToAbsolute(Duration duration , AbsoluteTime absoluteTime )
	OSErr  AddFolderDescriptor(FolderType foldType , FolderDescFlags flags , FolderClass foldClass , FolderLocation foldLocation , OSType badgeSignature , OSType badgeType , ConstStrFileNameParam name , Boolean replaceFlag )
	AbsoluteTime  AddNanosecondsToAbsolute(Nanoseconds nanoseconds , AbsoluteTime absoluteTime )
	void  AddResource(Handle theData , ResType theType , ResID theID , ConstStr255Param name )
	OSStatus  AEBuildAppleEvent(AEEventClass theClass , AEEventID theID , DescType addressType , const void *addressData , Size addressLength , SInt16 returnID , SInt32 transactionID , AppleEvent *result , AEBuildError *error , const char *paramsFmt, ... )
	OSStatus  AEBuildDesc(AEDesc *dst , AEBuildError *error , const char *src, ... )
	OSStatus  AEBuildParameters(AppleEvent *event , AEBuildError *error , const char *format, ... )
	OSErr  AECallObjectAccessor(DescType desiredClass , const AEDesc *containerToken , DescType containerClass , DescType keyForm , const AEDesc *keyData , AEDesc *token )
	Boolean  AECheckIsRecord(const AEDesc *theDesc )
	OSErr  AECoerceDesc(const AEDesc *theAEDesc , DescType toType , AEDesc *result )
	OSErr  AECoercePtr(DescType typeCode , const void *dataPtr , Size dataSize , DescType toType , AEDesc *result )
	OSStatus  AECompareDesc(const AEDesc *desc1 , const AEDesc *desc2 , Boolean *resultP )
	OSErr  AECountItems(const AEDescList *theAEDescList , long *theCount )
	OSErr  AECreateAppleEvent(AEEventClass theAEEventClass , AEEventID theAEEventID , const AEAddressDesc *target , AEReturnID returnID , AETransactionID transactionID , AppleEvent *result )
	OSErr  AECreateDesc(DescType typeCode , const void *dataPtr , Size dataSize , AEDesc *result )
	OSStatus  AECreateDescFromExternalPtr(OSType descriptorType , const void *dataPtr , Size dataLength , AEDisposeExternalUPP disposeCallback , SRefCon disposeRefcon , AEDesc *theDesc )
	OSErr  AECreateList(const void *factoringPtr , Size factoredSize , Boolean isRecord , AEDescList *resultList )
	AERemoteProcessResolverRef  AECreateRemoteProcessResolver(CFAllocatorRef allocator , CFURLRef url )
	OSStatus  AEDecodeMessage(mach_msg_header_t *header , AppleEvent *event , AppleEvent *reply )
	OSErr  AEDeleteItem(AEDescList *theAEDescList , long index )
	OSErr  AEDeleteParam(AppleEvent *theAppleEvent , AEKeyword theAEKeyword )
	OSErr  AEDisposeDesc(AEDesc *theAEDesc )
	void  AEDisposeRemoteProcessResolver(AERemoteProcessResolverRef ref )
	OSErr  AEDisposeToken(AEDesc *theToken )
	OSErr  AEDuplicateDesc(const AEDesc *theAEDesc , AEDesc *result )
	OSStatus  AEFlattenDesc(const AEDesc *theAEDesc , Ptr buffer , Size bufferSize , Size *actualSize )
	OSErr  AEGetArray(const AEDescList *theAEDescList , AEArrayType arrayType , AEArrayDataPointer arrayPtr , Size maximumSize , DescType *itemType , Size *itemSize , long *itemCount )
	OSErr  AEGetAttributeDesc(const AppleEvent *theAppleEvent , AEKeyword theAEKeyword , DescType desiredType , AEDesc *result )
	OSErr  AEGetAttributePtr(const AppleEvent *theAppleEvent , AEKeyword theAEKeyword , DescType desiredType , DescType *typeCode , void *dataPtr , Size maximumSize , Size *actualSize )
	OSErr  AEGetCoercionHandler(DescType fromType , DescType toType , AECoercionHandlerUPP *handler , SRefCon *handlerRefcon , Boolean *fromTypeIsDesc , Boolean isSysHandler )
	OSErr  AEGetDescData(const AEDesc *theAEDesc , void *dataPtr , Size maximumSize )
	OSStatus  AEGetDescDataRange(const AEDesc *dataDesc , void *buffer , Size offset , Size length )
	Size  AEGetDescDataSize(const AEDesc *theAEDesc )
	OSErr  AEGetEventHandler(AEEventClass theAEEventClass , AEEventID theAEEventID , AEEventHandlerUPP *handler , SRefCon *handlerRefcon , Boolean isSysHandler )
	OSErr  AEGetNthDesc(const AEDescList *theAEDescList , long index , DescType desiredType , AEKeyword *theAEKeyword , AEDesc *result )
	OSErr  AEGetNthPtr(const AEDescList *theAEDescList , long index , DescType desiredType , AEKeyword *theAEKeyword , DescType *typeCode , void *dataPtr , Size maximumSize , Size *actualSize )
	OSErr  AEGetObjectAccessor(DescType desiredClass , DescType containerType , OSLAccessorUPP *accessor , SRefCon *accessorRefcon , Boolean isSysHandler )
	OSErr  AEGetParamDesc(const AppleEvent *theAppleEvent , AEKeyword theAEKeyword , DescType desiredType , AEDesc *result )
	OSErr  AEGetParamPtr(const AppleEvent *theAppleEvent , AEKeyword theAEKeyword , DescType desiredType , DescType *actualType , void *dataPtr , Size maximumSize , Size *actualSize )
	mach_port_t  AEGetRegisteredMachPort()
	OSErr  AEGetSpecialHandler(AEKeyword functionClass , AEEventHandlerUPP *handler , Boolean isSysHandler )
	void  AEInitializeDesc(AEDesc *desc )
	void  AEInitializeDescInline(AEDesc *d )
	OSErr  AEInstallCoercionHandler(DescType fromType , DescType toType , AECoercionHandlerUPP handler , SRefCon handlerRefcon , Boolean fromTypeIsDesc , Boolean isSysHandler )
	OSErr  AEInstallEventHandler(AEEventClass theAEEventClass , AEEventID theAEEventID , AEEventHandlerUPP handler , SRefCon handlerRefcon , Boolean isSysHandler )
	OSErr  AEInstallObjectAccessor(DescType desiredClass , DescType containerType , OSLAccessorUPP theAccessor , SRefCon accessorRefcon , Boolean isSysHandler )
	OSErr  AEInstallSpecialHandler(AEKeyword functionClass , AEEventHandlerUPP handler , Boolean isSysHandler )
	OSErr  AEManagerInfo(AEKeyword keyWord , long *result )
	OSErr  AEObjectInit()
	OSStatus  AEPrintDescToHandle(const AEDesc *desc , Handle *result )
	OSStatus  AEProcessMessage(mach_msg_header_t *header )
	OSErr  AEPutArray(AEDescList *theAEDescList , AEArrayType arrayType , const AEArrayData *arrayPtr , DescType itemType , Size itemSize , long itemCount )
	OSErr  AEPutAttributeDesc(AppleEvent *theAppleEvent , AEKeyword theAEKeyword , const AEDesc *theAEDesc )
	OSErr  AEPutAttributePtr(AppleEvent *theAppleEvent , AEKeyword theAEKeyword , DescType typeCode , const void *dataPtr , Size dataSize )
	OSErr  AEPutDesc(AEDescList *theAEDescList , long index , const AEDesc *theAEDesc )
	OSErr  AEPutParamDesc(AppleEvent *theAppleEvent , AEKeyword theAEKeyword , const AEDesc *theAEDesc )
	OSErr  AEPutParamPtr(AppleEvent *theAppleEvent , AEKeyword theAEKeyword , DescType typeCode , const void *dataPtr , Size dataSize )
	OSErr  AEPutPtr(AEDescList *theAEDescList , long index , DescType typeCode , const void *dataPtr , Size dataSize )
	CFArrayRef  AERemoteProcessResolverGetProcesses(AERemoteProcessResolverRef ref , CFStreamError *outError )
	void  AERemoteProcessResolverScheduleWithRunLoop(AERemoteProcessResolverRef ref , CFRunLoopRef runLoop , CFStringRef runLoopMode , AERemoteProcessResolverCallback callback , const AERemoteProcessResolverContext *ctx )
	OSErr  AERemoveCoercionHandler(DescType fromType , DescType toType , AECoercionHandlerUPP handler , Boolean isSysHandler )
	OSErr  AERemoveEventHandler(AEEventClass theAEEventClass , AEEventID theAEEventID , AEEventHandlerUPP handler , Boolean isSysHandler )
	OSErr  AERemoveObjectAccessor(DescType desiredClass , DescType containerType , OSLAccessorUPP theAccessor , Boolean isSysHandler )
	OSErr  AERemoveSpecialHandler(AEKeyword functionClass , AEEventHandlerUPP handler , Boolean isSysHandler )
	OSErr  AEReplaceDescData(DescType typeCode , const void *dataPtr , Size dataSize , AEDesc *theAEDesc )
	OSErr  AEResolve(const AEDesc *objectSpecifier , short callbackFlags , AEDesc *theToken )
	OSStatus  AESendMessage(const AppleEvent *event , AppleEvent *reply , AESendMode sendMode , long timeOutInTicks )
	OSErr  AESetObjectCallbacks(OSLCompareUPP myCompareProc , OSLCountUPP myCountProc , OSLDisposeTokenUPP myDisposeTokenProc , OSLGetMarkTokenUPP myGetMarkTokenProc , OSLMarkUPP myMarkProc , OSLAdjustMarksUPP myAdjustMarksProc , OSLGetErrDescUPP myGetErrDescProcPtr )
	OSErr  AESizeOfAttribute(const AppleEvent *theAppleEvent , AEKeyword theAEKeyword , DescType *typeCode , Size *dataSize )
	Size  AESizeOfFlattenedDesc(const AEDesc *theAEDesc )
	OSErr  AESizeOfNthItem(const AEDescList *theAEDescList , long index , DescType *typeCode , Size *dataSize )
	OSErr  AESizeOfParam(const AppleEvent *theAppleEvent , AEKeyword theAEKeyword , DescType *typeCode , Size *dataSize )
	OSStatus  AEStreamClose(AEStreamRef ref , AEDesc *desc )
	OSStatus  AEStreamCloseDesc(AEStreamRef ref )
	OSStatus  AEStreamCloseList(AEStreamRef ref )
	OSStatus  AEStreamCloseRecord(AEStreamRef ref )
	AEStreamRef  AEStreamCreateEvent(AEEventClass clazz , AEEventID id , DescType targetType , const void *targetData , Size targetLength , SInt16 returnID , SInt32 transactionID )
	AEStreamRef  AEStreamOpen()
	OSStatus  AEStreamOpenDesc(AEStreamRef ref , DescType newType )
	AEStreamRef  AEStreamOpenEvent(AppleEvent *event )
	OSStatus  AEStreamOpenKeyDesc(AEStreamRef ref , AEKeyword key , DescType newType )
	OSStatus  AEStreamOpenList(AEStreamRef ref )
	OSStatus  AEStreamOpenRecord(AEStreamRef ref , DescType newType )
	OSStatus  AEStreamOptionalParam(AEStreamRef ref , AEKeyword key )
	OSStatus  AEStreamSetRecordType(AEStreamRef ref , DescType newType )
	OSStatus  AEStreamWriteAEDesc(AEStreamRef ref , const AEDesc *desc )
	OSStatus  AEStreamWriteData(AEStreamRef ref , const void *data , Size length )
	OSStatus  AEStreamWriteDesc(AEStreamRef ref , DescType newType , const void *data , Size length )
	OSStatus  AEStreamWriteKey(AEStreamRef ref , AEKeyword key )
	OSStatus  AEStreamWriteKeyDesc(AEStreamRef ref , AEKeyword key , DescType newType , const void *data , Size length )
	OSStatus  AEUnflattenDesc(const void *buffer , AEDesc *result )
	unsigned int  alarm(unsigned int )
	void  AlertSoundPlay()
	void  AlertSoundPlayCustomSound(SystemSoundActionID inAction )
	void *  alloca(size_t )
	double  annuity(double rate , double periods )
	u_int32_t  arc4random()
	void  arc4random_addrandom(unsigned char * , int )
	void  arc4random_buf(void * , size_t )
	void  arc4random_stir()
	u_int32_t  arc4random_uniform(u_int32_t )
	char *  asctime(const struct tm * )
	char *  asctime_r(const struct tm * , char * )
	double  asin(double )
	float  asinf(float )
	double  asinh(double )
	float  asinhf(float )
	long double  asinhl(long double )
	long double  asinl(long double )
	int  asprintf(char ** , const char *, ... )
	double  atan(double )
	double  atan2(double , double )
	float  atan2f(float , float )
	long double  atan2l(long double , long double )
	float  atanf(float )
	double  atanh(double )
	float  atanhf(float )
	long double  atanhl(long double )
	long double  atanl(long double )
	int  atexit(void (*)() )
	int  atexit_b(^(void) )
	double  atof(const char * )
	int  atoi(const char * )
	long  atol(const char * )
	long long  atoll(const char * )
	CFRunLoopSourceRef  ATSCreateFontQueryRunLoopSource(CFIndex queryOrder , CFIndex sourceOrder , ATSFontQueryCallback callout , const ATSFontQuerySourceContext *context )
	OSStatus  ATSFontActivateFromFileReference(const FSRef *iFile , ATSFontContext iContext , ATSFontFormat iFormat , void *iRefCon , ATSOptionFlags iOptions , ATSFontContainerRef *oContainer )
	OSStatus  ATSFontActivateFromMemory(LogicalAddress iData , ByteCount iLength , ATSFontContext iContext , ATSFontFormat iFormat , void *iReserved , ATSOptionFlags iOptions , ATSFontContainerRef *oContainer )
	OSStatus  ATSFontApplyFunction(ATSFontApplierFunction iFunction , void *iRefCon )
	OSStatus  ATSFontDeactivate(ATSFontContainerRef iContainer , void *iRefCon , ATSOptionFlags iOptions )
	OSStatus  ATSFontFamilyApplyFunction(ATSFontFamilyApplierFunction iFunction , void *iRefCon )
	ATSFontFamilyRef  ATSFontFamilyFindFromName(CFStringRef iName , ATSOptionFlags iOptions )
	ATSFontFamilyRef  ATSFontFamilyFindFromQuickDrawName(ConstStr255Param iName )
	TextEncoding  ATSFontFamilyGetEncoding(ATSFontFamilyRef iFamily )
	ATSGeneration  ATSFontFamilyGetGeneration(ATSFontFamilyRef iFamily )
	OSStatus  ATSFontFamilyGetName(ATSFontFamilyRef iFamily , ATSOptionFlags iOptions , CFStringRef *oName )
	OSStatus  ATSFontFamilyGetQuickDrawName(ATSFontFamilyRef iFamily , unsigned char *oName )
	OSStatus  ATSFontFamilyIteratorCreate(ATSFontContext iContext , const ATSFontFilter *iFilter , void *iRefCon , ATSOptionFlags iOptions , ATSFontFamilyIterator *ioIterator )
	OSStatus  ATSFontFamilyIteratorNext(ATSFontFamilyIterator iIterator , ATSFontFamilyRef *oFamily )
	OSStatus  ATSFontFamilyIteratorRelease(ATSFontFamilyIterator *ioIterator )
	OSStatus  ATSFontFamilyIteratorReset(ATSFontContext iContext , const ATSFontFilter *iFilter , void *iRefCon , ATSOptionFlags iOptions , ATSFontFamilyIterator *ioIterator )
	OSStatus  ATSFontFindFromContainer(ATSFontContainerRef iContainer , ATSOptionFlags iOptions , ItemCount iCount , ATSFontRef *ioArray , ItemCount *oCount )
	ATSFontRef  ATSFontFindFromName(CFStringRef iName , ATSOptionFlags iOptions )
	ATSFontRef  ATSFontFindFromPostScriptName(CFStringRef iName , ATSOptionFlags iOptions )
	ATSFontAutoActivationSetting  ATSFontGetAutoActivationSettingForApplication(CFURLRef iApplicationFileURL )
	OSStatus  ATSFontGetContainer(ATSFontRef iFont , ATSOptionFlags iOptions , ATSFontContainerRef *oContainer )
	OSStatus  ATSFontGetContainerFromFileReference(const FSRef *iFile , ATSFontContext iContext , ATSOptionFlags iOptions , ATSFontContainerRef *oContainer )
	OSStatus  ATSFontGetFileReference(ATSFontRef iFont , FSRef *oFile )
	OSStatus  ATSFontGetFontFamilyResource(ATSFontRef iFont , ByteCount iBufferSize , void *ioBuffer , ByteCount *oSize )
	ATSGeneration  ATSFontGetGeneration(ATSFontRef iFont )
	ATSFontAutoActivationSetting  ATSFontGetGlobalAutoActivationSetting()
	OSStatus  ATSFontGetHorizontalMetrics(ATSFontRef iFont , ATSOptionFlags iOptions , ATSFontMetrics *oMetrics )
	OSStatus  ATSFontGetName(ATSFontRef iFont , ATSOptionFlags iOptions , CFStringRef *oName )
	OSStatus  ATSFontGetPostScriptName(ATSFontRef iFont , ATSOptionFlags iOptions , CFStringRef *oName )
	OSStatus  ATSFontGetTable(ATSFontRef iFont , FourCharCode iTag , ByteOffset iOffset , ByteCount iBufferSize , void *ioBuffer , ByteCount *oSize )
	OSStatus  ATSFontGetTableDirectory(ATSFontRef iFont , ByteCount iBufferSize , void *ioBuffer , ByteCount *oSize )
	OSStatus  ATSFontGetVerticalMetrics(ATSFontRef iFont , ATSOptionFlags iOptions , ATSFontMetrics *oMetrics )
	Boolean  ATSFontIsEnabled(ATSFontRef iFont )
	OSStatus  ATSFontIteratorCreate(ATSFontContext iContext , const ATSFontFilter *iFilter , void *iRefCon , ATSOptionFlags iOptions , ATSFontIterator *ioIterator )
	OSStatus  ATSFontIteratorNext(ATSFontIterator iIterator , ATSFontRef *oFont )
	OSStatus  ATSFontIteratorRelease(ATSFontIterator *ioIterator )
	OSStatus  ATSFontIteratorReset(ATSFontContext iContext , const ATSFontFilter *iFilter , void *iRefCon , ATSOptionFlags iOptions , ATSFontIterator *ioIterator )
	OSStatus  ATSFontNotificationSubscribe(ATSNotificationCallback callback , ATSFontNotifyOption options , void *iRefcon , ATSFontNotificationRef *oNotificationRef )
	OSStatus  ATSFontNotificationUnsubscribe(ATSFontNotificationRef notificationRef )
	OSStatus  ATSFontNotify(ATSFontNotifyAction action , void *info )
	OSStatus  ATSFontSetAutoActivationSettingForApplication(ATSFontAutoActivationSetting iSetting , CFURLRef iApplicationFileURL )
	OSStatus  ATSFontSetEnabled(ATSFontRef iFont , ATSOptionFlags iOptions , Boolean iEnabled )
	OSStatus  ATSFontSetGlobalAutoActivationSetting(ATSFontAutoActivationSetting iSetting )
	ATSGeneration  ATSGetGeneration()
	OSStatus  ATSUClearLayoutCache(ATSUTextLayout iTextLayout , UniCharArrayOffset iLineStart )
	OSStatus  ATSUCreateStyle(ATSUStyle *oStyle )
	OSStatus  ATSUCreateTextLayoutWithTextPtr(ConstUniCharArrayPtr iText , UniCharArrayOffset iTextOffset , UniCharCount iTextLength , UniCharCount iTextTotalLength , ItemCount iNumberOfRuns , const UniCharCount *iRunLengths , ATSUStyle *iStyles , ATSUTextLayout *oTextLayout )
	OSStatus  ATSUDirectGetLayoutDataArrayPtrFromLineRef(ATSULineRef iLineRef , ATSUDirectDataSelector iDataSelector , Boolean iCreate , void **oLayoutDataArrayPtr , ItemCount *oLayoutDataCount )
	OSStatus  ATSUDirectReleaseLayoutDataArrayPtr(ATSULineRef iLineRef , ATSUDirectDataSelector iDataSelector , void **iLayoutDataArrayPtr )
	OSStatus  ATSUDisposeStyle(ATSUStyle iStyle )
	OSStatus  ATSUDisposeTextLayout(ATSUTextLayout iTextLayout )
	OSStatus  ATSUDrawText(ATSUTextLayout iTextLayout , UniCharArrayOffset iLineOffset , UniCharCount iLineLength , ATSUTextMeasurement iLocationX , ATSUTextMeasurement iLocationY )
	OSStatus  ATSUGetGlyphBounds(ATSUTextLayout iTextLayout , ATSUTextMeasurement iTextBasePointX , ATSUTextMeasurement iTextBasePointY , UniCharArrayOffset iBoundsCharStart , UniCharCount iBoundsCharLength , UInt16 iTypeOfBounds , ItemCount iMaxNumberOfBounds , ATSTrapezoid *oGlyphBounds , ItemCount *oActualNumberOfBounds )
	OSStatus  ATSUMatchFontsToText(ATSUTextLayout iTextLayout , UniCharArrayOffset iTextStart , UniCharCount iTextLength , ATSUFontID *oFontID , UniCharArrayOffset *oChangedOffset , UniCharCount *oChangedLength )
	OSStatus  ATSUPositionToOffset(ATSUTextLayout iTextLayout , ATSUTextMeasurement iLocationX , ATSUTextMeasurement iLocationY , UniCharArrayOffset *ioPrimaryOffset , Boolean *oIsLeading , UniCharArrayOffset *oSecondaryOffset )
	OSStatus  ATSUSetAttributes(ATSUStyle iStyle , ItemCount iAttributeCount , const ATSUAttributeTag *iTag , const ByteCount *iValueSize , const ATSUAttributeValuePtr *iValue )
	OSStatus  ATSUSetFontFeatures(ATSUStyle iStyle , ItemCount iFeatureCount , const ATSUFontFeatureType *iType , const ATSUFontFeatureSelector *iSelector )
	OSStatus  ATSUSetLayoutControls(ATSUTextLayout iTextLayout , ItemCount iAttributeCount , const ATSUAttributeTag *iTag , const ByteCount *iValueSize , const ATSUAttributeValuePtr *iValue )
	OSStatus  ATSUSetRunStyle(ATSUTextLayout iTextLayout , ATSUStyle iStyle , UniCharArrayOffset iRunStart , UniCharCount iRunLength )
	OSStatus  ATSUSetTextLayoutRefCon(ATSUTextLayout iTextLayout , URefCon iRefCon )
	OSStatus  ATSUSetTransientFontMatching(ATSUTextLayout iTextLayout , Boolean iTransientFontMatching )
	OSStatus  ATSUTextMoved(ATSUTextLayout iTextLayout , ConstUniCharArrayPtr iNewLocation )
	int  audit(const void * , int )
	au_asid_t  audit_session_join(mach_port_name_t port )
	int  audit_session_port(au_asid_t asid , mach_port_name_t *portname )
	mach_port_name_t  audit_session_self()
	int  auditctl(const char * )
	int  auditon(int , void * , int )
	OSStatus  AuthorizationCopyInfo(AuthorizationRef authorization , AuthorizationString tag , AuthorizationItemSet **info )
	OSStatus  AuthorizationCopyPrivilegedReference(AuthorizationRef *authorization , AuthorizationFlags flags )
	OSStatus  AuthorizationCopyRights(AuthorizationRef authorization , const AuthorizationRights *rights , const AuthorizationEnvironment *environment , AuthorizationFlags flags , AuthorizationRights **authorizedRights )
	void  AuthorizationCopyRightsAsync(AuthorizationRef authorization , const AuthorizationRights *rights , const AuthorizationEnvironment *environment , AuthorizationFlags flags , ^(OSStatus err, AuthorizationRights *blockAuthorizedRights)callbackBlock )
	OSStatus  AuthorizationCreate(const AuthorizationRights *rights , const AuthorizationEnvironment *environment , AuthorizationFlags flags , AuthorizationRef *authorization )
	OSStatus  AuthorizationCreateFromExternalForm(const AuthorizationExternalForm *extForm , AuthorizationRef *authorization )
	OSStatus  AuthorizationExecuteWithPrivileges(AuthorizationRef authorization , const char *pathToTool , AuthorizationFlags options , char *const *arguments , FILE **communicationsPipe )
	OSStatus  AuthorizationFree(AuthorizationRef authorization , AuthorizationFlags flags )
	OSStatus  AuthorizationFreeItemSet(AuthorizationItemSet *set )
	OSStatus  AuthorizationMakeExternalForm(AuthorizationRef authorization , AuthorizationExternalForm *extForm )
	OSStatus  AuthorizationRightGet(const char *rightName , CFDictionaryRef *rightDefinition )
	OSStatus  AuthorizationRightRemove(AuthorizationRef authRef , const char *rightName )
	OSStatus  AuthorizationRightSet(AuthorizationRef authRef , const char *rightName , CFTypeRef rightDefinition , CFStringRef descriptionKey , CFBundleRef bundle , CFStringRef localeTableName )
	Boolean  AXAPIEnabled()
	Boolean  AXIsProcessTrusted()
	AXError  AXMakeProcessTrusted(CFStringRef executablePath )
	AXError  AXObserverAddNotification(AXObserverRef observer , AXUIElementRef element , CFStringRef notification , void *refcon )
	AXError  AXObserverCreate(pid_t application , AXObserverCallback callback , AXObserverRef *outObserver )
	CFRunLoopSourceRef  AXObserverGetRunLoopSource(AXObserverRef observer )
	CFTypeID  AXObserverGetTypeID()
	AXError  AXObserverRemoveNotification(AXObserverRef observer , AXUIElementRef element , CFStringRef notification )
	AXError  AXUIElementCopyActionDescription(AXUIElementRef element , CFStringRef action , CFStringRef *description )
	AXError  AXUIElementCopyActionNames(AXUIElementRef element , CFArrayRef *names )
	AXError  AXUIElementCopyAttributeNames(AXUIElementRef element , CFArrayRef *names )
	AXError  AXUIElementCopyAttributeValue(AXUIElementRef element , CFStringRef attribute , CFTypeRef *value )
	AXError  AXUIElementCopyAttributeValues(AXUIElementRef element , CFStringRef attribute , CFIndex index , CFIndex maxValues , CFArrayRef *values )
	AXError  AXUIElementCopyElementAtPosition(AXUIElementRef application , float x , float y , AXUIElementRef *element )
	AXError  AXUIElementCopyMultipleAttributeValues(AXUIElementRef element , CFArrayRef attributes , AXCopyMultipleAttributeOptions options , CFArrayRef *values )
	AXError  AXUIElementCopyParameterizedAttributeNames(AXUIElementRef element , CFArrayRef *names )
	AXError  AXUIElementCopyParameterizedAttributeValue(AXUIElementRef element , CFStringRef parameterizedAttribute , CFTypeRef parameter , CFTypeRef *result )
	AXUIElementRef  AXUIElementCreateApplication(pid_t pid )
	AXUIElementRef  AXUIElementCreateSystemWide()
	AXError  AXUIElementGetAttributeValueCount(AXUIElementRef element , CFStringRef attribute , CFIndex *count )
	AXError  AXUIElementGetPid(AXUIElementRef element , pid_t *pid )
	CFTypeID  AXUIElementGetTypeID()
	AXError  AXUIElementIsAttributeSettable(AXUIElementRef element , CFStringRef attribute , Boolean *settable )
	AXError  AXUIElementPerformAction(AXUIElementRef element , CFStringRef action )
	AXError  AXUIElementPostKeyboardEvent(AXUIElementRef application , CGCharCode keyChar , CGKeyCode virtualKey , Boolean keyDown )
	AXError  AXUIElementSetAttributeValue(AXUIElementRef element , CFStringRef attribute , CFTypeRef value )
	AXError  AXUIElementSetMessagingTimeout(AXUIElementRef element , float timeoutInSeconds )
	AXValueRef  AXValueCreate(AXValueType theType , const void *valuePtr )
	AXValueType  AXValueGetType(AXValueRef value )
	CFTypeID  AXValueGetTypeID()
	Boolean  AXValueGetValue(AXValueRef value , AXValueType theType , void *valuePtr )
	short  BatteryCount()
	int  bcmp(const void * , const void * , size_t )
	void  bcopy(const void * , void * , size_t )
	long  BitAnd(long value1 , long value2 )
	UInt32  BitAndAtomic(UInt32 mask , UInt32 *address )
	UInt16  BitAndAtomic16(UInt32 mask , UInt16 *address )
	UInt8  BitAndAtomic8(UInt32 mask , UInt8 *address )
	void  BitClr(void *bytePtr , long bitNum )
	long  BitNot(long value )
	long  BitOr(long value1 , long value2 )
	UInt32  BitOrAtomic(UInt32 mask , UInt32 *address )
	UInt16  BitOrAtomic16(UInt32 mask , UInt16 *address )
	UInt8  BitOrAtomic8(UInt32 mask , UInt8 *address )
	void  BitSet(void *bytePtr , long bitNum )
	long  BitShift(long value , short count )
	Boolean  BitTst(const void *bytePtr , long bitNum )
	long  BitXor(long value1 , long value2 )
	UInt32  BitXorAtomic(UInt32 mask , UInt32 *address )
	UInt16  BitXorAtomic16(UInt32 mask , UInt16 *address )
	UInt8  BitXorAtomic8(UInt32 mask , UInt8 *address )
	void *  brk(const void * )
	void (*)(int)  bsd_signal(int , void (*)(int) )
	void *  bsearch(const void * , const void * , size_t , size_t , int (*)(const void *, const void *) )
	void *  bsearch_b(const void * , const void * , size_t , size_t , ^int(const void *, const void *) )
	void  bzero(void * , size_t )
	CFTimeInterval  CACurrentMediaTime()
	ComponentResult  CallComponentCanDo(ComponentInstance ci , SInt16 ftnNumber )
	ComponentResult  CallComponentClose(ComponentInstance ci , ComponentInstance self )
	ComponentResult  CallComponentDispatch(ComponentParameters *cp )
	ComponentResult  CallComponentFunction(ComponentParameters *params , ComponentFunctionUPP func )
	ComponentResult  CallComponentFunctionWithStorage(Handle storage , ComponentParameters *params , ComponentFunctionUPP func )
	ComponentResult  CallComponentFunctionWithStorageProcInfo(Handle storage , ComponentParameters *params , ProcPtr func , ProcInfoType funcProcInfo )
	ComponentResult  CallComponentGetMPWorkFunction(ComponentInstance ci , ComponentMPWorkFunctionUPP *workFunction , void **refCon )
	ComponentResult  CallComponentGetPublicResource(ComponentInstance ci , OSType resourceType , SInt16 resourceID , Handle *resource )
	ComponentResult  CallComponentOpen(ComponentInstance ci , ComponentInstance self )
	ComponentResult  CallComponentRegister(ComponentInstance ci )
	ComponentResult  CallComponentTarget(ComponentInstance ci , ComponentInstance target )
	ComponentResult  CallComponentUnregister(ComponentInstance ci )
	ComponentResult  CallComponentVersion(ComponentInstance ci )
	void *  calloc(size_t , size_t )
	Component  CaptureComponent(Component capturedComponent , Component capturingComponent )
	CATransform3D  CATransform3DConcat(CATransform3D a , CATransform3D b )
	bool  CATransform3DEqualToTransform(CATransform3D a , CATransform3D b )
	CGAffineTransform  CATransform3DGetAffineTransform(CATransform3D t )
	CATransform3D  CATransform3DInvert(CATransform3D t )
	bool  CATransform3DIsAffine(CATransform3D t )
	bool  CATransform3DIsIdentity(CATransform3D t )
	CATransform3D  CATransform3DMakeAffineTransform(CGAffineTransform m )
	CATransform3D  CATransform3DMakeRotation(CGFloat angle , CGFloat x , CGFloat y , CGFloat z )
	CATransform3D  CATransform3DMakeScale(CGFloat sx , CGFloat sy , CGFloat sz )
	CATransform3D  CATransform3DMakeTranslation(CGFloat tx , CGFloat ty , CGFloat tz )
	CATransform3D  CATransform3DRotate(CATransform3D t , CGFloat angle , CGFloat x , CGFloat y , CGFloat z )
	CATransform3D  CATransform3DScale(CATransform3D t , CGFloat sx , CGFloat sy , CGFloat sz )
	CATransform3D  CATransform3DTranslate(CATransform3D t , CGFloat tx , CGFloat ty , CGFloat tz )
	double  cbrt(double )
	float  cbrtf(float )
	long double  cbrtl(long double )
	double  ceil(double )
	float  ceilf(float )
	long double  ceill(long double )
	CFAbsoluteTime  CFAbsoluteTimeAddGregorianUnits(CFAbsoluteTime at , CFTimeZoneRef tz , CFGregorianUnits units )
	CFAbsoluteTime  CFAbsoluteTimeGetCurrent()
	SInt32  CFAbsoluteTimeGetDayOfWeek(CFAbsoluteTime at , CFTimeZoneRef tz )
	SInt32  CFAbsoluteTimeGetDayOfYear(CFAbsoluteTime at , CFTimeZoneRef tz )
	CFGregorianUnits  CFAbsoluteTimeGetDifferenceAsGregorianUnits(CFAbsoluteTime at1 , CFAbsoluteTime at2 , CFTimeZoneRef tz , CFOptionFlags unitFlags )
	CFGregorianDate  CFAbsoluteTimeGetGregorianDate(CFAbsoluteTime at , CFTimeZoneRef tz )
	SInt32  CFAbsoluteTimeGetWeekOfYear(CFAbsoluteTime at , CFTimeZoneRef tz )
	void *  CFAllocatorAllocate(CFAllocatorRef allocator , CFIndex size , CFOptionFlags hint )
	CFAllocatorRef  CFAllocatorCreate(CFAllocatorRef allocator , CFAllocatorContext *context )
	void  CFAllocatorDeallocate(CFAllocatorRef allocator , void *ptr )
	void  CFAllocatorGetContext(CFAllocatorRef allocator , CFAllocatorContext *context )
	CFAllocatorRef  CFAllocatorGetDefault()
	CFIndex  CFAllocatorGetPreferredSizeForSize(CFAllocatorRef allocator , CFIndex size , CFOptionFlags hint )
	CFTypeID  CFAllocatorGetTypeID()
	void *  CFAllocatorReallocate(CFAllocatorRef allocator , void *ptr , CFIndex newsize , CFOptionFlags hint )
	void  CFAllocatorSetDefault(CFAllocatorRef allocator )
	void  CFArrayAppendArray(CFMutableArrayRef theArray , CFArrayRef otherArray , CFRange otherRange )
	void  CFArrayAppendValue(CFMutableArrayRef theArray , const void *value )
	void  CFArrayApplyFunction(CFArrayRef theArray , CFRange range , CFArrayApplierFunction applier , void *context )
	CFIndex  CFArrayBSearchValues(CFArrayRef theArray , CFRange range , const void *value , CFComparatorFunction comparator , void *context )
	Boolean  CFArrayContainsValue(CFArrayRef theArray , CFRange range , const void *value )
	CFArrayRef  CFArrayCreate(CFAllocatorRef allocator , const void **values , CFIndex numValues , const CFArrayCallBacks *callBacks )
	CFArrayRef  CFArrayCreateCopy(CFAllocatorRef allocator , CFArrayRef theArray )
	CFMutableArrayRef  CFArrayCreateMutable(CFAllocatorRef allocator , CFIndex capacity , const CFArrayCallBacks *callBacks )
	CFMutableArrayRef  CFArrayCreateMutableCopy(CFAllocatorRef allocator , CFIndex capacity , CFArrayRef theArray )
	void  CFArrayExchangeValuesAtIndices(CFMutableArrayRef theArray , CFIndex idx1 , CFIndex idx2 )
	CFIndex  CFArrayGetCount(CFArrayRef theArray )
	CFIndex  CFArrayGetCountOfValue(CFArrayRef theArray , CFRange range , const void *value )
	CFIndex  CFArrayGetFirstIndexOfValue(CFArrayRef theArray , CFRange range , const void *value )
	CFIndex  CFArrayGetLastIndexOfValue(CFArrayRef theArray , CFRange range , const void *value )
	CFTypeID  CFArrayGetTypeID()
	const void *  CFArrayGetValueAtIndex(CFArrayRef theArray , CFIndex idx )
	void  CFArrayGetValues(CFArrayRef theArray , CFRange range , const void **values )
	void  CFArrayInsertValueAtIndex(CFMutableArrayRef theArray , CFIndex idx , const void *value )
	void  CFArrayRemoveAllValues(CFMutableArrayRef theArray )
	void  CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray , CFIndex idx )
	void  CFArrayReplaceValues(CFMutableArrayRef theArray , CFRange range , const void **newValues , CFIndex newCount )
	void  CFArraySetValueAtIndex(CFMutableArrayRef theArray , CFIndex idx , const void *value )
	void  CFArraySortValues(CFMutableArrayRef theArray , CFRange range , CFComparatorFunction comparator , void *context )
	void  CFAttributedStringBeginEditing(CFMutableAttributedStringRef aStr )
	CFAttributedStringRef  CFAttributedStringCreate(CFAllocatorRef alloc , CFStringRef str , CFDictionaryRef attributes )
	CFAttributedStringRef  CFAttributedStringCreateCopy(CFAllocatorRef alloc , CFAttributedStringRef aStr )
	CFMutableAttributedStringRef  CFAttributedStringCreateMutable(CFAllocatorRef alloc , CFIndex maxLength )
	CFMutableAttributedStringRef  CFAttributedStringCreateMutableCopy(CFAllocatorRef alloc , CFIndex maxLength , CFAttributedStringRef aStr )
	CFAttributedStringRef  CFAttributedStringCreateWithSubstring(CFAllocatorRef alloc , CFAttributedStringRef aStr , CFRange range )
	void  CFAttributedStringEndEditing(CFMutableAttributedStringRef aStr )
	CFTypeRef  CFAttributedStringGetAttribute(CFAttributedStringRef aStr , CFIndex loc , CFStringRef attrName , CFRange *effectiveRange )
	CFTypeRef  CFAttributedStringGetAttributeAndLongestEffectiveRange(CFAttributedStringRef aStr , CFIndex loc , CFStringRef attrName , CFRange inRange , CFRange *longestEffectiveRange )
	CFDictionaryRef  CFAttributedStringGetAttributes(CFAttributedStringRef aStr , CFIndex loc , CFRange *effectiveRange )
	CFDictionaryRef  CFAttributedStringGetAttributesAndLongestEffectiveRange(CFAttributedStringRef aStr , CFIndex loc , CFRange inRange , CFRange *longestEffectiveRange )
	CFIndex  CFAttributedStringGetLength(CFAttributedStringRef aStr )
	CFMutableStringRef  CFAttributedStringGetMutableString(CFMutableAttributedStringRef aStr )
	CFStringRef  CFAttributedStringGetString(CFAttributedStringRef aStr )
	CFTypeID  CFAttributedStringGetTypeID()
	void  CFAttributedStringRemoveAttribute(CFMutableAttributedStringRef aStr , CFRange range , CFStringRef attrName )
	void  CFAttributedStringReplaceAttributedString(CFMutableAttributedStringRef aStr , CFRange range , CFAttributedStringRef replacement )
	void  CFAttributedStringReplaceString(CFMutableAttributedStringRef aStr , CFRange range , CFStringRef replacement )
	void  CFAttributedStringSetAttribute(CFMutableAttributedStringRef aStr , CFRange range , CFStringRef attrName , CFTypeRef value )
	void  CFAttributedStringSetAttributes(CFMutableAttributedStringRef aStr , CFRange range , CFDictionaryRef replacement , Boolean clearOtherAttributes )
	void  CFBagAddValue(CFMutableBagRef theBag , const void *value )
	void  CFBagApplyFunction(CFBagRef theBag , CFBagApplierFunction applier , void *context )
	Boolean  CFBagContainsValue(CFBagRef theBag , const void *value )
	CFBagRef  CFBagCreate(CFAllocatorRef allocator , const void **values , CFIndex numValues , const CFBagCallBacks *callBacks )
	CFBagRef  CFBagCreateCopy(CFAllocatorRef allocator , CFBagRef theBag )
	CFMutableBagRef  CFBagCreateMutable(CFAllocatorRef allocator , CFIndex capacity , const CFBagCallBacks *callBacks )
	CFMutableBagRef  CFBagCreateMutableCopy(CFAllocatorRef allocator , CFIndex capacity , CFBagRef theBag )
	CFIndex  CFBagGetCount(CFBagRef theBag )
	CFIndex  CFBagGetCountOfValue(CFBagRef theBag , const void *value )
	CFTypeID  CFBagGetTypeID()
	const void *  CFBagGetValue(CFBagRef theBag , const void *value )
	Boolean  CFBagGetValueIfPresent(CFBagRef theBag , const void *candidate , const void **value )
	void  CFBagGetValues(CFBagRef theBag , const void **values )
	void  CFBagRemoveAllValues(CFMutableBagRef theBag )
	void  CFBagRemoveValue(CFMutableBagRef theBag , const void *value )
	void  CFBagReplaceValue(CFMutableBagRef theBag , const void *value )
	void  CFBagSetValue(CFMutableBagRef theBag , const void *value )
	void  CFBinaryHeapAddValue(CFBinaryHeapRef heap , const void *value )
	void  CFBinaryHeapApplyFunction(CFBinaryHeapRef heap , CFBinaryHeapApplierFunction applier , void *context )
	Boolean  CFBinaryHeapContainsValue(CFBinaryHeapRef heap , const void *value )
	CFBinaryHeapRef  CFBinaryHeapCreate(CFAllocatorRef allocator , CFIndex capacity , const CFBinaryHeapCallBacks *callBacks , const CFBinaryHeapCompareContext *compareContext )
	CFBinaryHeapRef  CFBinaryHeapCreateCopy(CFAllocatorRef allocator , CFIndex capacity , CFBinaryHeapRef heap )
	CFIndex  CFBinaryHeapGetCount(CFBinaryHeapRef heap )
	CFIndex  CFBinaryHeapGetCountOfValue(CFBinaryHeapRef heap , const void *value )
	const void *  CFBinaryHeapGetMinimum(CFBinaryHeapRef heap )
	Boolean  CFBinaryHeapGetMinimumIfPresent(CFBinaryHeapRef heap , const void **value )
	CFTypeID  CFBinaryHeapGetTypeID()
	void  CFBinaryHeapGetValues(CFBinaryHeapRef heap , const void **values )
	void  CFBinaryHeapRemoveAllValues(CFBinaryHeapRef heap )
	void  CFBinaryHeapRemoveMinimumValue(CFBinaryHeapRef heap )
	Boolean  CFBitVectorContainsBit(CFBitVectorRef bv , CFRange range , CFBit value )
	CFBitVectorRef  CFBitVectorCreate(CFAllocatorRef allocator , const UInt8 *bytes , CFIndex numBits )
	CFBitVectorRef  CFBitVectorCreateCopy(CFAllocatorRef allocator , CFBitVectorRef bv )
	CFMutableBitVectorRef  CFBitVectorCreateMutable(CFAllocatorRef allocator , CFIndex capacity )
	CFMutableBitVectorRef  CFBitVectorCreateMutableCopy(CFAllocatorRef allocator , CFIndex capacity , CFBitVectorRef bv )
	void  CFBitVectorFlipBitAtIndex(CFMutableBitVectorRef bv , CFIndex idx )
	void  CFBitVectorFlipBits(CFMutableBitVectorRef bv , CFRange range )
	CFBit  CFBitVectorGetBitAtIndex(CFBitVectorRef bv , CFIndex idx )
	void  CFBitVectorGetBits(CFBitVectorRef bv , CFRange range , UInt8 *bytes )
	CFIndex  CFBitVectorGetCount(CFBitVectorRef bv )
	CFIndex  CFBitVectorGetCountOfBit(CFBitVectorRef bv , CFRange range , CFBit value )
	CFIndex  CFBitVectorGetFirstIndexOfBit(CFBitVectorRef bv , CFRange range , CFBit value )
	CFIndex  CFBitVectorGetLastIndexOfBit(CFBitVectorRef bv , CFRange range , CFBit value )
	CFTypeID  CFBitVectorGetTypeID()
	void  CFBitVectorSetAllBits(CFMutableBitVectorRef bv , CFBit value )
	void  CFBitVectorSetBitAtIndex(CFMutableBitVectorRef bv , CFIndex idx , CFBit value )
	void  CFBitVectorSetBits(CFMutableBitVectorRef bv , CFRange range , CFBit value )
	void  CFBitVectorSetCount(CFMutableBitVectorRef bv , CFIndex count )
	CFTypeID  CFBooleanGetTypeID()
	Boolean  CFBooleanGetValue(CFBooleanRef boolean )
	id  CFBridgingRelease(CFTypeRef X )
	CFTypeRef  CFBridgingRetain(id X )
	void  CFBundleCloseBundleResourceMap(CFBundleRef bundle , CFBundleRefNum refNum )
	CFURLRef  CFBundleCopyAuxiliaryExecutableURL(CFBundleRef bundle , CFStringRef executableName )
	CFURLRef  CFBundleCopyBuiltInPlugInsURL(CFBundleRef bundle )
	CFArrayRef  CFBundleCopyBundleLocalizations(CFBundleRef bundle )
	CFURLRef  CFBundleCopyBundleURL(CFBundleRef bundle )
	CFArrayRef  CFBundleCopyExecutableArchitectures(CFBundleRef bundle )
	CFArrayRef  CFBundleCopyExecutableArchitecturesForURL(CFURLRef url )
	CFURLRef  CFBundleCopyExecutableURL(CFBundleRef bundle )
	CFDictionaryRef  CFBundleCopyInfoDictionaryForURL(CFURLRef url )
	CFDictionaryRef  CFBundleCopyInfoDictionaryInDirectory(CFURLRef bundleURL )
	CFArrayRef  CFBundleCopyLocalizationsForPreferences(CFArrayRef locArray , CFArrayRef prefArray )
	CFArrayRef  CFBundleCopyLocalizationsForURL(CFURLRef url )
	CFStringRef  CFBundleCopyLocalizedString(CFBundleRef bundle , CFStringRef key , CFStringRef value , CFStringRef tableName )
	CFArrayRef  CFBundleCopyPreferredLocalizationsFromArray(CFArrayRef locArray )
	CFURLRef  CFBundleCopyPrivateFrameworksURL(CFBundleRef bundle )
	CFURLRef  CFBundleCopyResourcesDirectoryURL(CFBundleRef bundle )
	CFURLRef  CFBundleCopyResourceURL(CFBundleRef bundle , CFStringRef resourceName , CFStringRef resourceType , CFStringRef subDirName )
	CFURLRef  CFBundleCopyResourceURLForLocalization(CFBundleRef bundle , CFStringRef resourceName , CFStringRef resourceType , CFStringRef subDirName , CFStringRef localizationName )
	CFURLRef  CFBundleCopyResourceURLInDirectory(CFURLRef bundleURL , CFStringRef resourceName , CFStringRef resourceType , CFStringRef subDirName )
	CFArrayRef  CFBundleCopyResourceURLsOfType(CFBundleRef bundle , CFStringRef resourceType , CFStringRef subDirName )
	CFArrayRef  CFBundleCopyResourceURLsOfTypeForLocalization(CFBundleRef bundle , CFStringRef resourceType , CFStringRef subDirName , CFStringRef localizationName )
	CFArrayRef  CFBundleCopyResourceURLsOfTypeInDirectory(CFURLRef bundleURL , CFStringRef resourceType , CFStringRef subDirName )
	CFURLRef  CFBundleCopySharedFrameworksURL(CFBundleRef bundle )
	CFURLRef  CFBundleCopySharedSupportURL(CFBundleRef bundle )
	CFURLRef  CFBundleCopySupportFilesDirectoryURL(CFBundleRef bundle )
	CFBundleRef  CFBundleCreate(CFAllocatorRef allocator , CFURLRef bundleURL )
	CFArrayRef  CFBundleCreateBundlesFromDirectory(CFAllocatorRef allocator , CFURLRef directoryURL , CFStringRef bundleType )
	CFArrayRef  CFBundleGetAllBundles()
	CFBundleRef  CFBundleGetBundleWithIdentifier(CFStringRef bundleID )
	void *  CFBundleGetDataPointerForName(CFBundleRef bundle , CFStringRef symbolName )
	void  CFBundleGetDataPointersForNames(CFBundleRef bundle , CFArrayRef symbolNames , void **stbl )
	CFStringRef  CFBundleGetDevelopmentRegion(CFBundleRef bundle )
	void *  CFBundleGetFunctionPointerForName(CFBundleRef bundle , CFStringRef functionName )
	void  CFBundleGetFunctionPointersForNames(CFBundleRef bundle , CFArrayRef functionNames , void **ftbl )
	CFStringRef  CFBundleGetIdentifier(CFBundleRef bundle )
	CFDictionaryRef  CFBundleGetInfoDictionary(CFBundleRef bundle )
	CFDictionaryRef  CFBundleGetLocalInfoDictionary(CFBundleRef bundle )
	CFBundleRef  CFBundleGetMainBundle()
	void  CFBundleGetPackageInfo(CFBundleRef bundle , UInt32 *packageType , UInt32 *packageCreator )
	Boolean  CFBundleGetPackageInfoInDirectory(CFURLRef url , UInt32 *packageType , UInt32 *packageCreator )
	CFPlugInRef  CFBundleGetPlugIn(CFBundleRef bundle )
	CFTypeID  CFBundleGetTypeID()
	CFTypeRef  CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle , CFStringRef key )
	UInt32  CFBundleGetVersionNumber(CFBundleRef bundle )
	Boolean  CFBundleIsExecutableLoaded(CFBundleRef bundle )
	Boolean  CFBundleLoadExecutable(CFBundleRef bundle )
	Boolean  CFBundleLoadExecutableAndReturnError(CFBundleRef bundle , CFErrorRef *error )
	SInt32  CFBundleOpenBundleResourceFiles(CFBundleRef bundle , CFBundleRefNum *refNum , CFBundleRefNum *localizedRefNum )
	CFBundleRefNum  CFBundleOpenBundleResourceMap(CFBundleRef bundle )
	Boolean  CFBundlePreflightExecutable(CFBundleRef bundle , CFErrorRef *error )
	void  CFBundleUnloadExecutable(CFBundleRef bundle )
	CFByteOrder  CFByteOrderGetCurrent()
	Boolean  CFCalendarAddComponents(CFCalendarRef calendar , CFAbsoluteTime *at , CFOptionFlags options , const char *componentDesc, ... )
	Boolean  CFCalendarComposeAbsoluteTime(CFCalendarRef calendar , CFAbsoluteTime *at , const char *componentDesc, ... )
	CFCalendarRef  CFCalendarCopyCurrent()
	CFLocaleRef  CFCalendarCopyLocale(CFCalendarRef calendar )
	CFTimeZoneRef  CFCalendarCopyTimeZone(CFCalendarRef calendar )
	CFCalendarRef  CFCalendarCreateWithIdentifier(CFAllocatorRef allocator , CFStringRef identifier )
	Boolean  CFCalendarDecomposeAbsoluteTime(CFCalendarRef calendar , CFAbsoluteTime at , const char *componentDesc, ... )
	Boolean  CFCalendarGetComponentDifference(CFCalendarRef calendar , CFAbsoluteTime startingAT , CFAbsoluteTime resultAT , CFOptionFlags options , const char *componentDesc, ... )
	CFIndex  CFCalendarGetFirstWeekday(CFCalendarRef calendar )
	CFStringRef  CFCalendarGetIdentifier(CFCalendarRef calendar )
	CFRange  CFCalendarGetMaximumRangeOfUnit(CFCalendarRef calendar , CFCalendarUnit unit )
	CFIndex  CFCalendarGetMinimumDaysInFirstWeek(CFCalendarRef calendar )
	CFRange  CFCalendarGetMinimumRangeOfUnit(CFCalendarRef calendar , CFCalendarUnit unit )
	CFIndex  CFCalendarGetOrdinalityOfUnit(CFCalendarRef calendar , CFCalendarUnit smallerUnit , CFCalendarUnit biggerUnit , CFAbsoluteTime at )
	CFRange  CFCalendarGetRangeOfUnit(CFCalendarRef calendar , CFCalendarUnit smallerUnit , CFCalendarUnit biggerUnit , CFAbsoluteTime at )
	Boolean  CFCalendarGetTimeRangeOfUnit(CFCalendarRef calendar , CFCalendarUnit unit , CFAbsoluteTime at , CFAbsoluteTime *startp , CFTimeInterval *tip )
	CFTypeID  CFCalendarGetTypeID()
	void  CFCalendarSetFirstWeekday(CFCalendarRef calendar , CFIndex wkdy )
	void  CFCalendarSetLocale(CFCalendarRef calendar , CFLocaleRef locale )
	void  CFCalendarSetMinimumDaysInFirstWeek(CFCalendarRef calendar , CFIndex mwd )
	void  CFCalendarSetTimeZone(CFCalendarRef calendar , CFTimeZoneRef tz )
	void  CFCharacterSetAddCharactersInRange(CFMutableCharacterSetRef theSet , CFRange theRange )
	void  CFCharacterSetAddCharactersInString(CFMutableCharacterSetRef theSet , CFStringRef theString )
	CFDataRef  CFCharacterSetCreateBitmapRepresentation(CFAllocatorRef alloc , CFCharacterSetRef theSet )
	CFCharacterSetRef  CFCharacterSetCreateCopy(CFAllocatorRef alloc , CFCharacterSetRef theSet )
	CFCharacterSetRef  CFCharacterSetCreateInvertedSet(CFAllocatorRef alloc , CFCharacterSetRef theSet )
	CFMutableCharacterSetRef  CFCharacterSetCreateMutable(CFAllocatorRef alloc )
	CFMutableCharacterSetRef  CFCharacterSetCreateMutableCopy(CFAllocatorRef alloc , CFCharacterSetRef theSet )
	CFCharacterSetRef  CFCharacterSetCreateWithBitmapRepresentation(CFAllocatorRef alloc , CFDataRef theData )
	CFCharacterSetRef  CFCharacterSetCreateWithCharactersInRange(CFAllocatorRef alloc , CFRange theRange )
	CFCharacterSetRef  CFCharacterSetCreateWithCharactersInString(CFAllocatorRef alloc , CFStringRef theString )
	CFCharacterSetRef  CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier )
	CFTypeID  CFCharacterSetGetTypeID()
	Boolean  CFCharacterSetHasMemberInPlane(CFCharacterSetRef theSet , CFIndex thePlane )
	void  CFCharacterSetIntersect(CFMutableCharacterSetRef theSet , CFCharacterSetRef theOtherSet )
	void  CFCharacterSetInvert(CFMutableCharacterSetRef theSet )
	Boolean  CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet , UniChar theChar )
	Boolean  CFCharacterSetIsLongCharacterMember(CFCharacterSetRef theSet , UTF32Char theChar )
	Boolean  CFCharacterSetIsSupersetOfSet(CFCharacterSetRef theSet , CFCharacterSetRef theOtherset )
	void  CFCharacterSetRemoveCharactersInRange(CFMutableCharacterSetRef theSet , CFRange theRange )
	void  CFCharacterSetRemoveCharactersInString(CFMutableCharacterSetRef theSet , CFStringRef theString )
	void  CFCharacterSetUnion(CFMutableCharacterSetRef theSet , CFCharacterSetRef theOtherSet )
	CFSwappedFloat64  CFConvertDoubleHostToSwapped(double arg )
	double  CFConvertDoubleSwappedToHost(CFSwappedFloat64 arg )
	CFSwappedFloat32  CFConvertFloat32HostToSwapped(Float32 arg )
	Float32  CFConvertFloat32SwappedToHost(CFSwappedFloat32 arg )
	CFSwappedFloat64  CFConvertFloat64HostToSwapped(Float64 arg )
	Float64  CFConvertFloat64SwappedToHost(CFSwappedFloat64 arg )
	CFSwappedFloat32  CFConvertFloatHostToSwapped(float arg )
	float  CFConvertFloatSwappedToHost(CFSwappedFloat32 arg )
	CFStringRef  CFCopyDescription(CFTypeRef cf )
	CFURLRef  CFCopyHomeDirectoryURL()
	CFStringRef  CFCopyTypeIDDescription(CFTypeID type_id )
	void  CFDataAppendBytes(CFMutableDataRef theData , const UInt8 *bytes , CFIndex length )
	CFDataRef  CFDataCreate(CFAllocatorRef allocator , const UInt8 *bytes , CFIndex length )
	CFDataRef  CFDataCreateCopy(CFAllocatorRef allocator , CFDataRef theData )
	CFMutableDataRef  CFDataCreateMutable(CFAllocatorRef allocator , CFIndex capacity )
	CFMutableDataRef  CFDataCreateMutableCopy(CFAllocatorRef allocator , CFIndex capacity , CFDataRef theData )
	CFDataRef  CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator , const UInt8 *bytes , CFIndex length , CFAllocatorRef bytesDeallocator )
	void  CFDataDeleteBytes(CFMutableDataRef theData , CFRange range )
	CFRange  CFDataFind(CFDataRef theData , CFDataRef dataToFind , CFRange searchRange , CFDataSearchFlags compareOptions )
	const UInt8 *  CFDataGetBytePtr(CFDataRef theData )
	void  CFDataGetBytes(CFDataRef theData , CFRange range , UInt8 *buffer )
	CFIndex  CFDataGetLength(CFDataRef theData )
	UInt8 *  CFDataGetMutableBytePtr(CFMutableDataRef theData )
	CFTypeID  CFDataGetTypeID()
	void  CFDataIncreaseLength(CFMutableDataRef theData , CFIndex extraLength )
	void  CFDataReplaceBytes(CFMutableDataRef theData , CFRange range , const UInt8 *newBytes , CFIndex newLength )
	void  CFDataSetLength(CFMutableDataRef theData , CFIndex length )
	CFComparisonResult  CFDateCompare(CFDateRef theDate , CFDateRef otherDate , void *context )
	CFDateRef  CFDateCreate(CFAllocatorRef allocator , CFAbsoluteTime at )
	CFTypeRef  CFDateFormatterCopyProperty(CFDateFormatterRef formatter , CFStringRef key )
	CFDateFormatterRef  CFDateFormatterCreate(CFAllocatorRef allocator , CFLocaleRef locale , CFDateFormatterStyle dateStyle , CFDateFormatterStyle timeStyle )
	CFStringRef  CFDateFormatterCreateDateFormatFromTemplate(CFAllocatorRef allocator , CFStringRef tmplate , CFOptionFlags options , CFLocaleRef locale )
	CFDateRef  CFDateFormatterCreateDateFromString(CFAllocatorRef allocator , CFDateFormatterRef formatter , CFStringRef string , CFRange *rangep )
	CFStringRef  CFDateFormatterCreateStringWithAbsoluteTime(CFAllocatorRef allocator , CFDateFormatterRef formatter , CFAbsoluteTime at )
	CFStringRef  CFDateFormatterCreateStringWithDate(CFAllocatorRef allocator , CFDateFormatterRef formatter , CFDateRef date )
	Boolean  CFDateFormatterGetAbsoluteTimeFromString(CFDateFormatterRef formatter , CFStringRef string , CFRange *rangep , CFAbsoluteTime *atp )
	CFDateFormatterStyle  CFDateFormatterGetDateStyle(CFDateFormatterRef formatter )
	CFStringRef  CFDateFormatterGetFormat(CFDateFormatterRef formatter )
	CFLocaleRef  CFDateFormatterGetLocale(CFDateFormatterRef formatter )
	CFDateFormatterStyle  CFDateFormatterGetTimeStyle(CFDateFormatterRef formatter )
	CFTypeID  CFDateFormatterGetTypeID()
	void  CFDateFormatterSetFormat(CFDateFormatterRef formatter , CFStringRef formatString )
	void  CFDateFormatterSetProperty(CFDateFormatterRef formatter , CFStringRef key , CFTypeRef value )
	CFAbsoluteTime  CFDateGetAbsoluteTime(CFDateRef theDate )
	CFTimeInterval  CFDateGetTimeIntervalSinceDate(CFDateRef theDate , CFDateRef otherDate )
	CFTypeID  CFDateGetTypeID()
	void  CFDictionaryAddValue(CFMutableDictionaryRef theDict , const void *key , const void *value )
	void  CFDictionaryApplyFunction(CFDictionaryRef theDict , CFDictionaryApplierFunction applier , void *context )
	Boolean  CFDictionaryContainsKey(CFDictionaryRef theDict , const void *key )
	Boolean  CFDictionaryContainsValue(CFDictionaryRef theDict , const void *value )
	CFDictionaryRef  CFDictionaryCreate(CFAllocatorRef allocator , const void **keys , const void **values , CFIndex numValues , const CFDictionaryKeyCallBacks *keyCallBacks , const CFDictionaryValueCallBacks *valueCallBacks )
	CFDictionaryRef  CFDictionaryCreateCopy(CFAllocatorRef allocator , CFDictionaryRef theDict )
	CFMutableDictionaryRef  CFDictionaryCreateMutable(CFAllocatorRef allocator , CFIndex capacity , const CFDictionaryKeyCallBacks *keyCallBacks , const CFDictionaryValueCallBacks *valueCallBacks )
	CFMutableDictionaryRef  CFDictionaryCreateMutableCopy(CFAllocatorRef allocator , CFIndex capacity , CFDictionaryRef theDict )
	CFIndex  CFDictionaryGetCount(CFDictionaryRef theDict )
	CFIndex  CFDictionaryGetCountOfKey(CFDictionaryRef theDict , const void *key )
	CFIndex  CFDictionaryGetCountOfValue(CFDictionaryRef theDict , const void *value )
	void  CFDictionaryGetKeysAndValues(CFDictionaryRef theDict , const void **keys , const void **values )
	CFTypeID  CFDictionaryGetTypeID()
	const void *  CFDictionaryGetValue(CFDictionaryRef theDict , const void *key )
	Boolean  CFDictionaryGetValueIfPresent(CFDictionaryRef theDict , const void *key , const void **value )
	void  CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict )
	void  CFDictionaryRemoveValue(CFMutableDictionaryRef theDict , const void *key )
	void  CFDictionaryReplaceValue(CFMutableDictionaryRef theDict , const void *key , const void *value )
	void  CFDictionarySetValue(CFMutableDictionaryRef theDict , const void *key , const void *value )
	Boolean  CFEqual(CFTypeRef cf1 , CFTypeRef cf2 )
	CFStringRef  CFErrorCopyDescription(CFErrorRef err )
	CFStringRef  CFErrorCopyFailureReason(CFErrorRef err )
	CFStringRef  CFErrorCopyRecoverySuggestion(CFErrorRef err )
	CFDictionaryRef  CFErrorCopyUserInfo(CFErrorRef err )
	CFErrorRef  CFErrorCreate(CFAllocatorRef allocator , CFStringRef domain , CFIndex code , CFDictionaryRef userInfo )
	CFErrorRef  CFErrorCreateWithUserInfoKeysAndValues(CFAllocatorRef allocator , CFStringRef domain , CFIndex code , const void *const *userInfoKeys , const void *const *userInfoValues , CFIndex numUserInfoValues )
	CFIndex  CFErrorGetCode(CFErrorRef err )
	CFStringRef  CFErrorGetDomain(CFErrorRef err )
	CFTypeID  CFErrorGetTypeID()
	CFFileDescriptorRef  CFFileDescriptorCreate(CFAllocatorRef allocator , CFFileDescriptorNativeDescriptor fd , Boolean closeOnInvalidate , CFFileDescriptorCallBack callout , const CFFileDescriptorContext *context )
	CFRunLoopSourceRef  CFFileDescriptorCreateRunLoopSource(CFAllocatorRef allocator , CFFileDescriptorRef f , CFIndex order )
	void  CFFileDescriptorDisableCallBacks(CFFileDescriptorRef f , CFOptionFlags callBackTypes )
	void  CFFileDescriptorEnableCallBacks(CFFileDescriptorRef f , CFOptionFlags callBackTypes )
	void  CFFileDescriptorGetContext(CFFileDescriptorRef f , CFFileDescriptorContext *context )
	CFFileDescriptorNativeDescriptor  CFFileDescriptorGetNativeDescriptor(CFFileDescriptorRef f )
	CFTypeID  CFFileDescriptorGetTypeID()
	void  CFFileDescriptorInvalidate(CFFileDescriptorRef f )
	Boolean  CFFileDescriptorIsValid(CFFileDescriptorRef f )
	Boolean  CFFileSecurityClearProperties(CFFileSecurityRef fileSec , CFOptionFlags clearPropertyMask )
	Boolean  CFFileSecurityCopyAccessControlList(CFFileSecurityRef fileSec , acl_t *accessControlList )
	Boolean  CFFileSecurityCopyGroupUUID(CFFileSecurityRef fileSec , CFUUIDRef *groupUUID )
	Boolean  CFFileSecurityCopyOwnerUUID(CFFileSecurityRef fileSec , CFUUIDRef *ownerUUID )
	CFFileSecurityRef  CFFileSecurityCreate(CFAllocatorRef allocator )
	CFFileSecurityRef  CFFileSecurityCreateCopy(CFAllocatorRef allocator , CFFileSecurityRef fileSec )
	Boolean  CFFileSecurityGetGroup(CFFileSecurityRef fileSec , gid_t *group )
	Boolean  CFFileSecurityGetMode(CFFileSecurityRef fileSec , mode_t *mode )
	Boolean  CFFileSecurityGetOwner(CFFileSecurityRef fileSec , uid_t *owner )
	CFTypeID  CFFileSecurityGetTypeID()
	Boolean  CFFileSecuritySetAccessControlList(CFFileSecurityRef fileSec , acl_t accessControlList )
	Boolean  CFFileSecuritySetGroup(CFFileSecurityRef fileSec , gid_t group )
	Boolean  CFFileSecuritySetGroupUUID(CFFileSecurityRef fileSec , CFUUIDRef groupUUID )
	Boolean  CFFileSecuritySetMode(CFFileSecurityRef fileSec , mode_t mode )
	Boolean  CFFileSecuritySetOwner(CFFileSecurityRef fileSec , uid_t owner )
	Boolean  CFFileSecuritySetOwnerUUID(CFFileSecurityRef fileSec , CFUUIDRef ownerUUID )
	CFIndex  CFFTPCreateParsedResourceListing(CFAllocatorRef alloc , const UInt8 *buffer , CFIndex bufferLength , CFDictionaryRef *parsed )
	CFAllocatorRef  CFGetAllocator(CFTypeRef cf )
	CFIndex  CFGetRetainCount(CFTypeRef cf )
	CFTypeID  CFGetTypeID(CFTypeRef cf )
	CFAbsoluteTime  CFGregorianDateGetAbsoluteTime(CFGregorianDate gdate , CFTimeZoneRef tz )
	Boolean  CFGregorianDateIsValid(CFGregorianDate gdate , CFOptionFlags unitFlags )
	CFHashCode  CFHash(CFTypeRef cf )
	void  CFHostCancelInfoResolution(CFHostRef theHost , CFHostInfoType info )
	CFHostRef  CFHostCreateCopy(CFAllocatorRef alloc , CFHostRef host )
	CFHostRef  CFHostCreateWithAddress(CFAllocatorRef allocator , CFDataRef addr )
	CFHostRef  CFHostCreateWithName(CFAllocatorRef allocator , CFStringRef hostname )
	CFArrayRef  CFHostGetAddressing(CFHostRef theHost , Boolean *hasBeenResolved )
	CFArrayRef  CFHostGetNames(CFHostRef theHost , Boolean *hasBeenResolved )
	CFDataRef  CFHostGetReachability(CFHostRef theHost , Boolean *hasBeenResolved )
	CFTypeID  CFHostGetTypeID()
	void  CFHostScheduleWithRunLoop(CFHostRef theHost , CFRunLoopRef runLoop , CFStringRef runLoopMode )
	Boolean  CFHostSetClient(CFHostRef theHost , CFHostClientCallBack clientCB , CFHostClientContext *clientContext )
	Boolean  CFHostStartInfoResolution(CFHostRef theHost , CFHostInfoType info , CFStreamError *error )
	void  CFHostUnscheduleFromRunLoop(CFHostRef theHost , CFRunLoopRef runLoop , CFStringRef runLoopMode )
	Boolean  CFHTTPAuthenticationAppliesToRequest(CFHTTPAuthenticationRef auth , CFHTTPMessageRef request )
	CFArrayRef  CFHTTPAuthenticationCopyDomains(CFHTTPAuthenticationRef auth )
	CFStringRef  CFHTTPAuthenticationCopyMethod(CFHTTPAuthenticationRef auth )
	CFStringRef  CFHTTPAuthenticationCopyRealm(CFHTTPAuthenticationRef auth )
	CFHTTPAuthenticationRef  CFHTTPAuthenticationCreateFromResponse(CFAllocatorRef alloc , CFHTTPMessageRef response )
	CFTypeID  CFHTTPAuthenticationGetTypeID()
	Boolean  CFHTTPAuthenticationIsValid(CFHTTPAuthenticationRef auth , CFStreamError *error )
	Boolean  CFHTTPAuthenticationRequiresAccountDomain(CFHTTPAuthenticationRef auth )
	Boolean  CFHTTPAuthenticationRequiresOrderedRequests(CFHTTPAuthenticationRef auth )
	Boolean  CFHTTPAuthenticationRequiresUserNameAndPassword(CFHTTPAuthenticationRef auth )
	Boolean  CFHTTPMessageAddAuthentication(CFHTTPMessageRef request , CFHTTPMessageRef authenticationFailureResponse , CFStringRef username , CFStringRef password , CFStringRef authenticationScheme , Boolean forProxy )
	Boolean  CFHTTPMessageAppendBytes(CFHTTPMessageRef message , const UInt8 *newBytes , CFIndex numBytes )
	Boolean  CFHTTPMessageApplyCredentialDictionary(CFHTTPMessageRef request , CFHTTPAuthenticationRef auth , CFDictionaryRef dict , CFStreamError *error )
	Boolean  CFHTTPMessageApplyCredentials(CFHTTPMessageRef request , CFHTTPAuthenticationRef auth , CFStringRef username , CFStringRef password , CFStreamError *error )
	CFDictionaryRef  CFHTTPMessageCopyAllHeaderFields(CFHTTPMessageRef message )
	CFDataRef  CFHTTPMessageCopyBody(CFHTTPMessageRef message )
	CFStringRef  CFHTTPMessageCopyHeaderFieldValue(CFHTTPMessageRef message , CFStringRef headerField )
	CFStringRef  CFHTTPMessageCopyRequestMethod(CFHTTPMessageRef request )
	CFURLRef  CFHTTPMessageCopyRequestURL(CFHTTPMessageRef request )
	CFStringRef  CFHTTPMessageCopyResponseStatusLine(CFHTTPMessageRef response )
	CFDataRef  CFHTTPMessageCopySerializedMessage(CFHTTPMessageRef request )
	CFStringRef  CFHTTPMessageCopyVersion(CFHTTPMessageRef message )
	CFHTTPMessageRef  CFHTTPMessageCreateCopy(CFAllocatorRef alloc , CFHTTPMessageRef message )
	CFHTTPMessageRef  CFHTTPMessageCreateEmpty(CFAllocatorRef alloc , Boolean isRequest )
	CFHTTPMessageRef  CFHTTPMessageCreateRequest(CFAllocatorRef alloc , CFStringRef requestMethod , CFURLRef url , CFStringRef httpVersion )
	CFHTTPMessageRef  CFHTTPMessageCreateResponse(CFAllocatorRef alloc , CFIndex statusCode , CFStringRef statusDescription , CFStringRef httpVersion )
	CFIndex  CFHTTPMessageGetResponseStatusCode(CFHTTPMessageRef response )
	CFTypeID  CFHTTPMessageGetTypeID()
	Boolean  CFHTTPMessageIsHeaderComplete(CFHTTPMessageRef message )
	Boolean  CFHTTPMessageIsRequest(CFHTTPMessageRef message )
	void  CFHTTPMessageSetBody(CFHTTPMessageRef message , CFDataRef bodyData )
	void  CFHTTPMessageSetHeaderFieldValue(CFHTTPMessageRef message , CFStringRef headerField , CFStringRef value )
	void  CFHTTPReadStreamSetProxy(CFReadStreamRef httpStream , CFStringRef proxyHost , CFIndex proxyPort )
	void  CFHTTPReadStreamSetRedirectsAutomatically(CFReadStreamRef httpStream , Boolean shouldAutoRedirect )
	CFArrayRef  CFLocaleCopyAvailableLocaleIdentifiers()
	CFArrayRef  CFLocaleCopyCommonISOCurrencyCodes()
	CFLocaleRef  CFLocaleCopyCurrent()
	CFStringRef  CFLocaleCopyDisplayNameForPropertyValue(CFLocaleRef displayLocale , CFStringRef key , CFStringRef value )
	CFArrayRef  CFLocaleCopyISOCountryCodes()
	CFArrayRef  CFLocaleCopyISOCurrencyCodes()
	CFArrayRef  CFLocaleCopyISOLanguageCodes()
	CFArrayRef  CFLocaleCopyPreferredLanguages()
	CFLocaleRef  CFLocaleCreate(CFAllocatorRef allocator , CFStringRef localeIdentifier )
	CFStringRef  CFLocaleCreateCanonicalLanguageIdentifierFromString(CFAllocatorRef allocator , CFStringRef localeIdentifier )
	CFStringRef  CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(CFAllocatorRef allocator , LangCode lcode , RegionCode rcode )
	CFStringRef  CFLocaleCreateCanonicalLocaleIdentifierFromString(CFAllocatorRef allocator , CFStringRef localeIdentifier )
	CFDictionaryRef  CFLocaleCreateComponentsFromLocaleIdentifier(CFAllocatorRef allocator , CFStringRef localeID )
	CFLocaleRef  CFLocaleCreateCopy(CFAllocatorRef allocator , CFLocaleRef locale )
	CFStringRef  CFLocaleCreateLocaleIdentifierFromComponents(CFAllocatorRef allocator , CFDictionaryRef dictionary )
	CFStringRef  CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(CFAllocatorRef allocator , uint32_t lcid )
	CFStringRef  CFLocaleGetIdentifier(CFLocaleRef locale )
	CFLocaleLanguageDirection  CFLocaleGetLanguageCharacterDirection(CFStringRef isoLangCode )
	CFLocaleLanguageDirection  CFLocaleGetLanguageLineDirection(CFStringRef isoLangCode )
	CFLocaleRef  CFLocaleGetSystem()
	CFTypeID  CFLocaleGetTypeID()
	CFTypeRef  CFLocaleGetValue(CFLocaleRef locale , CFStringRef key )
	uint32_t  CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(CFStringRef localeIdentifier )
	CFMachPortRef  CFMachPortCreate(CFAllocatorRef allocator , CFMachPortCallBack callout , CFMachPortContext *context , Boolean *shouldFreeInfo )
	CFRunLoopSourceRef  CFMachPortCreateRunLoopSource(CFAllocatorRef allocator , CFMachPortRef port , CFIndex order )
	CFMachPortRef  CFMachPortCreateWithPort(CFAllocatorRef allocator , mach_port_t portNum , CFMachPortCallBack callout , CFMachPortContext *context , Boolean *shouldFreeInfo )
	void  CFMachPortGetContext(CFMachPortRef port , CFMachPortContext *context )
	CFMachPortInvalidationCallBack  CFMachPortGetInvalidationCallBack(CFMachPortRef port )
	mach_port_t  CFMachPortGetPort(CFMachPortRef port )
	CFTypeID  CFMachPortGetTypeID()
	void  CFMachPortInvalidate(CFMachPortRef port )
	Boolean  CFMachPortIsValid(CFMachPortRef port )
	void  CFMachPortSetInvalidationCallBack(CFMachPortRef port , CFMachPortInvalidationCallBack callout )
	CFTypeRef  CFMakeCollectable(CFTypeRef cf )
	CFMessagePortRef  CFMessagePortCreateLocal(CFAllocatorRef allocator , CFStringRef name , CFMessagePortCallBack callout , CFMessagePortContext *context , Boolean *shouldFreeInfo )
	CFMessagePortRef  CFMessagePortCreateRemote(CFAllocatorRef allocator , CFStringRef name )
	CFRunLoopSourceRef  CFMessagePortCreateRunLoopSource(CFAllocatorRef allocator , CFMessagePortRef local , CFIndex order )
	void  CFMessagePortGetContext(CFMessagePortRef ms , CFMessagePortContext *context )
	CFMessagePortInvalidationCallBack  CFMessagePortGetInvalidationCallBack(CFMessagePortRef ms )
	CFStringRef  CFMessagePortGetName(CFMessagePortRef ms )
	CFTypeID  CFMessagePortGetTypeID()
	void  CFMessagePortInvalidate(CFMessagePortRef ms )
	Boolean  CFMessagePortIsRemote(CFMessagePortRef ms )
	Boolean  CFMessagePortIsValid(CFMessagePortRef ms )
	SInt32  CFMessagePortSendRequest(CFMessagePortRef remote , SInt32 msgid , CFDataRef data , CFTimeInterval sendTimeout , CFTimeInterval rcvTimeout , CFStringRef replyMode , CFDataRef *returnData )
	void  CFMessagePortSetDispatchQueue(CFMessagePortRef ms , dispatch_queue_t queue )
	void  CFMessagePortSetInvalidationCallBack(CFMessagePortRef ms , CFMessagePortInvalidationCallBack callout )
	Boolean  CFMessagePortSetName(CFMessagePortRef ms , CFStringRef newName )
	CFNetDiagnosticStatus  CFNetDiagnosticCopyNetworkStatusPassively(CFNetDiagnosticRef details , CFStringRef *description )
	CFNetDiagnosticRef  CFNetDiagnosticCreateWithStreams(CFAllocatorRef alloc , CFReadStreamRef readStream , CFWriteStreamRef writeStream )
	CFNetDiagnosticRef  CFNetDiagnosticCreateWithURL(CFAllocatorRef alloc , CFURLRef url )
	CFNetDiagnosticStatus  CFNetDiagnosticDiagnoseProblemInteractively(CFNetDiagnosticRef details )
	void  CFNetDiagnosticSetName(CFNetDiagnosticRef details , CFStringRef name )
	CFNetServiceBrowserRef  CFNetServiceBrowserCreate(CFAllocatorRef alloc , CFNetServiceBrowserClientCallBack clientCB , CFNetServiceClientContext *clientContext )
	CFTypeID  CFNetServiceBrowserGetTypeID()
	void  CFNetServiceBrowserInvalidate(CFNetServiceBrowserRef browser )
	void  CFNetServiceBrowserScheduleWithRunLoop(CFNetServiceBrowserRef browser , CFRunLoopRef runLoop , CFStringRef runLoopMode )
	Boolean  CFNetServiceBrowserSearchForDomains(CFNetServiceBrowserRef browser , Boolean registrationDomains , CFStreamError *error )
	Boolean  CFNetServiceBrowserSearchForServices(CFNetServiceBrowserRef browser , CFStringRef domain , CFStringRef serviceType , CFStreamError *error )
	void  CFNetServiceBrowserStopSearch(CFNetServiceBrowserRef browser , CFStreamError *error )
	void  CFNetServiceBrowserUnscheduleFromRunLoop(CFNetServiceBrowserRef browser , CFRunLoopRef runLoop , CFStringRef runLoopMode )
	void  CFNetServiceCancel(CFNetServiceRef theService )
	CFNetServiceRef  CFNetServiceCreate(CFAllocatorRef alloc , CFStringRef domain , CFStringRef serviceType , CFStringRef name , SInt32 port )
	CFNetServiceRef  CFNetServiceCreateCopy(CFAllocatorRef alloc , CFNetServiceRef service )
	CFDictionaryRef  CFNetServiceCreateDictionaryWithTXTData(CFAllocatorRef alloc , CFDataRef txtRecord )
	CFDataRef  CFNetServiceCreateTXTDataWithDictionary(CFAllocatorRef alloc , CFDictionaryRef keyValuePairs )
	CFArrayRef  CFNetServiceGetAddressing(CFNetServiceRef theService )
	CFStringRef  CFNetServiceGetDomain(CFNetServiceRef theService )
	CFStringRef  CFNetServiceGetName(CFNetServiceRef theService )
	SInt32  CFNetServiceGetPortNumber(CFNetServiceRef theService )
	CFStringRef  CFNetServiceGetProtocolSpecificInformation(CFNetServiceRef theService )
	CFStringRef  CFNetServiceGetTargetHost(CFNetServiceRef theService )
	CFDataRef  CFNetServiceGetTXTData(CFNetServiceRef theService )
	CFStringRef  CFNetServiceGetType(CFNetServiceRef theService )
	CFTypeID  CFNetServiceGetTypeID()
	CFNetServiceMonitorRef  CFNetServiceMonitorCreate(CFAllocatorRef alloc , CFNetServiceRef theService , CFNetServiceMonitorClientCallBack clientCB , CFNetServiceClientContext *clientContext )
	CFTypeID  CFNetServiceMonitorGetTypeID()
	void  CFNetServiceMonitorInvalidate(CFNetServiceMonitorRef monitor )
	void  CFNetServiceMonitorScheduleWithRunLoop(CFNetServiceMonitorRef monitor , CFRunLoopRef runLoop , CFStringRef runLoopMode )
	Boolean  CFNetServiceMonitorStart(CFNetServiceMonitorRef monitor , CFNetServiceMonitorType recordType , CFStreamError *error )
	void  CFNetServiceMonitorStop(CFNetServiceMonitorRef monitor , CFStreamError *error )
	void  CFNetServiceMonitorUnscheduleFromRunLoop(CFNetServiceMonitorRef monitor , CFRunLoopRef runLoop , CFStringRef runLoopMode )
	Boolean  CFNetServiceRegister(CFNetServiceRef theService , CFStreamError *error )
	Boolean  CFNetServiceRegisterWithOptions(CFNetServiceRef theService , CFOptionFlags options , CFStreamError *error )
	Boolean  CFNetServiceResolve(CFNetServiceRef theService , CFStreamError *error )
	Boolean  CFNetServiceResolveWithTimeout(CFNetServiceRef theService , CFTimeInterval timeout , CFStreamError *error )
	void  CFNetServiceScheduleWithRunLoop(CFNetServiceRef theService , CFRunLoopRef runLoop , CFStringRef runLoopMode )
	Boolean  CFNetServiceSetClient(CFNetServiceRef theService , CFNetServiceClientCallBack clientCB , CFNetServiceClientContext *clientContext )
	void  CFNetServiceSetProtocolSpecificInformation(CFNetServiceRef theService , CFStringRef theInfo )
	Boolean  CFNetServiceSetTXTData(CFNetServiceRef theService , CFDataRef txtRecord )
	void  CFNetServiceUnscheduleFromRunLoop(CFNetServiceRef theService , CFRunLoopRef runLoop , CFStringRef runLoopMode )
	CFArrayRef  CFNetworkCopyProxiesForAutoConfigurationScript(CFStringRef proxyAutoConfigurationScript , CFURLRef targetURL , CFErrorRef *error )
	CFArrayRef  CFNetworkCopyProxiesForURL(CFURLRef url , CFDictionaryRef proxySettings )
	CFDictionaryRef  CFNetworkCopySystemProxySettings()
	CFRunLoopSourceRef  CFNetworkExecuteProxyAutoConfigurationScript(CFStringRef proxyAutoConfigurationScript , CFURLRef targetURL , CFProxyAutoConfigurationResultCallback cb , CFStreamClientContext *clientContext )
	CFRunLoopSourceRef  CFNetworkExecuteProxyAutoConfigurationURL(CFURLRef proxyAutoConfigURL , CFURLRef targetURL , CFProxyAutoConfigurationResultCallback cb , CFStreamClientContext *clientContext )
	void  CFNotificationCenterAddObserver(CFNotificationCenterRef center , const void *observer , CFNotificationCallback callBack , CFStringRef name , const void *object , CFNotificationSuspensionBehavior suspensionBehavior )
	CFNotificationCenterRef  CFNotificationCenterGetDarwinNotifyCenter()
	CFNotificationCenterRef  CFNotificationCenterGetDistributedCenter()
	CFNotificationCenterRef  CFNotificationCenterGetLocalCenter()
	CFTypeID  CFNotificationCenterGetTypeID()
	void  CFNotificationCenterPostNotification(CFNotificationCenterRef center , CFStringRef name , const void *object , CFDictionaryRef userInfo , Boolean deliverImmediately )
	void  CFNotificationCenterPostNotificationWithOptions(CFNotificationCenterRef center , CFStringRef name , const void *object , CFDictionaryRef userInfo , CFOptionFlags options )
	void  CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center , const void *observer )
	void  CFNotificationCenterRemoveObserver(CFNotificationCenterRef center , const void *observer , CFStringRef name , const void *object )
	CFTypeID  CFNullGetTypeID()
	CFComparisonResult  CFNumberCompare(CFNumberRef number , CFNumberRef otherNumber , void *context )
	CFNumberRef  CFNumberCreate(CFAllocatorRef allocator , CFNumberType theType , const void *valuePtr )
	CFTypeRef  CFNumberFormatterCopyProperty(CFNumberFormatterRef formatter , CFStringRef key )
	CFNumberFormatterRef  CFNumberFormatterCreate(CFAllocatorRef allocator , CFLocaleRef locale , CFNumberFormatterStyle style )
	CFNumberRef  CFNumberFormatterCreateNumberFromString(CFAllocatorRef allocator , CFNumberFormatterRef formatter , CFStringRef string , CFRange *rangep , CFOptionFlags options )
	CFStringRef  CFNumberFormatterCreateStringWithNumber(CFAllocatorRef allocator , CFNumberFormatterRef formatter , CFNumberRef number )
	CFStringRef  CFNumberFormatterCreateStringWithValue(CFAllocatorRef allocator , CFNumberFormatterRef formatter , CFNumberType numberType , const void *valuePtr )
	Boolean  CFNumberFormatterGetDecimalInfoForCurrencyCode(CFStringRef currencyCode , int32_t *defaultFractionDigits , double *roundingIncrement )
	CFStringRef  CFNumberFormatterGetFormat(CFNumberFormatterRef formatter )
	CFLocaleRef  CFNumberFormatterGetLocale(CFNumberFormatterRef formatter )
	CFNumberFormatterStyle  CFNumberFormatterGetStyle(CFNumberFormatterRef formatter )
	CFTypeID  CFNumberFormatterGetTypeID()
	Boolean  CFNumberFormatterGetValueFromString(CFNumberFormatterRef formatter , CFStringRef string , CFRange *rangep , CFNumberType numberType , void *valuePtr )
	void  CFNumberFormatterSetFormat(CFNumberFormatterRef formatter , CFStringRef formatString )
	void  CFNumberFormatterSetProperty(CFNumberFormatterRef formatter , CFStringRef key , CFTypeRef value )
	CFIndex  CFNumberGetByteSize(CFNumberRef number )
	CFNumberType  CFNumberGetType(CFNumberRef number )
	CFTypeID  CFNumberGetTypeID()
	Boolean  CFNumberGetValue(CFNumberRef number , CFNumberType theType , void *valuePtr )
	Boolean  CFNumberIsFloatType(CFNumberRef number )
	void  CFPlugInAddInstanceForFactory(CFUUIDRef factoryID )
	CFPlugInRef  CFPlugInCreate(CFAllocatorRef allocator , CFURLRef plugInURL )
	CFArrayRef  CFPlugInFindFactoriesForPlugInType(CFUUIDRef typeUUID )
	CFArrayRef  CFPlugInFindFactoriesForPlugInTypeInPlugIn(CFUUIDRef typeUUID , CFPlugInRef plugIn )
	CFBundleRef  CFPlugInGetBundle(CFPlugInRef plugIn )
	CFTypeID  CFPlugInGetTypeID()
	void *  CFPlugInInstanceCreate(CFAllocatorRef allocator , CFUUIDRef factoryUUID , CFUUIDRef typeUUID )
	CFPlugInInstanceRef  CFPlugInInstanceCreateWithInstanceDataSize(CFAllocatorRef allocator , CFIndex instanceDataSize , CFPlugInInstanceDeallocateInstanceDataFunction deallocateInstanceFunction , CFStringRef factoryName , CFPlugInInstanceGetInterfaceFunction getInterfaceFunction )
	CFStringRef  CFPlugInInstanceGetFactoryName(CFPlugInInstanceRef instance )
	void *  CFPlugInInstanceGetInstanceData(CFPlugInInstanceRef instance )
	Boolean  CFPlugInInstanceGetInterfaceFunctionTable(CFPlugInInstanceRef instance , CFStringRef interfaceName , void **ftbl )
	CFTypeID  CFPlugInInstanceGetTypeID()
	Boolean  CFPlugInIsLoadOnDemand(CFPlugInRef plugIn )
	Boolean  CFPlugInRegisterFactoryFunction(CFUUIDRef factoryUUID , CFPlugInFactoryFunction func )
	Boolean  CFPlugInRegisterFactoryFunctionByName(CFUUIDRef factoryUUID , CFPlugInRef plugIn , CFStringRef functionName )
	Boolean  CFPlugInRegisterPlugInType(CFUUIDRef factoryUUID , CFUUIDRef typeUUID )
	void  CFPlugInRemoveInstanceForFactory(CFUUIDRef factoryID )
	void  CFPlugInSetLoadOnDemand(CFPlugInRef plugIn , Boolean flag )
	Boolean  CFPlugInUnregisterFactory(CFUUIDRef factoryUUID )
	Boolean  CFPlugInUnregisterPlugInType(CFUUIDRef factoryUUID , CFUUIDRef typeUUID )
	void  CFPreferencesAddSuitePreferencesToApp(CFStringRef applicationID , CFStringRef suiteID )
	Boolean  CFPreferencesAppSynchronize(CFStringRef applicationID )
	Boolean  CFPreferencesAppValueIsForced(CFStringRef key , CFStringRef applicationID )
	CFArrayRef  CFPreferencesCopyApplicationList(CFStringRef userName , CFStringRef hostName )
	CFPropertyListRef  CFPreferencesCopyAppValue(CFStringRef key , CFStringRef applicationID )
	CFArrayRef  CFPreferencesCopyKeyList(CFStringRef applicationID , CFStringRef userName , CFStringRef hostName )
	CFDictionaryRef  CFPreferencesCopyMultiple(CFArrayRef keysToFetch , CFStringRef applicationID , CFStringRef userName , CFStringRef hostName )
	CFPropertyListRef  CFPreferencesCopyValue(CFStringRef key , CFStringRef applicationID , CFStringRef userName , CFStringRef hostName )
	Boolean  CFPreferencesGetAppBooleanValue(CFStringRef key , CFStringRef applicationID , Boolean *keyExistsAndHasValidFormat )
	CFIndex  CFPreferencesGetAppIntegerValue(CFStringRef key , CFStringRef applicationID , Boolean *keyExistsAndHasValidFormat )
	void  CFPreferencesRemoveSuitePreferencesFromApp(CFStringRef applicationID , CFStringRef suiteID )
	void  CFPreferencesSetAppValue(CFStringRef key , CFPropertyListRef value , CFStringRef applicationID )
	void  CFPreferencesSetMultiple(CFDictionaryRef keysToSet , CFArrayRef keysToRemove , CFStringRef applicationID , CFStringRef userName , CFStringRef hostName )
	void  CFPreferencesSetValue(CFStringRef key , CFPropertyListRef value , CFStringRef applicationID , CFStringRef userName , CFStringRef hostName )
	Boolean  CFPreferencesSynchronize(CFStringRef applicationID , CFStringRef userName , CFStringRef hostName )
	CFDataRef  CFPropertyListCreateData(CFAllocatorRef allocator , CFPropertyListRef propertyList , CFPropertyListFormat format , CFOptionFlags options , CFErrorRef *error )
	CFPropertyListRef  CFPropertyListCreateDeepCopy(CFAllocatorRef allocator , CFPropertyListRef propertyList , CFOptionFlags mutabilityOption )
	CFPropertyListRef  CFPropertyListCreateFromStream(CFAllocatorRef allocator , CFReadStreamRef stream , CFIndex streamLength , CFOptionFlags mutabilityOption , CFPropertyListFormat *format , CFStringRef *errorString )
	CFPropertyListRef  CFPropertyListCreateFromXMLData(CFAllocatorRef allocator , CFDataRef xmlData , CFOptionFlags mutabilityOption , CFStringRef *errorString )
	CFPropertyListRef  CFPropertyListCreateWithData(CFAllocatorRef allocator , CFDataRef data , CFOptionFlags options , CFPropertyListFormat *format , CFErrorRef *error )
	CFPropertyListRef  CFPropertyListCreateWithStream(CFAllocatorRef allocator , CFReadStreamRef stream , CFIndex streamLength , CFOptionFlags options , CFPropertyListFormat *format , CFErrorRef *error )
	CFDataRef  CFPropertyListCreateXMLData(CFAllocatorRef allocator , CFPropertyListRef propertyList )
	Boolean  CFPropertyListIsValid(CFPropertyListRef plist , CFPropertyListFormat format )
	CFIndex  CFPropertyListWrite(CFPropertyListRef propertyList , CFWriteStreamRef stream , CFPropertyListFormat format , CFOptionFlags options , CFErrorRef *error )
	CFIndex  CFPropertyListWriteToStream(CFPropertyListRef propertyList , CFWriteStreamRef stream , CFPropertyListFormat format , CFStringRef *errorString )
	CFRange  CFRangeMake(CFIndex loc , CFIndex len )
	void  CFReadStreamClose(CFReadStreamRef stream )
	CFErrorRef  CFReadStreamCopyError(CFReadStreamRef stream )
	CFTypeRef  CFReadStreamCopyProperty(CFReadStreamRef stream , CFStringRef propertyName )
	CFReadStreamRef  CFReadStreamCreateForHTTPRequest(CFAllocatorRef alloc , CFHTTPMessageRef request )
	CFReadStreamRef  CFReadStreamCreateForStreamedHTTPRequest(CFAllocatorRef alloc , CFHTTPMessageRef requestHeaders , CFReadStreamRef requestBody )
	CFReadStreamRef  CFReadStreamCreateWithBytesNoCopy(CFAllocatorRef alloc , const UInt8 *bytes , CFIndex length , CFAllocatorRef bytesDeallocator )
	CFReadStreamRef  CFReadStreamCreateWithFile(CFAllocatorRef alloc , CFURLRef fileURL )
	CFReadStreamRef  CFReadStreamCreateWithFTPURL(CFAllocatorRef alloc , CFURLRef ftpURL )
	const UInt8 *  CFReadStreamGetBuffer(CFReadStreamRef stream , CFIndex maxBytesToRead , CFIndex *numBytesRead )
	CFStreamError  CFReadStreamGetError(CFReadStreamRef stream )
	CFStreamStatus  CFReadStreamGetStatus(CFReadStreamRef stream )
	CFTypeID  CFReadStreamGetTypeID()
	Boolean  CFReadStreamHasBytesAvailable(CFReadStreamRef stream )
	Boolean  CFReadStreamOpen(CFReadStreamRef stream )
	CFIndex  CFReadStreamRead(CFReadStreamRef stream , UInt8 *buffer , CFIndex bufferLength )
	void  CFReadStreamScheduleWithRunLoop(CFReadStreamRef stream , CFRunLoopRef runLoop , CFStringRef runLoopMode )
	Boolean  CFReadStreamSetClient(CFReadStreamRef stream , CFOptionFlags streamEvents , CFReadStreamClientCallBack clientCB , CFStreamClientContext *clientContext )
	Boolean  CFReadStreamSetProperty(CFReadStreamRef stream , CFStringRef propertyName , CFTypeRef propertyValue )
	void  CFReadStreamUnscheduleFromRunLoop(CFReadStreamRef stream , CFRunLoopRef runLoop , CFStringRef runLoopMode )
	void  CFRelease(CFTypeRef cf )
	CFTypeRef  CFRetain(CFTypeRef cf )
	void  CFRunLoopAddCommonMode(CFRunLoopRef rl , CFStringRef mode )
	void  CFRunLoopAddObserver(CFRunLoopRef rl , CFRunLoopObserverRef observer , CFStringRef mode )
	void  CFRunLoopAddSource(CFRunLoopRef rl , CFRunLoopSourceRef source , CFStringRef mode )
	void  CFRunLoopAddTimer(CFRunLoopRef rl , CFRunLoopTimerRef timer , CFStringRef mode )
	Boolean  CFRunLoopContainsObserver(CFRunLoopRef rl , CFRunLoopObserverRef observer , CFStringRef mode )
	Boolean  CFRunLoopContainsSource(CFRunLoopRef rl , CFRunLoopSourceRef source , CFStringRef mode )
	Boolean  CFRunLoopContainsTimer(CFRunLoopRef rl , CFRunLoopTimerRef timer , CFStringRef mode )
	CFArrayRef  CFRunLoopCopyAllModes(CFRunLoopRef rl )
	CFStringRef  CFRunLoopCopyCurrentMode(CFRunLoopRef rl )
	CFRunLoopRef  CFRunLoopGetCurrent()
	CFRunLoopRef  CFRunLoopGetMain()
	CFAbsoluteTime  CFRunLoopGetNextTimerFireDate(CFRunLoopRef rl , CFStringRef mode )
	CFTypeID  CFRunLoopGetTypeID()
	Boolean  CFRunLoopIsWaiting(CFRunLoopRef rl )
	CFRunLoopObserverRef  CFRunLoopObserverCreate(CFAllocatorRef allocator , CFOptionFlags activities , Boolean repeats , CFIndex order , CFRunLoopObserverCallBack callout , CFRunLoopObserverContext *context )
	CFRunLoopObserverRef  CFRunLoopObserverCreateWithHandler(CFAllocatorRef allocator , CFOptionFlags activities , Boolean repeats , CFIndex order , ^(CFRunLoopObserverRef observer, CFRunLoopActivity activity)block )
	Boolean  CFRunLoopObserverDoesRepeat(CFRunLoopObserverRef observer )
	CFOptionFlags  CFRunLoopObserverGetActivities(CFRunLoopObserverRef observer )
	void  CFRunLoopObserverGetContext(CFRunLoopObserverRef observer , CFRunLoopObserverContext *context )
	CFIndex  CFRunLoopObserverGetOrder(CFRunLoopObserverRef observer )
	CFTypeID  CFRunLoopObserverGetTypeID()
	void  CFRunLoopObserverInvalidate(CFRunLoopObserverRef observer )
	Boolean  CFRunLoopObserverIsValid(CFRunLoopObserverRef observer )
	void  CFRunLoopPerformBlock(CFRunLoopRef rl , CFTypeRef mode , ^(void)block )
	void  CFRunLoopRemoveObserver(CFRunLoopRef rl , CFRunLoopObserverRef observer , CFStringRef mode )
	void  CFRunLoopRemoveSource(CFRunLoopRef rl , CFRunLoopSourceRef source , CFStringRef mode )
	void  CFRunLoopRemoveTimer(CFRunLoopRef rl , CFRunLoopTimerRef timer , CFStringRef mode )
	void  CFRunLoopRun()
	SInt32  CFRunLoopRunInMode(CFStringRef mode , CFTimeInterval seconds , Boolean returnAfterSourceHandled )
	CFRunLoopSourceRef  CFRunLoopSourceCreate(CFAllocatorRef allocator , CFIndex order , CFRunLoopSourceContext *context )
	void  CFRunLoopSourceGetContext(CFRunLoopSourceRef source , CFRunLoopSourceContext *context )
	CFIndex  CFRunLoopSourceGetOrder(CFRunLoopSourceRef source )
	CFTypeID  CFRunLoopSourceGetTypeID()
	void  CFRunLoopSourceInvalidate(CFRunLoopSourceRef source )
	Boolean  CFRunLoopSourceIsValid(CFRunLoopSourceRef source )
	void  CFRunLoopSourceSignal(CFRunLoopSourceRef source )
	void  CFRunLoopStop(CFRunLoopRef rl )
	CFRunLoopTimerRef  CFRunLoopTimerCreate(CFAllocatorRef allocator , CFAbsoluteTime fireDate , CFTimeInterval interval , CFOptionFlags flags , CFIndex order , CFRunLoopTimerCallBack callout , CFRunLoopTimerContext *context )
	CFRunLoopTimerRef  CFRunLoopTimerCreateWithHandler(CFAllocatorRef allocator , CFAbsoluteTime fireDate , CFTimeInterval interval , CFOptionFlags flags , CFIndex order , ^(CFRunLoopTimerRef timer)block )
	Boolean  CFRunLoopTimerDoesRepeat(CFRunLoopTimerRef timer )
	void  CFRunLoopTimerGetContext(CFRunLoopTimerRef timer , CFRunLoopTimerContext *context )
	CFTimeInterval  CFRunLoopTimerGetInterval(CFRunLoopTimerRef timer )
	CFAbsoluteTime  CFRunLoopTimerGetNextFireDate(CFRunLoopTimerRef timer )
	CFIndex  CFRunLoopTimerGetOrder(CFRunLoopTimerRef timer )
	CFTypeID  CFRunLoopTimerGetTypeID()
	void  CFRunLoopTimerInvalidate(CFRunLoopTimerRef timer )
	Boolean  CFRunLoopTimerIsValid(CFRunLoopTimerRef timer )
	void  CFRunLoopTimerSetNextFireDate(CFRunLoopTimerRef timer , CFAbsoluteTime fireDate )
	void  CFRunLoopWakeUp(CFRunLoopRef rl )
	void  CFSetAddValue(CFMutableSetRef theSet , const void *value )
	void  CFSetApplyFunction(CFSetRef theSet , CFSetApplierFunction applier , void *context )
	Boolean  CFSetContainsValue(CFSetRef theSet , const void *value )
	CFSetRef  CFSetCreate(CFAllocatorRef allocator , const void **values , CFIndex numValues , const CFSetCallBacks *callBacks )
	CFSetRef  CFSetCreateCopy(CFAllocatorRef allocator , CFSetRef theSet )
	CFMutableSetRef  CFSetCreateMutable(CFAllocatorRef allocator , CFIndex capacity , const CFSetCallBacks *callBacks )
	CFMutableSetRef  CFSetCreateMutableCopy(CFAllocatorRef allocator , CFIndex capacity , CFSetRef theSet )
	CFIndex  CFSetGetCount(CFSetRef theSet )
	CFIndex  CFSetGetCountOfValue(CFSetRef theSet , const void *value )
	CFTypeID  CFSetGetTypeID()
	const void *  CFSetGetValue(CFSetRef theSet , const void *value )
	Boolean  CFSetGetValueIfPresent(CFSetRef theSet , const void *candidate , const void **value )
	void  CFSetGetValues(CFSetRef theSet , const void **values )
	void  CFSetRemoveAllValues(CFMutableSetRef theSet )
	void  CFSetRemoveValue(CFMutableSetRef theSet , const void *value )
	void  CFSetReplaceValue(CFMutableSetRef theSet , const void *value )
	void  CFSetSetValue(CFMutableSetRef theSet , const void *value )
	void  CFShow(CFTypeRef obj )
	void  CFShowStr(CFStringRef str )
	CFSocketError  CFSocketConnectToAddress(CFSocketRef s , CFDataRef address , CFTimeInterval timeout )
	CFDataRef  CFSocketCopyAddress(CFSocketRef s )
	CFDataRef  CFSocketCopyPeerAddress(CFSocketRef s )
	CFSocketError  CFSocketCopyRegisteredSocketSignature(const CFSocketSignature *nameServerSignature , CFTimeInterval timeout , CFStringRef name , CFSocketSignature *signature , CFDataRef *nameServerAddress )
	CFSocketError  CFSocketCopyRegisteredValue(const CFSocketSignature *nameServerSignature , CFTimeInterval timeout , CFStringRef name , CFPropertyListRef *value , CFDataRef *nameServerAddress )
	CFSocketRef  CFSocketCreate(CFAllocatorRef allocator , SInt32 protocolFamily , SInt32 socketType , SInt32 protocol , CFOptionFlags callBackTypes , CFSocketCallBack callout , const CFSocketContext *context )
	CFSocketRef  CFSocketCreateConnectedToSocketSignature(CFAllocatorRef allocator , const CFSocketSignature *signature , CFOptionFlags callBackTypes , CFSocketCallBack callout , const CFSocketContext *context , CFTimeInterval timeout )
	CFRunLoopSourceRef  CFSocketCreateRunLoopSource(CFAllocatorRef allocator , CFSocketRef s , CFIndex order )
	CFSocketRef  CFSocketCreateWithNative(CFAllocatorRef allocator , CFSocketNativeHandle sock , CFOptionFlags callBackTypes , CFSocketCallBack callout , const CFSocketContext *context )
	CFSocketRef  CFSocketCreateWithSocketSignature(CFAllocatorRef allocator , const CFSocketSignature *signature , CFOptionFlags callBackTypes , CFSocketCallBack callout , const CFSocketContext *context )
	void  CFSocketDisableCallBacks(CFSocketRef s , CFOptionFlags callBackTypes )
	void  CFSocketEnableCallBacks(CFSocketRef s , CFOptionFlags callBackTypes )
	void  CFSocketGetContext(CFSocketRef s , CFSocketContext *context )
	UInt16  CFSocketGetDefaultNameRegistryPortNumber()
	CFSocketNativeHandle  CFSocketGetNative(CFSocketRef s )
	CFOptionFlags  CFSocketGetSocketFlags(CFSocketRef s )
	CFTypeID  CFSocketGetTypeID()
	void  CFSocketInvalidate(CFSocketRef s )
	Boolean  CFSocketIsValid(CFSocketRef s )
	CFSocketError  CFSocketRegisterSocketSignature(const CFSocketSignature *nameServerSignature , CFTimeInterval timeout , CFStringRef name , const CFSocketSignature *signature )
	CFSocketError  CFSocketRegisterValue(const CFSocketSignature *nameServerSignature , CFTimeInterval timeout , CFStringRef name , CFPropertyListRef value )
	CFSocketError  CFSocketSendData(CFSocketRef s , CFDataRef address , CFDataRef data , CFTimeInterval timeout )
	CFSocketError  CFSocketSetAddress(CFSocketRef s , CFDataRef address )
	void  CFSocketSetDefaultNameRegistryPortNumber(UInt16 port )
	void  CFSocketSetSocketFlags(CFSocketRef s , CFOptionFlags flags )
	Boolean  CFSocketStreamPairSetSecurityProtocol(CFReadStreamRef socketReadStream , CFWriteStreamRef socketWriteStream , CFStreamSocketSecurityProtocol securityProtocol )
	SInt32  CFSocketStreamSOCKSGetError(const CFStreamError *error )
	SInt32  CFSocketStreamSOCKSGetErrorSubdomain(const CFStreamError *error )
	CFSocketError  CFSocketUnregister(const CFSocketSignature *nameServerSignature , CFTimeInterval timeout , CFStringRef name )
	void  CFStreamCreateBoundPair(CFAllocatorRef alloc , CFReadStreamRef *readStream , CFWriteStreamRef *writeStream , CFIndex transferBufferSize )
	void  CFStreamCreatePairWithPeerSocketSignature(CFAllocatorRef alloc , const CFSocketSignature *signature , CFReadStreamRef *readStream , CFWriteStreamRef *writeStream )
	void  CFStreamCreatePairWithSocket(CFAllocatorRef alloc , CFSocketNativeHandle sock , CFReadStreamRef *readStream , CFWriteStreamRef *writeStream )
	void  CFStreamCreatePairWithSocketToCFHost(CFAllocatorRef alloc , CFHostRef host , SInt32 port , CFReadStreamRef *readStream , CFWriteStreamRef *writeStream )
	void  CFStreamCreatePairWithSocketToHost(CFAllocatorRef alloc , CFStringRef host , UInt32 port , CFReadStreamRef *readStream , CFWriteStreamRef *writeStream )
	void  CFStreamCreatePairWithSocketToNetService(CFAllocatorRef alloc , CFNetServiceRef service , CFReadStreamRef *readStream , CFWriteStreamRef *writeStream )
	void  CFStringAppend(CFMutableStringRef theString , CFStringRef appendedString )
	void  CFStringAppendCharacters(CFMutableStringRef theString , const UniChar *chars , CFIndex numChars )
	void  CFStringAppendCString(CFMutableStringRef theString , const char *cStr , CFStringEncoding encoding )
	void  CFStringAppendFormat(CFMutableStringRef theString , CFDictionaryRef formatOptions , CFStringRef format, ... )
	void  CFStringAppendFormatAndArguments(CFMutableStringRef theString , CFDictionaryRef formatOptions , CFStringRef format , __va_list_tag *arguments )
	void  CFStringAppendPascalString(CFMutableStringRef theString , ConstStr255Param pStr , CFStringEncoding encoding )
	void  CFStringCapitalize(CFMutableStringRef theString , CFLocaleRef locale )
	CFComparisonResult  CFStringCompare(CFStringRef theString1 , CFStringRef theString2 , CFStringCompareFlags compareOptions )
	CFComparisonResult  CFStringCompareWithOptions(CFStringRef theString1 , CFStringRef theString2 , CFRange rangeToCompare , CFStringCompareFlags compareOptions )
	CFComparisonResult  CFStringCompareWithOptionsAndLocale(CFStringRef theString1 , CFStringRef theString2 , CFRange rangeToCompare , CFStringCompareFlags compareOptions , CFLocaleRef locale )
	CFStringRef  CFStringConvertEncodingToIANACharSetName(CFStringEncoding encoding )
	unsigned long  CFStringConvertEncodingToNSStringEncoding(CFStringEncoding encoding )
	UInt32  CFStringConvertEncodingToWindowsCodepage(CFStringEncoding encoding )
	CFStringEncoding  CFStringConvertIANACharSetNameToEncoding(CFStringRef theString )
	CFStringEncoding  CFStringConvertNSStringEncodingToEncoding(unsigned long encoding )
	CFStringEncoding  CFStringConvertWindowsCodepageToEncoding(UInt32 codepage )
	CFArrayRef  CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc , CFStringRef theString , CFStringRef separatorString )
	CFArrayRef  CFStringCreateArrayWithFindResults(CFAllocatorRef alloc , CFStringRef theString , CFStringRef stringToFind , CFRange rangeToSearch , CFStringCompareFlags compareOptions )
	CFStringRef  CFStringCreateByCombiningStrings(CFAllocatorRef alloc , CFArrayRef theArray , CFStringRef separatorString )
	CFStringRef  CFStringCreateCopy(CFAllocatorRef alloc , CFStringRef theString )
	CFDataRef  CFStringCreateExternalRepresentation(CFAllocatorRef alloc , CFStringRef theString , CFStringEncoding encoding , UInt8 lossByte )
	CFStringRef  CFStringCreateFromExternalRepresentation(CFAllocatorRef alloc , CFDataRef data , CFStringEncoding encoding )
	CFMutableStringRef  CFStringCreateMutable(CFAllocatorRef alloc , CFIndex maxLength )
	CFMutableStringRef  CFStringCreateMutableCopy(CFAllocatorRef alloc , CFIndex maxLength , CFStringRef theString )
	CFMutableStringRef  CFStringCreateMutableWithExternalCharactersNoCopy(CFAllocatorRef alloc , UniChar *chars , CFIndex numChars , CFIndex capacity , CFAllocatorRef externalCharactersAllocator )
	CFStringRef  CFStringCreateWithBytes(CFAllocatorRef alloc , const UInt8 *bytes , CFIndex numBytes , CFStringEncoding encoding , Boolean isExternalRepresentation )
	CFStringRef  CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc , const UInt8 *bytes , CFIndex numBytes , CFStringEncoding encoding , Boolean isExternalRepresentation , CFAllocatorRef contentsDeallocator )
	CFStringRef  CFStringCreateWithCharacters(CFAllocatorRef alloc , const UniChar *chars , CFIndex numChars )
	CFStringRef  CFStringCreateWithCharactersNoCopy(CFAllocatorRef alloc , const UniChar *chars , CFIndex numChars , CFAllocatorRef contentsDeallocator )
	CFStringRef  CFStringCreateWithCString(CFAllocatorRef alloc , const char *cStr , CFStringEncoding encoding )
	CFStringRef  CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc , const char *cStr , CFStringEncoding encoding , CFAllocatorRef contentsDeallocator )
	CFStringRef  CFStringCreateWithFileSystemRepresentation(CFAllocatorRef alloc , const char *buffer )
	CFStringRef  CFStringCreateWithFormat(CFAllocatorRef alloc , CFDictionaryRef formatOptions , CFStringRef format, ... )
	CFStringRef  CFStringCreateWithFormatAndArguments(CFAllocatorRef alloc , CFDictionaryRef formatOptions , CFStringRef format , __va_list_tag *arguments )
	CFStringRef  CFStringCreateWithPascalString(CFAllocatorRef alloc , ConstStr255Param pStr , CFStringEncoding encoding )
	CFStringRef  CFStringCreateWithPascalStringNoCopy(CFAllocatorRef alloc , ConstStr255Param pStr , CFStringEncoding encoding , CFAllocatorRef contentsDeallocator )
	CFStringRef  CFStringCreateWithSubstring(CFAllocatorRef alloc , CFStringRef str , CFRange range )
	void  CFStringDelete(CFMutableStringRef theString , CFRange range )
	CFRange  CFStringFind(CFStringRef theString , CFStringRef stringToFind , CFStringCompareFlags compareOptions )
	CFIndex  CFStringFindAndReplace(CFMutableStringRef theString , CFStringRef stringToFind , CFStringRef replacementString , CFRange rangeToSearch , CFStringCompareFlags compareOptions )
	Boolean  CFStringFindCharacterFromSet(CFStringRef theString , CFCharacterSetRef theSet , CFRange rangeToSearch , CFStringCompareFlags searchOptions , CFRange *result )
	Boolean  CFStringFindWithOptions(CFStringRef theString , CFStringRef stringToFind , CFRange rangeToSearch , CFStringCompareFlags searchOptions , CFRange *result )
	Boolean  CFStringFindWithOptionsAndLocale(CFStringRef theString , CFStringRef stringToFind , CFRange rangeToSearch , CFStringCompareFlags searchOptions , CFLocaleRef locale , CFRange *result )
	void  CFStringFold(CFMutableStringRef theString , CFOptionFlags theFlags , CFLocaleRef theLocale )
	CFIndex  CFStringGetBytes(CFStringRef theString , CFRange range , CFStringEncoding encoding , UInt8 lossByte , Boolean isExternalRepresentation , UInt8 *buffer , CFIndex maxBufLen , CFIndex *usedBufLen )
	UniChar  CFStringGetCharacterAtIndex(CFStringRef theString , CFIndex idx )
	UniChar  CFStringGetCharacterFromInlineBuffer(CFStringInlineBuffer *buf , CFIndex idx )
	void  CFStringGetCharacters(CFStringRef theString , CFRange range , UniChar *buffer )
	const UniChar *  CFStringGetCharactersPtr(CFStringRef theString )
	Boolean  CFStringGetCString(CFStringRef theString , char *buffer , CFIndex bufferSize , CFStringEncoding encoding )
	const char *  CFStringGetCStringPtr(CFStringRef theString , CFStringEncoding encoding )
	double  CFStringGetDoubleValue(CFStringRef str )
	CFStringEncoding  CFStringGetFastestEncoding(CFStringRef theString )
	Boolean  CFStringGetFileSystemRepresentation(CFStringRef string , char *buffer , CFIndex maxBufLen )
	CFIndex  CFStringGetHyphenationLocationBeforeIndex(CFStringRef string , CFIndex location , CFRange limitRange , CFOptionFlags options , CFLocaleRef locale , UTF32Char *character )
	SInt32  CFStringGetIntValue(CFStringRef str )
	CFIndex  CFStringGetLength(CFStringRef theString )
	void  CFStringGetLineBounds(CFStringRef theString , CFRange range , CFIndex *lineBeginIndex , CFIndex *lineEndIndex , CFIndex *contentsEndIndex )
	const CFStringEncoding *  CFStringGetListOfAvailableEncodings()
	UTF32Char  CFStringGetLongCharacterForSurrogatePair(UniChar surrogateHigh , UniChar surrogateLow )
	CFIndex  CFStringGetMaximumSizeForEncoding(CFIndex length , CFStringEncoding encoding )
	CFIndex  CFStringGetMaximumSizeOfFileSystemRepresentation(CFStringRef string )
	CFStringEncoding  CFStringGetMostCompatibleMacStringEncoding(CFStringEncoding encoding )
	CFStringRef  CFStringGetNameOfEncoding(CFStringEncoding encoding )
	void  CFStringGetParagraphBounds(CFStringRef string , CFRange range , CFIndex *parBeginIndex , CFIndex *parEndIndex , CFIndex *contentsEndIndex )
	Boolean  CFStringGetPascalString(CFStringRef theString , StringPtr buffer , CFIndex bufferSize , CFStringEncoding encoding )
	ConstStringPtr  CFStringGetPascalStringPtr(CFStringRef theString , CFStringEncoding encoding )
	CFRange  CFStringGetRangeOfComposedCharactersAtIndex(CFStringRef theString , CFIndex theIndex )
	CFStringEncoding  CFStringGetSmallestEncoding(CFStringRef theString )
	Boolean  CFStringGetSurrogatePairForLongCharacter(UTF32Char character , UniChar *surrogates )
	CFStringEncoding  CFStringGetSystemEncoding()
	CFTypeID  CFStringGetTypeID()
	Boolean  CFStringHasPrefix(CFStringRef theString , CFStringRef prefix )
	Boolean  CFStringHasSuffix(CFStringRef theString , CFStringRef suffix )
	void  CFStringInitInlineBuffer(CFStringRef str , CFStringInlineBuffer *buf , CFRange range )
	void  CFStringInsert(CFMutableStringRef str , CFIndex idx , CFStringRef insertedStr )
	Boolean  CFStringIsEncodingAvailable(CFStringEncoding encoding )
	Boolean  CFStringIsHyphenationAvailableForLocale(CFLocaleRef locale )
	Boolean  CFStringIsSurrogateHighCharacter(UniChar character )
	Boolean  CFStringIsSurrogateLowCharacter(UniChar character )
	void  CFStringLowercase(CFMutableStringRef theString , CFLocaleRef locale )
	void  CFStringNormalize(CFMutableStringRef theString , CFStringNormalizationForm theForm )
	void  CFStringPad(CFMutableStringRef theString , CFStringRef padString , CFIndex length , CFIndex indexIntoPad )
	void  CFStringReplace(CFMutableStringRef theString , CFRange range , CFStringRef replacement )
	void  CFStringReplaceAll(CFMutableStringRef theString , CFStringRef replacement )
	void  CFStringSetExternalCharactersNoCopy(CFMutableStringRef theString , UniChar *chars , CFIndex length , CFIndex capacity )
	CFStringTokenizerTokenType  CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer )
	CFStringRef  CFStringTokenizerCopyBestStringLanguage(CFStringRef string , CFRange range )
	CFTypeRef  CFStringTokenizerCopyCurrentTokenAttribute(CFStringTokenizerRef tokenizer , CFOptionFlags attribute )
	CFStringTokenizerRef  CFStringTokenizerCreate(CFAllocatorRef alloc , CFStringRef string , CFRange range , CFOptionFlags options , CFLocaleRef locale )
	CFIndex  CFStringTokenizerGetCurrentSubTokens(CFStringTokenizerRef tokenizer , CFRange *ranges , CFIndex maxRangeLength , CFMutableArrayRef derivedSubTokens )
	CFRange  CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer )
	CFTypeID  CFStringTokenizerGetTypeID()
	CFStringTokenizerTokenType  CFStringTokenizerGoToTokenAtIndex(CFStringTokenizerRef tokenizer , CFIndex index )
	void  CFStringTokenizerSetString(CFStringTokenizerRef tokenizer , CFStringRef string , CFRange range )
	Boolean  CFStringTransform(CFMutableStringRef string , CFRange *range , CFStringRef transform , Boolean reverse )
	void  CFStringTrim(CFMutableStringRef theString , CFStringRef trimString )
	void  CFStringTrimWhitespace(CFMutableStringRef theString )
	void  CFStringUppercase(CFMutableStringRef theString , CFLocaleRef locale )
	uint16_t  CFSwapInt16(uint16_t arg )
	uint16_t  CFSwapInt16BigToHost(uint16_t arg )
	uint16_t  CFSwapInt16HostToBig(uint16_t arg )
	uint16_t  CFSwapInt16HostToLittle(uint16_t arg )
	uint16_t  CFSwapInt16LittleToHost(uint16_t arg )
	uint32_t  CFSwapInt32(uint32_t arg )
	uint32_t  CFSwapInt32BigToHost(uint32_t arg )
	uint32_t  CFSwapInt32HostToBig(uint32_t arg )
	uint32_t  CFSwapInt32HostToLittle(uint32_t arg )
	uint32_t  CFSwapInt32LittleToHost(uint32_t arg )
	uint64_t  CFSwapInt64(uint64_t arg )
	uint64_t  CFSwapInt64BigToHost(uint64_t arg )
	uint64_t  CFSwapInt64HostToBig(uint64_t arg )
	uint64_t  CFSwapInt64HostToLittle(uint64_t arg )
	uint64_t  CFSwapInt64LittleToHost(uint64_t arg )
	CFStringRef  CFTimeZoneCopyAbbreviation(CFTimeZoneRef tz , CFAbsoluteTime at )
	CFDictionaryRef  CFTimeZoneCopyAbbreviationDictionary()
	CFTimeZoneRef  CFTimeZoneCopyDefault()
	CFArrayRef  CFTimeZoneCopyKnownNames()
	CFStringRef  CFTimeZoneCopyLocalizedName(CFTimeZoneRef tz , CFTimeZoneNameStyle style , CFLocaleRef locale )
	CFTimeZoneRef  CFTimeZoneCopySystem()
	CFTimeZoneRef  CFTimeZoneCreate(CFAllocatorRef allocator , CFStringRef name , CFDataRef data )
	CFTimeZoneRef  CFTimeZoneCreateWithName(CFAllocatorRef allocator , CFStringRef name , Boolean tryAbbrev )
	CFTimeZoneRef  CFTimeZoneCreateWithTimeIntervalFromGMT(CFAllocatorRef allocator , CFTimeInterval ti )
	CFDataRef  CFTimeZoneGetData(CFTimeZoneRef tz )
	CFTimeInterval  CFTimeZoneGetDaylightSavingTimeOffset(CFTimeZoneRef tz , CFAbsoluteTime at )
	CFStringRef  CFTimeZoneGetName(CFTimeZoneRef tz )
	CFAbsoluteTime  CFTimeZoneGetNextDaylightSavingTimeTransition(CFTimeZoneRef tz , CFAbsoluteTime at )
	CFTimeInterval  CFTimeZoneGetSecondsFromGMT(CFTimeZoneRef tz , CFAbsoluteTime at )
	CFTypeID  CFTimeZoneGetTypeID()
	Boolean  CFTimeZoneIsDaylightSavingTime(CFTimeZoneRef tz , CFAbsoluteTime at )
	void  CFTimeZoneResetSystem()
	void  CFTimeZoneSetAbbreviationDictionary(CFDictionaryRef dict )
	void  CFTimeZoneSetDefault(CFTimeZoneRef tz )
	void  CFTreeAppendChild(CFTreeRef tree , CFTreeRef newChild )
	void  CFTreeApplyFunctionToChildren(CFTreeRef tree , CFTreeApplierFunction applier , void *context )
	CFTreeRef  CFTreeCreate(CFAllocatorRef allocator , const CFTreeContext *context )
	CFTreeRef  CFTreeFindRoot(CFTreeRef tree )
	CFTreeRef  CFTreeGetChildAtIndex(CFTreeRef tree , CFIndex idx )
	CFIndex  CFTreeGetChildCount(CFTreeRef tree )
	void  CFTreeGetChildren(CFTreeRef tree , CFTreeRef *children )
	void  CFTreeGetContext(CFTreeRef tree , CFTreeContext *context )
	CFTreeRef  CFTreeGetFirstChild(CFTreeRef tree )
	CFTreeRef  CFTreeGetNextSibling(CFTreeRef tree )
	CFTreeRef  CFTreeGetParent(CFTreeRef tree )
	CFTypeID  CFTreeGetTypeID()
	void  CFTreeInsertSibling(CFTreeRef tree , CFTreeRef newSibling )
	void  CFTreePrependChild(CFTreeRef tree , CFTreeRef newChild )
	void  CFTreeRemove(CFTreeRef tree )
	void  CFTreeRemoveAllChildren(CFTreeRef tree )
	void  CFTreeSetContext(CFTreeRef tree , const CFTreeContext *context )
	void  CFTreeSortChildren(CFTreeRef tree , CFComparatorFunction comparator , void *context )
	Boolean  CFURLCanBeDecomposed(CFURLRef anURL )
	void  CFURLClearResourcePropertyCache(CFURLRef url )
	void  CFURLClearResourcePropertyCacheForKey(CFURLRef url , CFStringRef key )
	CFURLRef  CFURLCopyAbsoluteURL(CFURLRef relativeURL )
	CFStringRef  CFURLCopyFileSystemPath(CFURLRef anURL , CFURLPathStyle pathStyle )
	CFStringRef  CFURLCopyFragment(CFURLRef anURL , CFStringRef charactersToLeaveEscaped )
	CFStringRef  CFURLCopyHostName(CFURLRef anURL )
	CFStringRef  CFURLCopyLastPathComponent(CFURLRef url )
	CFStringRef  CFURLCopyNetLocation(CFURLRef anURL )
	CFStringRef  CFURLCopyParameterString(CFURLRef anURL , CFStringRef charactersToLeaveEscaped )
	CFStringRef  CFURLCopyPassword(CFURLRef anURL )
	CFStringRef  CFURLCopyPath(CFURLRef anURL )
	CFStringRef  CFURLCopyPathExtension(CFURLRef url )
	CFStringRef  CFURLCopyQueryString(CFURLRef anURL , CFStringRef charactersToLeaveEscaped )
	CFDictionaryRef  CFURLCopyResourcePropertiesForKeys(CFURLRef url , CFArrayRef keys , CFErrorRef *error )
	Boolean  CFURLCopyResourcePropertyForKey(CFURLRef url , CFStringRef key , void *propertyValueTypeRefPtr , CFErrorRef *error )
	CFStringRef  CFURLCopyResourceSpecifier(CFURLRef anURL )
	CFStringRef  CFURLCopyScheme(CFURLRef anURL )
	CFStringRef  CFURLCopyStrictPath(CFURLRef anURL , Boolean *isAbsolute )
	CFStringRef  CFURLCopyUserName(CFURLRef anURL )
	CFURLRef  CFURLCreateAbsoluteURLWithBytes(CFAllocatorRef alloc , const UInt8 *relativeURLBytes , CFIndex length , CFStringEncoding encoding , CFURLRef baseURL , Boolean useCompatibilityMode )
	CFDataRef  CFURLCreateBookmarkData(CFAllocatorRef allocator , CFURLRef url , CFURLBookmarkCreationOptions options , CFArrayRef resourcePropertiesToInclude , CFURLRef relativeToURL , CFErrorRef *error )
	CFDataRef  CFURLCreateBookmarkDataFromAliasRecord(CFAllocatorRef allocatorRef , CFDataRef aliasRecordDataRef )
	CFDataRef  CFURLCreateBookmarkDataFromFile(CFAllocatorRef allocator , CFURLRef fileURL , CFErrorRef *errorRef )
	CFURLRef  CFURLCreateByResolvingBookmarkData(CFAllocatorRef allocator , CFDataRef bookmark , CFURLBookmarkResolutionOptions options , CFURLRef relativeToURL , CFArrayRef resourcePropertiesToInclude , Boolean *isStale , CFErrorRef *error )
	CFURLRef  CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator , CFURLRef url , CFStringRef pathComponent , Boolean isDirectory )
	CFURLRef  CFURLCreateCopyAppendingPathExtension(CFAllocatorRef allocator , CFURLRef url , CFStringRef extension )
	CFURLRef  CFURLCreateCopyDeletingLastPathComponent(CFAllocatorRef allocator , CFURLRef url )
	CFURLRef  CFURLCreateCopyDeletingPathExtension(CFAllocatorRef allocator , CFURLRef url )
	CFDataRef  CFURLCreateData(CFAllocatorRef allocator , CFURLRef url , CFStringEncoding encoding , Boolean escapeWhitespace )
	Boolean  CFURLCreateDataAndPropertiesFromResource(CFAllocatorRef alloc , CFURLRef url , CFDataRef *resourceData , CFDictionaryRef *properties , CFArrayRef desiredProperties , SInt32 *errorCode )
	CFURLRef  CFURLCreateFilePathURL(CFAllocatorRef allocator , CFURLRef url , CFErrorRef *error )
	CFURLRef  CFURLCreateFileReferenceURL(CFAllocatorRef allocator , CFURLRef url , CFErrorRef *error )
	CFURLRef  CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator , const UInt8 *buffer , CFIndex bufLen , Boolean isDirectory )
	CFURLRef  CFURLCreateFromFileSystemRepresentationRelativeToBase(CFAllocatorRef allocator , const UInt8 *buffer , CFIndex bufLen , Boolean isDirectory , CFURLRef baseURL )
	CFURLRef  CFURLCreateFromFSRef(CFAllocatorRef allocator , const struct FSRef *fsRef )
	CFTypeRef  CFURLCreatePropertyFromResource(CFAllocatorRef alloc , CFURLRef url , CFStringRef property , SInt32 *errorCode )
	CFDictionaryRef  CFURLCreateResourcePropertiesForKeysFromBookmarkData(CFAllocatorRef allocator , CFArrayRef resourcePropertiesToReturn , CFDataRef bookmark )
	CFTypeRef  CFURLCreateResourcePropertyForKeyFromBookmarkData(CFAllocatorRef allocator , CFStringRef resourcePropertyKey , CFDataRef bookmark )
	CFStringRef  CFURLCreateStringByAddingPercentEscapes(CFAllocatorRef allocator , CFStringRef originalString , CFStringRef charactersToLeaveUnescaped , CFStringRef legalURLCharactersToBeEscaped , CFStringEncoding encoding )
	CFStringRef  CFURLCreateStringByReplacingPercentEscapes(CFAllocatorRef allocator , CFStringRef originalString , CFStringRef charactersToLeaveEscaped )
	CFStringRef  CFURLCreateStringByReplacingPercentEscapesUsingEncoding(CFAllocatorRef allocator , CFStringRef origString , CFStringRef charsToLeaveEscaped , CFStringEncoding encoding )
	CFURLRef  CFURLCreateWithBytes(CFAllocatorRef allocator , const UInt8 *URLBytes , CFIndex length , CFStringEncoding encoding , CFURLRef baseURL )
	CFURLRef  CFURLCreateWithFileSystemPath(CFAllocatorRef allocator , CFStringRef filePath , CFURLPathStyle pathStyle , Boolean isDirectory )
	CFURLRef  CFURLCreateWithFileSystemPathRelativeToBase(CFAllocatorRef allocator , CFStringRef filePath , CFURLPathStyle pathStyle , Boolean isDirectory , CFURLRef baseURL )
	CFURLRef  CFURLCreateWithString(CFAllocatorRef allocator , CFStringRef URLString , CFURLRef baseURL )
	Boolean  CFURLDestroyResource(CFURLRef url , SInt32 *errorCode )
	CFURLEnumeratorRef  CFURLEnumeratorCreateForDirectoryURL(CFAllocatorRef alloc , CFURLRef directoryURL , CFURLEnumeratorOptions option , CFArrayRef propertyKeys )
	CFURLEnumeratorRef  CFURLEnumeratorCreateForMountedVolumes(CFAllocatorRef alloc , CFURLEnumeratorOptions option , CFArrayRef propertyKeys )
	CFIndex  CFURLEnumeratorGetDescendentLevel(CFURLEnumeratorRef enumerator )
	CFURLEnumeratorResult  CFURLEnumeratorGetNextURL(CFURLEnumeratorRef enumerator , CFURLRef *url , CFErrorRef *error )
	Boolean  CFURLEnumeratorGetSourceDidChange(CFURLEnumeratorRef enumerator )
	CFTypeID  CFURLEnumeratorGetTypeID()
	void  CFURLEnumeratorSkipDescendents(CFURLEnumeratorRef enumerator )
	CFURLRef  CFURLGetBaseURL(CFURLRef anURL )
	CFRange  CFURLGetByteRangeForComponent(CFURLRef url , CFURLComponentType component , CFRange *rangeIncludingSeparators )
	CFIndex  CFURLGetBytes(CFURLRef url , UInt8 *buffer , CFIndex bufferLength )
	Boolean  CFURLGetFileSystemRepresentation(CFURLRef url , Boolean resolveAgainstBase , UInt8 *buffer , CFIndex maxBufLen )
	Boolean  CFURLGetFSRef(CFURLRef url , struct FSRef *fsRef )
	SInt32  CFURLGetPortNumber(CFURLRef anURL )
	CFStringRef  CFURLGetString(CFURLRef anURL )
	CFTypeID  CFURLGetTypeID()
	Boolean  CFURLHasDirectoryPath(CFURLRef anURL )
	Boolean  CFURLResourceIsReachable(CFURLRef url , CFErrorRef *error )
	Boolean  CFURLSetResourcePropertiesForKeys(CFURLRef url , CFDictionaryRef keyedPropertyValues , CFErrorRef *error )
	Boolean  CFURLSetResourcePropertyForKey(CFURLRef url , CFStringRef key , CFTypeRef propertyValue , CFErrorRef *error )
	void  CFURLSetTemporaryResourcePropertyForKey(CFURLRef url , CFStringRef key , CFTypeRef propertyValue )
	Boolean  CFURLStartAccessingSecurityScopedResource(CFURLRef url )
	void  CFURLStopAccessingSecurityScopedResource(CFURLRef url )
	Boolean  CFURLWriteBookmarkDataToFile(CFDataRef bookmarkRef , CFURLRef fileURL , CFURLBookmarkFileCreationOptions options , CFErrorRef *errorRef )
	Boolean  CFURLWriteDataAndPropertiesToResource(CFURLRef url , CFDataRef dataToWrite , CFDictionaryRef propertiesToWrite , SInt32 *errorCode )
	SInt32  CFUserNotificationCancel(CFUserNotificationRef userNotification )
	CFOptionFlags  CFUserNotificationCheckBoxChecked(CFIndex i )
	CFUserNotificationRef  CFUserNotificationCreate(CFAllocatorRef allocator , CFTimeInterval timeout , CFOptionFlags flags , SInt32 *error , CFDictionaryRef dictionary )
	CFRunLoopSourceRef  CFUserNotificationCreateRunLoopSource(CFAllocatorRef allocator , CFUserNotificationRef userNotification , CFUserNotificationCallBack callout , CFIndex order )
	SInt32  CFUserNotificationDisplayAlert(CFTimeInterval timeout , CFOptionFlags flags , CFURLRef iconURL , CFURLRef soundURL , CFURLRef localizationURL , CFStringRef alertHeader , CFStringRef alertMessage , CFStringRef defaultButtonTitle , CFStringRef alternateButtonTitle , CFStringRef otherButtonTitle , CFOptionFlags *responseFlags )
	SInt32  CFUserNotificationDisplayNotice(CFTimeInterval timeout , CFOptionFlags flags , CFURLRef iconURL , CFURLRef soundURL , CFURLRef localizationURL , CFStringRef alertHeader , CFStringRef alertMessage , CFStringRef defaultButtonTitle )
	CFDictionaryRef  CFUserNotificationGetResponseDictionary(CFUserNotificationRef userNotification )
	CFStringRef  CFUserNotificationGetResponseValue(CFUserNotificationRef userNotification , CFStringRef key , CFIndex idx )
	CFTypeID  CFUserNotificationGetTypeID()
	CFOptionFlags  CFUserNotificationPopUpSelection(CFIndex n )
	SInt32  CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification , CFTimeInterval timeout , CFOptionFlags *responseFlags )
	CFOptionFlags  CFUserNotificationSecureTextField(CFIndex i )
	SInt32  CFUserNotificationUpdate(CFUserNotificationRef userNotification , CFTimeInterval timeout , CFOptionFlags flags , CFDictionaryRef dictionary )
	CFUUIDRef  CFUUIDCreate(CFAllocatorRef alloc )
	CFUUIDRef  CFUUIDCreateFromString(CFAllocatorRef alloc , CFStringRef uuidStr )
	CFUUIDRef  CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc , CFUUIDBytes bytes )
	CFStringRef  CFUUIDCreateString(CFAllocatorRef alloc , CFUUIDRef uuid )
	CFUUIDRef  CFUUIDCreateWithBytes(CFAllocatorRef alloc , UInt8 byte0 , UInt8 byte1 , UInt8 byte2 , UInt8 byte3 , UInt8 byte4 , UInt8 byte5 , UInt8 byte6 , UInt8 byte7 , UInt8 byte8 , UInt8 byte9 , UInt8 byte10 , UInt8 byte11 , UInt8 byte12 , UInt8 byte13 , UInt8 byte14 , UInt8 byte15 )
	CFUUIDRef  CFUUIDGetConstantUUIDWithBytes(CFAllocatorRef alloc , UInt8 byte0 , UInt8 byte1 , UInt8 byte2 , UInt8 byte3 , UInt8 byte4 , UInt8 byte5 , UInt8 byte6 , UInt8 byte7 , UInt8 byte8 , UInt8 byte9 , UInt8 byte10 , UInt8 byte11 , UInt8 byte12 , UInt8 byte13 , UInt8 byte14 , UInt8 byte15 )
	CFTypeID  CFUUIDGetTypeID()
	CFUUIDBytes  CFUUIDGetUUIDBytes(CFUUIDRef uuid )
	Boolean  CFWriteStreamCanAcceptBytes(CFWriteStreamRef stream )
	void  CFWriteStreamClose(CFWriteStreamRef stream )
	CFErrorRef  CFWriteStreamCopyError(CFWriteStreamRef stream )
	CFTypeRef  CFWriteStreamCopyProperty(CFWriteStreamRef stream , CFStringRef propertyName )
	CFWriteStreamRef  CFWriteStreamCreateWithAllocatedBuffers(CFAllocatorRef alloc , CFAllocatorRef bufferAllocator )
	CFWriteStreamRef  CFWriteStreamCreateWithBuffer(CFAllocatorRef alloc , UInt8 *buffer , CFIndex bufferCapacity )
	CFWriteStreamRef  CFWriteStreamCreateWithFile(CFAllocatorRef alloc , CFURLRef fileURL )
	CFWriteStreamRef  CFWriteStreamCreateWithFTPURL(CFAllocatorRef alloc , CFURLRef ftpURL )
	CFStreamError  CFWriteStreamGetError(CFWriteStreamRef stream )
	CFStreamStatus  CFWriteStreamGetStatus(CFWriteStreamRef stream )
	CFTypeID  CFWriteStreamGetTypeID()
	Boolean  CFWriteStreamOpen(CFWriteStreamRef stream )
	void  CFWriteStreamScheduleWithRunLoop(CFWriteStreamRef stream , CFRunLoopRef runLoop , CFStringRef runLoopMode )
	Boolean  CFWriteStreamSetClient(CFWriteStreamRef stream , CFOptionFlags streamEvents , CFWriteStreamClientCallBack clientCB , CFStreamClientContext *clientContext )
	Boolean  CFWriteStreamSetProperty(CFWriteStreamRef stream , CFStringRef propertyName , CFTypeRef propertyValue )
	void  CFWriteStreamUnscheduleFromRunLoop(CFWriteStreamRef stream , CFRunLoopRef runLoop , CFStringRef runLoopMode )
	CFIndex  CFWriteStreamWrite(CFWriteStreamRef stream , const UInt8 *buffer , CFIndex bufferLength )
	CFStringRef  CFXMLCreateStringByEscapingEntities(CFAllocatorRef allocator , CFStringRef string , CFDictionaryRef entitiesDictionary )
	CFStringRef  CFXMLCreateStringByUnescapingEntities(CFAllocatorRef allocator , CFStringRef string , CFDictionaryRef entitiesDictionary )
	CFXMLNodeRef  CFXMLNodeCreate(CFAllocatorRef alloc , CFXMLNodeTypeCode xmlType , CFStringRef dataString , const void *additionalInfoPtr , CFIndex version )
	CFXMLNodeRef  CFXMLNodeCreateCopy(CFAllocatorRef alloc , CFXMLNodeRef origNode )
	const void *  CFXMLNodeGetInfoPtr(CFXMLNodeRef node )
	CFStringRef  CFXMLNodeGetString(CFXMLNodeRef node )
	CFXMLNodeTypeCode  CFXMLNodeGetTypeCode(CFXMLNodeRef node )
	CFTypeID  CFXMLNodeGetTypeID()
	CFIndex  CFXMLNodeGetVersion(CFXMLNodeRef node )
	void  CFXMLParserAbort(CFXMLParserRef parser , CFXMLParserStatusCode errorCode , CFStringRef errorDescription )
	CFStringRef  CFXMLParserCopyErrorDescription(CFXMLParserRef parser )
	CFXMLParserRef  CFXMLParserCreate(CFAllocatorRef allocator , CFDataRef xmlData , CFURLRef dataSource , CFOptionFlags parseOptions , CFIndex versionOfNodes , CFXMLParserCallBacks *callBacks , CFXMLParserContext *context )
	CFXMLParserRef  CFXMLParserCreateWithDataFromURL(CFAllocatorRef allocator , CFURLRef dataSource , CFOptionFlags parseOptions , CFIndex versionOfNodes , CFXMLParserCallBacks *callBacks , CFXMLParserContext *context )
	void  CFXMLParserGetCallBacks(CFXMLParserRef parser , CFXMLParserCallBacks *callBacks )
	void  CFXMLParserGetContext(CFXMLParserRef parser , CFXMLParserContext *context )
	void *  CFXMLParserGetDocument(CFXMLParserRef parser )
	CFIndex  CFXMLParserGetLineNumber(CFXMLParserRef parser )
	CFIndex  CFXMLParserGetLocation(CFXMLParserRef parser )
	CFURLRef  CFXMLParserGetSourceURL(CFXMLParserRef parser )
	CFXMLParserStatusCode  CFXMLParserGetStatusCode(CFXMLParserRef parser )
	CFTypeID  CFXMLParserGetTypeID()
	Boolean  CFXMLParserParse(CFXMLParserRef parser )
	CFXMLTreeRef  CFXMLTreeCreateFromData(CFAllocatorRef allocator , CFDataRef xmlData , CFURLRef dataSource , CFOptionFlags parseOptions , CFIndex versionOfNodes )
	CFXMLTreeRef  CFXMLTreeCreateFromDataWithError(CFAllocatorRef allocator , CFDataRef xmlData , CFURLRef dataSource , CFOptionFlags parseOptions , CFIndex versionOfNodes , CFDictionaryRef *errorDict )
	CFXMLTreeRef  CFXMLTreeCreateWithDataFromURL(CFAllocatorRef allocator , CFURLRef dataSource , CFOptionFlags parseOptions , CFIndex versionOfNodes )
	CFXMLTreeRef  CFXMLTreeCreateWithNode(CFAllocatorRef allocator , CFXMLNodeRef node )
	CFDataRef  CFXMLTreeCreateXMLData(CFAllocatorRef allocator , CFXMLTreeRef xmlTree )
	CFXMLNodeRef  CFXMLTreeGetNode(CFXMLTreeRef xmlTree )
	CGError  CGAcquireDisplayFadeReservation(CGDisplayReservationInterval seconds , CGDisplayFadeReservationToken *token )
	CGAffineTransform  CGAffineTransformConcat(CGAffineTransform t1 , CGAffineTransform t2 )
	bool  CGAffineTransformEqualToTransform(CGAffineTransform t1 , CGAffineTransform t2 )
	CGAffineTransform  CGAffineTransformInvert(CGAffineTransform t )
	bool  CGAffineTransformIsIdentity(CGAffineTransform t )
	CGAffineTransform  CGAffineTransformMake(CGFloat a , CGFloat b , CGFloat c , CGFloat d , CGFloat tx , CGFloat ty )
	CGAffineTransform  CGAffineTransformMakeRotation(CGFloat angle )
	CGAffineTransform  CGAffineTransformMakeScale(CGFloat sx , CGFloat sy )
	CGAffineTransform  CGAffineTransformMakeTranslation(CGFloat tx , CGFloat ty )
	CGAffineTransform  CGAffineTransformRotate(CGAffineTransform t , CGFloat angle )
	CGAffineTransform  CGAffineTransformScale(CGAffineTransform t , CGFloat sx , CGFloat sy )
	CGAffineTransform  CGAffineTransformTranslate(CGAffineTransform t , CGFloat tx , CGFloat ty )
	CGError  CGAssociateMouseAndMouseCursorPosition(boolean_t connected )
	CGError  CGBeginDisplayConfiguration(CGDisplayConfigRef *config )
	CGContextRef  CGBitmapContextCreate(void *data , size_t width , size_t height , size_t bitsPerComponent , size_t bytesPerRow , CGColorSpaceRef space , CGBitmapInfo bitmapInfo )
	CGImageRef  CGBitmapContextCreateImage(CGContextRef context )
	CGContextRef  CGBitmapContextCreateWithData(void *data , size_t width , size_t height , size_t bitsPerComponent , size_t bytesPerRow , CGColorSpaceRef space , CGBitmapInfo bitmapInfo , CGBitmapContextReleaseDataCallback releaseCallback , void *releaseInfo )
	CGImageAlphaInfo  CGBitmapContextGetAlphaInfo(CGContextRef context )
	CGBitmapInfo  CGBitmapContextGetBitmapInfo(CGContextRef context )
	size_t  CGBitmapContextGetBitsPerComponent(CGContextRef context )
	size_t  CGBitmapContextGetBitsPerPixel(CGContextRef context )
	size_t  CGBitmapContextGetBytesPerRow(CGContextRef context )
	CGColorSpaceRef  CGBitmapContextGetColorSpace(CGContextRef context )
	void *  CGBitmapContextGetData(CGContextRef context )
	size_t  CGBitmapContextGetHeight(CGContextRef context )
	size_t  CGBitmapContextGetWidth(CGContextRef context )
	CGError  CGCancelDisplayConfiguration(CGDisplayConfigRef config )
	CGError  CGCaptureAllDisplays()
	CGError  CGCaptureAllDisplaysWithOptions(CGCaptureOptions options )
	CGColorRef  CGColorCreate(CGColorSpaceRef space , const CGFloat *components )
	CGColorRef  CGColorCreateCopy(CGColorRef color )
	CGColorRef  CGColorCreateCopyWithAlpha(CGColorRef color , CGFloat alpha )
	CGColorRef  CGColorCreateGenericCMYK(CGFloat cyan , CGFloat magenta , CGFloat yellow , CGFloat black , CGFloat alpha )
	CGColorRef  CGColorCreateGenericGray(CGFloat gray , CGFloat alpha )
	CGColorRef  CGColorCreateGenericRGB(CGFloat red , CGFloat green , CGFloat blue , CGFloat alpha )
	CGColorRef  CGColorCreateWithPattern(CGColorSpaceRef space , CGPatternRef pattern , const CGFloat *components )
	bool  CGColorEqualToColor(CGColorRef color1 , CGColorRef color2 )
	CGFloat  CGColorGetAlpha(CGColorRef color )
	CGColorSpaceRef  CGColorGetColorSpace(CGColorRef color )
	const CGFloat *  CGColorGetComponents(CGColorRef color )
	CGColorRef  CGColorGetConstantColor(CFStringRef colorName )
	size_t  CGColorGetNumberOfComponents(CGColorRef color )
	CGPatternRef  CGColorGetPattern(CGColorRef color )
	CFTypeID  CGColorGetTypeID()
	void  CGColorRelease(CGColorRef color )
	CGColorRef  CGColorRetain(CGColorRef color )
	CFDataRef  CGColorSpaceCopyICCProfile(CGColorSpaceRef space )
	CFStringRef  CGColorSpaceCopyName(CGColorSpaceRef space )
	CGColorSpaceRef  CGColorSpaceCreateCalibratedGray(const CGFloat *whitePoint , const CGFloat *blackPoint , CGFloat gamma )
	CGColorSpaceRef  CGColorSpaceCreateCalibratedRGB(const CGFloat *whitePoint , const CGFloat *blackPoint , const CGFloat *gamma , const CGFloat *matrix )
	CGColorSpaceRef  CGColorSpaceCreateDeviceCMYK()
	CGColorSpaceRef  CGColorSpaceCreateDeviceGray()
	CGColorSpaceRef  CGColorSpaceCreateDeviceRGB()
	CGColorSpaceRef  CGColorSpaceCreateICCBased(size_t nComponents , const CGFloat *range , CGDataProviderRef profile , CGColorSpaceRef alternate )
	CGColorSpaceRef  CGColorSpaceCreateIndexed(CGColorSpaceRef baseSpace , size_t lastIndex , const unsigned char *colorTable )
	CGColorSpaceRef  CGColorSpaceCreateLab(const CGFloat *whitePoint , const CGFloat *blackPoint , const CGFloat *range )
	CGColorSpaceRef  CGColorSpaceCreatePattern(CGColorSpaceRef baseSpace )
	CGColorSpaceRef  CGColorSpaceCreateWithICCProfile(CFDataRef data )
	CGColorSpaceRef  CGColorSpaceCreateWithName(CFStringRef name )
	CGColorSpaceRef  CGColorSpaceCreateWithPlatformColorSpace(const void *ref )
	CGColorSpaceRef  CGColorSpaceGetBaseColorSpace(CGColorSpaceRef space )
	void  CGColorSpaceGetColorTable(CGColorSpaceRef space , uint8_t *table )
	size_t  CGColorSpaceGetColorTableCount(CGColorSpaceRef space )
	CGColorSpaceModel  CGColorSpaceGetModel(CGColorSpaceRef space )
	size_t  CGColorSpaceGetNumberOfComponents(CGColorSpaceRef space )
	CFTypeID  CGColorSpaceGetTypeID()
	void  CGColorSpaceRelease(CGColorSpaceRef space )
	CGColorSpaceRef  CGColorSpaceRetain(CGColorSpaceRef space )
	CGError  CGCompleteDisplayConfiguration(CGDisplayConfigRef config , CGConfigureOption option )
	CGError  CGConfigureDisplayFadeEffect(CGDisplayConfigRef config , CGDisplayFadeInterval fadeOutSeconds , CGDisplayFadeInterval fadeInSeconds , float fadeRed , float fadeGreen , float fadeBlue )
	CGError  CGConfigureDisplayMirrorOfDisplay(CGDisplayConfigRef config , CGDirectDisplayID display , CGDirectDisplayID master )
	CGError  CGConfigureDisplayMode(CGDisplayConfigRef config , CGDirectDisplayID display , CFDictionaryRef mode )
	CGError  CGConfigureDisplayOrigin(CGDisplayConfigRef config , CGDirectDisplayID display , int32_t x , int32_t y )
	CGError  CGConfigureDisplayStereoOperation(CGDisplayConfigRef config , CGDirectDisplayID display , boolean_t stereo , boolean_t forceBlueLine )
	CGError  CGConfigureDisplayWithDisplayMode(CGDisplayConfigRef config , CGDirectDisplayID display , CGDisplayModeRef mode , CFDictionaryRef options )
	void  CGContextAddArc(CGContextRef c , CGFloat x , CGFloat y , CGFloat radius , CGFloat startAngle , CGFloat endAngle , int clockwise )
	void  CGContextAddArcToPoint(CGContextRef c , CGFloat x1 , CGFloat y1 , CGFloat x2 , CGFloat y2 , CGFloat radius )
	void  CGContextAddCurveToPoint(CGContextRef c , CGFloat cp1x , CGFloat cp1y , CGFloat cp2x , CGFloat cp2y , CGFloat x , CGFloat y )
	void  CGContextAddEllipseInRect(CGContextRef context , CGRect rect )
	void  CGContextAddLines(CGContextRef c , const CGPoint *points , size_t count )
	void  CGContextAddLineToPoint(CGContextRef c , CGFloat x , CGFloat y )
	void  CGContextAddPath(CGContextRef context , CGPathRef path )
	void  CGContextAddQuadCurveToPoint(CGContextRef c , CGFloat cpx , CGFloat cpy , CGFloat x , CGFloat y )
	void  CGContextAddRect(CGContextRef c , CGRect rect )
	void  CGContextAddRects(CGContextRef c , const CGRect *rects , size_t count )
	void  CGContextBeginPage(CGContextRef c , const CGRect *mediaBox )
	void  CGContextBeginPath(CGContextRef c )
	void  CGContextBeginTransparencyLayer(CGContextRef context , CFDictionaryRef auxiliaryInfo )
	void  CGContextBeginTransparencyLayerWithRect(CGContextRef context , CGRect rect , CFDictionaryRef auxiliaryInfo )
	void  CGContextClearRect(CGContextRef c , CGRect rect )
	void  CGContextClip(CGContextRef c )
	void  CGContextClipToMask(CGContextRef c , CGRect rect , CGImageRef mask )
	void  CGContextClipToRect(CGContextRef c , CGRect rect )
	void  CGContextClipToRects(CGContextRef c , const CGRect *rects , size_t count )
	void  CGContextClosePath(CGContextRef c )
	void  CGContextConcatCTM(CGContextRef c , CGAffineTransform transform )
	CGPoint  CGContextConvertPointToDeviceSpace(CGContextRef context , CGPoint point )
	CGPoint  CGContextConvertPointToUserSpace(CGContextRef context , CGPoint point )
	CGRect  CGContextConvertRectToDeviceSpace(CGContextRef context , CGRect rect )
	CGRect  CGContextConvertRectToUserSpace(CGContextRef context , CGRect rect )
	CGSize  CGContextConvertSizeToDeviceSpace(CGContextRef context , CGSize size )
	CGSize  CGContextConvertSizeToUserSpace(CGContextRef context , CGSize size )
	CGPathRef  CGContextCopyPath(CGContextRef context )
	void  CGContextDrawImage(CGContextRef c , CGRect rect , CGImageRef image )
	void  CGContextDrawLayerAtPoint(CGContextRef context , CGPoint point , CGLayerRef layer )
	void  CGContextDrawLayerInRect(CGContextRef context , CGRect rect , CGLayerRef layer )
	void  CGContextDrawLinearGradient(CGContextRef context , CGGradientRef gradient , CGPoint startPoint , CGPoint endPoint , CGGradientDrawingOptions options )
	void  CGContextDrawPath(CGContextRef c , CGPathDrawingMode mode )
	void  CGContextDrawPDFDocument(CGContextRef c , CGRect rect , CGPDFDocumentRef document , int page )
	void  CGContextDrawPDFPage(CGContextRef c , CGPDFPageRef page )
	void  CGContextDrawRadialGradient(CGContextRef context , CGGradientRef gradient , CGPoint startCenter , CGFloat startRadius , CGPoint endCenter , CGFloat endRadius , CGGradientDrawingOptions options )
	void  CGContextDrawShading(CGContextRef context , CGShadingRef shading )
	void  CGContextDrawTiledImage(CGContextRef c , CGRect rect , CGImageRef image )
	void  CGContextEndPage(CGContextRef c )
	void  CGContextEndTransparencyLayer(CGContextRef context )
	void  CGContextEOClip(CGContextRef c )
	void  CGContextEOFillPath(CGContextRef c )
	void  CGContextFillEllipseInRect(CGContextRef context , CGRect rect )
	void  CGContextFillPath(CGContextRef c )
	void  CGContextFillRect(CGContextRef c , CGRect rect )
	void  CGContextFillRects(CGContextRef c , const CGRect *rects , size_t count )
	void  CGContextFlush(CGContextRef c )
	CGRect  CGContextGetClipBoundingBox(CGContextRef c )
	CGAffineTransform  CGContextGetCTM(CGContextRef c )
	CGInterpolationQuality  CGContextGetInterpolationQuality(CGContextRef context )
	CGRect  CGContextGetPathBoundingBox(CGContextRef context )
	CGPoint  CGContextGetPathCurrentPoint(CGContextRef context )
	CGAffineTransform  CGContextGetTextMatrix(CGContextRef c )
	CGPoint  CGContextGetTextPosition(CGContextRef context )
	CFTypeID  CGContextGetTypeID()
	CGAffineTransform  CGContextGetUserSpaceToDeviceSpaceTransform(CGContextRef context )
	bool  CGContextIsPathEmpty(CGContextRef context )
	void  CGContextMoveToPoint(CGContextRef c , CGFloat x , CGFloat y )
	bool  CGContextPathContainsPoint(CGContextRef context , CGPoint point , CGPathDrawingMode mode )
	void  CGContextRelease(CGContextRef c )
	void  CGContextReplacePathWithStrokedPath(CGContextRef c )
	void  CGContextRestoreGState(CGContextRef c )
	CGContextRef  CGContextRetain(CGContextRef c )
	void  CGContextRotateCTM(CGContextRef c , CGFloat angle )
	void  CGContextSaveGState(CGContextRef c )
	void  CGContextScaleCTM(CGContextRef c , CGFloat sx , CGFloat sy )
	void  CGContextSelectFont(CGContextRef c , const char *name , CGFloat size , CGTextEncoding textEncoding )
	void  CGContextSetAllowsAntialiasing(CGContextRef context , bool allowsAntialiasing )
	void  CGContextSetAllowsFontSmoothing(CGContextRef context , bool allowsFontSmoothing )
	void  CGContextSetAllowsFontSubpixelPositioning(CGContextRef context , bool allowsFontSubpixelPositioning )
	void  CGContextSetAllowsFontSubpixelQuantization(CGContextRef context , bool allowsFontSubpixelQuantization )
	void  CGContextSetAlpha(CGContextRef c , CGFloat alpha )
	void  CGContextSetBlendMode(CGContextRef context , CGBlendMode mode )
	void  CGContextSetCharacterSpacing(CGContextRef context , CGFloat spacing )
	void  CGContextSetCMYKFillColor(CGContextRef context , CGFloat cyan , CGFloat magenta , CGFloat yellow , CGFloat black , CGFloat alpha )
	void  CGContextSetCMYKStrokeColor(CGContextRef context , CGFloat cyan , CGFloat magenta , CGFloat yellow , CGFloat black , CGFloat alpha )
	void  CGContextSetFillColor(CGContextRef context , const CGFloat *components )
	void  CGContextSetFillColorSpace(CGContextRef context , CGColorSpaceRef space )
	void  CGContextSetFillColorWithColor(CGContextRef c , CGColorRef color )
	void  CGContextSetFillPattern(CGContextRef context , CGPatternRef pattern , const CGFloat *components )
	void  CGContextSetFlatness(CGContextRef c , CGFloat flatness )
	void  CGContextSetFont(CGContextRef c , CGFontRef font )
	void  CGContextSetFontSize(CGContextRef c , CGFloat size )
	void  CGContextSetGrayFillColor(CGContextRef context , CGFloat gray , CGFloat alpha )
	void  CGContextSetGrayStrokeColor(CGContextRef context , CGFloat gray , CGFloat alpha )
	void  CGContextSetInterpolationQuality(CGContextRef context , CGInterpolationQuality quality )
	void  CGContextSetLineCap(CGContextRef c , CGLineCap cap )
	void  CGContextSetLineDash(CGContextRef c , CGFloat phase , const CGFloat *lengths , size_t count )
	void  CGContextSetLineJoin(CGContextRef c , CGLineJoin join )
	void  CGContextSetLineWidth(CGContextRef c , CGFloat width )
	void  CGContextSetMiterLimit(CGContextRef c , CGFloat limit )
	void  CGContextSetPatternPhase(CGContextRef context , CGSize phase )
	void  CGContextSetRenderingIntent(CGContextRef context , CGColorRenderingIntent intent )
	void  CGContextSetRGBFillColor(CGContextRef context , CGFloat red , CGFloat green , CGFloat blue , CGFloat alpha )
	void  CGContextSetRGBStrokeColor(CGContextRef context , CGFloat red , CGFloat green , CGFloat blue , CGFloat alpha )
	void  CGContextSetShadow(CGContextRef context , CGSize offset , CGFloat blur )
	void  CGContextSetShadowWithColor(CGContextRef context , CGSize offset , CGFloat blur , CGColorRef color )
	void  CGContextSetShouldAntialias(CGContextRef context , bool shouldAntialias )
	void  CGContextSetShouldSmoothFonts(CGContextRef context , bool shouldSmoothFonts )
	void  CGContextSetShouldSubpixelPositionFonts(CGContextRef context , bool shouldSubpixelPositionFonts )
	void  CGContextSetShouldSubpixelQuantizeFonts(CGContextRef context , bool shouldSubpixelQuantizeFonts )
	void  CGContextSetStrokeColor(CGContextRef context , const CGFloat *components )
	void  CGContextSetStrokeColorSpace(CGContextRef context , CGColorSpaceRef space )
	void  CGContextSetStrokeColorWithColor(CGContextRef c , CGColorRef color )
	void  CGContextSetStrokePattern(CGContextRef context , CGPatternRef pattern , const CGFloat *components )
	void  CGContextSetTextDrawingMode(CGContextRef c , CGTextDrawingMode mode )
	void  CGContextSetTextMatrix(CGContextRef c , CGAffineTransform t )
	void  CGContextSetTextPosition(CGContextRef c , CGFloat x , CGFloat y )
	void  CGContextShowGlyphs(CGContextRef c , const CGGlyph *g , size_t count )
	void  CGContextShowGlyphsAtPoint(CGContextRef context , CGFloat x , CGFloat y , const CGGlyph *glyphs , size_t count )
	void  CGContextShowGlyphsAtPositions(CGContextRef context , const CGGlyph *glyphs , const CGPoint *positions , size_t count )
	void  CGContextShowGlyphsWithAdvances(CGContextRef c , const CGGlyph *glyphs , const CGSize *advances , size_t count )
	void  CGContextShowText(CGContextRef c , const char *string , size_t length )
	void  CGContextShowTextAtPoint(CGContextRef c , CGFloat x , CGFloat y , const char *string , size_t length )
	void  CGContextStrokeEllipseInRect(CGContextRef context , CGRect rect )
	void  CGContextStrokeLineSegments(CGContextRef c , const CGPoint *points , size_t count )
	void  CGContextStrokePath(CGContextRef c )
	void  CGContextStrokeRect(CGContextRef c , CGRect rect )
	void  CGContextStrokeRectWithWidth(CGContextRef c , CGRect rect , CGFloat width )
	void  CGContextSynchronize(CGContextRef c )
	void  CGContextTranslateCTM(CGContextRef c , CGFloat tx , CGFloat ty )
	boolean_t  CGCursorIsDrawnInFramebuffer()
	boolean_t  CGCursorIsVisible()
	CGDataConsumerRef  CGDataConsumerCreate(void *info , const CGDataConsumerCallbacks *callbacks )
	CGDataConsumerRef  CGDataConsumerCreateWithCFData(CFMutableDataRef data )
	CGDataConsumerRef  CGDataConsumerCreateWithURL(CFURLRef url )
	CFTypeID  CGDataConsumerGetTypeID()
	void  CGDataConsumerRelease(CGDataConsumerRef consumer )
	CGDataConsumerRef  CGDataConsumerRetain(CGDataConsumerRef consumer )
	CFDataRef  CGDataProviderCopyData(CGDataProviderRef provider )
	CGDataProviderRef  CGDataProviderCreateDirect(void *info , off_t size , const CGDataProviderDirectCallbacks *callbacks )
	CGDataProviderRef  CGDataProviderCreateSequential(void *info , const CGDataProviderSequentialCallbacks *callbacks )
	CGDataProviderRef  CGDataProviderCreateWithCFData(CFDataRef data )
	CGDataProviderRef  CGDataProviderCreateWithData(void *info , const void *data , size_t size , CGDataProviderReleaseDataCallback releaseData )
	CGDataProviderRef  CGDataProviderCreateWithFilename(const char *filename )
	CGDataProviderRef  CGDataProviderCreateWithURL(CFURLRef url )
	CFTypeID  CGDataProviderGetTypeID()
	void  CGDataProviderRelease(CGDataProviderRef provider )
	CGDataProviderRef  CGDataProviderRetain(CGDataProviderRef provider )
	CFArrayRef  CGDisplayAvailableModes(CGDirectDisplayID display )
	uint32_t  CGDisplayBeamPosition(CGDirectDisplayID display )
	CFDictionaryRef  CGDisplayBestModeForParameters(CGDirectDisplayID display , size_t bitsPerPixel , size_t width , size_t height , boolean_t *exactMatch )
	CFDictionaryRef  CGDisplayBestModeForParametersAndRefreshRate(CGDirectDisplayID display , size_t bitsPerPixel , size_t width , size_t height , CGRefreshRate refreshRate , boolean_t *exactMatch )
	CFDictionaryRef  CGDisplayBestModeForParametersAndRefreshRateWithProperty(CGDirectDisplayID display , size_t bitsPerPixel , size_t width , size_t height , CGRefreshRate refreshRate , CFStringRef property , boolean_t *exactMatch )
	CGRect  CGDisplayBounds(CGDirectDisplayID display )
	boolean_t  CGDisplayCanSetPalette(CGDirectDisplayID display )
	CGError  CGDisplayCapture(CGDirectDisplayID display )
	CGError  CGDisplayCaptureWithOptions(CGDirectDisplayID display , CGCaptureOptions options )
	CFArrayRef  CGDisplayCopyAllDisplayModes(CGDirectDisplayID display , CFDictionaryRef options )
	CGColorSpaceRef  CGDisplayCopyColorSpace(CGDirectDisplayID display )
	CGDisplayModeRef  CGDisplayCopyDisplayMode(CGDirectDisplayID display )
	CGImageRef  CGDisplayCreateImage(CGDirectDisplayID displayID )
	CGImageRef  CGDisplayCreateImageForRect(CGDirectDisplayID display , CGRect rect )
	CFUUIDRef  CGDisplayCreateUUIDFromDisplayID(uint32_t displayID )
	CFDictionaryRef  CGDisplayCurrentMode(CGDirectDisplayID display )
	CGError  CGDisplayFade(CGDisplayFadeReservationToken token , CGDisplayFadeInterval duration , CGDisplayBlendFraction startBlend , CGDisplayBlendFraction endBlend , float redBlend , float greenBlend , float blueBlend , boolean_t synchronous )
	boolean_t  CGDisplayFadeOperationInProgress()
	uint32_t  CGDisplayGammaTableCapacity(CGDirectDisplayID display )
	uint32_t  CGDisplayGetDisplayIDFromUUID(CFUUIDRef uuid )
	CGContextRef  CGDisplayGetDrawingContext(CGDirectDisplayID display )
	CGError  CGDisplayHideCursor(CGDirectDisplayID display )
	CGOpenGLDisplayMask  CGDisplayIDToOpenGLDisplayMask(CGDirectDisplayID display )
	io_service_t  CGDisplayIOServicePort(CGDirectDisplayID display )
	boolean_t  CGDisplayIsActive(CGDirectDisplayID display )
	boolean_t  CGDisplayIsAlwaysInMirrorSet(CGDirectDisplayID display )
	boolean_t  CGDisplayIsAsleep(CGDirectDisplayID display )
	boolean_t  CGDisplayIsBuiltin(CGDirectDisplayID display )
	boolean_t  CGDisplayIsCaptured(CGDirectDisplayID display )
	boolean_t  CGDisplayIsInHWMirrorSet(CGDirectDisplayID display )
	boolean_t  CGDisplayIsInMirrorSet(CGDirectDisplayID display )
	boolean_t  CGDisplayIsMain(CGDirectDisplayID display )
	boolean_t  CGDisplayIsOnline(CGDirectDisplayID display )
	boolean_t  CGDisplayIsStereo(CGDirectDisplayID display )
	CGDirectDisplayID  CGDisplayMirrorsDisplay(CGDirectDisplayID display )
	CFStringRef  CGDisplayModeCopyPixelEncoding(CGDisplayModeRef mode )
	size_t  CGDisplayModeGetHeight(CGDisplayModeRef mode )
	int32_t  CGDisplayModeGetIODisplayModeID(CGDisplayModeRef mode )
	uint32_t  CGDisplayModeGetIOFlags(CGDisplayModeRef mode )
	size_t  CGDisplayModeGetPixelHeight(CGDisplayModeRef mode )
	size_t  CGDisplayModeGetPixelWidth(CGDisplayModeRef mode )
	double  CGDisplayModeGetRefreshRate(CGDisplayModeRef mode )
	CFTypeID  CGDisplayModeGetTypeID()
	size_t  CGDisplayModeGetWidth(CGDisplayModeRef mode )
	bool  CGDisplayModeIsUsableForDesktopGUI(CGDisplayModeRef mode )
	uint32_t  CGDisplayModelNumber(CGDirectDisplayID display )
	void  CGDisplayModeRelease(CGDisplayModeRef mode )
	CGDisplayModeRef  CGDisplayModeRetain(CGDisplayModeRef mode )
	CGError  CGDisplayMoveCursorToPoint(CGDirectDisplayID display , CGPoint point )
	size_t  CGDisplayPixelsHigh(CGDirectDisplayID display )
	size_t  CGDisplayPixelsWide(CGDirectDisplayID display )
	CGDirectDisplayID  CGDisplayPrimaryDisplay(CGDirectDisplayID display )
	CGError  CGDisplayRegisterReconfigurationCallback(CGDisplayReconfigurationCallBack callback , void *userInfo )
	CGError  CGDisplayRelease(CGDirectDisplayID display )
	CGError  CGDisplayRemoveReconfigurationCallback(CGDisplayReconfigurationCallBack callback , void *userInfo )
	void  CGDisplayRestoreColorSyncSettings()
	double  CGDisplayRotation(CGDirectDisplayID display )
	CGSize  CGDisplayScreenSize(CGDirectDisplayID display )
	uint32_t  CGDisplaySerialNumber(CGDirectDisplayID display )
	CGError  CGDisplaySetDisplayMode(CGDirectDisplayID display , CGDisplayModeRef mode , CFDictionaryRef options )
	CGError  CGDisplaySetPalette(CGDirectDisplayID display , CGDirectPaletteRef palette )
	CGError  CGDisplaySetStereoOperation(CGDirectDisplayID display , boolean_t stereo , boolean_t forceBlueLine , CGConfigureOption option )
	CGError  CGDisplayShowCursor(CGDirectDisplayID display )
	CGDisplayStreamRef  CGDisplayStreamCreate(CGDirectDisplayID display , size_t outputWidth , size_t outputHeight , int32_t pixelFormat , CFDictionaryRef properties , ^(CGDisplayStreamFrameStatus status, uint64_t displayTime, IOSurfaceRef frameSurface, CGDisplayStreamUpdateRef updateRef)handler )
	CGDisplayStreamRef  CGDisplayStreamCreateWithDispatchQueue(CGDirectDisplayID display , size_t outputWidth , size_t outputHeight , int32_t pixelFormat , CFDictionaryRef properties , dispatch_queue_t queue , ^(CGDisplayStreamFrameStatus status, uint64_t displayTime, IOSurfaceRef frameSurface, CGDisplayStreamUpdateRef updateRef)handler )
	CFRunLoopSourceRef  CGDisplayStreamGetRunLoopSource(CGDisplayStreamRef displayStream )
	CFTypeID  CGDisplayStreamGetTypeID()
	CGError  CGDisplayStreamStart(CGDisplayStreamRef displayStream )
	CGError  CGDisplayStreamStop(CGDisplayStreamRef displayStream )
	CGDisplayStreamUpdateRef  CGDisplayStreamUpdateCreateMergedUpdate(CGDisplayStreamUpdateRef firstUpdate , CGDisplayStreamUpdateRef secondUpdate )
	size_t  CGDisplayStreamUpdateGetDropCount(CGDisplayStreamUpdateRef updateRef )
	void  CGDisplayStreamUpdateGetMovedRectsDelta(CGDisplayStreamUpdateRef updateRef , CGFloat *dx , CGFloat *dy )
	const CGRect *  CGDisplayStreamUpdateGetRects(CGDisplayStreamUpdateRef updateRef , CGDisplayStreamUpdateRectType rectType , size_t *rectCount )
	CFTypeID  CGDisplayStreamUpdateGetTypeID()
	CGError  CGDisplaySwitchToMode(CGDirectDisplayID display , CFDictionaryRef mode )
	uint32_t  CGDisplayUnitNumber(CGDirectDisplayID display )
	boolean_t  CGDisplayUsesOpenGLAcceleration(CGDirectDisplayID display )
	uint32_t  CGDisplayVendorNumber(CGDirectDisplayID display )
	CGError  CGDisplayWaitForBeamPositionOutsideLines(CGDirectDisplayID display , uint32_t upperScanLine , uint32_t lowerScanLine )
	CGError  CGEnableEventStateCombining(boolean_t combineState )
	char *  cgetcap(char * , const char * , int )
	int  cgetclose()
	int  cgetent(char ** , char ** , const char * )
	int  cgetfirst(char ** , char ** )
	int  cgetmatch(const char * , const char * )
	int  cgetnext(char ** , char ** )
	int  cgetnum(char * , const char * , long * )
	int  cgetset(const char * )
	int  cgetstr(char * , const char * , char ** )
	int  cgetustr(char * , const char * , char ** )
	CGEventRef  CGEventCreate(CGEventSourceRef source )
	CGEventRef  CGEventCreateCopy(CGEventRef event )
	CFDataRef  CGEventCreateData(CFAllocatorRef allocator , CGEventRef event )
	CGEventRef  CGEventCreateFromData(CFAllocatorRef allocator , CFDataRef data )
	CGEventRef  CGEventCreateKeyboardEvent(CGEventSourceRef source , CGKeyCode virtualKey , bool keyDown )
	CGEventRef  CGEventCreateMouseEvent(CGEventSourceRef source , CGEventType mouseType , CGPoint mouseCursorPosition , CGMouseButton mouseButton )
	CGEventRef  CGEventCreateScrollWheelEvent(CGEventSourceRef source , CGScrollEventUnit units , uint32_t wheelCount , int32_t wheel1, ... )
	CGEventSourceRef  CGEventCreateSourceFromEvent(CGEventRef event )
	double  CGEventGetDoubleValueField(CGEventRef event , CGEventField field )
	CGEventFlags  CGEventGetFlags(CGEventRef event )
	int64_t  CGEventGetIntegerValueField(CGEventRef event , CGEventField field )
	CGPoint  CGEventGetLocation(CGEventRef event )
	CGEventTimestamp  CGEventGetTimestamp(CGEventRef event )
	CGEventType  CGEventGetType(CGEventRef event )
	CFTypeID  CGEventGetTypeID()
	CGPoint  CGEventGetUnflippedLocation(CGEventRef event )
	void  CGEventKeyboardGetUnicodeString(CGEventRef event , UniCharCount maxStringLength , UniCharCount *actualStringLength , UniChar *unicodeString )
	void  CGEventKeyboardSetUnicodeString(CGEventRef event , UniCharCount stringLength , const UniChar *unicodeString )
	void  CGEventPost(CGEventTapLocation tap , CGEventRef event )
	void  CGEventPostToPSN(void *processSerialNumber , CGEventRef event )
	void  CGEventSetDoubleValueField(CGEventRef event , CGEventField field , double value )
	void  CGEventSetFlags(CGEventRef event , CGEventFlags flags )
	void  CGEventSetIntegerValueField(CGEventRef event , CGEventField field , int64_t value )
	void  CGEventSetLocation(CGEventRef event , CGPoint location )
	void  CGEventSetSource(CGEventRef event , CGEventSourceRef source )
	void  CGEventSetTimestamp(CGEventRef event , CGEventTimestamp timestamp )
	void  CGEventSetType(CGEventRef event , CGEventType type )
	bool  CGEventSourceButtonState(CGEventSourceStateID stateID , CGMouseButton button )
	uint32_t  CGEventSourceCounterForEventType(CGEventSourceStateID stateID , CGEventType eventType )
	CGEventSourceRef  CGEventSourceCreate(CGEventSourceStateID stateID )
	CGEventFlags  CGEventSourceFlagsState(CGEventSourceStateID stateID )
	CGEventSourceKeyboardType  CGEventSourceGetKeyboardType(CGEventSourceRef source )
	CGEventFilterMask  CGEventSourceGetLocalEventsFilterDuringSuppressionState(CGEventSourceRef source , CGEventSuppressionState state )
	CFTimeInterval  CGEventSourceGetLocalEventsSuppressionInterval(CGEventSourceRef source )
	double  CGEventSourceGetPixelsPerLine(CGEventSourceRef source )
	CGEventSourceStateID  CGEventSourceGetSourceStateID(CGEventSourceRef source )
	CFTypeID  CGEventSourceGetTypeID()
	int64_t  CGEventSourceGetUserData(CGEventSourceRef source )
	bool  CGEventSourceKeyState(CGEventSourceStateID stateID , CGKeyCode key )
	CFTimeInterval  CGEventSourceSecondsSinceLastEventType(CGEventSourceStateID stateID , CGEventType eventType )
	void  CGEventSourceSetKeyboardType(CGEventSourceRef source , CGEventSourceKeyboardType keyboardType )
	void  CGEventSourceSetLocalEventsFilterDuringSuppressionState(CGEventSourceRef source , CGEventFilterMask filter , CGEventSuppressionState state )
	void  CGEventSourceSetLocalEventsSuppressionInterval(CGEventSourceRef source , CFTimeInterval seconds )
	void  CGEventSourceSetPixelsPerLine(CGEventSourceRef source , double pixelsPerLine )
	void  CGEventSourceSetUserData(CGEventSourceRef source , int64_t userData )
	CFMachPortRef  CGEventTapCreate(CGEventTapLocation tap , CGEventTapPlacement place , CGEventTapOptions options , CGEventMask eventsOfInterest , CGEventTapCallBack callback , void *userInfo )
	CFMachPortRef  CGEventTapCreateForPSN(void *processSerialNumber , CGEventTapPlacement place , CGEventTapOptions options , CGEventMask eventsOfInterest , CGEventTapCallBack callback , void *userInfo )
	void  CGEventTapEnable(CFMachPortRef tap , bool enable )
	bool  CGEventTapIsEnabled(CFMachPortRef tap )
	void  CGEventTapPostEvent(CGEventTapProxy proxy , CGEventRef event )
	bool  CGFontCanCreatePostScriptSubset(CGFontRef font , CGFontPostScriptFormat format )
	CFStringRef  CGFontCopyFullName(CGFontRef font )
	CFStringRef  CGFontCopyGlyphNameForGlyph(CGFontRef font , CGGlyph glyph )
	CFStringRef  CGFontCopyPostScriptName(CGFontRef font )
	CFDataRef  CGFontCopyTableForTag(CGFontRef font , uint32_t tag )
	CFArrayRef  CGFontCopyTableTags(CGFontRef font )
	CFArrayRef  CGFontCopyVariationAxes(CGFontRef font )
	CFDictionaryRef  CGFontCopyVariations(CGFontRef font )
	CGFontRef  CGFontCreateCopyWithVariations(CGFontRef font , CFDictionaryRef variations )
	CFDataRef  CGFontCreatePostScriptEncoding(CGFontRef font , const CGGlyph *encoding )
	CFDataRef  CGFontCreatePostScriptSubset(CGFontRef font , CFStringRef subsetName , CGFontPostScriptFormat format , const CGGlyph *glyphs , size_t count , const CGGlyph *encoding )
	CGFontRef  CGFontCreateWithDataProvider(CGDataProviderRef provider )
	CGFontRef  CGFontCreateWithFontName(CFStringRef name )
	CGFontRef  CGFontCreateWithPlatformFont(void *platformFontReference )
	int  CGFontGetAscent(CGFontRef font )
	int  CGFontGetCapHeight(CGFontRef font )
	int  CGFontGetDescent(CGFontRef font )
	CGRect  CGFontGetFontBBox(CGFontRef font )
	bool  CGFontGetGlyphAdvances(CGFontRef font , const CGGlyph *glyphs , size_t count , int *advances )
	bool  CGFontGetGlyphBBoxes(CGFontRef font , const CGGlyph *glyphs , size_t count , CGRect *bboxes )
	CGGlyph  CGFontGetGlyphWithGlyphName(CGFontRef font , CFStringRef name )
	CGFloat  CGFontGetItalicAngle(CGFontRef font )
	int  CGFontGetLeading(CGFontRef font )
	size_t  CGFontGetNumberOfGlyphs(CGFontRef font )
	CGFloat  CGFontGetStemV(CGFontRef font )
	CFTypeID  CGFontGetTypeID()
	int  CGFontGetUnitsPerEm(CGFontRef font )
	int  CGFontGetXHeight(CGFontRef font )
	void  CGFontRelease(CGFontRef font )
	CGFontRef  CGFontRetain(CGFontRef font )
	CGFunctionRef  CGFunctionCreate(void *info , size_t domainDimension , const CGFloat *domain , size_t rangeDimension , const CGFloat *range , const CGFunctionCallbacks *callbacks )
	CFTypeID  CGFunctionGetTypeID()
	void  CGFunctionRelease(CGFunctionRef function )
	CGFunctionRef  CGFunctionRetain(CGFunctionRef function )
	CGError  CGGetActiveDisplayList(uint32_t maxDisplays , CGDirectDisplayID *activeDisplays , uint32_t *displayCount )
	CGError  CGGetDisplaysWithOpenGLDisplayMask(CGOpenGLDisplayMask mask , uint32_t maxDisplays , CGDirectDisplayID *displays , uint32_t *matchingDisplayCount )
	CGError  CGGetDisplaysWithPoint(CGPoint point , uint32_t maxDisplays , CGDirectDisplayID *displays , uint32_t *matchingDisplayCount )
	CGError  CGGetDisplaysWithRect(CGRect rect , uint32_t maxDisplays , CGDirectDisplayID *displays , uint32_t *matchingDisplayCount )
	CGError  CGGetDisplayTransferByFormula(CGDirectDisplayID display , CGGammaValue *redMin , CGGammaValue *redMax , CGGammaValue *redGamma , CGGammaValue *greenMin , CGGammaValue *greenMax , CGGammaValue *greenGamma , CGGammaValue *blueMin , CGGammaValue *blueMax , CGGammaValue *blueGamma )
	CGError  CGGetDisplayTransferByTable(CGDirectDisplayID display , uint32_t capacity , CGGammaValue *redTable , CGGammaValue *greenTable , CGGammaValue *blueTable , uint32_t *sampleCount )
	CGError  CGGetEventTapList(uint32_t maxNumberOfTaps , CGEventTapInformation *tapList , uint32_t *eventTapCount )
	void  CGGetLastMouseDelta(int32_t *deltaX , int32_t *deltaY )
	CGError  CGGetOnlineDisplayList(uint32_t maxDisplays , CGDirectDisplayID *onlineDisplays , uint32_t *displayCount )
	CGContextRef  CGGLContextCreate(void *glContext , CGSize size , CGColorSpaceRef colorspace )
	void  CGGLContextUpdateViewportSize(CGContextRef c , CGSize size )
	CGGradientRef  CGGradientCreateWithColorComponents(CGColorSpaceRef space , const CGFloat *components , const CGFloat *locations , size_t count )
	CGGradientRef  CGGradientCreateWithColors(CGColorSpaceRef space , CFArrayRef colors , const CGFloat *locations )
	CFTypeID  CGGradientGetTypeID()
	void  CGGradientRelease(CGGradientRef gradient )
	CGGradientRef  CGGradientRetain(CGGradientRef gradient )
	CGImageRef  CGImageCreate(size_t width , size_t height , size_t bitsPerComponent , size_t bitsPerPixel , size_t bytesPerRow , CGColorSpaceRef space , CGBitmapInfo bitmapInfo , CGDataProviderRef provider , const CGFloat *decode , bool shouldInterpolate , CGColorRenderingIntent intent )
	CGImageRef  CGImageCreateCopy(CGImageRef image )
	CGImageRef  CGImageCreateCopyWithColorSpace(CGImageRef image , CGColorSpaceRef space )
	CGImageRef  CGImageCreateWithImageInRect(CGImageRef image , CGRect rect )
	CGImageRef  CGImageCreateWithJPEGDataProvider(CGDataProviderRef source , const CGFloat *decode , bool shouldInterpolate , CGColorRenderingIntent intent )
	CGImageRef  CGImageCreateWithMask(CGImageRef image , CGImageRef mask )
	CGImageRef  CGImageCreateWithMaskingColors(CGImageRef image , const CGFloat *components )
	CGImageRef  CGImageCreateWithPNGDataProvider(CGDataProviderRef source , const CGFloat *decode , bool shouldInterpolate , CGColorRenderingIntent intent )
	void  CGImageDestinationAddImage(CGImageDestinationRef idst , CGImageRef image , CFDictionaryRef properties )
	void  CGImageDestinationAddImageAndMetadata(CGImageDestinationRef idst , CGImageRef image , CGImageMetadataRef metadata , CFDictionaryRef options )
	void  CGImageDestinationAddImageFromSource(CGImageDestinationRef idst , CGImageSourceRef isrc , size_t index , CFDictionaryRef properties )
	bool  CGImageDestinationCopyImageSource(CGImageDestinationRef idst , CGImageSourceRef isrc , CFDictionaryRef options , CFErrorRef *err )
	CFArrayRef  CGImageDestinationCopyTypeIdentifiers()
	CGImageDestinationRef  CGImageDestinationCreateWithData(CFMutableDataRef data , CFStringRef type , size_t count , CFDictionaryRef options )
	CGImageDestinationRef  CGImageDestinationCreateWithDataConsumer(CGDataConsumerRef consumer , CFStringRef type , size_t count , CFDictionaryRef options )
	CGImageDestinationRef  CGImageDestinationCreateWithURL(CFURLRef url , CFStringRef type , size_t count , CFDictionaryRef options )
	bool  CGImageDestinationFinalize(CGImageDestinationRef idst )
	CFTypeID  CGImageDestinationGetTypeID()
	void  CGImageDestinationSetProperties(CGImageDestinationRef idst , CFDictionaryRef properties )
	CGImageAlphaInfo  CGImageGetAlphaInfo(CGImageRef image )
	CGBitmapInfo  CGImageGetBitmapInfo(CGImageRef image )
	size_t  CGImageGetBitsPerComponent(CGImageRef image )
	size_t  CGImageGetBitsPerPixel(CGImageRef image )
	size_t  CGImageGetBytesPerRow(CGImageRef image )
	CGColorSpaceRef  CGImageGetColorSpace(CGImageRef image )
	CGDataProviderRef  CGImageGetDataProvider(CGImageRef image )
	const CGFloat *  CGImageGetDecode(CGImageRef image )
	size_t  CGImageGetHeight(CGImageRef image )
	CGColorRenderingIntent  CGImageGetRenderingIntent(CGImageRef image )
	bool  CGImageGetShouldInterpolate(CGImageRef image )
	CFTypeID  CGImageGetTypeID()
	size_t  CGImageGetWidth(CGImageRef image )
	bool  CGImageIsMask(CGImageRef image )
	CGImageRef  CGImageMaskCreate(size_t width , size_t height , size_t bitsPerComponent , size_t bitsPerPixel , size_t bytesPerRow , CGDataProviderRef provider , const CGFloat *decode , bool shouldInterpolate )
	CFStringRef  CGImageMetadataCopyStringValueWithPath(CGImageMetadataRef metadata , CGImageMetadataTagRef parent , CFStringRef path )
	CGImageMetadataTagRef  CGImageMetadataCopyTagMatchingImageProperty(CGImageMetadataRef metadata , CFStringRef dictionaryName , CFStringRef propertyName )
	CFArrayRef  CGImageMetadataCopyTags(CGImageMetadataRef metadata )
	CGImageMetadataTagRef  CGImageMetadataCopyTagWithPath(CGImageMetadataRef metadata , CGImageMetadataTagRef parent , CFStringRef path )
	CGImageMetadataRef  CGImageMetadataCreateFromXMPData(CFDataRef data )
	CGMutableImageMetadataRef  CGImageMetadataCreateMutable()
	CGMutableImageMetadataRef  CGImageMetadataCreateMutableCopy(CGImageMetadataRef metadata )
	CFDataRef  CGImageMetadataCreateXMPData(CGImageMetadataRef metadata , CFDictionaryRef options )
	void  CGImageMetadataEnumerateTagsUsingBlock(CGImageMetadataRef metadata , CFStringRef rootPath , CFDictionaryRef options , ^bool(CFStringRef path, CGImageMetadataTagRef tag)block )
	CFTypeID  CGImageMetadataGetTypeID()
	bool  CGImageMetadataRegisterNamespaceForPrefix(CGMutableImageMetadataRef metadata , CFStringRef xmlns , CFStringRef prefix , CFErrorRef *err )
	bool  CGImageMetadataRemoveTagWithPath(CGMutableImageMetadataRef metadata , CGImageMetadataTagRef parent , CFStringRef path )
	bool  CGImageMetadataSetTagWithPath(CGMutableImageMetadataRef metadata , CGImageMetadataTagRef parent , CFStringRef path , CGImageMetadataTagRef tag )
	bool  CGImageMetadataSetValueMatchingImageProperty(CGMutableImageMetadataRef metadata , CFStringRef dictionaryName , CFStringRef propertyName , CFTypeRef value )
	bool  CGImageMetadataSetValueWithPath(CGMutableImageMetadataRef metadata , CGImageMetadataTagRef parent , CFStringRef path , CFTypeRef value )
	CFStringRef  CGImageMetadataTagCopyName(CGImageMetadataTagRef tag )
	CFStringRef  CGImageMetadataTagCopyNamespace(CGImageMetadataTagRef tag )
	CFStringRef  CGImageMetadataTagCopyPrefix(CGImageMetadataTagRef tag )
	CFArrayRef  CGImageMetadataTagCopyQualifiers(CGImageMetadataTagRef tag )
	CFTypeRef  CGImageMetadataTagCopyValue(CGImageMetadataTagRef tag )
	CGImageMetadataTagRef  CGImageMetadataTagCreate(CFStringRef xmlns , CFStringRef prefix , CFStringRef name , CGImageMetadataType type , CFTypeRef value )
	CGImageMetadataType  CGImageMetadataTagGetType(CGImageMetadataTagRef tag )
	CFTypeID  CGImageMetadataTagGetTypeID()
	void  CGImageRelease(CGImageRef image )
	CGImageRef  CGImageRetain(CGImageRef image )
	CGImageMetadataRef  CGImageSourceCopyMetadataAtIndex(CGImageSourceRef isrc , size_t index , CFDictionaryRef options )
	CFDictionaryRef  CGImageSourceCopyProperties(CGImageSourceRef isrc , CFDictionaryRef options )
	CFDictionaryRef  CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc , size_t index , CFDictionaryRef options )
	CFArrayRef  CGImageSourceCopyTypeIdentifiers()
	CGImageRef  CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc , size_t index , CFDictionaryRef options )
	CGImageSourceRef  CGImageSourceCreateIncremental(CFDictionaryRef options )
	CGImageRef  CGImageSourceCreateThumbnailAtIndex(CGImageSourceRef isrc , size_t index , CFDictionaryRef options )
	CGImageSourceRef  CGImageSourceCreateWithData(CFDataRef data , CFDictionaryRef options )
	CGImageSourceRef  CGImageSourceCreateWithDataProvider(CGDataProviderRef provider , CFDictionaryRef options )
	CGImageSourceRef  CGImageSourceCreateWithURL(CFURLRef url , CFDictionaryRef options )
	size_t  CGImageSourceGetCount(CGImageSourceRef isrc )
	CGImageSourceStatus  CGImageSourceGetStatus(CGImageSourceRef isrc )
	CGImageSourceStatus  CGImageSourceGetStatusAtIndex(CGImageSourceRef isrc , size_t index )
	CFStringRef  CGImageSourceGetType(CGImageSourceRef isrc )
	CFTypeID  CGImageSourceGetTypeID()
	void  CGImageSourceUpdateData(CGImageSourceRef isrc , CFDataRef data , bool final )
	void  CGImageSourceUpdateDataProvider(CGImageSourceRef isrc , CGDataProviderRef provider , bool final )
	CGError  CGInhibitLocalEvents(boolean_t inhibit )
	CGLayerRef  CGLayerCreateWithContext(CGContextRef context , CGSize size , CFDictionaryRef auxiliaryInfo )
	CGContextRef  CGLayerGetContext(CGLayerRef layer )
	CGSize  CGLayerGetSize(CGLayerRef layer )
	CFTypeID  CGLayerGetTypeID()
	void  CGLayerRelease(CGLayerRef layer )
	CGLayerRef  CGLayerRetain(CGLayerRef layer )
	CGLError  CGLChoosePixelFormat(const CGLPixelFormatAttribute *attribs , CGLPixelFormatObj *pix , GLint *npix )
	CGLError  CGLClearDrawable(CGLContextObj ctx )
	CGLError  CGLCopyContext(CGLContextObj src , CGLContextObj dst , GLbitfield mask )
	CGLError  CGLCreateContext(CGLPixelFormatObj pix , CGLContextObj share , CGLContextObj *ctx )
	CGLError  CGLCreatePBuffer(GLsizei width , GLsizei height , GLenum target , GLenum internalFormat , GLint max_level , CGLPBufferObj *pbuffer )
	CGLError  CGLDescribePBuffer(CGLPBufferObj obj , GLsizei *width , GLsizei *height , GLenum *target , GLenum *internalFormat , GLint *mipmap )
	CGLError  CGLDescribePixelFormat(CGLPixelFormatObj pix , GLint pix_num , CGLPixelFormatAttribute attrib , GLint *value )
	CGLError  CGLDescribeRenderer(CGLRendererInfoObj rend , GLint rend_num , CGLRendererProperty prop , GLint *value )
	CGLError  CGLDestroyContext(CGLContextObj ctx )
	CGLError  CGLDestroyPBuffer(CGLPBufferObj pbuffer )
	CGLError  CGLDestroyPixelFormat(CGLPixelFormatObj pix )
	CGLError  CGLDestroyRendererInfo(CGLRendererInfoObj rend )
	CGLError  CGLDisable(CGLContextObj ctx , CGLContextEnable pname )
	CGLError  CGLEnable(CGLContextObj ctx , CGLContextEnable pname )
	const char *  CGLErrorString(CGLError error )
	CGLError  CGLFlushDrawable(CGLContextObj ctx )
	GLuint  CGLGetContextRetainCount(CGLContextObj ctx )
	CGLContextObj  CGLGetCurrentContext()
	CGLError  CGLGetGlobalOption(CGLGlobalOption pname , GLint *params )
	CGLError  CGLGetOffScreen(CGLContextObj ctx , GLsizei *width , GLsizei *height , GLint *rowbytes , void **baseaddr )
	CGLError  CGLGetOption(CGLGlobalOption pname , GLint *param )
	CGLError  CGLGetParameter(CGLContextObj ctx , CGLContextParameter pname , GLint *params )
	CGLError  CGLGetPBuffer(CGLContextObj ctx , CGLPBufferObj *pbuffer , GLenum *face , GLint *level , GLint *screen )
	GLuint  CGLGetPBufferRetainCount(CGLPBufferObj pbuffer )
	CGLPixelFormatObj  CGLGetPixelFormat(CGLContextObj ctx )
	GLuint  CGLGetPixelFormatRetainCount(CGLPixelFormatObj pix )
	CGLShareGroupObj  CGLGetShareGroup(CGLContextObj ctx )
	void  CGLGetVersion(GLint *majorvers , GLint *minorvers )
	CGLError  CGLGetVirtualScreen(CGLContextObj ctx , GLint *screen )
	CGLError  CGLIsEnabled(CGLContextObj ctx , CGLContextEnable pname , GLint *enable )
	CGLError  CGLLockContext(CGLContextObj ctx )
	CGLError  CGLQueryRendererInfo(GLuint display_mask , CGLRendererInfoObj *rend , GLint *nrend )
	void  CGLReleaseContext(CGLContextObj ctx )
	void  CGLReleasePBuffer(CGLPBufferObj pbuffer )
	void  CGLReleasePixelFormat(CGLPixelFormatObj pix )
	CGLContextObj  CGLRetainContext(CGLContextObj ctx )
	CGLPBufferObj  CGLRetainPBuffer(CGLPBufferObj pbuffer )
	CGLPixelFormatObj  CGLRetainPixelFormat(CGLPixelFormatObj pix )
	CGLError  CGLSetCurrentContext(CGLContextObj ctx )
	CGLError  CGLSetFullScreen(CGLContextObj ctx )
	CGLError  CGLSetFullScreenOnDisplay(CGLContextObj ctx , GLuint display_mask )
	CGLError  CGLSetGlobalOption(CGLGlobalOption pname , const GLint *params )
	CGLError  CGLSetOffScreen(CGLContextObj ctx , GLsizei width , GLsizei height , GLint rowbytes , void *baseaddr )
	CGLError  CGLSetOption(CGLGlobalOption pname , GLint param )
	CGLError  CGLSetParameter(CGLContextObj ctx , CGLContextParameter pname , const GLint *params )
	CGLError  CGLSetPBuffer(CGLContextObj ctx , CGLPBufferObj pbuffer , GLenum face , GLint level , GLint screen )
	CGLError  CGLSetVirtualScreen(CGLContextObj ctx , GLint screen )
	CGLError  CGLTexImageIOSurface2D(CGLContextObj ctx , GLenum target , GLenum internal_format , GLsizei width , GLsizei height , GLenum format , GLenum type , IOSurfaceRef ioSurface , GLuint plane )
	CGLError  CGLTexImagePBuffer(CGLContextObj ctx , CGLPBufferObj pbuffer , GLenum source )
	CGLError  CGLUnlockContext(CGLContextObj ctx )
	CGLError  CGLUpdateContext(CGLContextObj ctx )
	CGDirectDisplayID  CGMainDisplayID()
	CGDirectDisplayID  CGOpenGLDisplayMaskToDisplayID(CGOpenGLDisplayMask mask )
	CGDirectPaletteRef  CGPaletteCreateCopy(CGDirectPaletteRef palette )
	CGDirectPaletteRef  CGPaletteCreateDefaultColorPalette()
	CGDirectPaletteRef  CGPaletteCreateFromPaletteBlendedWithColor(CGDirectPaletteRef palette , CGPaletteBlendFraction fraction , CGDeviceColor color )
	CGDirectPaletteRef  CGPaletteCreateWithByteSamples(CGDeviceByteColor *samples , uint32_t count )
	CGDirectPaletteRef  CGPaletteCreateWithCapacity(uint32_t capacity )
	CGDirectPaletteRef  CGPaletteCreateWithDisplay(CGDirectDisplayID display )
	CGDirectPaletteRef  CGPaletteCreateWithSamples(CGDeviceColor *samples , uint32_t count )
	CGDeviceColor  CGPaletteGetColorAtIndex(CGDirectPaletteRef palette , uint32_t index )
	uint32_t  CGPaletteGetIndexForColor(CGDirectPaletteRef palette , CGDeviceColor color )
	uint32_t  CGPaletteGetNumberOfSamples(CGDirectPaletteRef palette )
	bool  CGPaletteIsEqualToPalette(CGDirectPaletteRef palette1 , CGDirectPaletteRef palette2 )
	void  CGPaletteRelease(CGDirectPaletteRef palette )
	void  CGPaletteSetColorAtIndex(CGDirectPaletteRef palette , CGDeviceColor color , uint32_t index )
	void  CGPathAddArc(CGMutablePathRef path , const CGAffineTransform *m , CGFloat x , CGFloat y , CGFloat radius , CGFloat startAngle , CGFloat endAngle , bool clockwise )
	void  CGPathAddArcToPoint(CGMutablePathRef path , const CGAffineTransform *m , CGFloat x1 , CGFloat y1 , CGFloat x2 , CGFloat y2 , CGFloat radius )
	void  CGPathAddCurveToPoint(CGMutablePathRef path , const CGAffineTransform *m , CGFloat cp1x , CGFloat cp1y , CGFloat cp2x , CGFloat cp2y , CGFloat x , CGFloat y )
	void  CGPathAddEllipseInRect(CGMutablePathRef path , const CGAffineTransform *m , CGRect rect )
	void  CGPathAddLines(CGMutablePathRef path , const CGAffineTransform *m , const CGPoint *points , size_t count )
	void  CGPathAddLineToPoint(CGMutablePathRef path , const CGAffineTransform *m , CGFloat x , CGFloat y )
	void  CGPathAddPath(CGMutablePathRef path1 , const CGAffineTransform *m , CGPathRef path2 )
	void  CGPathAddQuadCurveToPoint(CGMutablePathRef path , const CGAffineTransform *m , CGFloat cpx , CGFloat cpy , CGFloat x , CGFloat y )
	void  CGPathAddRect(CGMutablePathRef path , const CGAffineTransform *m , CGRect rect )
	void  CGPathAddRects(CGMutablePathRef path , const CGAffineTransform *m , const CGRect *rects , size_t count )
	void  CGPathAddRelativeArc(CGMutablePathRef path , const CGAffineTransform *matrix , CGFloat x , CGFloat y , CGFloat radius , CGFloat startAngle , CGFloat delta )
	void  CGPathApply(CGPathRef path , void *info , CGPathApplierFunction function )
	void  CGPathCloseSubpath(CGMutablePathRef path )
	bool  CGPathContainsPoint(CGPathRef path , const CGAffineTransform *m , CGPoint point , bool eoFill )
	CGPathRef  CGPathCreateCopy(CGPathRef path )
	CGPathRef  CGPathCreateCopyByDashingPath(CGPathRef path , const CGAffineTransform *transform , CGFloat phase , const CGFloat *lengths , size_t count )
	CGPathRef  CGPathCreateCopyByStrokingPath(CGPathRef path , const CGAffineTransform *transform , CGFloat lineWidth , CGLineCap lineCap , CGLineJoin lineJoin , CGFloat miterLimit )
	CGPathRef  CGPathCreateCopyByTransformingPath(CGPathRef path , const CGAffineTransform *transform )
	CGMutablePathRef  CGPathCreateMutable()
	CGMutablePathRef  CGPathCreateMutableCopy(CGPathRef path )
	CGMutablePathRef  CGPathCreateMutableCopyByTransformingPath(CGPathRef path , const CGAffineTransform *transform )
	CGPathRef  CGPathCreateWithEllipseInRect(CGRect rect , const CGAffineTransform *transform )
	CGPathRef  CGPathCreateWithRect(CGRect rect , const CGAffineTransform *transform )
	bool  CGPathEqualToPath(CGPathRef path1 , CGPathRef path2 )
	CGRect  CGPathGetBoundingBox(CGPathRef path )
	CGPoint  CGPathGetCurrentPoint(CGPathRef path )
	CGRect  CGPathGetPathBoundingBox(CGPathRef path )
	CFTypeID  CGPathGetTypeID()
	bool  CGPathIsEmpty(CGPathRef path )
	bool  CGPathIsRect(CGPathRef path , CGRect *rect )
	void  CGPathMoveToPoint(CGMutablePathRef path , const CGAffineTransform *m , CGFloat x , CGFloat y )
	void  CGPathRelease(CGPathRef path )
	CGPathRef  CGPathRetain(CGPathRef path )
	CGPatternRef  CGPatternCreate(void *info , CGRect bounds , CGAffineTransform matrix , CGFloat xStep , CGFloat yStep , CGPatternTiling tiling , bool isColored , const CGPatternCallbacks *callbacks )
	CFTypeID  CGPatternGetTypeID()
	void  CGPatternRelease(CGPatternRef pattern )
	CGPatternRef  CGPatternRetain(CGPatternRef pattern )
	bool  CGPDFArrayGetArray(CGPDFArrayRef array , size_t index , CGPDFArrayRef *value )
	bool  CGPDFArrayGetBoolean(CGPDFArrayRef array , size_t index , CGPDFBoolean *value )
	size_t  CGPDFArrayGetCount(CGPDFArrayRef array )
	bool  CGPDFArrayGetDictionary(CGPDFArrayRef array , size_t index , CGPDFDictionaryRef *value )
	bool  CGPDFArrayGetInteger(CGPDFArrayRef array , size_t index , CGPDFInteger *value )
	bool  CGPDFArrayGetName(CGPDFArrayRef array , size_t index , const char **value )
	bool  CGPDFArrayGetNull(CGPDFArrayRef array , size_t index )
	bool  CGPDFArrayGetNumber(CGPDFArrayRef array , size_t index , CGPDFReal *value )
	bool  CGPDFArrayGetObject(CGPDFArrayRef array , size_t index , CGPDFObjectRef *value )
	bool  CGPDFArrayGetStream(CGPDFArrayRef array , size_t index , CGPDFStreamRef *value )
	bool  CGPDFArrayGetString(CGPDFArrayRef array , size_t index , CGPDFStringRef *value )
	CGPDFContentStreamRef  CGPDFContentStreamCreateWithPage(CGPDFPageRef page )
	CGPDFContentStreamRef  CGPDFContentStreamCreateWithStream(CGPDFStreamRef stream , CGPDFDictionaryRef streamResources , CGPDFContentStreamRef parent )
	CGPDFObjectRef  CGPDFContentStreamGetResource(CGPDFContentStreamRef cs , const char *category , const char *name )
	CFArrayRef  CGPDFContentStreamGetStreams(CGPDFContentStreamRef cs )
	void  CGPDFContentStreamRelease(CGPDFContentStreamRef cs )
	CGPDFContentStreamRef  CGPDFContentStreamRetain(CGPDFContentStreamRef cs )
	void  CGPDFContextAddDestinationAtPoint(CGContextRef context , CFStringRef name , CGPoint point )
	void  CGPDFContextAddDocumentMetadata(CGContextRef context , CFDataRef metadata )
	void  CGPDFContextBeginPage(CGContextRef context , CFDictionaryRef pageInfo )
	void  CGPDFContextClose(CGContextRef context )
	CGContextRef  CGPDFContextCreate(CGDataConsumerRef consumer , const CGRect *mediaBox , CFDictionaryRef auxiliaryInfo )
	CGContextRef  CGPDFContextCreateWithURL(CFURLRef url , const CGRect *mediaBox , CFDictionaryRef auxiliaryInfo )
	void  CGPDFContextEndPage(CGContextRef context )
	void  CGPDFContextSetDestinationForRect(CGContextRef context , CFStringRef name , CGRect rect )
	void  CGPDFContextSetURLForRect(CGContextRef context , CFURLRef url , CGRect rect )
	void  CGPDFDictionaryApplyFunction(CGPDFDictionaryRef dict , CGPDFDictionaryApplierFunction function , void *info )
	bool  CGPDFDictionaryGetArray(CGPDFDictionaryRef dict , const char *key , CGPDFArrayRef *value )
	bool  CGPDFDictionaryGetBoolean(CGPDFDictionaryRef dict , const char *key , CGPDFBoolean *value )
	size_t  CGPDFDictionaryGetCount(CGPDFDictionaryRef dict )
	bool  CGPDFDictionaryGetDictionary(CGPDFDictionaryRef dict , const char *key , CGPDFDictionaryRef *value )
	bool  CGPDFDictionaryGetInteger(CGPDFDictionaryRef dict , const char *key , CGPDFInteger *value )
	bool  CGPDFDictionaryGetName(CGPDFDictionaryRef dict , const char *key , const char **value )
	bool  CGPDFDictionaryGetNumber(CGPDFDictionaryRef dict , const char *key , CGPDFReal *value )
	bool  CGPDFDictionaryGetObject(CGPDFDictionaryRef dict , const char *key , CGPDFObjectRef *value )
	bool  CGPDFDictionaryGetStream(CGPDFDictionaryRef dict , const char *key , CGPDFStreamRef *value )
	bool  CGPDFDictionaryGetString(CGPDFDictionaryRef dict , const char *key , CGPDFStringRef *value )
	bool  CGPDFDocumentAllowsCopying(CGPDFDocumentRef document )
	bool  CGPDFDocumentAllowsPrinting(CGPDFDocumentRef document )
	CGPDFDocumentRef  CGPDFDocumentCreateWithProvider(CGDataProviderRef provider )
	CGPDFDocumentRef  CGPDFDocumentCreateWithURL(CFURLRef url )
	CGRect  CGPDFDocumentGetArtBox(CGPDFDocumentRef document , int page )
	CGRect  CGPDFDocumentGetBleedBox(CGPDFDocumentRef document , int page )
	CGPDFDictionaryRef  CGPDFDocumentGetCatalog(CGPDFDocumentRef document )
	CGRect  CGPDFDocumentGetCropBox(CGPDFDocumentRef document , int page )
	CGPDFArrayRef  CGPDFDocumentGetID(CGPDFDocumentRef document )
	CGPDFDictionaryRef  CGPDFDocumentGetInfo(CGPDFDocumentRef document )
	CGRect  CGPDFDocumentGetMediaBox(CGPDFDocumentRef document , int page )
	size_t  CGPDFDocumentGetNumberOfPages(CGPDFDocumentRef document )
	CGPDFPageRef  CGPDFDocumentGetPage(CGPDFDocumentRef document , size_t pageNumber )
	int  CGPDFDocumentGetRotationAngle(CGPDFDocumentRef document , int page )
	CGRect  CGPDFDocumentGetTrimBox(CGPDFDocumentRef document , int page )
	CFTypeID  CGPDFDocumentGetTypeID()
	void  CGPDFDocumentGetVersion(CGPDFDocumentRef document , int *majorVersion , int *minorVersion )
	bool  CGPDFDocumentIsEncrypted(CGPDFDocumentRef document )
	bool  CGPDFDocumentIsUnlocked(CGPDFDocumentRef document )
	void  CGPDFDocumentRelease(CGPDFDocumentRef document )
	CGPDFDocumentRef  CGPDFDocumentRetain(CGPDFDocumentRef document )
	bool  CGPDFDocumentUnlockWithPassword(CGPDFDocumentRef document , const char *password )
	CGPDFObjectType  CGPDFObjectGetType(CGPDFObjectRef object )
	bool  CGPDFObjectGetValue(CGPDFObjectRef object , CGPDFObjectType type , void *value )
	CGPDFOperatorTableRef  CGPDFOperatorTableCreate()
	void  CGPDFOperatorTableRelease(CGPDFOperatorTableRef table )
	CGPDFOperatorTableRef  CGPDFOperatorTableRetain(CGPDFOperatorTableRef table )
	void  CGPDFOperatorTableSetCallback(CGPDFOperatorTableRef table , const char *name , CGPDFOperatorCallback callback )
	CGRect  CGPDFPageGetBoxRect(CGPDFPageRef page , CGPDFBox box )
	CGPDFDictionaryRef  CGPDFPageGetDictionary(CGPDFPageRef page )
	CGPDFDocumentRef  CGPDFPageGetDocument(CGPDFPageRef page )
	CGAffineTransform  CGPDFPageGetDrawingTransform(CGPDFPageRef page , CGPDFBox box , CGRect rect , int rotate , bool preserveAspectRatio )
	size_t  CGPDFPageGetPageNumber(CGPDFPageRef page )
	int  CGPDFPageGetRotationAngle(CGPDFPageRef page )
	CFTypeID  CGPDFPageGetTypeID()
	void  CGPDFPageRelease(CGPDFPageRef page )
	CGPDFPageRef  CGPDFPageRetain(CGPDFPageRef page )
	CGPDFScannerRef  CGPDFScannerCreate(CGPDFContentStreamRef cs , CGPDFOperatorTableRef table , void *info )
	CGPDFContentStreamRef  CGPDFScannerGetContentStream(CGPDFScannerRef scanner )
	bool  CGPDFScannerPopArray(CGPDFScannerRef scanner , CGPDFArrayRef *value )
	bool  CGPDFScannerPopBoolean(CGPDFScannerRef scanner , CGPDFBoolean *value )
	bool  CGPDFScannerPopDictionary(CGPDFScannerRef scanner , CGPDFDictionaryRef *value )
	bool  CGPDFScannerPopInteger(CGPDFScannerRef scanner , CGPDFInteger *value )
	bool  CGPDFScannerPopName(CGPDFScannerRef scanner , const char **value )
	bool  CGPDFScannerPopNumber(CGPDFScannerRef scanner , CGPDFReal *value )
	bool  CGPDFScannerPopObject(CGPDFScannerRef scanner , CGPDFObjectRef *value )
	bool  CGPDFScannerPopStream(CGPDFScannerRef scanner , CGPDFStreamRef *value )
	bool  CGPDFScannerPopString(CGPDFScannerRef scanner , CGPDFStringRef *value )
	void  CGPDFScannerRelease(CGPDFScannerRef scanner )
	CGPDFScannerRef  CGPDFScannerRetain(CGPDFScannerRef scanner )
	bool  CGPDFScannerScan(CGPDFScannerRef scanner )
	CFDataRef  CGPDFStreamCopyData(CGPDFStreamRef stream , CGPDFDataFormat *format )
	CGPDFDictionaryRef  CGPDFStreamGetDictionary(CGPDFStreamRef stream )
	CFDateRef  CGPDFStringCopyDate(CGPDFStringRef string )
	CFStringRef  CGPDFStringCopyTextString(CGPDFStringRef string )
	const unsigned char *  CGPDFStringGetBytePtr(CGPDFStringRef string )
	size_t  CGPDFStringGetLength(CGPDFStringRef string )
	CGPoint  CGPointApplyAffineTransform(CGPoint point , CGAffineTransform t )
	CFDictionaryRef  CGPointCreateDictionaryRepresentation(CGPoint point )
	bool  CGPointEqualToPoint(CGPoint point1 , CGPoint point2 )
	CGPoint  CGPointMake(CGFloat x , CGFloat y )
	bool  CGPointMakeWithDictionaryRepresentation(CFDictionaryRef dict , CGPoint *point )
	CGError  CGPostKeyboardEvent(CGCharCode keyChar , CGKeyCode virtualKey , boolean_t keyDown )
	CGError  CGPostMouseEvent(CGPoint mouseCursorPosition , boolean_t updateMouseCursorPosition , CGButtonCount buttonCount , boolean_t mouseButtonDown, ... )
	CGError  CGPostScrollWheelEvent(CGWheelCount wheelCount , int32_t wheel1, ... )
	bool  CGPSConverterAbort(CGPSConverterRef converter )
	bool  CGPSConverterConvert(CGPSConverterRef converter , CGDataProviderRef provider , CGDataConsumerRef consumer , CFDictionaryRef options )
	CGPSConverterRef  CGPSConverterCreate(void *info , const CGPSConverterCallbacks *callbacks , CFDictionaryRef options )
	CFTypeID  CGPSConverterGetTypeID()
	bool  CGPSConverterIsConverting(CGPSConverterRef converter )
	CGRect  CGRectApplyAffineTransform(CGRect rect , CGAffineTransform t )
	bool  CGRectContainsPoint(CGRect rect , CGPoint point )
	bool  CGRectContainsRect(CGRect rect1 , CGRect rect2 )
	CFDictionaryRef  CGRectCreateDictionaryRepresentation(CGRect )
	void  CGRectDivide(CGRect rect , CGRect *slice , CGRect *remainder , CGFloat amount , CGRectEdge edge )
	bool  CGRectEqualToRect(CGRect rect1 , CGRect rect2 )
	CGFloat  CGRectGetHeight(CGRect rect )
	CGFloat  CGRectGetMaxX(CGRect rect )
	CGFloat  CGRectGetMaxY(CGRect rect )
	CGFloat  CGRectGetMidX(CGRect rect )
	CGFloat  CGRectGetMidY(CGRect rect )
	CGFloat  CGRectGetMinX(CGRect rect )
	CGFloat  CGRectGetMinY(CGRect rect )
	CGFloat  CGRectGetWidth(CGRect rect )
	CGRect  CGRectInset(CGRect rect , CGFloat dx , CGFloat dy )
	CGRect  CGRectIntegral(CGRect rect )
	CGRect  CGRectIntersection(CGRect r1 , CGRect r2 )
	bool  CGRectIntersectsRect(CGRect rect1 , CGRect rect2 )
	bool  CGRectIsEmpty(CGRect rect )
	bool  CGRectIsInfinite(CGRect rect )
	bool  CGRectIsNull(CGRect rect )
	CGRect  CGRectMake(CGFloat x , CGFloat y , CGFloat width , CGFloat height )
	bool  CGRectMakeWithDictionaryRepresentation(CFDictionaryRef dict , CGRect *rect )
	CGRect  CGRectOffset(CGRect rect , CGFloat dx , CGFloat dy )
	CGRect  CGRectStandardize(CGRect rect )
	CGRect  CGRectUnion(CGRect r1 , CGRect r2 )
	CGError  CGRegisterScreenRefreshCallback(CGScreenRefreshCallback callback , void *userInfo )
	CGError  CGReleaseAllDisplays()
	CGError  CGReleaseDisplayFadeReservation(CGDisplayFadeReservationToken token )
	void  CGReleaseScreenRefreshRects(CGRect *rects )
	void  CGRestorePermanentDisplayConfiguration()
	CGError  CGScreenRegisterMoveCallback(CGScreenUpdateMoveCallback callback , void *userInfo )
	void  CGScreenUnregisterMoveCallback(CGScreenUpdateMoveCallback callback , void *userInfo )
	CFDictionaryRef  CGSessionCopyCurrentDictionary()
	CGError  CGSetDisplayTransferByByteTable(CGDirectDisplayID display , uint32_t tableSize , const uint8_t *redTable , const uint8_t *greenTable , const uint8_t *blueTable )
	CGError  CGSetDisplayTransferByFormula(CGDirectDisplayID display , CGGammaValue redMin , CGGammaValue redMax , CGGammaValue redGamma , CGGammaValue greenMin , CGGammaValue greenMax , CGGammaValue greenGamma , CGGammaValue blueMin , CGGammaValue blueMax , CGGammaValue blueGamma )
	CGError  CGSetDisplayTransferByTable(CGDirectDisplayID display , uint32_t tableSize , const CGGammaValue *redTable , const CGGammaValue *greenTable , const CGGammaValue *blueTable )
	CGError  CGSetLocalEventsFilterDuringSuppressionState(CGEventFilterMask filter , CGEventSuppressionState state )
	CGError  CGSetLocalEventsSuppressionInterval(CFTimeInterval seconds )
	CGShadingRef  CGShadingCreateAxial(CGColorSpaceRef space , CGPoint start , CGPoint end , CGFunctionRef function , bool extendStart , bool extendEnd )
	CGShadingRef  CGShadingCreateRadial(CGColorSpaceRef space , CGPoint start , CGFloat startRadius , CGPoint end , CGFloat endRadius , CGFunctionRef function , bool extendStart , bool extendEnd )
	CFTypeID  CGShadingGetTypeID()
	void  CGShadingRelease(CGShadingRef shading )
	CGShadingRef  CGShadingRetain(CGShadingRef shading )
	uint32_t  CGShieldingWindowID(CGDirectDisplayID display )
	int32_t  CGShieldingWindowLevel()
	CGSize  CGSizeApplyAffineTransform(CGSize size , CGAffineTransform t )
	CFDictionaryRef  CGSizeCreateDictionaryRepresentation(CGSize size )
	bool  CGSizeEqualToSize(CGSize size1 , CGSize size2 )
	CGSize  CGSizeMake(CGFloat width , CGFloat height )
	bool  CGSizeMakeWithDictionaryRepresentation(CFDictionaryRef dict , CGSize *size )
	void  CGUnregisterScreenRefreshCallback(CGScreenRefreshCallback callback , void *userInfo )
	CGError  CGWaitForScreenRefreshRects(CGRect **rects , uint32_t *count )
	CGError  CGWaitForScreenUpdateRects(CGScreenUpdateOperation requestedOperations , CGScreenUpdateOperation *currentOperation , CGRect **rects , size_t *rectCount , CGScreenUpdateMoveDelta *delta )
	CGError  CGWarpMouseCursorPosition(CGPoint newCursorPosition )
	CGWindowLevel  CGWindowLevelForKey(CGWindowLevelKey key )
	CFArrayRef  CGWindowListCopyWindowInfo(CGWindowListOption option , CGWindowID relativeToWindow )
	CFArrayRef  CGWindowListCreate(CGWindowListOption option , CGWindowID relativeToWindow )
	CFArrayRef  CGWindowListCreateDescriptionFromArray(CFArrayRef windowArray )
	CGImageRef  CGWindowListCreateImage(CGRect screenBounds , CGWindowListOption listOption , CGWindowID windowID , CGWindowImageOption imageOption )
	CGImageRef  CGWindowListCreateImageFromArray(CGRect screenBounds , CFArrayRef windowArray , CGWindowImageOption imageOption )
	CFMachPortRef  CGWindowServerCFMachPort()
	CFMachPortRef  CGWindowServerCreateServerPort()
	void  ChangedResource(Handle theResource )
	OSStatus  ChangeTextToUnicodeInfo(TextToUnicodeInfo ioTextToUnicodeInfo , ConstUnicodeMappingPtr iUnicodeMapping )
	OSStatus  ChangeUnicodeToTextInfo(UnicodeToTextInfo ioUnicodeToTextInfo , ConstUnicodeMappingPtr iUnicodeMapping )
	int  chdir(const char * )
	int  chown(const char * , uid_t , gid_t )
	int  chroot(const char * )
	void  clearerr(FILE * )
	clock_t  clock()
	kern_return_t  clock_sleep_trap(mach_port_name_t clock_name , sleep_type_t sleep_type , int sleep_sec , int sleep_nsec , mach_timespec_t *wakeup_time )
	Collection  CloneCollection(Collection c )
	int  close(int )
	OSErr  CloseComponent(ComponentInstance aComponentInstance )
	OSErr  CloseComponentResFile(ResFileRefNum refnum )
	void  CloseResFile(ResFileRefNum refNum )
	CMError  CMCloneProfileRef(CMProfileRef prof )
	CMError  CMCloseProfile(CMProfileRef prof )
	CMError  CMConvertRGBFloatBitmap(const CMFloatBitmap *src , CMFloatBitmap *dst )
	CMError  CMConvertXYZFloatBitmap(const CMFloatBitmap *src , const float *srcIlluminantXYZ , CMFloatBitmap *dst , const float *dstIlluminantXYZ , CMChromaticAdaptation method )
	CMError  CMCopyProfile(CMProfileRef *targetProf , const CMProfileLocation *targetLocation , CMProfileRef srcProf )
	CMError  CMCopyProfileDescriptionString(CMProfileRef prof , CFStringRef *str )
	CMError  CMCopyProfileLocalizedString(CMProfileRef prof , OSType tag , CFStringRef reqLocale , CFStringRef *locale , CFStringRef *str )
	CMError  CMCopyProfileLocalizedStringDictionary(CMProfileRef prof , OSType tag , CFDictionaryRef *theDict )
	CMError  CMCountProfileElements(CMProfileRef prof , UInt32 *elementCount )
	CMFloatBitmap  CMFloatBitmapMakeChunky(float *buffer , size_t height , size_t width , OSType space )
	CMError  CMGetColorSyncVersion(UInt32 *version )
	CMError  CMGetDefaultDevice(CMDeviceClass deviceClass , CMDeviceID *deviceID )
	CMError  CMGetDefaultProfileBySpace(OSType dataColorSpace , CMProfileRef *prof )
	CMError  CMGetDefaultProfileByUse(OSType use , CMProfileRef *prof )
	CMError  CMGetDeviceDefaultProfileID(CMDeviceClass deviceClass , CMDeviceID deviceID , CMDeviceProfileID *defaultProfID )
	CMError  CMGetDeviceFactoryProfiles(CMDeviceClass deviceClass , CMDeviceID deviceID , CMDeviceProfileID *defaultProfID , UInt32 *arraySize , CMDeviceProfileArray *deviceProfiles )
	CMError  CMGetDeviceInfo(CMDeviceClass deviceClass , CMDeviceID deviceID , CMDeviceInfo *deviceInfo )
	CMError  CMGetDeviceProfile(CMDeviceClass deviceClass , CMDeviceID deviceID , CMDeviceProfileID profileID , CMProfileLocation *profileLoc )
	CMError  CMGetDeviceState(CMDeviceClass deviceClass , CMDeviceID deviceID , CMDeviceState *deviceState )
	CMError  CMGetGammaByAVID(CMDisplayIDType theID , CMVideoCardGamma *gamma , UInt32 *size )
	CMError  CMGetIndNamedColorValue(CMProfileRef prof , UInt32 index , CMColor *deviceColor , CMColor *PCSColor )
	CMError  CMGetIndProfileElement(CMProfileRef prof , UInt32 index , UInt32 *elementSize , void *elementData )
	CMError  CMGetIndProfileElementInfo(CMProfileRef prof , UInt32 index , OSType *tag , UInt32 *elementSize , Boolean *refs )
	CMError  CMGetNamedColorIndex(CMProfileRef prof , StringPtr name , UInt32 *index )
	CMError  CMGetNamedColorInfo(CMProfileRef prof , UInt32 *deviceChannels , OSType *deviceColorSpace , OSType *PCSColorSpace , UInt32 *count , StringPtr prefix , StringPtr suffix )
	CMError  CMGetNamedColorName(CMProfileRef prof , UInt32 index , StringPtr name )
	CMError  CMGetNamedColorValue(CMProfileRef prof , StringPtr name , CMColor *deviceColor , CMColor *PCSColor )
	CMError  CMGetPartialProfileElement(CMProfileRef prof , OSType tag , UInt32 offset , UInt32 *byteCount , void *elementData )
	CMError  CMGetProfileByAVID(CMDisplayIDType theID , CMProfileRef *prof )
	CMError  CMGetProfileDescriptions(CMProfileRef prof , char *aName , UInt32 *aCount , unsigned char *mName , ScriptCode *mCode , UniChar *uName , UniCharCount *uCount )
	CMError  CMGetProfileElement(CMProfileRef prof , OSType tag , UInt32 *elementSize , void *elementData )
	CMError  CMGetProfileHeader(CMProfileRef prof , CMAppleProfileHeader *header )
	CMError  CMGetProfileMD5(CMProfileRef prof , unsigned char *digest )
	CMError  CMGetProfileRefCount(CMProfileRef prof , long *count )
	CMError  CMGetPS2ColorRendering(CMProfileRef srcProf , CMProfileRef dstProf , UInt32 flags , CMFlattenUPP proc , void *refCon , Boolean *preferredCMMnotfound )
	CMError  CMGetPS2ColorRenderingIntent(CMProfileRef srcProf , UInt32 flags , CMFlattenUPP proc , void *refCon , Boolean *preferredCMMnotfound )
	CMError  CMGetPS2ColorRenderingVMSize(CMProfileRef srcProf , CMProfileRef dstProf , UInt32 *vmSize , Boolean *preferredCMMnotfound )
	CMError  CMGetPS2ColorSpace(CMProfileRef srcProf , UInt32 flags , CMFlattenUPP proc , void *refCon , Boolean *preferredCMMnotfound )
	CMError  CMGetSystemProfile(CMProfileRef *prof )
	CMError  CMIterateCMMInfo(CMMIterateUPP proc , UInt32 *count , void *refCon )
	CMError  CMIterateColorDevices(CMIterateDeviceInfoProcPtr proc , UInt32 *seed , UInt32 *count , void *refCon )
	CMError  CMIterateColorSyncFolder(CMProfileIterateUPP proc , UInt32 *seed , UInt32 *count , void *refCon )
	CMError  CMIterateDeviceProfiles(CMIterateDeviceProfileProcPtr proc , UInt32 *seed , UInt32 *count , UInt32 flags , void *refCon )
	CMError  CMLaunchControlPanel(UInt32 flags )
	CMError  CMM_CheckBitmap(CMWorldRef cw , const CMBitmap *bitmap , CMBitmapCallBackUPP progressProc , void *refCon , CMBitmap *resultBitmap )
	CMError  CMM_CheckColors(CMWorldRef cw , CMColor *colors , UInt32 count , UInt8 *result )
	CMError  CMM_ConcatColorWorld(CMWorldRef cw , NCMConcatProfileSet *profileSet , CMConcatCallBackUPP proc , void *refCon )
	CMError  CMM_CreateLinkProfile(CMProfileRef prof , NCMConcatProfileSet *profileSet , CMConcatCallBackUPP proc , void *refCon )
	CFTypeRef  CMM_GetProperty(CMWorldRef cw , CFStringRef requestedKey )
	CMError  CMM_MatchBitmap(CMWorldRef cw , CMBitmap *bitmap , CMBitmapCallBackUPP progressProc , void *refCon , CMBitmap *matchedBitmap )
	CMError  CMM_MatchColors(CMWorldRef cw , CMColor *colors , UInt32 count )
	CMError  CMM_MatchFloatBitmap(CMWorldRef cw , const CMFloatBitmap *bitmap , CMFloatBitmap *resultBitmap )
	CMError  CMM_ValidateProfile(CMProfileRef prof , Boolean *valid )
	CMError  CMMakeProfile(CMProfileRef prof , CFDictionaryRef spec )
	CMError  CMMatchFloatBitmap(CMWorldRef cw , const CMFloatBitmap *src , CMFloatBitmap *dst )
	CMError  CMNewProfile(CMProfileRef *prof , const CMProfileLocation *theProfile )
	CMError  CMOpenProfile(CMProfileRef *prof , const CMProfileLocation *theProfile )
	CFDataRef  CMProfileCopyICCData(CFAllocatorRef allocator , CMProfileRef prof )
	CMError  CMProfileElementExists(CMProfileRef prof , OSType tag , Boolean *found )
	Boolean  CMProfileMD5AreEqual(unsigned char *a , unsigned char *b )
	CMError  CMProfileModified(CMProfileRef prof , Boolean *modified )
	CMError  CMRegisterColorDevice(CMDeviceClass deviceClass , CMDeviceID deviceID , CFDictionaryRef deviceName , const CMDeviceScope *deviceScope )
	CMError  CMRemoveProfileElement(CMProfileRef prof , OSType tag )
	OSStatus  CMSDecoderCopyAllCerts(CMSDecoderRef cmsDecoder , CFArrayRef *certsOut )
	OSStatus  CMSDecoderCopyContent(CMSDecoderRef cmsDecoder , CFDataRef *contentOut )
	OSStatus  CMSDecoderCopyDetachedContent(CMSDecoderRef cmsDecoder , CFDataRef *detachedContentOut )
	OSStatus  CMSDecoderCopyEncapsulatedContentType(CMSDecoderRef cmsDecoder , CFDataRef *eContentTypeOut )
	OSStatus  CMSDecoderCopySignerCert(CMSDecoderRef cmsDecoder , size_t signerIndex , SecCertificateRef *signerCertOut )
	OSStatus  CMSDecoderCopySignerEmailAddress(CMSDecoderRef cmsDecoder , size_t signerIndex , CFStringRef *signerEmailAddressOut )
	OSStatus  CMSDecoderCopySignerSigningTime(CMSDecoderRef cmsDecoder , size_t signerIndex , CFAbsoluteTime *signingTime )
	OSStatus  CMSDecoderCopySignerStatus(CMSDecoderRef cmsDecoder , size_t signerIndex , CFTypeRef policyOrArray , Boolean evaluateSecTrust , CMSSignerStatus *signerStatusOut , SecTrustRef *secTrustOut , OSStatus *certVerifyResultCodeOut )
	OSStatus  CMSDecoderCopySignerTimestamp(CMSDecoderRef cmsDecoder , size_t signerIndex , CFAbsoluteTime *timestamp )
	OSStatus  CMSDecoderCopySignerTimestampCertificates(CMSDecoderRef cmsDecoder , size_t signerIndex , CFArrayRef *certificateRefs )
	OSStatus  CMSDecoderCreate(CMSDecoderRef *cmsDecoderOut )
	OSStatus  CMSDecoderFinalizeMessage(CMSDecoderRef cmsDecoder )
	OSStatus  CMSDecoderGetNumSigners(CMSDecoderRef cmsDecoder , size_t *numSignersOut )
	CFTypeID  CMSDecoderGetTypeID()
	OSStatus  CMSDecoderIsContentEncrypted(CMSDecoderRef cmsDecoder , Boolean *isEncryptedOut )
	OSStatus  CMSDecoderSetDetachedContent(CMSDecoderRef cmsDecoder , CFDataRef detachedContent )
	OSStatus  CMSDecoderSetSearchKeychain(CMSDecoderRef cmsDecoder , CFTypeRef keychainOrArray )
	OSStatus  CMSDecoderUpdateMessage(CMSDecoderRef cmsDecoder , const void *msgBytes , size_t msgBytesLen )
	OSStatus  CMSEncode(CFTypeRef signers , CFTypeRef recipients , const CSSM_OID *eContentType , Boolean detachedContent , CMSSignedAttributes signedAttributes , const void *content , size_t contentLen , CFDataRef *encodedContentOut )
	OSStatus  CMSEncodeContent(CFTypeRef signers , CFTypeRef recipients , CFTypeRef eContentTypeOID , Boolean detachedContent , CMSSignedAttributes signedAttributes , const void *content , size_t contentLen , CFDataRef *encodedContentOut )
	OSStatus  CMSEncoderAddRecipients(CMSEncoderRef cmsEncoder , CFTypeRef recipientOrArray )
	OSStatus  CMSEncoderAddSignedAttributes(CMSEncoderRef cmsEncoder , CMSSignedAttributes signedAttributes )
	OSStatus  CMSEncoderAddSigners(CMSEncoderRef cmsEncoder , CFTypeRef signerOrArray )
	OSStatus  CMSEncoderAddSupportingCerts(CMSEncoderRef cmsEncoder , CFTypeRef certOrArray )
	OSStatus  CMSEncoderCopyEncapsulatedContentType(CMSEncoderRef cmsEncoder , CFDataRef *eContentTypeOut )
	OSStatus  CMSEncoderCopyEncodedContent(CMSEncoderRef cmsEncoder , CFDataRef *encodedContentOut )
	OSStatus  CMSEncoderCopyRecipients(CMSEncoderRef cmsEncoder , CFArrayRef *recipientsOut )
	OSStatus  CMSEncoderCopySigners(CMSEncoderRef cmsEncoder , CFArrayRef *signersOut )
	OSStatus  CMSEncoderCopySignerTimestamp(CMSEncoderRef cmsEncoder , size_t signerIndex , CFAbsoluteTime *timestamp )
	OSStatus  CMSEncoderCopySupportingCerts(CMSEncoderRef cmsEncoder , CFArrayRef *certsOut )
	OSStatus  CMSEncoderCreate(CMSEncoderRef *cmsEncoderOut )
	OSStatus  CMSEncoderGetCertificateChainMode(CMSEncoderRef cmsEncoder , CMSCertificateChainMode *chainModeOut )
	OSStatus  CMSEncoderGetHasDetachedContent(CMSEncoderRef cmsEncoder , Boolean *detachedContentOut )
	CFTypeID  CMSEncoderGetTypeID()
	OSStatus  CMSEncoderSetCertificateChainMode(CMSEncoderRef cmsEncoder , CMSCertificateChainMode chainMode )
	OSStatus  CMSEncoderSetEncapsulatedContentType(CMSEncoderRef cmsEncoder , const CSSM_OID *eContentType )
	OSStatus  CMSEncoderSetEncapsulatedContentTypeOID(CMSEncoderRef cmsEncoder , CFTypeRef eContentTypeOID )
	OSStatus  CMSEncoderSetHasDetachedContent(CMSEncoderRef cmsEncoder , Boolean detachedContent )
	OSStatus  CMSEncoderUpdateContent(CMSEncoderRef cmsEncoder , const void *content , size_t contentLen )
	CMError  CMSetDefaultDevice(CMDeviceClass deviceClass , CMDeviceID deviceID )
	CMError  CMSetDeviceDefaultProfileID(CMDeviceClass deviceClass , CMDeviceID deviceID , CMDeviceProfileID defaultProfID )
	CMError  CMSetDeviceFactoryProfiles(CMDeviceClass deviceClass , CMDeviceID deviceID , CMDeviceProfileID defaultProfID , const CMDeviceProfileArray *deviceProfiles )
	CMError  CMSetDeviceProfile(CMDeviceClass deviceClass , CMDeviceID deviceID , const CMDeviceProfileScope *profileScope , CMDeviceProfileID profileID , const CMProfileLocation *profileLoc )
	CMError  CMSetDeviceState(CMDeviceClass deviceClass , CMDeviceID deviceID , CMDeviceState deviceState )
	CMError  CMSetGammaByAVID(CMDisplayIDType theID , CMVideoCardGamma *gamma )
	CMError  CMSetPartialProfileElement(CMProfileRef prof , OSType tag , UInt32 offset , UInt32 byteCount , const void *elementData )
	CMError  CMSetProfileByAVID(CMDisplayIDType theID , CMProfileRef prof )
	CMError  CMSetProfileDescriptions(CMProfileRef prof , const char *aName , UInt32 aCount , ConstStr255Param mName , ScriptCode mCode , const UniChar *uName , UniCharCount uCount )
	CMError  CMSetProfileElement(CMProfileRef prof , OSType tag , UInt32 elementSize , const void *elementData )
	CMError  CMSetProfileElementReference(CMProfileRef prof , OSType elementTag , OSType referenceTag )
	CMError  CMSetProfileElementSize(CMProfileRef prof , OSType tag , UInt32 elementSize )
	CMError  CMSetProfileHeader(CMProfileRef prof , const CMAppleProfileHeader *header )
	CMError  CMSetProfileLocalizedStringDictionary(CMProfileRef prof , OSType tag , CFDictionaryRef theDict )
	CMError  CMUnregisterColorDevice(CMDeviceClass deviceClass , CMDeviceID deviceID )
	CMError  CMUpdateProfile(CMProfileRef prof )
	CMError  CMValidateProfile(CMProfileRef prof , Boolean *valid , Boolean *preferredCMMnotfound )
	Boolean  CollectionTagExists(Collection c , CollectionTag tag )
	CFStringRef  ColorSyncCMMCopyCMMIdentifier(ColorSyncCMMRef )
	CFStringRef  ColorSyncCMMCopyLocalizedName(ColorSyncCMMRef )
	ColorSyncCMMRef  ColorSyncCMMCreate(CFBundleRef cmmBundle )
	CFBundleRef  ColorSyncCMMGetBundle(ColorSyncCMMRef )
	CFTypeID  ColorSyncCMMGetTypeID()
	CFDictionaryRef  ColorSyncDeviceCopyDeviceInfo(CFStringRef deviceClass , CFUUIDRef devID )
	bool  ColorSyncDeviceSetCustomProfiles(CFStringRef deviceClass , CFUUIDRef deviceID , CFDictionaryRef profileInfo )
	void  ColorSyncIterateDeviceProfiles(ColorSyncDeviceProfileIterateCallback callBack , void *userInfo )
	void  ColorSyncIterateInstalledCMMs(ColorSyncCMMIterateCallback callBack , void *userInfo )
	void  ColorSyncIterateInstalledProfiles(ColorSyncProfileIterateCallback callBack , uint32_t *seed , void *userInfo , CFErrorRef *error )
	bool  ColorSyncProfileContainsTag(ColorSyncProfileRef prof , CFStringRef signature )
	CFDataRef  ColorSyncProfileCopyData(ColorSyncProfileRef prof , CFErrorRef *error )
	CFStringRef  ColorSyncProfileCopyDescriptionString(ColorSyncProfileRef prof )
	CFDataRef  ColorSyncProfileCopyHeader(ColorSyncProfileRef prof )
	CFDataRef  ColorSyncProfileCopyTag(ColorSyncProfileRef prof , CFStringRef signature )
	CFArrayRef  ColorSyncProfileCopyTagSignatures(ColorSyncProfileRef prof )
	ColorSyncProfileRef  ColorSyncProfileCreate(CFDataRef data , CFErrorRef *error )
	ColorSyncProfileRef  ColorSyncProfileCreateDeviceProfile(CFStringRef deviceClass , CFUUIDRef deviceID , CFTypeRef profileID )
	CFDataRef  ColorSyncProfileCreateDisplayTransferTablesFromVCGT(ColorSyncProfileRef profile , size_t *nSamplesPerChannel )
	ColorSyncProfileRef  ColorSyncProfileCreateLink(CFArrayRef profileInfo , CFDictionaryRef options )
	ColorSyncMutableProfileRef  ColorSyncProfileCreateMutable()
	ColorSyncMutableProfileRef  ColorSyncProfileCreateMutableCopy(ColorSyncProfileRef prof )
	ColorSyncProfileRef  ColorSyncProfileCreateWithDisplayID(uint32_t displayID )
	ColorSyncProfileRef  ColorSyncProfileCreateWithName(CFStringRef name )
	ColorSyncProfileRef  ColorSyncProfileCreateWithURL(CFURLRef url , CFErrorRef *error )
	float  ColorSyncProfileEstimateGamma(ColorSyncProfileRef prof , CFErrorRef *error )
	float  ColorSyncProfileEstimateGammaWithDisplayID(const int32_t displayID , CFErrorRef *error )
	bool  ColorSyncProfileGetDisplayTransferFormulaFromVCGT(ColorSyncProfileRef profile , float *redMin , float *redMax , float *redGamma , float *greenMin , float *greenMax , float *greenGamma , float *blueMin , float *blueMax , float *blueGamma )
	ColorSyncMD5  ColorSyncProfileGetMD5(ColorSyncProfileRef prof )
	CFTypeID  ColorSyncProfileGetTypeID()
	CFURLRef  ColorSyncProfileGetURL(ColorSyncProfileRef prof , CFErrorRef *error )
	void  ColorSyncProfileRemoveTag(ColorSyncMutableProfileRef prof , CFStringRef signature )
	void  ColorSyncProfileSetHeader(ColorSyncMutableProfileRef prof , CFDataRef header )
	void  ColorSyncProfileSetTag(ColorSyncMutableProfileRef prof , CFStringRef signature , CFDataRef data )
	bool  ColorSyncProfileVerify(ColorSyncProfileRef prof , CFErrorRef *errors , CFErrorRef *warnings )
	bool  ColorSyncRegisterDevice(CFStringRef deviceClass , CFUUIDRef deviceID , CFDictionaryRef deviceInfo )
	bool  ColorSyncTransformConvert(ColorSyncTransformRef transform , size_t width , size_t height , void *dst , ColorSyncDataDepth dstDepth , ColorSyncDataLayout dstLayout , size_t dstBytesPerRow , const void *src , ColorSyncDataDepth srcDepth , ColorSyncDataLayout srcLayout , size_t srcBytesPerRow , CFDictionaryRef options )
	CFTypeRef  ColorSyncTransformCopyProperty(ColorSyncTransformRef transform , CFTypeRef key , CFDictionaryRef options )
	ColorSyncTransformRef  ColorSyncTransformCreate(CFArrayRef profileSequence , CFDictionaryRef options )
	CFTypeID  ColorSyncTransformGetTypeID()
	void  ColorSyncTransformSetProperty(ColorSyncTransformRef transform , CFTypeRef key , CFTypeRef property )
	bool  ColorSyncUnregisterDevice(CFStringRef deviceClass , CFUUIDRef deviceID )
	Boolean  CompareAndSwap(UInt32 oldValue , UInt32 newValue , UInt32 *address )
	OSErr  CompositeIconRef(IconRef backgroundIconRef , IconRef foregroundIconRef , IconRef *compositeIconRef )
	double  compound(double rate , double periods )
	size_t  confstr(int , char * , size_t )
	OSErr  ContinueSpeech(SpeechChannel chan )
	OSStatus  ConvertFromPStringToUnicode(TextToUnicodeInfo iTextToUnicodeInfo , ConstStr255Param iPascalStr , ByteCount iOutputBufLen , ByteCount *oUnicodeLen , UniChar *oUnicodeStr )
	OSStatus  ConvertFromTextToUnicode(TextToUnicodeInfo iTextToUnicodeInfo , ByteCount iSourceLen , ConstLogicalAddress iSourceStr , OptionBits iControlFlags , ItemCount iOffsetCount , const ByteOffset *iOffsetArray , ItemCount *oOffsetCount , ByteOffset *oOffsetArray , ByteCount iOutputBufLen , ByteCount *oSourceRead , ByteCount *oUnicodeLen , UniChar *oUnicodeStr )
	OSStatus  ConvertFromUnicodeToPString(UnicodeToTextInfo iUnicodeToTextInfo , ByteCount iUnicodeLen , const UniChar *iUnicodeStr , unsigned char *oPascalStr )
	OSStatus  ConvertFromUnicodeToScriptCodeRun(UnicodeToTextRunInfo iUnicodeToTextInfo , ByteCount iUnicodeLen , const UniChar *iUnicodeStr , OptionBits iControlFlags , ItemCount iOffsetCount , const ByteOffset *iOffsetArray , ItemCount *oOffsetCount , ByteOffset *oOffsetArray , ByteCount iOutputBufLen , ByteCount *oInputRead , ByteCount *oOutputLen , LogicalAddress oOutputStr , ItemCount iScriptRunBufLen , ItemCount *oScriptRunOutLen , ScriptCodeRun *oScriptCodeRuns )
	OSStatus  ConvertFromUnicodeToText(UnicodeToTextInfo iUnicodeToTextInfo , ByteCount iUnicodeLen , const UniChar *iUnicodeStr , OptionBits iControlFlags , ItemCount iOffsetCount , const ByteOffset *iOffsetArray , ItemCount *oOffsetCount , ByteOffset *oOffsetArray , ByteCount iOutputBufLen , ByteCount *oInputRead , ByteCount *oOutputLen , LogicalAddress oOutputStr )
	OSStatus  ConvertFromUnicodeToTextRun(UnicodeToTextRunInfo iUnicodeToTextInfo , ByteCount iUnicodeLen , const UniChar *iUnicodeStr , OptionBits iControlFlags , ItemCount iOffsetCount , const ByteOffset *iOffsetArray , ItemCount *oOffsetCount , ByteOffset *oOffsetArray , ByteCount iOutputBufLen , ByteCount *oInputRead , ByteCount *oOutputLen , LogicalAddress oOutputStr , ItemCount iEncodingRunBufLen , ItemCount *oEncodingRunOutLen , TextEncodingRun *oEncodingRuns )
	Collection  CopyCollection(Collection srcCollection , Collection dstCollection )
	OSErr  CopyPhonemesFromText(SpeechChannel chan , CFStringRef text , CFStringRef *phonemes )
	OSStatus  CopyProcessName(const ProcessSerialNumber *psn , CFStringRef *name )
	double  copysign(double , double )
	float  copysignf(float , float )
	long double  copysignl(long double , long double )
	OSErr  CopySpeechProperty(SpeechChannel chan , CFStringRef property , CFTypeRef *object )
	OSStatus  CoreEndianFlipData(OSType dataDomain , OSType dataType , SInt16 id , void *data , ByteCount dataLen , Boolean currentlyNative )
	OSStatus  CoreEndianGetFlipper(OSType dataDomain , OSType dataType , CoreEndianFlipProc *proc , void **refcon )
	OSStatus  CoreEndianInstallFlipper(OSType dataDomain , OSType dataType , CoreEndianFlipProc proc , void *refcon )
	double  cos(double )
	float  cosf(float )
	double  cosh(double )
	float  coshf(float )
	long double  coshl(long double )
	long double  cosl(long double )
	ResourceCount  Count1Resources(ResType theType )
	ResourceCount  Count1Types()
	SInt32  CountCollectionItems(Collection c )
	SInt32  CountCollectionOwners(Collection c )
	SInt32  CountCollectionTags(Collection c )
	long  CountComponentInstances(Component aComponent )
	long  CountComponents(ComponentDescription *looking )
	ResourceCount  CountResources(ResType theType )
	SInt32  CountTaggedCollectionItems(Collection c , CollectionTag tag )
	ResourceCount  CountTypes()
	OSStatus  CountUnicodeMappings(OptionBits iFilter , ConstUnicodeMappingPtr iFindMapping , ItemCount *oActualCount )
	OSErr  CountVoices(SInt16 *numVoices )
	int  creat(const char * , mode_t )
	OSErr  CreateCompDescriptor(DescType comparisonOperator , AEDesc *operand1 , AEDesc *operand2 , Boolean disposeInputs , AEDesc *theDescriptor )
	OSErr  CreateLogicalDescriptor(AEDescList *theLogicalTerms , DescType theLogicOperator , Boolean disposeInputs , AEDesc *theDescriptor )
	OSErr  CreateObjSpecifier(DescType desiredClass , AEDesc *theContainer , DescType keyForm , AEDesc *keyData , Boolean disposeInputs , AEDesc *objSpecifier )
	OSErr  CreateOffsetDescriptor(long theOffset , AEDesc *theDescriptor )
	OSErr  CreateRangeDescriptor(AEDesc *rangeStart , AEDesc *rangeStop , Boolean disposeInputs , AEDesc *theDescriptor )
	TextEncoding  CreateTextEncoding(TextEncodingBase encodingBase , TextEncodingVariant encodingVariant , TextEncodingFormat encodingFormat )
	OSStatus  CreateTextToUnicodeInfo(ConstUnicodeMappingPtr iUnicodeMapping , TextToUnicodeInfo *oTextToUnicodeInfo )
	OSStatus  CreateTextToUnicodeInfoByEncoding(TextEncoding iEncoding , TextToUnicodeInfo *oTextToUnicodeInfo )
	OSErr  CreateThreadPool(ThreadStyle threadStyle , SInt16 numToCreate , Size stackSize )
	OSStatus  CreateUnicodeToTextInfo(ConstUnicodeMappingPtr iUnicodeMapping , UnicodeToTextInfo *oUnicodeToTextInfo )
	OSStatus  CreateUnicodeToTextInfoByEncoding(TextEncoding iEncoding , UnicodeToTextInfo *oUnicodeToTextInfo )
	OSStatus  CreateUnicodeToTextRunInfo(ItemCount iNumberOfMappings , const UnicodeMapping *iUnicodeMappings , UnicodeToTextRunInfo *oUnicodeToTextInfo )
	OSStatus  CreateUnicodeToTextRunInfoByEncoding(ItemCount iNumberOfEncodings , const TextEncoding *iEncodings , UnicodeToTextRunInfo *oUnicodeToTextInfo )
	OSStatus  CreateUnicodeToTextRunInfoByScriptCode(ItemCount iNumberOfScriptCodes , const ScriptCode *iScripts , UnicodeToTextRunInfo *oUnicodeToTextInfo )
	char *  crypt(const char * , const char * )
	Boolean  CSBackupIsItemExcluded(CFURLRef item , Boolean *excludeByPath )
	OSStatus  CSBackupSetItemExcluded(CFURLRef item , Boolean exclude , Boolean excludeByPath )
	CFStringRef  CSCopyMachineName()
	CFStringRef  CSCopyUserName(Boolean useShortName )
	void  CSDiskSpaceCancelRecovery(CFUUIDRef operationUUID )
	UInt64  CSDiskSpaceGetRecoveryEstimate(CFURLRef volumeURL )
	void  CSDiskSpaceStartRecovery(CFURLRef volumeURL , UInt64 bytesNeeded , CSDiskSpaceRecoveryOptions options , CFUUIDRef *outOperationUUID , dispatch_queue_t callbackQueue , ^(Boolean succeeded, UInt64 bytesFree, CFErrorRef error)callback )
	CSComponentsThreadMode  CSGetComponentsThreadMode()
	CSIdentityAuthorityRef  CSGetDefaultIdentityAuthority()
	CSIdentityAuthorityRef  CSGetLocalIdentityAuthority()
	CSIdentityAuthorityRef  CSGetManagedIdentityAuthority()
	void  CSIdentityAddAlias(CSIdentityRef identity , CFStringRef alias )
	void  CSIdentityAddMember(CSIdentityRef group , CSIdentityRef member )
	Boolean  CSIdentityAuthenticateUsingPassword(CSIdentityRef user , CFStringRef password )
	CFStringRef  CSIdentityAuthorityCopyLocalizedName(CSIdentityAuthorityRef authority )
	CFTypeID  CSIdentityAuthorityGetTypeID()
	Boolean  CSIdentityCommit(CSIdentityRef identity , AuthorizationRef authorization , CFErrorRef *error )
	Boolean  CSIdentityCommitAsynchronously(CSIdentityRef identity , const CSIdentityClientContext *clientContext , CFRunLoopRef runLoop , CFStringRef runLoopMode , AuthorizationRef authorization )
	CSIdentityRef  CSIdentityCreate(CFAllocatorRef allocator , CSIdentityClass identityClass , CFStringRef fullName , CFStringRef posixName , CSIdentityFlags flags , CSIdentityAuthorityRef authority )
	CSIdentityRef  CSIdentityCreateCopy(CFAllocatorRef allocator , CSIdentityRef identity )
	CSIdentityQueryRef  CSIdentityCreateGroupMembershipQuery(CFAllocatorRef allocator , CSIdentityRef group )
	CFDataRef  CSIdentityCreatePersistentReference(CFAllocatorRef allocator , CSIdentityRef identity )
	void  CSIdentityDelete(CSIdentityRef identity )
	CFArrayRef  CSIdentityGetAliases(CSIdentityRef identity )
	CSIdentityAuthorityRef  CSIdentityGetAuthority(CSIdentityRef identity )
	SecCertificateRef  CSIdentityGetCertificate(CSIdentityRef user )
	CSIdentityClass  CSIdentityGetClass(CSIdentityRef identity )
	CFStringRef  CSIdentityGetEmailAddress(CSIdentityRef identity )
	CFStringRef  CSIdentityGetFullName(CSIdentityRef identity )
	CFDataRef  CSIdentityGetImageData(CSIdentityRef identity )
	CFStringRef  CSIdentityGetImageDataType(CSIdentityRef identity )
	CFURLRef  CSIdentityGetImageURL(CSIdentityRef identity )
	id_t  CSIdentityGetPosixID(CSIdentityRef identity )
	CFStringRef  CSIdentityGetPosixName(CSIdentityRef identity )
	CFTypeID  CSIdentityGetTypeID()
	CFUUIDRef  CSIdentityGetUUID(CSIdentityRef identity )
	Boolean  CSIdentityIsCommitting(CSIdentityRef identity )
	Boolean  CSIdentityIsEnabled(CSIdentityRef user )
	Boolean  CSIdentityIsHidden(CSIdentityRef identity )
	Boolean  CSIdentityIsMemberOfGroup(CSIdentityRef identity , CSIdentityRef group )
	CFArrayRef  CSIdentityQueryCopyResults(CSIdentityQueryRef query )
	CSIdentityQueryRef  CSIdentityQueryCreate(CFAllocatorRef allocator , CSIdentityClass identityClass , CSIdentityAuthorityRef authority )
	CSIdentityQueryRef  CSIdentityQueryCreateForCurrentUser(CFAllocatorRef allocator )
	CSIdentityQueryRef  CSIdentityQueryCreateForName(CFAllocatorRef allocator , CFStringRef name , CSIdentityQueryStringComparisonMethod comparisonMethod , CSIdentityClass identityClass , CSIdentityAuthorityRef authority )
	CSIdentityQueryRef  CSIdentityQueryCreateForPersistentReference(CFAllocatorRef allocator , CFDataRef referenceData )
	CSIdentityQueryRef  CSIdentityQueryCreateForPosixID(CFAllocatorRef allocator , id_t posixID , CSIdentityClass identityClass , CSIdentityAuthorityRef authority )
	CSIdentityQueryRef  CSIdentityQueryCreateForUUID(CFAllocatorRef allocator , CFUUIDRef uuid , CSIdentityAuthorityRef authority )
	Boolean  CSIdentityQueryExecute(CSIdentityQueryRef query , CSIdentityQueryFlags flags , CFErrorRef *error )
	Boolean  CSIdentityQueryExecuteAsynchronously(CSIdentityQueryRef query , CSIdentityQueryFlags flags , const CSIdentityQueryClientContext *clientContext , CFRunLoopRef runLoop , CFStringRef runLoopMode )
	CFTypeID  CSIdentityQueryGetTypeID()
	void  CSIdentityQueryStop(CSIdentityQueryRef query )
	void  CSIdentityRemoveAlias(CSIdentityRef identity , CFStringRef alias )
	void  CSIdentityRemoveClient(CSIdentityRef identity )
	void  CSIdentityRemoveMember(CSIdentityRef group , CSIdentityRef member )
	void  CSIdentitySetCertificate(CSIdentityRef user , SecCertificateRef certificate )
	void  CSIdentitySetEmailAddress(CSIdentityRef identity , CFStringRef emailAddress )
	void  CSIdentitySetFullName(CSIdentityRef identity , CFStringRef fullName )
	void  CSIdentitySetImageData(CSIdentityRef identity , CFDataRef imageData , CFStringRef imageDataType )
	void  CSIdentitySetImageURL(CSIdentityRef identity , CFURLRef url )
	void  CSIdentitySetIsEnabled(CSIdentityRef user , Boolean isEnabled )
	void  CSIdentitySetPassword(CSIdentityRef user , CFStringRef password )
	void  CSSetComponentsThreadMode(CSComponentsThreadMode mode )
	CSSM_RETURN  CSSM_AC_AuthCompute(CSSM_AC_HANDLE ACHandle , const CSSM_TUPLEGROUP *BaseAuthorizations , const CSSM_TUPLEGROUP *Credentials , uint32 NumberOfRequestors , const CSSM_LIST *Requestors , const CSSM_LIST *RequestedAuthorizationPeriod , const CSSM_LIST *RequestedAuthorization , CSSM_TUPLEGROUP_PTR AuthorizationResult )
	CSSM_RETURN  CSSM_AC_PassThrough(CSSM_AC_HANDLE ACHandle , CSSM_TP_HANDLE TPHandle , CSSM_CL_HANDLE CLHandle , CSSM_CC_HANDLE CCHandle , const CSSM_DL_DB_LIST *DBList , uint32 PassThroughId , const void *InputParams , void **OutputParams )
	CSSM_RETURN  CSSM_ChangeKeyAcl(CSSM_CSP_HANDLE CSPHandle , const CSSM_ACCESS_CREDENTIALS *AccessCred , const CSSM_ACL_EDIT *AclEdit , const CSSM_KEY *Key )
	CSSM_RETURN  CSSM_ChangeKeyOwner(CSSM_CSP_HANDLE CSPHandle , const CSSM_ACCESS_CREDENTIALS *AccessCred , const CSSM_KEY *Key , const CSSM_ACL_OWNER_PROTOTYPE *NewOwner )
	CSSM_RETURN  CSSM_CL_CertAbortCache(CSSM_CL_HANDLE CLHandle , CSSM_HANDLE CertHandle )
	CSSM_RETURN  CSSM_CL_CertAbortQuery(CSSM_CL_HANDLE CLHandle , CSSM_HANDLE ResultsHandle )
	CSSM_RETURN  CSSM_CL_CertCache(CSSM_CL_HANDLE CLHandle , const CSSM_DATA *Cert , CSSM_HANDLE_PTR CertHandle )
	CSSM_RETURN  CSSM_CL_CertCreateTemplate(CSSM_CL_HANDLE CLHandle , uint32 NumberOfFields , const CSSM_FIELD *CertFields , CSSM_DATA_PTR CertTemplate )
	CSSM_RETURN  CSSM_CL_CertDescribeFormat(CSSM_CL_HANDLE CLHandle , uint32 *NumberOfFields , CSSM_OID_PTR *OidList )
	CSSM_RETURN  CSSM_CL_CertGetAllFields(CSSM_CL_HANDLE CLHandle , const CSSM_DATA *Cert , uint32 *NumberOfFields , CSSM_FIELD_PTR *CertFields )
	CSSM_RETURN  CSSM_CL_CertGetAllTemplateFields(CSSM_CL_HANDLE CLHandle , const CSSM_DATA *CertTemplate , uint32 *NumberOfFields , CSSM_FIELD_PTR *CertFields )
	CSSM_RETURN  CSSM_CL_CertGetFirstCachedFieldValue(CSSM_CL_HANDLE CLHandle , CSSM_HANDLE CertHandle , const CSSM_OID *CertField , CSSM_HANDLE_PTR ResultsHandle , uint32 *NumberOfMatchedFields , CSSM_DATA_PTR *Value )
	CSSM_RETURN  CSSM_CL_CertGetFirstFieldValue(CSSM_CL_HANDLE CLHandle , const CSSM_DATA *Cert , const CSSM_OID *CertField , CSSM_HANDLE_PTR ResultsHandle , uint32 *NumberOfMatchedFields , CSSM_DATA_PTR *Value )
	CSSM_RETURN  CSSM_CL_CertGetKeyInfo(CSSM_CL_HANDLE CLHandle , const CSSM_DATA *Cert , CSSM_KEY_PTR *Key )
	CSSM_RETURN  CSSM_CL_CertGetNextCachedFieldValue(CSSM_CL_HANDLE CLHandle , CSSM_HANDLE ResultsHandle , CSSM_DATA_PTR *Value )
	CSSM_RETURN  CSSM_CL_CertGetNextFieldValue(CSSM_CL_HANDLE CLHandle , CSSM_HANDLE ResultsHandle , CSSM_DATA_PTR *Value )
	CSSM_RETURN  CSSM_CL_CertGroupFromVerifiedBundle(CSSM_CL_HANDLE CLHandle , CSSM_CC_HANDLE CCHandle , const CSSM_CERT_BUNDLE *CertBundle , const CSSM_DATA *SignerCert , CSSM_CERTGROUP_PTR *CertGroup )
	CSSM_RETURN  CSSM_CL_CertGroupToSignedBundle(CSSM_CL_HANDLE CLHandle , CSSM_CC_HANDLE CCHandle , const CSSM_CERTGROUP *CertGroupToBundle , const CSSM_CERT_BUNDLE_HEADER *BundleInfo , CSSM_DATA_PTR SignedBundle )
	CSSM_RETURN  CSSM_CL_CertSign(CSSM_CL_HANDLE CLHandle , CSSM_CC_HANDLE CCHandle , const CSSM_DATA *CertTemplate , const CSSM_FIELD *SignScope , uint32 ScopeSize , CSSM_DATA_PTR SignedCert )
	CSSM_RETURN  CSSM_CL_CertVerify(CSSM_CL_HANDLE CLHandle , CSSM_CC_HANDLE CCHandle , const CSSM_DATA *CertToBeVerified , const CSSM_DATA *SignerCert , const CSSM_FIELD *VerifyScope , uint32 ScopeSize )
	CSSM_RETURN  CSSM_CL_CertVerifyWithKey(CSSM_CL_HANDLE CLHandle , CSSM_CC_HANDLE CCHandle , const CSSM_DATA *CertToBeVerified )
	CSSM_RETURN  CSSM_CL_CrlAbortCache(CSSM_CL_HANDLE CLHandle , CSSM_HANDLE CrlHandle )
	CSSM_RETURN  CSSM_CL_CrlAbortQuery(CSSM_CL_HANDLE CLHandle , CSSM_HANDLE ResultsHandle )
	CSSM_RETURN  CSSM_CL_CrlAddCert(CSSM_CL_HANDLE CLHandle , CSSM_CC_HANDLE CCHandle , const CSSM_DATA *Cert , uint32 NumberOfFields , const CSSM_FIELD *CrlEntryFields , const CSSM_DATA *OldCrl , CSSM_DATA_PTR NewCrl )
	CSSM_RETURN  CSSM_CL_CrlCache(CSSM_CL_HANDLE CLHandle , const CSSM_DATA *Crl , CSSM_HANDLE_PTR CrlHandle )
	CSSM_RETURN  CSSM_CL_CrlCreateTemplate(CSSM_CL_HANDLE CLHandle , uint32 NumberOfFields , const CSSM_FIELD *CrlTemplate , CSSM_DATA_PTR NewCrl )
	CSSM_RETURN  CSSM_CL_CrlDescribeFormat(CSSM_CL_HANDLE CLHandle , uint32 *NumberOfFields , CSSM_OID_PTR *OidList )
	CSSM_RETURN  CSSM_CL_CrlGetAllCachedRecordFields(CSSM_CL_HANDLE CLHandle , CSSM_HANDLE CrlHandle , const CSSM_DATA *CrlRecordIndex , uint32 *NumberOfFields , CSSM_FIELD_PTR *CrlFields )
	CSSM_RETURN  CSSM_CL_CrlGetAllFields(CSSM_CL_HANDLE CLHandle , const CSSM_DATA *Crl , uint32 *NumberOfCrlFields , CSSM_FIELD_PTR *CrlFields )
	CSSM_RETURN  CSSM_CL_CrlGetFirstCachedFieldValue(CSSM_CL_HANDLE CLHandle , CSSM_HANDLE CrlHandle , const CSSM_DATA *CrlRecordIndex , const CSSM_OID *CrlField , CSSM_HANDLE_PTR ResultsHandle , uint32 *NumberOfMatchedFields , CSSM_DATA_PTR *Value )
	CSSM_RETURN  CSSM_CL_CrlGetFirstFieldValue(CSSM_CL_HANDLE CLHandle , const CSSM_DATA *Crl , const CSSM_OID *CrlField , CSSM_HANDLE_PTR ResultsHandle , uint32 *NumberOfMatchedFields , CSSM_DATA_PTR *Value )
	CSSM_RETURN  CSSM_CL_CrlGetNextCachedFieldValue(CSSM_CL_HANDLE CLHandle , CSSM_HANDLE ResultsHandle , CSSM_DATA_PTR *Value )
	CSSM_RETURN  CSSM_CL_CrlGetNextFieldValue(CSSM_CL_HANDLE CLHandle , CSSM_HANDLE ResultsHandle , CSSM_DATA_PTR *Value )
	CSSM_RETURN  CSSM_CL_CrlRemoveCert(CSSM_CL_HANDLE CLHandle , const CSSM_DATA *Cert , const CSSM_DATA *OldCrl , CSSM_DATA_PTR NewCrl )
	CSSM_RETURN  CSSM_CL_CrlSetFields(CSSM_CL_HANDLE CLHandle , uint32 NumberOfFields , const CSSM_FIELD *CrlTemplate , const CSSM_DATA *OldCrl , CSSM_DATA_PTR ModifiedCrl )
	CSSM_RETURN  CSSM_CL_CrlSign(CSSM_CL_HANDLE CLHandle , CSSM_CC_HANDLE CCHandle , const CSSM_DATA *UnsignedCrl , const CSSM_FIELD *SignScope , uint32 ScopeSize , CSSM_DATA_PTR SignedCrl )
	CSSM_RETURN  CSSM_CL_CrlVerify(CSSM_CL_HANDLE CLHandle , CSSM_CC_HANDLE CCHandle , const CSSM_DATA *CrlToBeVerified , const CSSM_DATA *SignerCert , const CSSM_FIELD *VerifyScope , uint32 ScopeSize )
	CSSM_RETURN  CSSM_CL_CrlVerifyWithKey(CSSM_CL_HANDLE CLHandle , CSSM_CC_HANDLE CCHandle , const CSSM_DATA *CrlToBeVerified )
	CSSM_RETURN  CSSM_CL_FreeFields(CSSM_CL_HANDLE CLHandle , uint32 NumberOfFields , CSSM_FIELD_PTR *Fields )
	CSSM_RETURN  CSSM_CL_FreeFieldValue(CSSM_CL_HANDLE CLHandle , const CSSM_OID *CertOrCrlOid , CSSM_DATA_PTR Value )
	CSSM_RETURN  CSSM_CL_IsCertInCachedCrl(CSSM_CL_HANDLE CLHandle , const CSSM_DATA *Cert , CSSM_HANDLE CrlHandle , CSSM_BOOL *CertFound , CSSM_DATA_PTR CrlRecordIndex )
	CSSM_RETURN  CSSM_CL_IsCertInCrl(CSSM_CL_HANDLE CLHandle , const CSSM_DATA *Cert , const CSSM_DATA *Crl , CSSM_BOOL *CertFound )
	CSSM_RETURN  CSSM_CL_PassThrough(CSSM_CL_HANDLE CLHandle , CSSM_CC_HANDLE CCHandle , uint32 PassThroughId , const void *InputParams , void **OutputParams )
	CSSM_RETURN  CSSM_CSP_ChangeLoginAcl(CSSM_CSP_HANDLE CSPHandle , const CSSM_ACCESS_CREDENTIALS *AccessCred , const CSSM_ACL_EDIT *AclEdit )
	CSSM_RETURN  CSSM_CSP_ChangeLoginOwner(CSSM_CSP_HANDLE CSPHandle , const CSSM_ACCESS_CREDENTIALS *AccessCred , const CSSM_ACL_OWNER_PROTOTYPE *NewOwner )
	CSSM_RETURN  CSSM_CSP_CreateAsymmetricContext(CSSM_CSP_HANDLE CSPHandle , CSSM_ALGORITHMS AlgorithmID , const CSSM_ACCESS_CREDENTIALS *AccessCred , const CSSM_KEY *Key , CSSM_PADDING Padding , CSSM_CC_HANDLE *NewContextHandle )
	CSSM_RETURN  CSSM_CSP_CreateDeriveKeyContext(CSSM_CSP_HANDLE CSPHandle , CSSM_ALGORITHMS AlgorithmID , CSSM_KEY_TYPE DeriveKeyType , uint32 DeriveKeyLengthInBits , const CSSM_ACCESS_CREDENTIALS *AccessCred , const CSSM_KEY *BaseKey , uint32 IterationCount , const CSSM_DATA *Salt , const CSSM_CRYPTO_DATA *Seed , CSSM_CC_HANDLE *NewContextHandle )
	CSSM_RETURN  CSSM_CSP_CreateDigestContext(CSSM_CSP_HANDLE CSPHandle , CSSM_ALGORITHMS AlgorithmID , CSSM_CC_HANDLE *NewContextHandle )
	CSSM_RETURN  CSSM_CSP_CreateKeyGenContext(CSSM_CSP_HANDLE CSPHandle , CSSM_ALGORITHMS AlgorithmID , uint32 KeySizeInBits , const CSSM_CRYPTO_DATA *Seed , const CSSM_DATA *Salt , const CSSM_DATE *StartDate , const CSSM_DATE *EndDate , const CSSM_DATA *Params , CSSM_CC_HANDLE *NewContextHandle )
	CSSM_RETURN  CSSM_CSP_CreateMacContext(CSSM_CSP_HANDLE CSPHandle , CSSM_ALGORITHMS AlgorithmID , const CSSM_KEY *Key , CSSM_CC_HANDLE *NewContextHandle )
	CSSM_RETURN  CSSM_CSP_CreatePassThroughContext(CSSM_CSP_HANDLE CSPHandle , const CSSM_KEY *Key , CSSM_CC_HANDLE *NewContextHandle )
	CSSM_RETURN  CSSM_CSP_CreateRandomGenContext(CSSM_CSP_HANDLE CSPHandle , CSSM_ALGORITHMS AlgorithmID , const CSSM_CRYPTO_DATA *Seed , CSSM_SIZE Length , CSSM_CC_HANDLE *NewContextHandle )
	CSSM_RETURN  CSSM_CSP_CreateSignatureContext(CSSM_CSP_HANDLE CSPHandle , CSSM_ALGORITHMS AlgorithmID , const CSSM_ACCESS_CREDENTIALS *AccessCred , const CSSM_KEY *Key , CSSM_CC_HANDLE *NewContextHandle )
	CSSM_RETURN  CSSM_CSP_CreateSymmetricContext(CSSM_CSP_HANDLE CSPHandle , CSSM_ALGORITHMS AlgorithmID , CSSM_ENCRYPT_MODE Mode , const CSSM_ACCESS_CREDENTIALS *AccessCred , const CSSM_KEY *Key , const CSSM_DATA *InitVector , CSSM_PADDING Padding , void *Reserved , CSSM_CC_HANDLE *NewContextHandle )
	CSSM_RETURN  CSSM_CSP_GetLoginAcl(CSSM_CSP_HANDLE CSPHandle , const CSSM_STRING *SelectionTag , uint32 *NumberOfAclInfos , CSSM_ACL_ENTRY_INFO_PTR *AclInfos )
	CSSM_RETURN  CSSM_CSP_GetLoginOwner(CSSM_CSP_HANDLE CSPHandle , CSSM_ACL_OWNER_PROTOTYPE_PTR Owner )
	CSSM_RETURN  CSSM_CSP_GetOperationalStatistics(CSSM_CSP_HANDLE CSPHandle , CSSM_CSP_OPERATIONAL_STATISTICS *Statistics )
	CSSM_RETURN  CSSM_CSP_Login(CSSM_CSP_HANDLE CSPHandle , const CSSM_ACCESS_CREDENTIALS *AccessCred , const CSSM_DATA *LoginName , const void *Reserved )
	CSSM_RETURN  CSSM_CSP_Logout(CSSM_CSP_HANDLE CSPHandle )
	CSSM_RETURN  CSSM_CSP_ObtainPrivateKeyFromPublicKey(CSSM_CSP_HANDLE CSPHandle , const CSSM_KEY *PublicKey , CSSM_KEY_PTR PrivateKey )
	CSSM_RETURN  CSSM_CSP_PassThrough(CSSM_CC_HANDLE CCHandle , uint32 PassThroughId , const void *InData , void **OutData )
	CSSM_RETURN  CSSM_DecryptData(CSSM_CC_HANDLE CCHandle , const CSSM_DATA *CipherBufs , uint32 CipherBufCount , CSSM_DATA_PTR ClearBufs , uint32 ClearBufCount , CSSM_SIZE *bytesDecrypted , CSSM_DATA_PTR RemData )
	CSSM_RETURN  CSSM_DecryptDataFinal(CSSM_CC_HANDLE CCHandle , CSSM_DATA_PTR RemData )
	CSSM_RETURN  CSSM_DecryptDataInit(CSSM_CC_HANDLE CCHandle )
	CSSM_RETURN  CSSM_DecryptDataInitP(CSSM_CC_HANDLE CCHandle , CSSM_PRIVILEGE Privilege )
	CSSM_RETURN  CSSM_DecryptDataP(CSSM_CC_HANDLE CCHandle , const CSSM_DATA *CipherBufs , uint32 CipherBufCount , CSSM_DATA_PTR ClearBufs , uint32 ClearBufCount , CSSM_SIZE *bytesDecrypted , CSSM_DATA_PTR RemData , CSSM_PRIVILEGE Privilege )
	CSSM_RETURN  CSSM_DecryptDataUpdate(CSSM_CC_HANDLE CCHandle , const CSSM_DATA *CipherBufs , uint32 CipherBufCount , CSSM_DATA_PTR ClearBufs , uint32 ClearBufCount , CSSM_SIZE *bytesDecrypted )
	CSSM_RETURN  CSSM_DeleteContext(CSSM_CC_HANDLE CCHandle )
	CSSM_RETURN  CSSM_DeleteContextAttributes(CSSM_CC_HANDLE CCHandle , uint32 NumberOfAttributes , const CSSM_CONTEXT_ATTRIBUTE *ContextAttributes )
	CSSM_RETURN  CSSM_DeriveKey(CSSM_CC_HANDLE CCHandle , CSSM_DATA_PTR Param , uint32 KeyUsage , uint32 KeyAttr , const CSSM_DATA *KeyLabel , const CSSM_RESOURCE_CONTROL_CONTEXT *CredAndAclEntry , CSSM_KEY_PTR DerivedKey )
	CSSM_RETURN  CSSM_DigestData(CSSM_CC_HANDLE CCHandle , const CSSM_DATA *DataBufs , uint32 DataBufCount , CSSM_DATA_PTR Digest )
	CSSM_RETURN  CSSM_DigestDataClone(CSSM_CC_HANDLE CCHandle , CSSM_CC_HANDLE *ClonednewCCHandle )
	CSSM_RETURN  CSSM_DigestDataFinal(CSSM_CC_HANDLE CCHandle , CSSM_DATA_PTR Digest )
	CSSM_RETURN  CSSM_DigestDataInit(CSSM_CC_HANDLE CCHandle )
	CSSM_RETURN  CSSM_DigestDataUpdate(CSSM_CC_HANDLE CCHandle , const CSSM_DATA *DataBufs , uint32 DataBufCount )
	CSSM_RETURN  CSSM_DL_Authenticate(CSSM_DL_DB_HANDLE DLDBHandle , CSSM_DB_ACCESS_TYPE AccessRequest , const CSSM_ACCESS_CREDENTIALS *AccessCred )
	CSSM_RETURN  CSSM_DL_ChangeDbAcl(CSSM_DL_DB_HANDLE DLDBHandle , const CSSM_ACCESS_CREDENTIALS *AccessCred , const CSSM_ACL_EDIT *AclEdit )
	CSSM_RETURN  CSSM_DL_ChangeDbOwner(CSSM_DL_DB_HANDLE DLDBHandle , const CSSM_ACCESS_CREDENTIALS *AccessCred , const CSSM_ACL_OWNER_PROTOTYPE *NewOwner )
	CSSM_RETURN  CSSM_DL_CreateRelation(CSSM_DL_DB_HANDLE DLDBHandle , CSSM_DB_RECORDTYPE RelationID , const char *RelationName , uint32 NumberOfAttributes , const CSSM_DB_SCHEMA_ATTRIBUTE_INFO *pAttributeInfo , uint32 NumberOfIndexes , const CSSM_DB_SCHEMA_INDEX_INFO *pIndexInfo )
	CSSM_RETURN  CSSM_DL_DataAbortQuery(CSSM_DL_DB_HANDLE DLDBHandle , CSSM_HANDLE ResultsHandle )
	CSSM_RETURN  CSSM_DL_DataDelete(CSSM_DL_DB_HANDLE DLDBHandle , const CSSM_DB_UNIQUE_RECORD *UniqueRecordIdentifier )
	CSSM_RETURN  CSSM_DL_DataGetFirst(CSSM_DL_DB_HANDLE DLDBHandle , const CSSM_QUERY *Query , CSSM_HANDLE_PTR ResultsHandle , CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR Attributes , CSSM_DATA_PTR Data , CSSM_DB_UNIQUE_RECORD_PTR *UniqueId )
	CSSM_RETURN  CSSM_DL_DataGetFromUniqueRecordId(CSSM_DL_DB_HANDLE DLDBHandle , const CSSM_DB_UNIQUE_RECORD *UniqueRecord , CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR Attributes , CSSM_DATA_PTR Data )
	CSSM_RETURN  CSSM_DL_DataGetNext(CSSM_DL_DB_HANDLE DLDBHandle , CSSM_HANDLE ResultsHandle , CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR Attributes , CSSM_DATA_PTR Data , CSSM_DB_UNIQUE_RECORD_PTR *UniqueId )
	CSSM_RETURN  CSSM_DL_DataInsert(CSSM_DL_DB_HANDLE DLDBHandle , CSSM_DB_RECORDTYPE RecordType , const CSSM_DB_RECORD_ATTRIBUTE_DATA *Attributes , const CSSM_DATA *Data , CSSM_DB_UNIQUE_RECORD_PTR *UniqueId )
	CSSM_RETURN  CSSM_DL_DataModify(CSSM_DL_DB_HANDLE DLDBHandle , CSSM_DB_RECORDTYPE RecordType , CSSM_DB_UNIQUE_RECORD_PTR UniqueRecordIdentifier , const CSSM_DB_RECORD_ATTRIBUTE_DATA *AttributesToBeModified , const CSSM_DATA *DataToBeModified , CSSM_DB_MODIFY_MODE ModifyMode )
	CSSM_RETURN  CSSM_DL_DbClose(CSSM_DL_DB_HANDLE DLDBHandle )
	CSSM_RETURN  CSSM_DL_DbCreate(CSSM_DL_HANDLE DLHandle , const char *DbName , const CSSM_NET_ADDRESS *DbLocation , const CSSM_DBINFO *DBInfo , CSSM_DB_ACCESS_TYPE AccessRequest , const CSSM_RESOURCE_CONTROL_CONTEXT *CredAndAclEntry , const void *OpenParameters , CSSM_DB_HANDLE *DbHandle )
	CSSM_RETURN  CSSM_DL_DbDelete(CSSM_DL_HANDLE DLHandle , const char *DbName , const CSSM_NET_ADDRESS *DbLocation , const CSSM_ACCESS_CREDENTIALS *AccessCred )
	CSSM_RETURN  CSSM_DL_DbOpen(CSSM_DL_HANDLE DLHandle , const char *DbName , const CSSM_NET_ADDRESS *DbLocation , CSSM_DB_ACCESS_TYPE AccessRequest , const CSSM_ACCESS_CREDENTIALS *AccessCred , const void *OpenParameters , CSSM_DB_HANDLE *DbHandle )
	CSSM_RETURN  CSSM_DL_DestroyRelation(CSSM_DL_DB_HANDLE DLDBHandle , CSSM_DB_RECORDTYPE RelationID )
	CSSM_RETURN  CSSM_DL_FreeNameList(CSSM_DL_HANDLE DLHandle , CSSM_NAME_LIST_PTR NameList )
	CSSM_RETURN  CSSM_DL_FreeUniqueRecord(CSSM_DL_DB_HANDLE DLDBHandle , CSSM_DB_UNIQUE_RECORD_PTR UniqueRecord )
	CSSM_RETURN  CSSM_DL_GetDbAcl(CSSM_DL_DB_HANDLE DLDBHandle , const CSSM_STRING *SelectionTag , uint32 *NumberOfAclInfos , CSSM_ACL_ENTRY_INFO_PTR *AclInfos )
	CSSM_RETURN  CSSM_DL_GetDbNameFromHandle(CSSM_DL_DB_HANDLE DLDBHandle , char **DbName )
	CSSM_RETURN  CSSM_DL_GetDbNames(CSSM_DL_HANDLE DLHandle , CSSM_NAME_LIST_PTR *NameList )
	CSSM_RETURN  CSSM_DL_GetDbOwner(CSSM_DL_DB_HANDLE DLDBHandle , CSSM_ACL_OWNER_PROTOTYPE_PTR Owner )
	CSSM_RETURN  CSSM_DL_PassThrough(CSSM_DL_DB_HANDLE DLDBHandle , uint32 PassThroughId , const void *InputParams , void **OutputParams )
	CSSM_RETURN  CSSM_EncryptData(CSSM_CC_HANDLE CCHandle , const CSSM_DATA *ClearBufs , uint32 ClearBufCount , CSSM_DATA_PTR CipherBufs , uint32 CipherBufCount , CSSM_SIZE *bytesEncrypted , CSSM_DATA_PTR RemData )
	CSSM_RETURN  CSSM_EncryptDataFinal(CSSM_CC_HANDLE CCHandle , CSSM_DATA_PTR RemData )
	CSSM_RETURN  CSSM_EncryptDataInit(CSSM_CC_HANDLE CCHandle )
	CSSM_RETURN  CSSM_EncryptDataInitP(CSSM_CC_HANDLE CCHandle , CSSM_PRIVILEGE Privilege )
	CSSM_RETURN  CSSM_EncryptDataP(CSSM_CC_HANDLE CCHandle , const CSSM_DATA *ClearBufs , uint32 ClearBufCount , CSSM_DATA_PTR CipherBufs , uint32 CipherBufCount , CSSM_SIZE *bytesEncrypted , CSSM_DATA_PTR RemData , CSSM_PRIVILEGE Privilege )
	CSSM_RETURN  CSSM_EncryptDataUpdate(CSSM_CC_HANDLE CCHandle , const CSSM_DATA *ClearBufs , uint32 ClearBufCount , CSSM_DATA_PTR CipherBufs , uint32 CipherBufCount , CSSM_SIZE *bytesEncrypted )
	CSSM_RETURN  CSSM_FreeContext(CSSM_CONTEXT_PTR Context )
	CSSM_RETURN  CSSM_FreeKey(CSSM_CSP_HANDLE CSPHandle , const CSSM_ACCESS_CREDENTIALS *AccessCred , CSSM_KEY_PTR KeyPtr , CSSM_BOOL Delete )
	CSSM_RETURN  CSSM_GenerateAlgorithmParams(CSSM_CC_HANDLE CCHandle , uint32 ParamBits , CSSM_DATA_PTR Param )
	CSSM_RETURN  CSSM_GenerateKey(CSSM_CC_HANDLE CCHandle , uint32 KeyUsage , uint32 KeyAttr , const CSSM_DATA *KeyLabel , const CSSM_RESOURCE_CONTROL_CONTEXT *CredAndAclEntry , CSSM_KEY_PTR Key )
	CSSM_RETURN  CSSM_GenerateKeyP(CSSM_CC_HANDLE CCHandle , uint32 KeyUsage , uint32 KeyAttr , const CSSM_DATA *KeyLabel , const CSSM_RESOURCE_CONTROL_CONTEXT *CredAndAclEntry , CSSM_KEY_PTR Key , CSSM_PRIVILEGE Privilege )
	CSSM_RETURN  CSSM_GenerateKeyPair(CSSM_CC_HANDLE CCHandle , uint32 PublicKeyUsage , uint32 PublicKeyAttr , const CSSM_DATA *PublicKeyLabel , CSSM_KEY_PTR PublicKey , uint32 PrivateKeyUsage , uint32 PrivateKeyAttr , const CSSM_DATA *PrivateKeyLabel , const CSSM_RESOURCE_CONTROL_CONTEXT *CredAndAclEntry , CSSM_KEY_PTR PrivateKey )
	CSSM_RETURN  CSSM_GenerateKeyPairP(CSSM_CC_HANDLE CCHandle , uint32 PublicKeyUsage , uint32 PublicKeyAttr , const CSSM_DATA *PublicKeyLabel , CSSM_KEY_PTR PublicKey , uint32 PrivateKeyUsage , uint32 PrivateKeyAttr , const CSSM_DATA *PrivateKeyLabel , const CSSM_RESOURCE_CONTROL_CONTEXT *CredAndAclEntry , CSSM_KEY_PTR PrivateKey , CSSM_PRIVILEGE Privilege )
	CSSM_RETURN  CSSM_GenerateMac(CSSM_CC_HANDLE CCHandle , const CSSM_DATA *DataBufs , uint32 DataBufCount , CSSM_DATA_PTR Mac )
	CSSM_RETURN  CSSM_GenerateMacFinal(CSSM_CC_HANDLE CCHandle , CSSM_DATA_PTR Mac )
	CSSM_RETURN  CSSM_GenerateMacInit(CSSM_CC_HANDLE CCHandle )
	CSSM_RETURN  CSSM_GenerateMacUpdate(CSSM_CC_HANDLE CCHandle , const CSSM_DATA *DataBufs , uint32 DataBufCount )
	CSSM_RETURN  CSSM_GenerateRandom(CSSM_CC_HANDLE CCHandle , CSSM_DATA_PTR RandomNumber )
	CSSM_RETURN  CSSM_GetAPIMemoryFunctions(CSSM_MODULE_HANDLE AddInHandle , CSSM_API_MEMORY_FUNCS_PTR AppMemoryFuncs )
	CSSM_RETURN  CSSM_GetContext(CSSM_CC_HANDLE CCHandle , CSSM_CONTEXT_PTR *Context )
	CSSM_RETURN  CSSM_GetContextAttribute(const CSSM_CONTEXT *Context , uint32 AttributeType , CSSM_CONTEXT_ATTRIBUTE_PTR *ContextAttribute )
	CSSM_RETURN  CSSM_GetKeyAcl(CSSM_CSP_HANDLE CSPHandle , const CSSM_KEY *Key , const CSSM_STRING *SelectionTag , uint32 *NumberOfAclInfos , CSSM_ACL_ENTRY_INFO_PTR *AclInfos )
	CSSM_RETURN  CSSM_GetKeyOwner(CSSM_CSP_HANDLE CSPHandle , const CSSM_KEY *Key , CSSM_ACL_OWNER_PROTOTYPE_PTR Owner )
	CSSM_RETURN  CSSM_GetModuleGUIDFromHandle(CSSM_MODULE_HANDLE ModuleHandle , CSSM_GUID_PTR ModuleGUID )
	CSSM_RETURN  CSSM_GetPrivilege(CSSM_PRIVILEGE *Privilege )
	CSSM_RETURN  CSSM_GetSubserviceUIDFromHandle(CSSM_MODULE_HANDLE ModuleHandle , CSSM_SUBSERVICE_UID_PTR SubserviceUID )
	CSSM_RETURN  CSSM_GetTimeValue(CSSM_CSP_HANDLE CSPHandle , CSSM_ALGORITHMS TimeAlgorithm , CSSM_DATA *TimeData )
	CSSM_RETURN  CSSM_Init(const CSSM_VERSION *Version , CSSM_PRIVILEGE_SCOPE Scope , const CSSM_GUID *CallerGuid , CSSM_KEY_HIERARCHY KeyHierarchy , CSSM_PVC_MODE *PvcPolicy , const void *Reserved )
	CSSM_RETURN  CSSM_Introduce(const CSSM_GUID *ModuleID , CSSM_KEY_HIERARCHY KeyHierarchy )
	CSSM_RETURN  CSSM_KR_CreateRecoveryEnablementContext(CSSM_KRSP_HANDLE KRSPHandle , const CSSM_KR_PROFILE *LocalProfile , const CSSM_KR_PROFILE *RemoteProfile , CSSM_CC_HANDLE *NewContext )
	CSSM_RETURN  CSSM_KR_CreateRecoveryRegistrationContext(CSSM_KRSP_HANDLE KRSPHandle , CSSM_CC_HANDLE *NewContext )
	CSSM_RETURN  CSSM_KR_CreateRecoveryRequestContext(CSSM_KRSP_HANDLE KRSPHandle , const CSSM_KR_PROFILE *LocalProfile , CSSM_CC_HANDLE *NewContext )
	CSSM_RETURN  CSSM_KR_GenerateRecoveryFields(CSSM_CC_HANDLE KeyRecoveryContext , CSSM_CC_HANDLE CCHandle , const CSSM_DATA *KRSPOptions , CSSM_KR_POLICY_FLAGS KRFlags , CSSM_DATA_PTR KRFields , CSSM_CC_HANDLE *NewCCHandle )
	CSSM_RETURN  CSSM_KR_GetPolicyInfo(CSSM_CC_HANDLE CCHandle , CSSM_KR_POLICY_FLAGS *EncryptionProhibited , uint32 *WorkFactor )
	CSSM_RETURN  CSSM_KR_GetRecoveredObject(CSSM_KRSP_HANDLE KRSPHandle , CSSM_HANDLE CacheHandle , uint32 IndexInResults , CSSM_CSP_HANDLE CSPHandle , const CSSM_RESOURCE_CONTROL_CONTEXT *CredAndAclEntry , uint32 Flags , CSSM_KEY_PTR RecoveredKey , CSSM_DATA_PTR OtherInfo )
	CSSM_RETURN  CSSM_KR_PassThrough(CSSM_KRSP_HANDLE KRSPHandle , CSSM_CC_HANDLE KeyRecoveryContext , CSSM_CC_HANDLE CryptoContext , uint32 PassThroughId , const void *InputParams , void **OutputParams )
	CSSM_RETURN  CSSM_KR_ProcessRecoveryFields(CSSM_CC_HANDLE KeyRecoveryContext , CSSM_CC_HANDLE CryptoContext , const CSSM_DATA *KRSPOptions , CSSM_KR_POLICY_FLAGS KRFlags , const CSSM_DATA *KRFields , CSSM_CC_HANDLE *NewCryptoContext )
	CSSM_RETURN  CSSM_KR_QueryPolicyInfo(CSSM_KRSP_HANDLE KRSPHandle , CSSM_ALGORITHMS AlgorithmID , CSSM_ENCRYPT_MODE Mode , CSSM_CONTEXT_TYPE Class , CSSM_KR_POLICY_INFO_PTR *PolicyInfoData )
	CSSM_RETURN  CSSM_KR_RecoveryRequest(CSSM_CC_HANDLE RecoveryRequestContext , const CSSM_DATA *KRInData , const CSSM_ACCESS_CREDENTIALS *AccessCredentials , sint32 *EstimatedTime , CSSM_HANDLE_PTR ReferenceHandle )
	CSSM_RETURN  CSSM_KR_RecoveryRequestAbort(CSSM_KRSP_HANDLE KRSPHandle , CSSM_HANDLE CacheHandle )
	CSSM_RETURN  CSSM_KR_RecoveryRetrieve(CSSM_KRSP_HANDLE KRSPHandle , CSSM_HANDLE ReferenceHandle , const CSSM_ACCESS_CREDENTIALS *AccessCredentials , sint32 *EstimatedTime , CSSM_HANDLE_PTR CacheHandle , uint32 *NumberOfRecoveredKeys )
	CSSM_RETURN  CSSM_KR_RegistrationRequest(CSSM_CC_HANDLE RecoveryRegistrationContext , const CSSM_DATA *KRInData , const CSSM_ACCESS_CREDENTIALS *AccessCredentials , CSSM_KR_POLICY_FLAGS KRFlags , sint32 *EstimatedTime , CSSM_HANDLE_PTR ReferenceHandle )
	CSSM_RETURN  CSSM_KR_RegistrationRetrieve(CSSM_KRSP_HANDLE KRSPHandle , CSSM_HANDLE ReferenceHandle , const CSSM_ACCESS_CREDENTIALS *AccessCredentials , sint32 *EstimatedTime , CSSM_KR_PROFILE_PTR KRProfile )
	CSSM_RETURN  CSSM_KR_SetEnterpriseRecoveryPolicy(const CSSM_DATA *RecoveryPolicyFileName , const CSSM_ACCESS_CREDENTIALS *OldPassPhrase , const CSSM_ACCESS_CREDENTIALS *NewPassPhrase )
	CSSM_RETURN  CSSM_ListAttachedModuleManagers(uint32 *NumberOfModuleManagers , CSSM_GUID_PTR ModuleManagerGuids )
	CSSM_RETURN  CSSM_ModuleAttach(const CSSM_GUID *ModuleGuid , const CSSM_VERSION *Version , const CSSM_API_MEMORY_FUNCS *MemoryFuncs , uint32 SubserviceID , CSSM_SERVICE_TYPE SubServiceType , CSSM_ATTACH_FLAGS AttachFlags , CSSM_KEY_HIERARCHY KeyHierarchy , CSSM_FUNC_NAME_ADDR *FunctionTable , uint32 NumFunctionTable , const void *Reserved , CSSM_MODULE_HANDLE_PTR NewModuleHandle )
	CSSM_RETURN  CSSM_ModuleDetach(CSSM_MODULE_HANDLE ModuleHandle )
	CSSM_RETURN  CSSM_ModuleLoad(const CSSM_GUID *ModuleGuid , CSSM_KEY_HIERARCHY KeyHierarchy , CSSM_API_ModuleEventHandler AppNotifyCallback , void *AppNotifyCallbackCtx )
	CSSM_RETURN  CSSM_ModuleUnload(const CSSM_GUID *ModuleGuid , CSSM_API_ModuleEventHandler AppNotifyCallback , void *AppNotifyCallbackCtx )
	CSSM_RETURN  CSSM_QueryKeySizeInBits(CSSM_CSP_HANDLE CSPHandle , CSSM_CC_HANDLE CCHandle , const CSSM_KEY *Key , CSSM_KEY_SIZE_PTR KeySize )
	CSSM_RETURN  CSSM_QuerySize(CSSM_CC_HANDLE CCHandle , CSSM_BOOL Encrypt , uint32 QuerySizeCount , CSSM_QUERY_SIZE_DATA_PTR DataBlockSizes )
	CSSM_RETURN  CSSM_RetrieveCounter(CSSM_CSP_HANDLE CSPHandle , CSSM_DATA_PTR Counter )
	CSSM_RETURN  CSSM_RetrieveUniqueId(CSSM_CSP_HANDLE CSPHandle , CSSM_DATA_PTR UniqueID )
	CSSM_RETURN  CSSM_SetContext(CSSM_CC_HANDLE CCHandle , const CSSM_CONTEXT *Context )
	CSSM_RETURN  CSSM_SetPrivilege(CSSM_PRIVILEGE Privilege )
	CSSM_RETURN  CSSM_SignData(CSSM_CC_HANDLE CCHandle , const CSSM_DATA *DataBufs , uint32 DataBufCount , CSSM_ALGORITHMS DigestAlgorithm , CSSM_DATA_PTR Signature )
	CSSM_RETURN  CSSM_SignDataFinal(CSSM_CC_HANDLE CCHandle , CSSM_DATA_PTR Signature )
	CSSM_RETURN  CSSM_SignDataInit(CSSM_CC_HANDLE CCHandle )
	CSSM_RETURN  CSSM_SignDataUpdate(CSSM_CC_HANDLE CCHandle , const CSSM_DATA *DataBufs , uint32 DataBufCount )
	CSSM_RETURN  CSSM_SPI_ModuleAttach(const CSSM_GUID *ModuleGuid , const CSSM_VERSION *Version , uint32 SubserviceID , CSSM_SERVICE_TYPE SubServiceType , CSSM_ATTACH_FLAGS AttachFlags , CSSM_MODULE_HANDLE ModuleHandle , CSSM_KEY_HIERARCHY KeyHierarchy , const CSSM_GUID *CssmGuid , const CSSM_GUID *ModuleManagerGuid , const CSSM_GUID *CallerGuid , const CSSM_UPCALLS *Upcalls , CSSM_MODULE_FUNCS_PTR *FuncTbl )
	CSSM_RETURN  CSSM_SPI_ModuleDetach(CSSM_MODULE_HANDLE ModuleHandle )
	CSSM_RETURN  CSSM_SPI_ModuleLoad(const CSSM_GUID *CssmGuid , const CSSM_GUID *ModuleGuid , CSSM_SPI_ModuleEventHandler CssmNotifyCallback , void *CssmNotifyCallbackCtx )
	CSSM_RETURN  CSSM_SPI_ModuleUnload(const CSSM_GUID *CssmGuid , const CSSM_GUID *ModuleGuid , CSSM_SPI_ModuleEventHandler CssmNotifyCallback , void *CssmNotifyCallbackCtx )
	CSSM_RETURN  CSSM_Terminate()
	CSSM_RETURN  CSSM_TP_ApplyCrlToDb(CSSM_TP_HANDLE TPHandle , CSSM_CL_HANDLE CLHandle , CSSM_CSP_HANDLE CSPHandle , const CSSM_ENCODED_CRL *CrlToBeApplied , const CSSM_CERTGROUP *SignerCertGroup , const CSSM_TP_VERIFY_CONTEXT *ApplyCrlVerifyContext , CSSM_TP_VERIFY_CONTEXT_RESULT_PTR ApplyCrlVerifyResult )
	CSSM_RETURN  CSSM_TP_CertCreateTemplate(CSSM_TP_HANDLE TPHandle , CSSM_CL_HANDLE CLHandle , uint32 NumberOfFields , const CSSM_FIELD *CertFields , CSSM_DATA_PTR CertTemplate )
	CSSM_RETURN  CSSM_TP_CertGetAllTemplateFields(CSSM_TP_HANDLE TPHandle , CSSM_CL_HANDLE CLHandle , const CSSM_DATA *CertTemplate , uint32 *NumberOfFields , CSSM_FIELD_PTR *CertFields )
	CSSM_RETURN  CSSM_TP_CertGroupConstruct(CSSM_TP_HANDLE TPHandle , CSSM_CL_HANDLE CLHandle , CSSM_CSP_HANDLE CSPHandle , const CSSM_DL_DB_LIST *DBList , const void *ConstructParams , const CSSM_CERTGROUP *CertGroupFrag , CSSM_CERTGROUP_PTR *CertGroup )
	CSSM_RETURN  CSSM_TP_CertGroupPrune(CSSM_TP_HANDLE TPHandle , CSSM_CL_HANDLE CLHandle , const CSSM_DL_DB_LIST *DBList , const CSSM_CERTGROUP *OrderedCertGroup , CSSM_CERTGROUP_PTR *PrunedCertGroup )
	CSSM_RETURN  CSSM_TP_CertGroupToTupleGroup(CSSM_TP_HANDLE TPHandle , CSSM_CL_HANDLE CLHandle , const CSSM_CERTGROUP *CertGroup , CSSM_TUPLEGROUP_PTR *TupleGroup )
	CSSM_RETURN  CSSM_TP_CertGroupVerify(CSSM_TP_HANDLE TPHandle , CSSM_CL_HANDLE CLHandle , CSSM_CSP_HANDLE CSPHandle , const CSSM_CERTGROUP *CertGroupToBeVerified , const CSSM_TP_VERIFY_CONTEXT *VerifyContext , CSSM_TP_VERIFY_CONTEXT_RESULT_PTR VerifyContextResult )
	CSSM_RETURN  CSSM_TP_CertReclaimAbort(CSSM_TP_HANDLE TPHandle , CSSM_LONG_HANDLE KeyCacheHandle )
	CSSM_RETURN  CSSM_TP_CertReclaimKey(CSSM_TP_HANDLE TPHandle , const CSSM_CERTGROUP *CertGroup , uint32 CertIndex , CSSM_LONG_HANDLE KeyCacheHandle , CSSM_CSP_HANDLE CSPHandle , const CSSM_RESOURCE_CONTROL_CONTEXT *CredAndAclEntry )
	CSSM_RETURN  CSSM_TP_CertRemoveFromCrlTemplate(CSSM_TP_HANDLE TPHandle , CSSM_CL_HANDLE CLHandle , CSSM_CSP_HANDLE CSPHandle , const CSSM_DATA *OldCrlTemplate , const CSSM_CERTGROUP *CertGroupToBeRemoved , const CSSM_CERTGROUP *RevokerCertGroup , const CSSM_TP_VERIFY_CONTEXT *RevokerVerifyContext , CSSM_TP_VERIFY_CONTEXT_RESULT_PTR RevokerVerifyResult , CSSM_DATA_PTR NewCrlTemplate )
	CSSM_RETURN  CSSM_TP_CertRevoke(CSSM_TP_HANDLE TPHandle , CSSM_CL_HANDLE CLHandle , CSSM_CSP_HANDLE CSPHandle , const CSSM_DATA *OldCrlTemplate , const CSSM_CERTGROUP *CertGroupToBeRevoked , const CSSM_CERTGROUP *RevokerCertGroup , const CSSM_TP_VERIFY_CONTEXT *RevokerVerifyContext , CSSM_TP_VERIFY_CONTEXT_RESULT_PTR RevokerVerifyResult , CSSM_TP_CERTCHANGE_REASON Reason , CSSM_DATA_PTR NewCrlTemplate )
	CSSM_RETURN  CSSM_TP_CertSign(CSSM_TP_HANDLE TPHandle , CSSM_CL_HANDLE CLHandle , CSSM_CC_HANDLE CCHandle , const CSSM_DATA *CertTemplateToBeSigned , const CSSM_CERTGROUP *SignerCertGroup , const CSSM_TP_VERIFY_CONTEXT *SignerVerifyContext , CSSM_TP_VERIFY_CONTEXT_RESULT_PTR SignerVerifyResult , CSSM_DATA_PTR SignedCert )
	CSSM_RETURN  CSSM_TP_ConfirmCredResult(CSSM_TP_HANDLE TPHandle , const CSSM_DATA *ReferenceIdentifier , const CSSM_TP_CALLERAUTH_CONTEXT *CallerAuthCredentials , const CSSM_TP_CONFIRM_RESPONSE *Responses , const CSSM_TP_AUTHORITY_ID *PreferredAuthority )
	CSSM_RETURN  CSSM_TP_CrlCreateTemplate(CSSM_TP_HANDLE TPHandle , CSSM_CL_HANDLE CLHandle , uint32 NumberOfFields , const CSSM_FIELD *CrlFields , CSSM_DATA_PTR NewCrlTemplate )
	CSSM_RETURN  CSSM_TP_CrlSign(CSSM_TP_HANDLE TPHandle , CSSM_CL_HANDLE CLHandle , CSSM_CC_HANDLE CCHandle , const CSSM_ENCODED_CRL *CrlToBeSigned , const CSSM_CERTGROUP *SignerCertGroup , const CSSM_TP_VERIFY_CONTEXT *SignerVerifyContext , CSSM_TP_VERIFY_CONTEXT_RESULT_PTR SignerVerifyResult , CSSM_DATA_PTR SignedCrl )
	CSSM_RETURN  CSSM_TP_CrlVerify(CSSM_TP_HANDLE TPHandle , CSSM_CL_HANDLE CLHandle , CSSM_CSP_HANDLE CSPHandle , const CSSM_ENCODED_CRL *CrlToBeVerified , const CSSM_CERTGROUP *SignerCertGroup , const CSSM_TP_VERIFY_CONTEXT *VerifyContext , CSSM_TP_VERIFY_CONTEXT_RESULT_PTR RevokerVerifyResult )
	CSSM_RETURN  CSSM_TP_FormRequest(CSSM_TP_HANDLE TPHandle , const CSSM_TP_AUTHORITY_ID *PreferredAuthority , CSSM_TP_FORM_TYPE FormType , CSSM_DATA_PTR BlankForm )
	CSSM_RETURN  CSSM_TP_FormSubmit(CSSM_TP_HANDLE TPHandle , CSSM_TP_FORM_TYPE FormType , const CSSM_DATA *Form , const CSSM_TP_AUTHORITY_ID *ClearanceAuthority , const CSSM_TP_AUTHORITY_ID *RepresentedAuthority , CSSM_ACCESS_CREDENTIALS_PTR Credentials )
	CSSM_RETURN  CSSM_TP_PassThrough(CSSM_TP_HANDLE TPHandle , CSSM_CL_HANDLE CLHandle , CSSM_CC_HANDLE CCHandle , const CSSM_DL_DB_LIST *DBList , uint32 PassThroughId , const void *InputParams , void **OutputParams )
	CSSM_RETURN  CSSM_TP_ReceiveConfirmation(CSSM_TP_HANDLE TPHandle , const CSSM_DATA *ReferenceIdentifier , CSSM_TP_CONFIRM_RESPONSE_PTR *Responses , sint32 *ElapsedTime )
	CSSM_RETURN  CSSM_TP_RetrieveCredResult(CSSM_TP_HANDLE TPHandle , const CSSM_DATA *ReferenceIdentifier , const CSSM_TP_CALLERAUTH_CONTEXT *CallerAuthCredentials , sint32 *EstimatedTime , CSSM_BOOL *ConfirmationRequired , CSSM_TP_RESULT_SET_PTR *RetrieveOutput )
	CSSM_RETURN  CSSM_TP_SubmitCredRequest(CSSM_TP_HANDLE TPHandle , const CSSM_TP_AUTHORITY_ID *PreferredAuthority , CSSM_TP_AUTHORITY_REQUEST_TYPE RequestType , const CSSM_TP_REQUEST_SET *RequestInput , const CSSM_TP_CALLERAUTH_CONTEXT *CallerAuthContext , sint32 *EstimatedTime , CSSM_DATA_PTR ReferenceIdentifier )
	CSSM_RETURN  CSSM_TP_TupleGroupToCertGroup(CSSM_TP_HANDLE TPHandle , CSSM_CL_HANDLE CLHandle , const CSSM_TUPLEGROUP *TupleGroup , CSSM_CERTGROUP_PTR *CertTemplates )
	CSSM_RETURN  CSSM_Unintroduce(const CSSM_GUID *ModuleID )
	CSSM_RETURN  CSSM_UnwrapKey(CSSM_CC_HANDLE CCHandle , const CSSM_KEY *PublicKey , const CSSM_WRAP_KEY *WrappedKey , uint32 KeyUsage , uint32 KeyAttr , const CSSM_DATA *KeyLabel , const CSSM_RESOURCE_CONTROL_CONTEXT *CredAndAclEntry , CSSM_KEY_PTR UnwrappedKey , CSSM_DATA_PTR DescriptiveData )
	CSSM_RETURN  CSSM_UnwrapKeyP(CSSM_CC_HANDLE CCHandle , const CSSM_KEY *PublicKey , const CSSM_WRAP_KEY *WrappedKey , uint32 KeyUsage , uint32 KeyAttr , const CSSM_DATA *KeyLabel , const CSSM_RESOURCE_CONTROL_CONTEXT *CredAndAclEntry , CSSM_KEY_PTR UnwrappedKey , CSSM_DATA_PTR DescriptiveData , CSSM_PRIVILEGE Privilege )
	CSSM_RETURN  CSSM_UpdateContextAttributes(CSSM_CC_HANDLE CCHandle , uint32 NumberOfAttributes , const CSSM_CONTEXT_ATTRIBUTE *ContextAttributes )
	CSSM_RETURN  CSSM_VerifyData(CSSM_CC_HANDLE CCHandle , const CSSM_DATA *DataBufs , uint32 DataBufCount , CSSM_ALGORITHMS DigestAlgorithm , const CSSM_DATA *Signature )
	CSSM_RETURN  CSSM_VerifyDataFinal(CSSM_CC_HANDLE CCHandle , const CSSM_DATA *Signature )
	CSSM_RETURN  CSSM_VerifyDataInit(CSSM_CC_HANDLE CCHandle )
	CSSM_RETURN  CSSM_VerifyDataUpdate(CSSM_CC_HANDLE CCHandle , const CSSM_DATA *DataBufs , uint32 DataBufCount )
	CSSM_RETURN  CSSM_VerifyDevice(CSSM_CSP_HANDLE CSPHandle , const CSSM_DATA *DeviceCert )
	CSSM_RETURN  CSSM_VerifyMac(CSSM_CC_HANDLE CCHandle , const CSSM_DATA *DataBufs , uint32 DataBufCount , const CSSM_DATA *Mac )
	CSSM_RETURN  CSSM_VerifyMacFinal(CSSM_CC_HANDLE CCHandle , const CSSM_DATA *Mac )
	CSSM_RETURN  CSSM_VerifyMacInit(CSSM_CC_HANDLE CCHandle )
	CSSM_RETURN  CSSM_VerifyMacUpdate(CSSM_CC_HANDLE CCHandle , const CSSM_DATA *DataBufs , uint32 DataBufCount )
	CSSM_RETURN  CSSM_WrapKey(CSSM_CC_HANDLE CCHandle , const CSSM_ACCESS_CREDENTIALS *AccessCred , const CSSM_KEY *Key , const CSSM_DATA *DescriptiveData , CSSM_WRAP_KEY_PTR WrappedKey )
	CSSM_RETURN  CSSM_WrapKeyP(CSSM_CC_HANDLE CCHandle , const CSSM_ACCESS_CREDENTIALS *AccessCred , const CSSM_KEY *Key , const CSSM_DATA *DescriptiveData , CSSM_WRAP_KEY_PTR WrappedKey , CSSM_PRIVILEGE Privilege )
	const CSSM_OID *  cssmAlgToOid(CSSM_ALGORITHMS algId )
	bool  cssmOidToAlg(const CSSM_OID *oid , CSSM_ALGORITHMS *alg )
	void  cssmPerror(const char *how , CSSM_RETURN error )
	char *  ctermid(char * )
	char *  ctermid_r(char * )
	CFArrayRef  CTFontCollectionCopyExclusionDescriptors(CTFontCollectionRef collection )
	CFArrayRef  CTFontCollectionCopyFontAttribute(CTFontCollectionRef collection , CFStringRef attributeName , CTFontCollectionCopyOptions options )
	CFArrayRef  CTFontCollectionCopyFontAttributes(CTFontCollectionRef collection , CFSetRef attributeNames , CTFontCollectionCopyOptions options )
	CFArrayRef  CTFontCollectionCopyQueryDescriptors(CTFontCollectionRef collection )
	CTFontCollectionRef  CTFontCollectionCreateCopyWithFontDescriptors(CTFontCollectionRef original , CFArrayRef queryDescriptors , CFDictionaryRef options )
	CTFontCollectionRef  CTFontCollectionCreateFromAvailableFonts(CFDictionaryRef options )
	CFArrayRef  CTFontCollectionCreateMatchingFontDescriptors(CTFontCollectionRef collection )
	CFArrayRef  CTFontCollectionCreateMatchingFontDescriptorsForFamily(CTFontCollectionRef collection , CFStringRef familyName , CFDictionaryRef options )
	CFArrayRef  CTFontCollectionCreateMatchingFontDescriptorsSortedWithCallback(CTFontCollectionRef collection , CTFontCollectionSortDescriptorsCallback sortCallback , void *refCon )
	CFArrayRef  CTFontCollectionCreateMatchingFontDescriptorsWithOptions(CTFontCollectionRef collection , CFDictionaryRef options )
	CTMutableFontCollectionRef  CTFontCollectionCreateMutableCopy(CTFontCollectionRef original )
	CTFontCollectionRef  CTFontCollectionCreateWithFontDescriptors(CFArrayRef queryDescriptors , CFDictionaryRef options )
	CFTypeID  CTFontCollectionGetTypeID()
	void  CTFontCollectionSetExclusionDescriptors(CTMutableFontCollectionRef collection , CFArrayRef descriptors )
	void  CTFontCollectionSetQueryDescriptors(CTMutableFontCollectionRef collection , CFArrayRef descriptors )
	CFTypeRef  CTFontCopyAttribute(CTFontRef font , CFStringRef attribute )
	CFArrayRef  CTFontCopyAvailableTables(CTFontRef font , CTFontTableOptions options )
	CFCharacterSetRef  CTFontCopyCharacterSet(CTFontRef font )
	CFArrayRef  CTFontCopyDefaultCascadeListForLanguages(CTFontRef font , CFArrayRef languagePrefList )
	CFStringRef  CTFontCopyDisplayName(CTFontRef font )
	CFStringRef  CTFontCopyFamilyName(CTFontRef font )
	CFArrayRef  CTFontCopyFeatures(CTFontRef font )
	CFArrayRef  CTFontCopyFeatureSettings(CTFontRef font )
	CTFontDescriptorRef  CTFontCopyFontDescriptor(CTFontRef font )
	CFStringRef  CTFontCopyFullName(CTFontRef font )
	CGFontRef  CTFontCopyGraphicsFont(CTFontRef font , CTFontDescriptorRef *attributes )
	CFStringRef  CTFontCopyLocalizedName(CTFontRef font , CFStringRef nameKey , CFStringRef *language )
	CFStringRef  CTFontCopyName(CTFontRef font , CFStringRef nameKey )
	CFStringRef  CTFontCopyPostScriptName(CTFontRef font )
	CFArrayRef  CTFontCopySupportedLanguages(CTFontRef font )
	CFDataRef  CTFontCopyTable(CTFontRef font , CTFontTableTag table , CTFontTableOptions options )
	CFDictionaryRef  CTFontCopyTraits(CTFontRef font )
	CFDictionaryRef  CTFontCopyVariation(CTFontRef font )
	CFArrayRef  CTFontCopyVariationAxes(CTFontRef font )
	CTFontRef  CTFontCreateCopyWithAttributes(CTFontRef font , CGFloat size , const CGAffineTransform *matrix , CTFontDescriptorRef attributes )
	CTFontRef  CTFontCreateCopyWithFamily(CTFontRef font , CGFloat size , const CGAffineTransform *matrix , CFStringRef family )
	CTFontRef  CTFontCreateCopyWithSymbolicTraits(CTFontRef font , CGFloat size , const CGAffineTransform *matrix , CTFontSymbolicTraits symTraitValue , CTFontSymbolicTraits symTraitMask )
	CTFontRef  CTFontCreateForString(CTFontRef currentFont , CFStringRef string , CFRange range )
	CGPathRef  CTFontCreatePathForGlyph(CTFontRef font , CGGlyph glyph , const CGAffineTransform *transform )
	CTFontRef  CTFontCreateUIFontForLanguage(CTFontUIFontType uiType , CGFloat size , CFStringRef language )
	CTFontRef  CTFontCreateWithFontDescriptor(CTFontDescriptorRef descriptor , CGFloat size , const CGAffineTransform *matrix )
	CTFontRef  CTFontCreateWithFontDescriptorAndOptions(CTFontDescriptorRef descriptor , CGFloat size , const CGAffineTransform *matrix , CTFontOptions options )
	CTFontRef  CTFontCreateWithGraphicsFont(CGFontRef graphicsFont , CGFloat size , const CGAffineTransform *matrix , CTFontDescriptorRef attributes )
	CTFontRef  CTFontCreateWithName(CFStringRef name , CGFloat size , const CGAffineTransform *matrix )
	CTFontRef  CTFontCreateWithNameAndOptions(CFStringRef name , CGFloat size , const CGAffineTransform *matrix , CTFontOptions options )
	CTFontRef  CTFontCreateWithPlatformFont(ATSFontRef platformFont , CGFloat size , const CGAffineTransform *matrix , CTFontDescriptorRef attributes )
	CTFontRef  CTFontCreateWithQuickdrawInstance(ConstStr255Param name , int16_t identifier , uint8_t style , CGFloat size )
	CFTypeRef  CTFontDescriptorCopyAttribute(CTFontDescriptorRef descriptor , CFStringRef attribute )
	CFDictionaryRef  CTFontDescriptorCopyAttributes(CTFontDescriptorRef descriptor )
	CFTypeRef  CTFontDescriptorCopyLocalizedAttribute(CTFontDescriptorRef descriptor , CFStringRef attribute , CFStringRef *language )
	CTFontDescriptorRef  CTFontDescriptorCreateCopyWithAttributes(CTFontDescriptorRef original , CFDictionaryRef attributes )
	CTFontDescriptorRef  CTFontDescriptorCreateCopyWithFeature(CTFontDescriptorRef original , CFNumberRef featureTypeIdentifier , CFNumberRef featureSelectorIdentifier )
	CTFontDescriptorRef  CTFontDescriptorCreateCopyWithVariation(CTFontDescriptorRef original , CFNumberRef variationIdentifier , CGFloat variationValue )
	CTFontDescriptorRef  CTFontDescriptorCreateMatchingFontDescriptor(CTFontDescriptorRef descriptor , CFSetRef mandatoryAttributes )
	CFArrayRef  CTFontDescriptorCreateMatchingFontDescriptors(CTFontDescriptorRef descriptor , CFSetRef mandatoryAttributes )
	CTFontDescriptorRef  CTFontDescriptorCreateWithAttributes(CFDictionaryRef attributes )
	CTFontDescriptorRef  CTFontDescriptorCreateWithNameAndSize(CFStringRef name , CGFloat size )
	CFTypeID  CTFontDescriptorGetTypeID()
	void  CTFontDrawGlyphs(CTFontRef font , const CGGlyph *glyphs , const CGPoint *positions , size_t count , CGContextRef context )
	double  CTFontGetAdvancesForGlyphs(CTFontRef font , CTFontOrientation orientation , const CGGlyph *glyphs , CGSize *advances , CFIndex count )
	CGFloat  CTFontGetAscent(CTFontRef font )
	CGRect  CTFontGetBoundingBox(CTFontRef font )
	CGRect  CTFontGetBoundingRectsForGlyphs(CTFontRef font , CTFontOrientation orientation , const CGGlyph *glyphs , CGRect *boundingRects , CFIndex count )
	CGFloat  CTFontGetCapHeight(CTFontRef font )
	CGFloat  CTFontGetDescent(CTFontRef font )
	CFIndex  CTFontGetGlyphCount(CTFontRef font )
	bool  CTFontGetGlyphsForCharacters(CTFontRef font , const UniChar *characters , CGGlyph *glyphs , CFIndex count )
	CGGlyph  CTFontGetGlyphWithName(CTFontRef font , CFStringRef glyphName )
	CGFloat  CTFontGetLeading(CTFontRef font )
	CFIndex  CTFontGetLigatureCaretPositions(CTFontRef font , CGGlyph glyph , CGFloat *positions , CFIndex maxPositions )
	CGAffineTransform  CTFontGetMatrix(CTFontRef font )
	CGRect  CTFontGetOpticalBoundsForGlyphs(CTFontRef font , const CGGlyph *glyphs , CGRect *boundingRects , CFIndex count , CFOptionFlags options )
	ATSFontRef  CTFontGetPlatformFont(CTFontRef font , CTFontDescriptorRef *attributes )
	CGFloat  CTFontGetSize(CTFontRef font )
	CGFloat  CTFontGetSlantAngle(CTFontRef font )
	CFStringEncoding  CTFontGetStringEncoding(CTFontRef font )
	CTFontSymbolicTraits  CTFontGetSymbolicTraits(CTFontRef font )
	CFTypeID  CTFontGetTypeID()
	CGFloat  CTFontGetUnderlinePosition(CTFontRef font )
	CGFloat  CTFontGetUnderlineThickness(CTFontRef font )
	unsigned int  CTFontGetUnitsPerEm(CTFontRef font )
	void  CTFontGetVerticalTranslationsForGlyphs(CTFontRef font , const CGGlyph *glyphs , CGSize *translations , CFIndex count )
	CGFloat  CTFontGetXHeight(CTFontRef font )
	CFComparisonResult  CTFontManagerCompareFontFamilyNames(const void *family1 , const void *family2 , void *context )
	CFArrayRef  CTFontManagerCopyAvailableFontFamilyNames()
	CFArrayRef  CTFontManagerCopyAvailableFontURLs()
	CFArrayRef  CTFontManagerCopyAvailablePostScriptNames()
	CTFontDescriptorRef  CTFontManagerCreateFontDescriptorFromData(CFDataRef data )
	CFArrayRef  CTFontManagerCreateFontDescriptorsFromURL(CFURLRef fileURL )
	CFRunLoopSourceRef  CTFontManagerCreateFontRequestRunLoopSource(CFIndex sourceOrder , ^CFArrayRef(CFDictionaryRef requestAttributes, pid_t requestingProcess)createMatchesCallback )
	void  CTFontManagerEnableFontDescriptors(CFArrayRef descriptors , bool enable )
	CTFontManagerAutoActivationSetting  CTFontManagerGetAutoActivationSetting(CFStringRef bundleIdentifier )
	CTFontManagerScope  CTFontManagerGetScopeForURL(CFURLRef fontURL )
	bool  CTFontManagerIsSupportedFont(CFURLRef fontURL )
	bool  CTFontManagerRegisterFontsForURL(CFURLRef fontURL , CTFontManagerScope scope , CFErrorRef *error )
	bool  CTFontManagerRegisterFontsForURLs(CFArrayRef fontURLs , CTFontManagerScope scope , CFArrayRef *errors )
	bool  CTFontManagerRegisterGraphicsFont(CGFontRef font , CFErrorRef *error )
	void  CTFontManagerSetAutoActivationSetting(CFStringRef bundleIdentifier , CTFontManagerAutoActivationSetting setting )
	bool  CTFontManagerUnregisterFontsForURL(CFURLRef fontURL , CTFontManagerScope scope , CFErrorRef *error )
	bool  CTFontManagerUnregisterFontsForURLs(CFArrayRef fontURLs , CTFontManagerScope scope , CFArrayRef *errors )
	bool  CTFontManagerUnregisterGraphicsFont(CGFontRef font , CFErrorRef *error )
	void  CTFrameDraw(CTFrameRef frame , CGContextRef context )
	CFDictionaryRef  CTFrameGetFrameAttributes(CTFrameRef frame )
	void  CTFrameGetLineOrigins(CTFrameRef frame , CFRange range , CGPoint *origins )
	CFArrayRef  CTFrameGetLines(CTFrameRef frame )
	CGPathRef  CTFrameGetPath(CTFrameRef frame )
	CFRange  CTFrameGetStringRange(CTFrameRef frame )
	CFTypeID  CTFrameGetTypeID()
	CFRange  CTFrameGetVisibleStringRange(CTFrameRef frame )
	CTFrameRef  CTFramesetterCreateFrame(CTFramesetterRef framesetter , CFRange stringRange , CGPathRef path , CFDictionaryRef frameAttributes )
	CTFramesetterRef  CTFramesetterCreateWithAttributedString(CFAttributedStringRef string )
	CFTypeID  CTFramesetterGetTypeID()
	CTTypesetterRef  CTFramesetterGetTypesetter(CTFramesetterRef framesetter )
	CGSize  CTFramesetterSuggestFrameSizeWithConstraints(CTFramesetterRef framesetter , CFRange stringRange , CFDictionaryRef frameAttributes , CGSize constraints , CFRange *fitRange )
	uint32_t  CTGetCoreTextVersion()
	CTGlyphInfoRef  CTGlyphInfoCreateWithCharacterIdentifier(CGFontIndex cid , CTCharacterCollection collection , CFStringRef baseString )
	CTGlyphInfoRef  CTGlyphInfoCreateWithGlyph(CGGlyph glyph , CTFontRef font , CFStringRef baseString )
	CTGlyphInfoRef  CTGlyphInfoCreateWithGlyphName(CFStringRef glyphName , CTFontRef font , CFStringRef baseString )
	CTCharacterCollection  CTGlyphInfoGetCharacterCollection(CTGlyphInfoRef glyphInfo )
	CGFontIndex  CTGlyphInfoGetCharacterIdentifier(CTGlyphInfoRef glyphInfo )
	CFStringRef  CTGlyphInfoGetGlyphName(CTGlyphInfoRef glyphInfo )
	CFTypeID  CTGlyphInfoGetTypeID()
	char *  ctime(const time_t * )
	char *  ctime_r(const time_t * , char * )
	CTLineRef  CTLineCreateJustifiedLine(CTLineRef line , CGFloat justificationFactor , double justificationWidth )
	CTLineRef  CTLineCreateTruncatedLine(CTLineRef line , double width , CTLineTruncationType truncationType , CTLineRef truncationToken )
	CTLineRef  CTLineCreateWithAttributedString(CFAttributedStringRef string )
	void  CTLineDraw(CTLineRef line , CGContextRef context )
	CGRect  CTLineGetBoundsWithOptions(CTLineRef line , CTLineBoundsOptions options )
	CFIndex  CTLineGetGlyphCount(CTLineRef line )
	CFArrayRef  CTLineGetGlyphRuns(CTLineRef line )
	CGRect  CTLineGetImageBounds(CTLineRef line , CGContextRef context )
	CGFloat  CTLineGetOffsetForStringIndex(CTLineRef line , CFIndex charIndex , CGFloat *secondaryOffset )
	double  CTLineGetPenOffsetForFlush(CTLineRef line , CGFloat flushFactor , double flushWidth )
	CFIndex  CTLineGetStringIndexForPosition(CTLineRef line , CGPoint position )
	CFRange  CTLineGetStringRange(CTLineRef line )
	double  CTLineGetTrailingWhitespaceWidth(CTLineRef line )
	CFTypeID  CTLineGetTypeID()
	double  CTLineGetTypographicBounds(CTLineRef line , CGFloat *ascent , CGFloat *descent , CGFloat *leading )
	CTParagraphStyleRef  CTParagraphStyleCreate(const CTParagraphStyleSetting *settings , size_t settingCount )
	CTParagraphStyleRef  CTParagraphStyleCreateCopy(CTParagraphStyleRef paragraphStyle )
	CFTypeID  CTParagraphStyleGetTypeID()
	bool  CTParagraphStyleGetValueForSpecifier(CTParagraphStyleRef paragraphStyle , CTParagraphStyleSpecifier spec , size_t valueBufferSize , void *valueBuffer )
	void  CTRunDraw(CTRunRef run , CGContextRef context , CFRange range )
	void  CTRunGetAdvances(CTRunRef run , CFRange range , CGSize *buffer )
	const CGSize *  CTRunGetAdvancesPtr(CTRunRef run )
	CFDictionaryRef  CTRunGetAttributes(CTRunRef run )
	CFIndex  CTRunGetGlyphCount(CTRunRef run )
	void  CTRunGetGlyphs(CTRunRef run , CFRange range , CGGlyph *buffer )
	const CGGlyph *  CTRunGetGlyphsPtr(CTRunRef run )
	CGRect  CTRunGetImageBounds(CTRunRef run , CGContextRef context , CFRange range )
	void  CTRunGetPositions(CTRunRef run , CFRange range , CGPoint *buffer )
	const CGPoint *  CTRunGetPositionsPtr(CTRunRef run )
	CTRunStatus  CTRunGetStatus(CTRunRef run )
	void  CTRunGetStringIndices(CTRunRef run , CFRange range , CFIndex *buffer )
	const CFIndex *  CTRunGetStringIndicesPtr(CTRunRef run )
	CFRange  CTRunGetStringRange(CTRunRef run )
	CGAffineTransform  CTRunGetTextMatrix(CTRunRef run )
	CFTypeID  CTRunGetTypeID()
	double  CTRunGetTypographicBounds(CTRunRef run , CFRange range , CGFloat *ascent , CGFloat *descent , CGFloat *leading )
	CTTextTabRef  CTTextTabCreate(CTTextAlignment alignment , double location , CFDictionaryRef options )
	CTTextAlignment  CTTextTabGetAlignment(CTTextTabRef tab )
	double  CTTextTabGetLocation(CTTextTabRef tab )
	CFDictionaryRef  CTTextTabGetOptions(CTTextTabRef tab )
	CFTypeID  CTTextTabGetTypeID()
	CTLineRef  CTTypesetterCreateLine(CTTypesetterRef typesetter , CFRange stringRange )
	CTLineRef  CTTypesetterCreateLineWithOffset(CTTypesetterRef typesetter , CFRange stringRange , double offset )
	CTTypesetterRef  CTTypesetterCreateWithAttributedString(CFAttributedStringRef string )
	CTTypesetterRef  CTTypesetterCreateWithAttributedStringAndOptions(CFAttributedStringRef string , CFDictionaryRef options )
	CFTypeID  CTTypesetterGetTypeID()
	CFIndex  CTTypesetterSuggestClusterBreak(CTTypesetterRef typesetter , CFIndex startIndex , double width )
	CFIndex  CTTypesetterSuggestClusterBreakWithOffset(CTTypesetterRef typesetter , CFIndex startIndex , double width , double offset )
	CFIndex  CTTypesetterSuggestLineBreak(CTTypesetterRef typesetter , CFIndex startIndex , double width )
	CFIndex  CTTypesetterSuggestLineBreakWithOffset(CTTypesetterRef typesetter , CFIndex startIndex , double width , double offset )
	short  CurrentProcessorSpeed()
	ResFileRefNum  CurResFile()
	CFTypeRef  CVBufferGetAttachment(CVBufferRef buffer , CFStringRef key , CVAttachmentMode *attachmentMode )
	CFDictionaryRef  CVBufferGetAttachments(CVBufferRef buffer , CVAttachmentMode attachmentMode )
	void  CVBufferPropagateAttachments(CVBufferRef sourceBuffer , CVBufferRef destinationBuffer )
	void  CVBufferRelease(CVBufferRef buffer )
	void  CVBufferRemoveAllAttachments(CVBufferRef buffer )
	void  CVBufferRemoveAttachment(CVBufferRef buffer , CFStringRef key )
	CVBufferRef  CVBufferRetain(CVBufferRef buffer )
	void  CVBufferSetAttachment(CVBufferRef buffer , CFStringRef key , CFTypeRef value , CVAttachmentMode attachmentMode )
	void  CVBufferSetAttachments(CVBufferRef buffer , CFDictionaryRef theAttachments , CVAttachmentMode attachmentMode )
	CVReturn  CVDisplayLinkCreateWithActiveCGDisplays(CVDisplayLinkRef *displayLinkOut )
	CVReturn  CVDisplayLinkCreateWithCGDisplay(CGDirectDisplayID displayID , CVDisplayLinkRef *displayLinkOut )
	CVReturn  CVDisplayLinkCreateWithCGDisplays(CGDirectDisplayID *displayArray , CFIndex count , CVDisplayLinkRef *displayLinkOut )
	CVReturn  CVDisplayLinkCreateWithOpenGLDisplayMask(CGOpenGLDisplayMask mask , CVDisplayLinkRef *displayLinkOut )
	double  CVDisplayLinkGetActualOutputVideoRefreshPeriod(CVDisplayLinkRef displayLink )
	CGDirectDisplayID  CVDisplayLinkGetCurrentCGDisplay(CVDisplayLinkRef displayLink )
	CVReturn  CVDisplayLinkGetCurrentTime(CVDisplayLinkRef displayLink , CVTimeStamp *outTime )
	CVTime  CVDisplayLinkGetNominalOutputVideoRefreshPeriod(CVDisplayLinkRef displayLink )
	CVTime  CVDisplayLinkGetOutputVideoLatency(CVDisplayLinkRef displayLink )
	CFTypeID  CVDisplayLinkGetTypeID()
	Boolean  CVDisplayLinkIsRunning(CVDisplayLinkRef displayLink )
	void  CVDisplayLinkRelease(CVDisplayLinkRef displayLink )
	CVDisplayLinkRef  CVDisplayLinkRetain(CVDisplayLinkRef displayLink )
	CVReturn  CVDisplayLinkSetCurrentCGDisplay(CVDisplayLinkRef displayLink , CGDirectDisplayID displayID )
	CVReturn  CVDisplayLinkSetCurrentCGDisplayFromOpenGLContext(CVDisplayLinkRef displayLink , CGLContextObj cglContext , CGLPixelFormatObj cglPixelFormat )
	CVReturn  CVDisplayLinkSetOutputCallback(CVDisplayLinkRef displayLink , CVDisplayLinkOutputCallback callback , void *userInfo )
	CVReturn  CVDisplayLinkStart(CVDisplayLinkRef displayLink )
	CVReturn  CVDisplayLinkStop(CVDisplayLinkRef displayLink )
	CVReturn  CVDisplayLinkTranslateTime(CVDisplayLinkRef displayLink , const CVTimeStamp *inTime , CVTimeStamp *outTime )
	uint64_t  CVGetCurrentHostTime()
	double  CVGetHostClockFrequency()
	uint32_t  CVGetHostClockMinimumTimeDelta()
	CGColorSpaceRef  CVImageBufferCreateColorSpaceFromAttachments(CFDictionaryRef attachments )
	CGRect  CVImageBufferGetCleanRect(CVImageBufferRef imageBuffer )
	CGColorSpaceRef  CVImageBufferGetColorSpace(CVImageBufferRef imageBuffer )
	CGSize  CVImageBufferGetDisplaySize(CVImageBufferRef imageBuffer )
	CGSize  CVImageBufferGetEncodedSize(CVImageBufferRef imageBuffer )
	Boolean  CVImageBufferIsFlipped(CVImageBufferRef imageBuffer )
	CVReturn  CVOpenGLBufferAttach(CVOpenGLBufferRef openGLBuffer , CGLContextObj cglContext , GLenum face , GLint level , GLint screen )
	CVReturn  CVOpenGLBufferCreate(CFAllocatorRef allocator , size_t width , size_t height , CFDictionaryRef attributes , CVOpenGLBufferRef *bufferOut )
	CFDictionaryRef  CVOpenGLBufferGetAttributes(CVOpenGLBufferRef openGLBuffer )
	CFTypeID  CVOpenGLBufferGetTypeID()
	CVReturn  CVOpenGLBufferPoolCreate(CFAllocatorRef allocator , CFDictionaryRef poolAttributes , CFDictionaryRef openGLBufferAttributes , CVOpenGLBufferPoolRef *poolOut )
	CVReturn  CVOpenGLBufferPoolCreateOpenGLBuffer(CFAllocatorRef allocator , CVOpenGLBufferPoolRef openGLBufferPool , CVOpenGLBufferRef *openGLBufferOut )
	CFDictionaryRef  CVOpenGLBufferPoolGetAttributes(CVOpenGLBufferPoolRef pool )
	CFDictionaryRef  CVOpenGLBufferPoolGetOpenGLBufferAttributes(CVOpenGLBufferPoolRef pool )
	CFTypeID  CVOpenGLBufferPoolGetTypeID()
	void  CVOpenGLBufferPoolRelease(CVOpenGLBufferPoolRef openGLBufferPool )
	CVOpenGLBufferPoolRef  CVOpenGLBufferPoolRetain(CVOpenGLBufferPoolRef openGLBufferPool )
	void  CVOpenGLBufferRelease(CVOpenGLBufferRef buffer )
	CVOpenGLBufferRef  CVOpenGLBufferRetain(CVOpenGLBufferRef buffer )
	CVReturn  CVOpenGLTextureCacheCreate(CFAllocatorRef allocator , CFDictionaryRef cacheAttributes , CGLContextObj cglContext , CGLPixelFormatObj cglPixelFormat , CFDictionaryRef textureAttributes , CVOpenGLTextureCacheRef *cacheOut )
	CVReturn  CVOpenGLTextureCacheCreateTextureFromImage(CFAllocatorRef allocator , CVOpenGLTextureCacheRef textureCache , CVImageBufferRef sourceImage , CFDictionaryRef attributes , CVOpenGLTextureRef *textureOut )
	void  CVOpenGLTextureCacheFlush(CVOpenGLTextureCacheRef textureCache , CVOptionFlags options )
	CFTypeID  CVOpenGLTextureCacheGetTypeID()
	void  CVOpenGLTextureCacheRelease(CVOpenGLTextureCacheRef textureCache )
	CVOpenGLTextureCacheRef  CVOpenGLTextureCacheRetain(CVOpenGLTextureCacheRef textureCache )
	void  CVOpenGLTextureGetCleanTexCoords(CVOpenGLTextureRef image , GLfloat *lowerLeft , GLfloat *lowerRight , GLfloat *upperRight , GLfloat *upperLeft )
	GLuint  CVOpenGLTextureGetName(CVOpenGLTextureRef image )
	GLenum  CVOpenGLTextureGetTarget(CVOpenGLTextureRef image )
	CFTypeID  CVOpenGLTextureGetTypeID()
	Boolean  CVOpenGLTextureIsFlipped(CVOpenGLTextureRef image )
	void  CVOpenGLTextureRelease(CVOpenGLTextureRef texture )
	CVOpenGLTextureRef  CVOpenGLTextureRetain(CVOpenGLTextureRef texture )
	CVReturn  CVPixelBufferCreate(CFAllocatorRef allocator , size_t width , size_t height , OSType pixelFormatType , CFDictionaryRef pixelBufferAttributes , CVPixelBufferRef *pixelBufferOut )
	CVReturn  CVPixelBufferCreateResolvedAttributesDictionary(CFAllocatorRef allocator , CFArrayRef attributes , CFDictionaryRef *resolvedDictionaryOut )
	CVReturn  CVPixelBufferCreateWithBytes(CFAllocatorRef allocator , size_t width , size_t height , OSType pixelFormatType , void *baseAddress , size_t bytesPerRow , CVPixelBufferReleaseBytesCallback releaseCallback , void *releaseRefCon , CFDictionaryRef pixelBufferAttributes , CVPixelBufferRef *pixelBufferOut )
	CVReturn  CVPixelBufferCreateWithIOSurface(CFAllocatorRef allocator , IOSurfaceRef surface , CFDictionaryRef pixelBufferAttributes , CVPixelBufferRef *pixelBufferOut )
	CVReturn  CVPixelBufferCreateWithPlanarBytes(CFAllocatorRef allocator , size_t width , size_t height , OSType pixelFormatType , void *dataPtr , size_t dataSize , size_t numberOfPlanes , void **planeBaseAddress , size_t *planeWidth , size_t *planeHeight , size_t *planeBytesPerRow , CVPixelBufferReleasePlanarBytesCallback releaseCallback , void *releaseRefCon , CFDictionaryRef pixelBufferAttributes , CVPixelBufferRef *pixelBufferOut )
	CVReturn  CVPixelBufferFillExtendedPixels(CVPixelBufferRef pixelBuffer )
	void *  CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer )
	void *  CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer , size_t planeIndex )
	size_t  CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer )
	size_t  CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer , size_t planeIndex )
	size_t  CVPixelBufferGetDataSize(CVPixelBufferRef pixelBuffer )
	void  CVPixelBufferGetExtendedPixels(CVPixelBufferRef pixelBuffer , size_t *extraColumnsOnLeft , size_t *extraColumnsOnRight , size_t *extraRowsOnTop , size_t *extraRowsOnBottom )
	size_t  CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer )
	size_t  CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer , size_t planeIndex )
	IOSurfaceRef  CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer )
	OSType  CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer )
	size_t  CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer )
	CFTypeID  CVPixelBufferGetTypeID()
	size_t  CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer )
	size_t  CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer , size_t planeIndex )
	Boolean  CVPixelBufferIsPlanar(CVPixelBufferRef pixelBuffer )
	CVReturn  CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer , CVOptionFlags lockFlags )
	CVReturn  CVPixelBufferPoolCreate(CFAllocatorRef allocator , CFDictionaryRef poolAttributes , CFDictionaryRef pixelBufferAttributes , CVPixelBufferPoolRef *poolOut )
	CVReturn  CVPixelBufferPoolCreatePixelBuffer(CFAllocatorRef allocator , CVPixelBufferPoolRef pixelBufferPool , CVPixelBufferRef *pixelBufferOut )
	CVReturn  CVPixelBufferPoolCreatePixelBufferWithAuxAttributes(CFAllocatorRef allocator , CVPixelBufferPoolRef pixelBufferPool , CFDictionaryRef auxAttributes , CVPixelBufferRef *pixelBufferOut )
	CFDictionaryRef  CVPixelBufferPoolGetAttributes(CVPixelBufferPoolRef pool )
	CFDictionaryRef  CVPixelBufferPoolGetPixelBufferAttributes(CVPixelBufferPoolRef pool )
	CFTypeID  CVPixelBufferPoolGetTypeID()
	void  CVPixelBufferPoolRelease(CVPixelBufferPoolRef pixelBufferPool )
	CVPixelBufferPoolRef  CVPixelBufferPoolRetain(CVPixelBufferPoolRef pixelBufferPool )
	void  CVPixelBufferRelease(CVPixelBufferRef texture )
	CVPixelBufferRef  CVPixelBufferRetain(CVPixelBufferRef texture )
	CVReturn  CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer , CVOptionFlags unlockFlags )
	CFArrayRef  CVPixelFormatDescriptionArrayCreateWithAllPixelFormatTypes(CFAllocatorRef allocator )
	CFDictionaryRef  CVPixelFormatDescriptionCreateWithPixelFormatType(CFAllocatorRef allocator , OSType pixelFormat )
	void  CVPixelFormatDescriptionRegisterDescriptionWithPixelFormatType(CFDictionaryRef description , OSType pixelFormat )
	CMError  CWCheckBitmap(CMWorldRef cw , const CMBitmap *bitmap , CMBitmapCallBackUPP progressProc , void *refCon , CMBitmap *resultBitmap )
	CMError  CWCheckColors(CMWorldRef cw , CMColor *myColors , size_t count , UInt8 *result )
	const void *  CWColorWorldGetProperty(CMWorldRef cw , CFStringRef key )
	void  CWColorWorldSetProperty(CMWorldRef cw , CFStringRef key , CFTypeRef value )
	void  CWDisposeColorWorld(CMWorldRef cw )
	CMError  CWFillLookupTexture(CMWorldRef cw , UInt32 gridPoints , UInt32 format , UInt32 dataSize , void *data )
	UInt32  CWGetCMMSignature(CMWorldRef cw )
	CMError  CWMatchBitmap(CMWorldRef cw , CMBitmap *bitmap , CMBitmapCallBackUPP progressProc , void *refCon , CMBitmap *matchedBitmap )
	CMError  CWMatchColors(CMWorldRef cw , CMColor *myColors , size_t count )
	DAApprovalSessionRef  DAApprovalSessionCreate(CFAllocatorRef allocator )
	CFTypeID  DAApprovalSessionGetTypeID()
	void  DAApprovalSessionScheduleWithRunLoop(DAApprovalSessionRef session , CFRunLoopRef runLoop , CFStringRef runLoopMode )
	void  DAApprovalSessionUnscheduleFromRunLoop(DAApprovalSessionRef session , CFRunLoopRef runLoop , CFStringRef runLoopMode )
	CFDictionaryRef  DADiskCopyDescription(DADiskRef disk )
	io_service_t  DADiskCopyIOMedia(DADiskRef disk )
	DADiskRef  DADiskCopyWholeDisk(DADiskRef disk )
	DADiskRef  DADiskCreateFromBSDName(CFAllocatorRef allocator , DASessionRef session , const char *name )
	DADiskRef  DADiskCreateFromIOMedia(CFAllocatorRef allocator , DASessionRef session , io_service_t media )
	DADiskRef  DADiskCreateFromVolumePath(CFAllocatorRef allocator , DASessionRef session , CFURLRef path )
	const char *  DADiskGetBSDName(DADiskRef disk )
	CFTypeID  DADiskGetTypeID()
	int  daemon(int , int )
	DASessionRef  DASessionCreate(CFAllocatorRef allocator )
	CFTypeID  DASessionGetTypeID()
	void  DASessionScheduleWithRunLoop(DASessionRef session , CFRunLoopRef runLoop , CFStringRef runLoopMode )
	void  DASessionSetDispatchQueue(DASessionRef session , dispatch_queue_t queue )
	void  DASessionUnscheduleFromRunLoop(DASessionRef session , CFRunLoopRef runLoop , CFStringRef runLoopMode )
	Boolean  DCMDictionaryManagerAvailable()
	CFStringRef  DCSCopyTextDefinition(DCSDictionaryRef dictionary , CFStringRef textString , CFRange range )
	CFRange  DCSGetTermRangeInString(DCSDictionaryRef dictionary , CFStringRef textString , CFIndex offset )
	void  DebugAssert(OSType componentSignature , UInt32 options , const char *assertionString , const char *exceptionLabelString , const char *errorString , const char *fileName , long lineNumber , void *value )
	void  Debugger()
	void  DebugStr(ConstStr255Param debuggerMsg )
	float  dec2f(const decimal *d )
	long  dec2l(const decimal *d )
	double_t  dec2num(const decimal *d )
	long double  dec2numl(const decimal *d )
	short  dec2s(const decimal *d )
	void  dec2str(const decform *f , const decimal *d , char *s )
	SInt32  DecrementAtomic(SInt32 *address )
	SInt16  DecrementAtomic16(SInt16 *address )
	SInt8  DecrementAtomic8(SInt8 *address )
	void  Delay(unsigned long numTicks , unsigned long *finalTicks )
	ComponentResult  DelegateComponentCall(ComponentParameters *originalParams , ComponentInstance ci )
	OSErr  DeleteGestaltValue(OSType selector )
	OSErr  Dequeue(QElemPtr qElement , QHdrPtr qHeader )
	void  DetachResource(Handle theResource )
	OSErr  DetachResourceFile(ResFileRefNum refNum )
	OSErr  DetermineIfPathIsEnclosedByFolder(FSVolumeRefNum domainOrVRefNum , OSType folderType , const UInt8 *utf8Path , Boolean pathIsRealPath , Boolean *outResult )
	char *  devname(dev_t , mode_t )
	char *  devname_r(dev_t , mode_t , char *buf , int len )
	double  difftime(time_t , time_t )
	int  digittoint(int _c )
	void  dispatch_after(dispatch_time_t when , dispatch_queue_t queue , ^(void)block )
	void  dispatch_after_f(dispatch_time_t when , dispatch_queue_t queue , void *context , dispatch_function_t work )
	void  dispatch_apply(size_t iterations , dispatch_queue_t queue , ^(size_t)block )
	void  dispatch_apply_f(size_t iterations , dispatch_queue_t queue , void *context , void (*work)(void *, size_t) )
	void  dispatch_async(dispatch_queue_t queue , ^(void)block )
	void  dispatch_async_f(dispatch_queue_t queue , void *context , dispatch_function_t work )
	void  dispatch_barrier_async(dispatch_queue_t queue , ^(void)block )
	void  dispatch_barrier_async_f(dispatch_queue_t queue , void *context , dispatch_function_t work )
	void  dispatch_barrier_sync(dispatch_queue_t queue , ^(void)block )
	void  dispatch_barrier_sync_f(dispatch_queue_t queue , void *context , dispatch_function_t work )
	bool  dispatch_data_apply(dispatch_data_t data , ^bool(dispatch_data_t region, size_t offset, const void *buffer, size_t size)applier )
	dispatch_data_t  dispatch_data_copy_region(dispatch_data_t data , size_t location , size_t *offset_ptr )
	dispatch_data_t  dispatch_data_create(const void *buffer , size_t size , dispatch_queue_t queue , ^(void)destructor )
	dispatch_data_t  dispatch_data_create_concat(dispatch_data_t data1 , dispatch_data_t data2 )
	dispatch_data_t  dispatch_data_create_map(dispatch_data_t data , const void **buffer_ptr , size_t *size_ptr )
	dispatch_data_t  dispatch_data_create_subrange(dispatch_data_t data , size_t offset , size_t length )
	size_t  dispatch_data_get_size(dispatch_data_t data )
	void  dispatch_debug(dispatch_object_t object , const char *message, ... )
	void  dispatch_debugv(dispatch_object_t object , const char *message , __va_list_tag *ap )
	void *  dispatch_get_context(dispatch_object_t object )
	dispatch_queue_t  dispatch_get_current_queue()
	dispatch_queue_t  dispatch_get_global_queue(dispatch_queue_priority_t priority , unsigned long flags )
	void *  dispatch_get_specific(const void *key )
	void  dispatch_group_async(dispatch_group_t group , dispatch_queue_t queue , ^(void)block )
	void  dispatch_group_async_f(dispatch_group_t group , dispatch_queue_t queue , void *context , dispatch_function_t work )
	dispatch_group_t  dispatch_group_create()
	void  dispatch_group_enter(dispatch_group_t group )
	void  dispatch_group_leave(dispatch_group_t group )
	void  dispatch_group_notify(dispatch_group_t group , dispatch_queue_t queue , ^(void)block )
	void  dispatch_group_notify_f(dispatch_group_t group , dispatch_queue_t queue , void *context , dispatch_function_t work )
	long  dispatch_group_wait(dispatch_group_t group , dispatch_time_t timeout )
	void  dispatch_io_barrier(dispatch_io_t channel , ^(void)barrier )
	void  dispatch_io_close(dispatch_io_t channel , dispatch_io_close_flags_t flags )
	dispatch_io_t  dispatch_io_create(dispatch_io_type_t type , dispatch_fd_t fd , dispatch_queue_t queue , ^(int error)cleanup_handler )
	dispatch_io_t  dispatch_io_create_with_io(dispatch_io_type_t type , dispatch_io_t io , dispatch_queue_t queue , ^(int error)cleanup_handler )
	dispatch_io_t  dispatch_io_create_with_path(dispatch_io_type_t type , const char *path , int oflag , mode_t mode , dispatch_queue_t queue , ^(int error)cleanup_handler )
	dispatch_fd_t  dispatch_io_get_descriptor(dispatch_io_t channel )
	void  dispatch_io_read(dispatch_io_t channel , off_t offset , size_t length , dispatch_queue_t queue , ^(bool done, dispatch_data_t data, int error)io_handler )
	void  dispatch_io_set_high_water(dispatch_io_t channel , size_t high_water )
	void  dispatch_io_set_interval(dispatch_io_t channel , uint64_t interval , dispatch_io_interval_flags_t flags )
	void  dispatch_io_set_low_water(dispatch_io_t channel , size_t low_water )
	void  dispatch_io_write(dispatch_io_t channel , off_t offset , dispatch_data_t data , dispatch_queue_t queue , ^(bool done, dispatch_data_t data, int error)io_handler )
	void  dispatch_main()
	void  dispatch_once(dispatch_once_t *predicate , ^(void)block )
	void  dispatch_once_f(dispatch_once_t *predicate , void *context , dispatch_function_t function )
	dispatch_queue_t  dispatch_queue_create(const char *label , dispatch_queue_attr_t attr )
	const char *  dispatch_queue_get_label(dispatch_queue_t queue )
	void *  dispatch_queue_get_specific(dispatch_queue_t queue , const void *key )
	void  dispatch_queue_set_specific(dispatch_queue_t queue , const void *key , void *context , dispatch_function_t destructor )
	void  dispatch_read(dispatch_fd_t fd , size_t length , dispatch_queue_t queue , ^(dispatch_data_t data, int error)handler )
	void  dispatch_release(dispatch_object_t object )
	void  dispatch_resume(dispatch_object_t object )
	void  dispatch_retain(dispatch_object_t object )
	dispatch_semaphore_t  dispatch_semaphore_create(long value )
	long  dispatch_semaphore_signal(dispatch_semaphore_t dsema )
	long  dispatch_semaphore_wait(dispatch_semaphore_t dsema , dispatch_time_t timeout )
	void  dispatch_set_context(dispatch_object_t object , void *context )
	void  dispatch_set_finalizer_f(dispatch_object_t object , dispatch_function_t finalizer )
	void  dispatch_set_target_queue(dispatch_object_t object , dispatch_queue_t queue )
	void  dispatch_source_cancel(dispatch_source_t source )
	dispatch_source_t  dispatch_source_create(dispatch_source_type_t type , uintptr_t handle , unsigned long mask , dispatch_queue_t queue )
	unsigned long  dispatch_source_get_data(dispatch_source_t source )
	uintptr_t  dispatch_source_get_handle(dispatch_source_t source )
	unsigned long  dispatch_source_get_mask(dispatch_source_t source )
	void  dispatch_source_merge_data(dispatch_source_t source , unsigned long value )
	void  dispatch_source_set_cancel_handler(dispatch_source_t source , ^(void)cancel_handler )
	void  dispatch_source_set_cancel_handler_f(dispatch_source_t source , dispatch_function_t cancel_handler )
	void  dispatch_source_set_event_handler(dispatch_source_t source , ^(void)handler )
	void  dispatch_source_set_event_handler_f(dispatch_source_t source , dispatch_function_t handler )
	void  dispatch_source_set_registration_handler(dispatch_source_t source , ^(void)registration_handler )
	void  dispatch_source_set_registration_handler_f(dispatch_source_t source , dispatch_function_t registration_handler )
	void  dispatch_source_set_timer(dispatch_source_t source , dispatch_time_t start , uint64_t interval , uint64_t leeway )
	long  dispatch_source_testcancel(dispatch_source_t source )
	void  dispatch_suspend(dispatch_object_t object )
	void  dispatch_sync(dispatch_queue_t queue , ^(void)block )
	void  dispatch_sync_f(dispatch_queue_t queue , void *context , dispatch_function_t work )
	dispatch_time_t  dispatch_time(dispatch_time_t when , int64_t delta )
	dispatch_time_t  dispatch_walltime(const struct timespec *when , int64_t delta )
	void  dispatch_write(dispatch_fd_t fd , dispatch_data_t data , dispatch_queue_t queue , ^(dispatch_data_t data, int error)handler )
	void  DisposeAECoerceDescUPP(AECoerceDescUPP )
	void  DisposeAECoercePtrUPP(AECoercePtrUPP )
	void  DisposeAEDisposeExternalUPP(AEDisposeExternalUPP )
	void  DisposeAEEventHandlerUPP(AEEventHandlerUPP )
	void  DisposeATSCubicClosePathUPP(ATSCubicClosePathUPP )
	void  DisposeATSCubicCurveToUPP(ATSCubicCurveToUPP )
	void  DisposeATSCubicLineToUPP(ATSCubicLineToUPP )
	void  DisposeATSCubicMoveToUPP(ATSCubicMoveToUPP )
	void  DisposeATSQuadraticClosePathUPP(ATSQuadraticClosePathUPP )
	void  DisposeATSQuadraticCurveUPP(ATSQuadraticCurveUPP )
	void  DisposeATSQuadraticLineUPP(ATSQuadraticLineUPP )
	void  DisposeATSQuadraticNewPathUPP(ATSQuadraticNewPathUPP )
	void  DisposeATSUDirectLayoutOperationOverrideUPP(ATSUDirectLayoutOperationOverrideUPP )
	void  DisposeAVLCompareItemsUPP(AVLCompareItemsUPP )
	void  DisposeAVLDisposeItemUPP(AVLDisposeItemUPP )
	void  DisposeAVLItemSizeUPP(AVLItemSizeUPP )
	void  DisposeAVLWalkUPP(AVLWalkUPP )
	void  DisposeCMBitmapCallBackUPP(CMBitmapCallBackUPP )
	void  DisposeCMConcatCallBackUPP(CMConcatCallBackUPP )
	void  DisposeCMFlattenUPP(CMFlattenUPP )
	void  DisposeCMMIterateUPP(CMMIterateUPP )
	void  DisposeCMProfileIterateUPP(CMProfileIterateUPP )
	void  DisposeCollection(Collection c )
	void  DisposeCollectionExceptionUPP(CollectionExceptionUPP )
	void  DisposeCollectionFlattenUPP(CollectionFlattenUPP )
	void  DisposeColorComplementUPP(ColorComplementUPP )
	void  DisposeColorSearchUPP(ColorSearchUPP )
	void  DisposeComponentFunctionUPP(ComponentFunctionUPP userUPP )
	void  DisposeComponentMPWorkFunctionUPP(ComponentMPWorkFunctionUPP )
	void  DisposeComponentRoutineUPP(ComponentRoutineUPP )
	void  DisposeDebugAssertOutputHandlerUPP(DebugAssertOutputHandlerUPP )
	OSStatus  DisposeDebugComponent(OSType componentSignature )
	void  DisposeDebugComponentCallbackUPP(DebugComponentCallbackUPP )
	void  DisposeDebuggerDisposeThreadUPP(DebuggerDisposeThreadUPP )
	void  DisposeDebuggerNewThreadUPP(DebuggerNewThreadUPP )
	void  DisposeDebuggerThreadSchedulerUPP(DebuggerThreadSchedulerUPP )
	void  DisposeDeferredTaskUPP(DeferredTaskUPP )
	void  DisposeDragGrayRgnUPP(DragGrayRgnUPP )
	void  DisposeExceptionHandlerUPP(ExceptionHandlerUPP )
	void  DisposeFMFontCallbackFilterUPP(FMFontCallbackFilterUPP )
	void  DisposeFMFontFamilyCallbackFilterUPP(FMFontFamilyCallbackFilterUPP )
	void  DisposeFNSubscriptionUPP(FNSubscriptionUPP )
	void  DisposeFolderManagerNotificationUPP(FolderManagerNotificationUPP )
	void  DisposeFSVolumeEjectUPP(FSVolumeEjectUPP )
	void  DisposeFSVolumeMountUPP(FSVolumeMountUPP )
	void  DisposeFSVolumeUnmountUPP(FSVolumeUnmountUPP )
	void  DisposeGetMissingComponentResourceUPP(GetMissingComponentResourceUPP )
	void  DisposeHandle(Handle h )
	void  DisposeIconActionUPP(IconActionUPP )
	void  DisposeIconGetterUPP(IconGetterUPP )
	void  DisposeIndexToUCStringUPP(IndexToUCStringUPP )
	void  DisposeIOCompletionUPP(IOCompletionUPP )
	void  DisposeKCCallbackUPP(KCCallbackUPP )
	void  DisposeOSLAccessorUPP(OSLAccessorUPP )
	void  DisposeOSLAdjustMarksUPP(OSLAdjustMarksUPP )
	void  DisposeOSLCompareUPP(OSLCompareUPP )
	void  DisposeOSLCountUPP(OSLCountUPP )
	void  DisposeOSLDisposeTokenUPP(OSLDisposeTokenUPP )
	void  DisposeOSLGetErrDescUPP(OSLGetErrDescUPP )
	void  DisposeOSLGetMarkTokenUPP(OSLGetMarkTokenUPP )
	void  DisposeOSLMarkUPP(OSLMarkUPP )
	void  DisposePtr(Ptr p )
	void  DisposeQDArcUPP(QDArcUPP )
	void  DisposeQDBitsUPP(QDBitsUPP )
	void  DisposeQDCommentUPP(QDCommentUPP )
	void  DisposeQDGetPicUPP(QDGetPicUPP )
	void  DisposeQDJShieldCursorUPP(QDJShieldCursorUPP )
	void  DisposeQDLineUPP(QDLineUPP )
	void  DisposeQDOpcodeUPP(QDOpcodeUPP )
	void  DisposeQDOvalUPP(QDOvalUPP )
	void  DisposeQDPolyUPP(QDPolyUPP )
	void  DisposeQDPrinterStatusUPP(QDPrinterStatusUPP )
	void  DisposeQDPutPicUPP(QDPutPicUPP )
	void  DisposeQDRectUPP(QDRectUPP )
	void  DisposeQDRgnUPP(QDRgnUPP )
	void  DisposeQDRRectUPP(QDRRectUPP )
	void  DisposeQDStdGlyphsUPP(QDStdGlyphsUPP )
	void  DisposeQDTextUPP(QDTextUPP )
	void  DisposeQDTxMeasUPP(QDTxMeasUPP )
	void  DisposeRedrawBackgroundUPP(RedrawBackgroundUPP )
	void  DisposeRegionToRectsUPP(RegionToRectsUPP )
	void  DisposeResErrUPP(ResErrUPP )
	void  DisposeSelectorFunctionUPP(SelectorFunctionUPP )
	void  DisposeSleepQUPP(SleepQUPP )
	OSErr  DisposeSpeechChannel(SpeechChannel chan )
	void  DisposeSpeechDoneUPP(SpeechDoneUPP )
	void  DisposeSpeechErrorUPP(SpeechErrorUPP )
	void  DisposeSpeechPhonemeUPP(SpeechPhonemeUPP )
	void  DisposeSpeechSyncUPP(SpeechSyncUPP )
	void  DisposeSpeechTextDoneUPP(SpeechTextDoneUPP )
	void  DisposeSpeechWordUPP(SpeechWordUPP )
	void  DisposeSystemSoundCompletionUPP(SystemSoundCompletionUPP )
	OSStatus  DisposeTextToUnicodeInfo(TextToUnicodeInfo *ioTextToUnicodeInfo )
	OSErr  DisposeThread(ThreadID threadToDump , void *threadResult , Boolean recycleThread )
	void  DisposeThreadEntryUPP(ThreadEntryUPP )
	void  DisposeThreadSchedulerUPP(ThreadSchedulerUPP )
	void  DisposeThreadSwitchUPP(ThreadSwitchUPP )
	void  DisposeThreadTerminationUPP(ThreadTerminationUPP )
	void  DisposeTimerUPP(TimerUPP )
	void  DisposeUnicodeToTextFallbackUPP(UnicodeToTextFallbackUPP )
	OSStatus  DisposeUnicodeToTextInfo(UnicodeToTextInfo *ioUnicodeToTextInfo )
	OSStatus  DisposeUnicodeToTextRunInfo(UnicodeToTextRunInfo *ioUnicodeToTextRunInfo )
	div_t  div(int , int )
	int  dprintf(int , const char *, ... )
	double  drand48()
	double  drem(double , double )
	void  dtox80(const double *x , extended80 *x80 )
	int  dup(int )
	int  dup2(int , int )
	AbsoluteTime  DurationToAbsolute(Duration duration )
	Nanoseconds  DurationToNanoseconds(Duration theDuration )
	char *  ecvt(double , int , int * , int * )
	void  EmptyCollection(Collection c )
	void  EmptyHandle(Handle h )
	void  encrypt(char * , int )
	void  endusershell()
	void  Enqueue(QElemPtr qElement , QHdrPtr qHeader )
	double  erand48(unsigned short * )
	double  erf(double )
	double  erfc(double )
	float  erfcf(float )
	long double  erfcl(long double )
	float  erff(float )
	long double  erfl(long double )
	int  exchangedata(const char * , const char * , unsigned int )
	int  execl(const char * , const char *, ... )
	int  execle(const char * , const char *, ... )
	int  execlp(const char * , const char *, ... )
	int  execv(const char * , char *const * )
	int  execve(const char * , char *const * , char *const * )
	int  execvP(const char * , const char * , char *const * )
	int  execvp(const char * , char *const * )
	void  exit(int )
	void  ExitToShell()
	double  exp(double )
	double  exp2(double )
	float  exp2f(float )
	long double  exp2l(long double )
	float  expf(float )
	long double  expl(long double )
	double  expm1(double )
	float  expm1f(float )
	long double  expm1l(long double )
	double  fabs(double )
	float  fabsf(float )
	long double  fabsl(long double )
	int  fchdir(int )
	int  fchown(int , uid_t , gid_t )
	int  fclose(FILE * )
	int  fcntl(int , int, ... )
	char *  fcvt(double , int , int * , int * )
	double  fdim(double , double )
	float  fdimf(float , float )
	long double  fdiml(long double , long double )
	FILE *  fdopen(int , const char * )
	int  feclearexcept(int )
	int  fegetenv(fenv_t * )
	int  fegetexceptflag(fexcept_t * , int )
	int  fegetround()
	int  feholdexcept(fenv_t * )
	int  feof(FILE * )
	int  feraiseexcept(int )
	int  ferror(FILE * )
	int  fesetenv(const fenv_t * )
	int  fesetexceptflag(const fexcept_t * , int )
	int  fesetround(int )
	int  fetestexcept(int )
	int  feupdateenv(const fenv_t * )
	char *  fflagstostr(unsigned long )
	int  fflush(FILE * )
	int  ffs(int )
	int  ffsctl(int , unsigned long , void * , unsigned int )
	int  ffsl(long )
	int  fgetattrlist(int , void * , void * , size_t , unsigned int )
	int  fgetc(FILE * )
	char *  fgetln(FILE * , size_t * )
	int  fgetpos(FILE * , fpos_t * )
	char *  fgets(char * , int , FILE * )
	int  fileno(FILE * )
	filesec_t  filesec_dup(filesec_t )
	void  filesec_free(filesec_t )
	int  filesec_get_property(filesec_t , filesec_property_t , void * )
	filesec_t  filesec_init()
	int  filesec_query_property(filesec_t , filesec_property_t , int * )
	int  filesec_set_property(filesec_t , filesec_property_t , const void * )
	int  filesec_unset_property(filesec_t , filesec_property_t )
	OSErr  FindFolder(FSVolumeRefNum vRefNum , OSType folderType , Boolean createFolder , FSVolumeRefNum *foundVRefNum , SInt32 *foundDirID )
	Component  FindNextComponent(Component aComponent , ComponentDescription *looking )
	int  finite(double )
	Fract  Fix2Frac(Fixed x )
	SInt32  Fix2Long(Fixed x )
	double  Fix2X(Fixed x )
	Fixed  FixATan2(SInt32 x , SInt32 y )
	Fixed  FixDiv(Fixed x , Fixed y )
	Fixed  FixMul(Fixed a , Fixed b )
	Fixed  FixRatio(short numer , short denom )
	short  FixRound(Fixed x )
	OSErr  FlattenCollection(Collection c , CollectionFlattenUPP flattenProc , void *refCon )
	OSErr  FlattenCollectionToHdl(Collection aCollection , Handle flattened )
	OSErr  FlattenPartialCollection(Collection c , CollectionFlattenUPP flattenProc , void *refCon , SInt32 whichAttributes , SInt32 matchingAttributes )
	int  flock(int , int )
	void  flockfile(FILE * )
	double  floor(double )
	float  floorf(float )
	long double  floorl(long double )
	int  fls(int )
	int  flsl(long )
	double  fma(double , double , double )
	float  fmaf(float , float , float )
	long double  fmal(long double , long double , long double )
	double  fmax(double , double )
	float  fmaxf(float , float )
	long double  fmaxl(long double , long double )
	double  fmin(double , double )
	float  fminf(float , float )
	long double  fminl(long double , long double )
	double  fmod(double , double )
	float  fmodf(float , float )
	long double  fmodl(long double , long double )
	const char *  fmtcheck(const char * , const char * )
	OSStatus  FNGetDirectoryForSubscription(FNSubscriptionRef subscription , FSRef *ref )
	OSStatus  FNNotify(const FSRef *ref , FNMessage message , OptionBits flags )
	OSStatus  FNNotifyAll(FNMessage message , OptionBits flags )
	OSStatus  FNNotifyByPath(const UInt8 *path , FNMessage message , OptionBits flags )
	OSStatus  FNSubscribe(const FSRef *directoryRef , FNSubscriptionUPP callback , void *refcon , OptionBits flags , FNSubscriptionRef *subscription )
	OSStatus  FNSubscribeByPath(const UInt8 *directoryPath , FNSubscriptionUPP callback , void *refcon , OptionBits flags , FNSubscriptionRef *subscription )
	OSStatus  FNUnsubscribe(FNSubscriptionRef subscription )
	FILE *  fopen(const char * , const char * )
	pid_t  fork()
	long  fpathconf(int , int )
	int  fprintf(FILE * , const char *, ... )
	int  fpurge(FILE * )
	int  fputc(int , FILE * )
	int  fputs(const char * , FILE * )
	Fixed  Frac2Fix(Fract x )
	double  Frac2X(Fract x )
	Fract  FracCos(Fixed x )
	Fract  FracDiv(Fract x , Fract y )
	Fract  FracMul(Fract x , Fract y )
	Fract  FracSin(Fixed x )
	Fract  FracSqrt(Fract x )
	size_t  fread(void * , size_t , size_t , FILE * )
	void  free(void * )
	FILE *  freopen(const char * , const char * , FILE * )
	double  frexp(double , int * )
	float  frexpf(float , int * )
	long double  frexpl(long double , int * )
	OSErr  FSAllocateFork(FSIORefNum forkRefNum , FSAllocationFlags flags , UInt16 positionMode , SInt64 positionOffset , UInt64 requestCount , UInt64 *actualCount )
	OSStatus  FSCancelVolumeOperation(FSVolumeOperation volumeOp )
	int  fscanf(FILE * , const char *, ... )
	OSErr  FSCatalogSearch(FSIterator iterator , const FSSearchParams *searchCriteria , ItemCount maximumObjects , ItemCount *actualObjects , Boolean *containerChanged , FSCatalogInfoBitmap whichInfo , FSCatalogInfo *catalogInfos , FSRef *refs , FSSpecPtr specs , HFSUniStr255 *names )
	OSErr  FSCloseFork(FSIORefNum forkRefNum )
	OSErr  FSCloseIterator(FSIterator iterator )
	OSErr  FSCompareFSRefs(const FSRef *ref1 , const FSRef *ref2 )
	OSStatus  FSCopyAliasInfo(AliasHandle inAlias , HFSUniStr255 *targetName , HFSUniStr255 *volumeName , CFStringRef *pathString , FSAliasInfoBitmap *whichInfo , FSAliasInfo *info )
	OSStatus  FSCopyDADiskForVolume(FSVolumeRefNum vRefNum , DADiskRef *disk )
	OSStatus  FSCopyDiskIDForVolume(FSVolumeRefNum vRefNum , CFStringRef *diskID )
	OSStatus  FSCopyObjectAsync(FSFileOperationRef fileOp , const FSRef *source , const FSRef *destDir , CFStringRef destName , OptionBits flags , FSFileOperationStatusProcPtr callback , CFTimeInterval statusChangeInterval , FSFileOperationClientContext *clientContext )
	OSStatus  FSCopyObjectSync(const FSRef *source , const FSRef *destDir , CFStringRef destName , FSRef *target , OptionBits options )
	OSStatus  FSCopyURLForVolume(FSVolumeRefNum vRefNum , CFURLRef *url )
	OSErr  FSCreateDirectoryUnicode(const FSRef *parentRef , UniCharCount nameLength , const UniChar *name , FSCatalogInfoBitmap whichInfo , const FSCatalogInfo *catalogInfo , FSRef *newRef , FSSpecPtr newSpec , UInt32 *newDirID )
	OSStatus  FSCreateFileAndOpenForkUnicode(const FSRef *parentRef , UniCharCount nameLength , const UniChar *name , FSCatalogInfoBitmap whichInfo , const FSCatalogInfo *catalogInfo , UniCharCount forkNameLength , const UniChar *forkName , SInt8 permissions , FSIORefNum *forkRefNum , FSRef *newRef )
	OSErr  FSCreateFileUnicode(const FSRef *parentRef , UniCharCount nameLength , const UniChar *name , FSCatalogInfoBitmap whichInfo , const FSCatalogInfo *catalogInfo , FSRef *newRef , FSSpecPtr newSpec )
	OSErr  FSCreateFork(const FSRef *ref , UniCharCount forkNameLength , const UniChar *forkName )
	void  FSCreateResFile(const FSRef *parentRef , UniCharCount nameLength , const UniChar *name , FSCatalogInfoBitmap whichInfo , const FSCatalogInfo *catalogInfo , FSRef *newRef , FSSpecPtr newSpec )
	OSErr  FSCreateResourceFile(const FSRef *parentRef , UniCharCount nameLength , const UniChar *name , FSCatalogInfoBitmap whichInfo , const FSCatalogInfo *catalogInfo , UniCharCount forkNameLength , const UniChar *forkName , FSRef *newRef , FSSpecPtr newSpec )
	OSErr  FSCreateResourceFork(const FSRef *ref , UniCharCount forkNameLength , const UniChar *forkName , UInt32 flags )
	CFStringRef  FSCreateStringFromHFSUniStr(CFAllocatorRef alloc , const HFSUniStr255 *uniStr )
	OSStatus  FSCreateVolumeOperation(FSVolumeOperation *volumeOp )
	int  fsctl(const char * , unsigned long , void * , unsigned int )
	OSErr  FSDeleteFork(const FSRef *ref , UniCharCount forkNameLength , const UniChar *forkName )
	OSErr  FSDeleteObject(const FSRef *ref )
	OSErr  FSDetermineIfRefIsEnclosedByFolder(FSVolumeRefNum domainOrVRefNum , OSType folderType , const FSRef *inRef , Boolean *outResult )
	OSStatus  FSDisposeVolumeOperation(FSVolumeOperation volumeOp )
	int  fseek(FILE * , long , int )
	int  fseeko(FILE * , off_t , int )
	OSStatus  FSEjectVolumeAsync(FSVolumeRefNum vRefNum , OptionBits flags , FSVolumeOperation volumeOp , void *clientData , FSVolumeEjectUPP callback , CFRunLoopRef runloop , CFStringRef runloopMode )
	OSStatus  FSEjectVolumeSync(FSVolumeRefNum vRefNum , OptionBits flags , pid_t *dissenter )
	int  fsetattrlist(int , void * , void * , size_t , unsigned int )
	int  fsetpos(FILE * , const fpos_t * )
	CFUUIDRef  FSEventsCopyUUIDForDevice(dev_t dev )
	FSEventStreamEventId  FSEventsGetCurrentEventId()
	FSEventStreamEventId  FSEventsGetLastEventIdForDeviceBeforeTime(dev_t dev , CFAbsoluteTime time )
	Boolean  FSEventsPurgeEventsForDeviceUpToEventId(dev_t dev , FSEventStreamEventId eventId )
	CFStringRef  FSEventStreamCopyDescription(ConstFSEventStreamRef streamRef )
	CFArrayRef  FSEventStreamCopyPathsBeingWatched(ConstFSEventStreamRef streamRef )
	FSEventStreamRef  FSEventStreamCreate(CFAllocatorRef allocator , FSEventStreamCallback callback , FSEventStreamContext *context , CFArrayRef pathsToWatch , FSEventStreamEventId sinceWhen , CFTimeInterval latency , FSEventStreamCreateFlags flags )
	FSEventStreamRef  FSEventStreamCreateRelativeToDevice(CFAllocatorRef allocator , FSEventStreamCallback callback , FSEventStreamContext *context , dev_t deviceToWatch , CFArrayRef pathsToWatchRelativeToDevice , FSEventStreamEventId sinceWhen , CFTimeInterval latency , FSEventStreamCreateFlags flags )
	FSEventStreamEventId  FSEventStreamFlushAsync(FSEventStreamRef streamRef )
	void  FSEventStreamFlushSync(FSEventStreamRef streamRef )
	dev_t  FSEventStreamGetDeviceBeingWatched(ConstFSEventStreamRef streamRef )
	FSEventStreamEventId  FSEventStreamGetLatestEventId(ConstFSEventStreamRef streamRef )
	void  FSEventStreamInvalidate(FSEventStreamRef streamRef )
	void  FSEventStreamRelease(FSEventStreamRef streamRef )
	void  FSEventStreamRetain(FSEventStreamRef streamRef )
	void  FSEventStreamScheduleWithRunLoop(FSEventStreamRef streamRef , CFRunLoopRef runLoop , CFStringRef runLoopMode )
	void  FSEventStreamSetDispatchQueue(FSEventStreamRef streamRef , dispatch_queue_t q )
	void  FSEventStreamShow(ConstFSEventStreamRef streamRef )
	Boolean  FSEventStreamStart(FSEventStreamRef streamRef )
	void  FSEventStreamStop(FSEventStreamRef streamRef )
	void  FSEventStreamUnscheduleFromRunLoop(FSEventStreamRef streamRef , CFRunLoopRef runLoop , CFStringRef runLoopMode )
	OSErr  FSExchangeObjects(const FSRef *ref , const FSRef *destRef )
	OSStatus  FSFileOperationCancel(FSFileOperationRef fileOp )
	OSStatus  FSFileOperationCopyStatus(FSFileOperationRef fileOp , FSRef *currentItem , FSFileOperationStage *stage , OSStatus *error , CFDictionaryRef *statusDictionary , void **info )
	FSFileOperationRef  FSFileOperationCreate(CFAllocatorRef alloc )
	CFTypeID  FSFileOperationGetTypeID()
	OSStatus  FSFileOperationScheduleWithRunLoop(FSFileOperationRef fileOp , CFRunLoopRef runLoop , CFStringRef runLoopMode )
	OSStatus  FSFileOperationUnscheduleFromRunLoop(FSFileOperationRef fileOp , CFRunLoopRef runLoop , CFStringRef runLoopMode )
	OSStatus  FSFileSecurityCopyAccessControlList(FSFileSecurityRef fileSec , acl_t *accessControlList )
	FSFileSecurityRef  FSFileSecurityCreate(CFAllocatorRef alloc )
	FSFileSecurityRef  FSFileSecurityCreateWithFSPermissionInfo(CFAllocatorRef alloc , const FSPermissionInfo *permissions )
	OSStatus  FSFileSecurityGetGroup(FSFileSecurityRef fileSec , UInt32 *group )
	OSStatus  FSFileSecurityGetGroupUUID(FSFileSecurityRef fileSec , CFUUIDBytes *group )
	OSStatus  FSFileSecurityGetMode(FSFileSecurityRef fileSec , UInt16 *mode )
	OSStatus  FSFileSecurityGetOwner(FSFileSecurityRef fileSec , UInt32 *owner )
	OSStatus  FSFileSecurityGetOwnerUUID(FSFileSecurityRef fileSec , CFUUIDBytes *owner )
	CFTypeID  FSFileSecurityGetTypeID()
	FSFileSecurityRef  FSFileSecurityRefCreateCopy(CFAllocatorRef alloc , FSFileSecurityRef fileSec )
	OSStatus  FSFileSecuritySetAccessControlList(FSFileSecurityRef fileSec , acl_t accessControlList )
	OSStatus  FSFileSecuritySetGroup(FSFileSecurityRef fileSec , UInt32 group )
	OSStatus  FSFileSecuritySetGroupUUID(FSFileSecurityRef fileSec , const CFUUIDBytes *group )
	OSStatus  FSFileSecuritySetMode(FSFileSecurityRef fileSec , UInt16 mode )
	OSStatus  FSFileSecuritySetOwner(FSFileSecurityRef fileSec , UInt32 owner )
	OSStatus  FSFileSecuritySetOwnerUUID(FSFileSecurityRef fileSec , const CFUUIDBytes *owner )
	OSErr  FSFindFolder(FSVolumeRefNum vRefNum , OSType folderType , Boolean createFolder , FSRef *foundRef )
	OSErr  FSFlushFork(FSIORefNum forkRefNum )
	OSStatus  FSFlushVolume(FSVolumeRefNum vRefNum )
	OSErr  FSFollowFinderAlias(FSRef *fromFile , AliasHandle alias , Boolean logon , FSRef *target , Boolean *wasChanged )
	OSStatus  FSGetAsyncEjectStatus(FSVolumeOperation volumeOp , FSEjectStatus *status , OSStatus *volumeOpStatus , FSVolumeRefNum *volumeRefNum , pid_t *dissenter , void **clientData )
	OSStatus  FSGetAsyncMountStatus(FSVolumeOperation volumeOp , FSMountStatus *status , OSStatus *volumeOpStatus , FSVolumeRefNum *mountedVolumeRefNum , void **clientData )
	OSStatus  FSGetAsyncUnmountStatus(FSVolumeOperation volumeOp , FSUnmountStatus *status , OSStatus *volumeOpStatus , FSVolumeRefNum *volumeRefNum , pid_t *dissenter , void **clientData )
	OSErr  FSGetCatalogInfo(const FSRef *ref , FSCatalogInfoBitmap whichInfo , FSCatalogInfo *catalogInfo , HFSUniStr255 *outName , FSSpecPtr fsSpec , FSRef *parentRef )
	OSErr  FSGetCatalogInfoBulk(FSIterator iterator , ItemCount maximumObjects , ItemCount *actualObjects , Boolean *containerChanged , FSCatalogInfoBitmap whichInfo , FSCatalogInfo *catalogInfos , FSRef *refs , FSSpecPtr specs , HFSUniStr255 *names )
	OSErr  FSGetDataForkName(HFSUniStr255 *dataForkName )
	OSErr  FSGetForkCBInfo(FSIORefNum desiredRefNum , FSVolumeRefNum volume , short *iterator , FSIORefNum *actualRefNum , FSForkInfo *forkInfo , FSRef *ref , HFSUniStr255 *outForkName )
	OSErr  FSGetForkPosition(FSIORefNum forkRefNum , SInt64 *position )
	OSErr  FSGetForkSize(FSIORefNum forkRefNum , SInt64 *forkSize )
	OSStatus  FSGetHFSUniStrFromString(CFStringRef theString , HFSUniStr255 *uniStr )
	OSErr  FSGetResourceForkName(HFSUniStr255 *resourceForkName )
	OSStatus  FSGetTemporaryDirectoryForReplaceObject(const FSRef *originalObject , FSRef *temporaryDirectory , OptionBits flags )
	OSStatus  FSGetVolumeForDADisk(DADiskRef disk , FSVolumeRefNum *vRefNum )
	OSStatus  FSGetVolumeForDiskID(CFStringRef diskID , FSVolumeRefNum *vRefNum )
	OSErr  FSGetVolumeInfo(FSVolumeRefNum volume , ItemCount volumeIndex , FSVolumeRefNum *actualVolume , FSVolumeInfoBitmap whichInfo , FSVolumeInfo *info , HFSUniStr255 *volumeName , FSRef *rootDirectory )
	OSStatus  FSGetVolumeMountInfo(FSVolumeRefNum volume , BytePtr buffer , ByteCount bufferSize , ByteCount *actualSize )
	OSStatus  FSGetVolumeMountInfoSize(FSVolumeRefNum volume , ByteCount *size )
	OSStatus  FSGetVolumeParms(FSVolumeRefNum volume , GetVolParmsInfoBuffer *buffer , ByteCount bufferSize )
	OSErr  FSIsAliasFile(const FSRef *fileRef , Boolean *aliasFileFlag , Boolean *folderFlag )
	Boolean  FSIsFSRefValid(const FSRef *ref )
	OSErr  FSIterateForks(const FSRef *ref , CatPositionRec *forkIterator , HFSUniStr255 *forkName , SInt64 *forkSize , UInt64 *forkPhysicalSize )
	OSStatus  FSLockRange(FSIORefNum forkRefNum , UInt16 positionMode , SInt64 positionOffset , UInt64 requestCount , UInt64 *rangeStart )
	OSErr  FSMakeFSRefUnicode(const FSRef *parentRef , UniCharCount nameLength , const UniChar *name , TextEncoding textEncodingHint , FSRef *newRef )
	OSStatus  FSMatchAliasBulk(const FSRef *fromFile , unsigned long rulesMask , AliasHandle inAlias , short *aliasCount , FSRef *aliasList , Boolean *needsUpdate , FSAliasFilterProcPtr aliasFilter , void *yourDataPtr )
	OSStatus  FSMountLocalVolumeAsync(CFStringRef diskID , CFURLRef mountDir , FSVolumeOperation volumeOp , void *clientData , OptionBits flags , FSVolumeMountUPP callback , CFRunLoopRef runloop , CFStringRef runloopMode )
	OSStatus  FSMountLocalVolumeSync(CFStringRef diskID , CFURLRef mountDir , FSVolumeRefNum *mountedVolumeRefNum , OptionBits flags )
	OSStatus  FSMountServerVolumeAsync(CFURLRef url , CFURLRef mountDir , CFStringRef user , CFStringRef password , FSVolumeOperation volumeOp , void *clientData , OptionBits flags , FSVolumeMountUPP callback , CFRunLoopRef runloop , CFStringRef runloopMode )
	OSStatus  FSMountServerVolumeSync(CFURLRef url , CFURLRef mountDir , CFStringRef user , CFStringRef password , FSVolumeRefNum *mountedVolumeRefNum , OptionBits flags )
	OSErr  FSMoveObject(const FSRef *ref , const FSRef *destDirectory , FSRef *newRef )
	OSStatus  FSMoveObjectAsync(FSFileOperationRef fileOp , const FSRef *source , const FSRef *destDir , CFStringRef destName , OptionBits flags , FSFileOperationStatusProcPtr callback , CFTimeInterval statusChangeInterval , FSFileOperationClientContext *clientContext )
	OSStatus  FSMoveObjectSync(const FSRef *source , const FSRef *destDir , CFStringRef destName , FSRef *target , OptionBits options )
	OSStatus  FSMoveObjectToTrashAsync(FSFileOperationRef fileOp , const FSRef *source , OptionBits flags , FSFileOperationStatusProcPtr callback , CFTimeInterval statusChangeInterval , FSFileOperationClientContext *clientContext )
	OSStatus  FSMoveObjectToTrashSync(const FSRef *source , FSRef *target , OptionBits options )
	OSErr  FSNewAlias(const FSRef *fromFile , const FSRef *target , AliasHandle *inAlias )
	OSStatus  FSNewAliasFromPath(const char *fromFilePath , const char *targetPath , OptionBits flags , AliasHandle *inAlias , Boolean *isDirectory )
	OSErr  FSNewAliasMinimal(const FSRef *target , AliasHandle *inAlias )
	OSErr  FSNewAliasMinimalUnicode(const FSRef *targetParentRef , UniCharCount targetNameLength , const UniChar *targetName , AliasHandle *inAlias , Boolean *isDirectory )
	OSErr  FSNewAliasUnicode(const FSRef *fromFile , const FSRef *targetParentRef , UniCharCount targetNameLength , const UniChar *targetName , AliasHandle *inAlias , Boolean *isDirectory )
	OSErr  FSOpenFork(const FSRef *ref , UniCharCount forkNameLength , const UniChar *forkName , SInt8 permissions , FSIORefNum *forkRefNum )
	OSErr  FSOpenIterator(const FSRef *container , FSIteratorFlags iteratorFlags , FSIterator *iterator )
	OSErr  FSOpenOrphanResFile(const FSRef *ref , SignedByte permission , ResFileRefNum *refNum )
	ResFileRefNum  FSOpenResFile(const FSRef *ref , SInt8 permission )
	OSErr  FSOpenResourceFile(const FSRef *ref , UniCharCount forkNameLength , const UniChar *forkName , SInt8 permissions , ResFileRefNum *refNum )
	OSStatus  FSPathCopyObjectAsync(FSFileOperationRef fileOp , const char *sourcePath , const char *destDirPath , CFStringRef destName , OptionBits flags , FSPathFileOperationStatusProcPtr callback , CFTimeInterval statusChangeInterval , FSFileOperationClientContext *clientContext )
	OSStatus  FSPathCopyObjectSync(const char *sourcePath , const char *destDirPath , CFStringRef destName , char **targetPath , OptionBits options )
	OSStatus  FSPathFileOperationCopyStatus(FSFileOperationRef fileOp , char **currentItem , FSFileOperationStage *stage , OSStatus *error , CFDictionaryRef *statusDictionary , void **info )
	OSStatus  FSPathGetTemporaryDirectoryForReplaceObject(const char *originalObjectPath , char *temporaryDirectoryPath , UInt32 maxPathSize , OptionBits flags )
	OSStatus  FSPathMakeRef(const UInt8 *path , FSRef *ref , Boolean *isDirectory )
	OSStatus  FSPathMakeRefWithOptions(const UInt8 *path , OptionBits options , FSRef *ref , Boolean *isDirectory )
	OSStatus  FSPathMoveObjectAsync(FSFileOperationRef fileOp , const char *sourcePath , const char *destDirPath , CFStringRef destName , OptionBits flags , FSPathFileOperationStatusProcPtr callback , CFTimeInterval statusChangeInterval , FSFileOperationClientContext *clientContext )
	OSStatus  FSPathMoveObjectSync(const char *sourcePath , const char *destDirPath , CFStringRef destName , char **targetPath , OptionBits options )
	OSStatus  FSPathMoveObjectToTrashAsync(FSFileOperationRef fileOp , const char *sourcePath , OptionBits flags , FSPathFileOperationStatusProcPtr callback , CFTimeInterval statusChangeInterval , FSFileOperationClientContext *clientContext )
	OSStatus  FSPathMoveObjectToTrashSync(const char *sourcePath , char **targetPath , OptionBits options )
	OSStatus  FSPathReplaceObject(const char *originalObjectPath , const char *replacementObjectPath , CFStringRef newName , CFStringRef temporaryName , const char *temporaryDirectoryPath , OptionBits flags )
	OSErr  FSReadFork(FSIORefNum forkRefNum , UInt16 positionMode , SInt64 positionOffset , ByteCount requestCount , void *buffer , ByteCount *actualCount )
	OSStatus  FSRefMakePath(const FSRef *ref , UInt8 *path , UInt32 pathBufferSize )
	OSErr  FSRenameUnicode(const FSRef *ref , UniCharCount nameLength , const UniChar *name , TextEncoding textEncodingHint , FSRef *newRef )
	OSStatus  FSReplaceObject(const FSRef *originalObject , const FSRef *replacementObject , CFStringRef newName , CFStringRef temporaryName , const FSRef *temporaryDirectory , OptionBits flags , FSRef *resultObject )
	OSErr  FSResolveAlias(const FSRef *fromFile , AliasHandle alias , FSRef *target , Boolean *wasChanged )
	OSErr  FSResolveAliasFile(FSRef *theRef , Boolean resolveAliasChains , Boolean *targetIsFolder , Boolean *wasAliased )
	OSErr  FSResolveAliasFileWithMountFlags(FSRef *theRef , Boolean resolveAliasChains , Boolean *targetIsFolder , Boolean *wasAliased , unsigned long mountFlags )
	OSErr  FSResolveAliasWithMountFlags(const FSRef *fromFile , AliasHandle inAlias , FSRef *target , Boolean *wasChanged , unsigned long mountFlags )
	OSStatus  FSResolveNodeID(FSVolumeRefNum volume , UInt32 nodeID , FSRefPtr newRef )
	Boolean  FSResourceFileAlreadyOpen(const FSRef *resourceFileRef , Boolean *inChain , ResFileRefNum *refNum )
	OSErr  FSSetCatalogInfo(const FSRef *ref , FSCatalogInfoBitmap whichInfo , const FSCatalogInfo *catalogInfo )
	OSErr  FSSetForkPosition(FSIORefNum forkRefNum , UInt16 positionMode , SInt64 positionOffset )
	OSErr  FSSetForkSize(FSIORefNum forkRefNum , UInt16 positionMode , SInt64 positionOffset )
	OSErr  FSSetVolumeInfo(FSVolumeRefNum volume , FSVolumeInfoBitmap whichInfo , const FSVolumeInfo *info )
	OSErr  FSUnlinkObject(const FSRef *ref )
	OSStatus  FSUnlockRange(FSIORefNum forkRefNum , UInt16 positionMode , SInt64 positionOffset , UInt64 requestCount , UInt64 *rangeStart )
	OSStatus  FSUnmountVolumeAsync(FSVolumeRefNum vRefNum , OptionBits flags , FSVolumeOperation volumeOp , void *clientData , FSVolumeUnmountUPP callback , CFRunLoopRef runloop , CFStringRef runloopMode )
	OSStatus  FSUnmountVolumeSync(FSVolumeRefNum vRefNum , OptionBits flags , pid_t *dissenter )
	OSErr  FSUpdateAlias(const FSRef *fromFile , const FSRef *target , AliasHandle alias , Boolean *wasChanged )
	OSStatus  FSVolumeMount(BytePtr buffer , FSVolumeRefNum *mountedVolume )
	OSErr  FSWriteFork(FSIORefNum forkRefNum , UInt16 positionMode , SInt64 positionOffset , ByteCount requestCount , const void *buffer , ByteCount *actualCount )
	int  fsync(int )
	int  fsync_volume_np(int , int )
	long  ftell(FILE * )
	off_t  ftello(FILE * )
	int  ftruncate(int , off_t )
	int  ftrylockfile(FILE * )
	void  funlockfile(FILE * )
	FILE *  funopen(const void * , int (*)(void *, char *, int) , int (*)(void *, const char *, int) , fpos_t (*)(void *, fpos_t, int) , int (*)(void *) )
	size_t  fwrite(const void * , size_t , size_t , FILE * )
	double  gamma(double )
	char *  gcvt(double , int , char * )
	OSErr  Gestalt(OSType selector , SInt32 *response )
	Handle  Get1IndResource(ResType theType , ResourceIndex itemIndex )
	void  Get1IndType(ResType *theType , ResourceIndex itemIndex )
	Handle  Get1NamedResource(ResType theType , ConstStr255Param name )
	Handle  Get1Resource(ResType theType , ResID theID )
	Size  GetAliasSize(AliasHandle alias )
	Size  GetAliasSizeFromPtr(const AliasRecord *alias )
	OSType  GetAliasUserType(AliasHandle alias )
	OSType  GetAliasUserTypeFromPtr(const AliasRecord *alias )
	int  getattrlist(const char * , void * , void * , size_t , unsigned int )
	int  getaudit(struct auditinfo * )
	int  getaudit_addr(struct auditinfo_addr * , int )
	int  getauid(au_id_t * )
	char *  getbsize(int * , long * )
	int  getc(FILE * )
	int  getc_unlocked(FILE * )
	int  getchar()
	int  getchar_unlocked()
	SInt32  GetCollectionDefaultAttributes(Collection c )
	CollectionExceptionUPP  GetCollectionExceptionProc(Collection c )
	OSErr  GetCollectionItem(Collection c , CollectionTag tag , SInt32 id , SInt32 *itemSize , void *itemData )
	OSErr  GetCollectionItemHdl(Collection aCollection , CollectionTag tag , SInt32 id , Handle itemData )
	OSErr  GetCollectionItemInfo(Collection c , CollectionTag tag , SInt32 id , SInt32 *itemIndex , SInt32 *itemSize , SInt32 *attributes )
	ItemCount  GetCollectionRetainCount(Collection c )
	OSErr  GetComponentIndString(Component aComponent , unsigned char *theString , SInt16 strListID , SInt16 index )
	OSErr  GetComponentInfo(Component aComponent , ComponentDescription *cd , Handle componentName , Handle componentInfo , Handle componentIcon )
	OSErr  GetComponentInstanceError(ComponentInstance aComponentInstance )
	Handle  GetComponentInstanceStorage(ComponentInstance aComponentInstance )
	SInt32  GetComponentListModSeed()
	OSErr  GetComponentPublicIndString(Component aComponent , unsigned char *theString , SInt16 strListID , SInt16 index )
	OSErr  GetComponentPublicResource(Component aComponent , OSType resourceType , SInt16 resourceID , Handle *theResource )
	OSErr  GetComponentPublicResourceList(OSType resourceType , SInt16 resourceID , SInt32 flags , ComponentDescription *cd , GetMissingComponentResourceUPP missingProc , void *refCon , void *atomContainerPtr )
	long  GetComponentRefcon(Component aComponent )
	OSErr  GetComponentResource(Component aComponent , OSType resType , SInt16 resID , Handle *theResource )
	SInt32  GetComponentTypeModSeed(OSType componentType )
	long  GetCPUSpeed()
	OSErr  GetCurrentProcess(ProcessSerialNumber *PSN )
	OSErr  GetCurrentThread(ThreadID *currentThreadID )
	OSErr  GetCustomIconsEnabled(SInt16 vRefNum , Boolean *customIconsEnabled )
	char *  getcwd(char * , size_t )
	struct tm *  getdate(const char * )
	OSStatus  GetDebugComponentInfo(UInt32 itemIndex , OSType *componentSignature , unsigned char *componentName )
	OSStatus  GetDebugOptionInfo(UInt32 itemIndex , OSType componentSignature , SInt32 *optionSelectorNum , unsigned char *optionName , Boolean *optionSetting )
	OSErr  GetDefaultThreadStackSize(ThreadStyle threadStyle , Size *stackSize )
	ssize_t  getdelim(char ** , size_t * , int , FILE * )
	int  getdirentriesattr(int , void * , void * , size_t , unsigned int * , unsigned int * , unsigned int * , unsigned int )
	int  getdomainname(char * , int )
	int  getdtablesize()
	gid_t  getegid()
	char *  getenv(const char * )
	uid_t  geteuid()
	OSStatus  GetFolderNameUnicode(FSVolumeRefNum vRefNum , OSType foldType , FSVolumeRefNum *foundVRefNum , HFSUniStr255 *name )
	OSErr  GetFolderTypes(UInt32 requestedTypeCount , UInt32 *totalTypeCount , FolderType *theTypes )
	OSErr  GetFrontProcess(ProcessSerialNumber *PSN )
	gid_t  getgid()
	int  getgrouplist(const char * , int , int * , int * )
	int  getgroups(int , gid_t * )
	Size  GetHandleSize(Handle h )
	long  gethostid()
	int  gethostname(char * , size_t )
	int  gethostuuid(unsigned char * , const struct timespec * )
	OSErr  GetIconFamilyData(IconFamilyHandle iconFamily , OSType iconType , Handle h )
	OSErr  GetIconRef(SInt16 vRefNum , OSType creator , OSType iconType , IconRef *theIconRef )
	OSStatus  GetIconRefFromComponent(Component inComponent , IconRef *outIconRef )
	OSStatus  GetIconRefFromFileInfo(const FSRef *inRef , UniCharCount inFileNameLength , const UniChar *inFileName , FSCatalogInfoBitmap inWhichInfo , const FSCatalogInfo *inCatalogInfo , IconServicesUsageFlags inUsageFlags , IconRef *outIconRef , SInt16 *outLabel )
	OSErr  GetIconRefFromFolder(SInt16 vRefNum , SInt32 parentFolderID , SInt32 folderID , SInt8 attributes , SInt8 accessPrivileges , IconRef *theIconRef )
	OSStatus  GetIconRefFromIconFamilyPtr(const IconFamilyResource *inIconFamilyPtr , Size inSize , IconRef *outIconRef )
	OSErr  GetIconRefFromTypeInfo(OSType inCreator , OSType inType , CFStringRef inExtension , CFStringRef inMIMEType , IconServicesUsageFlags inUsageFlags , IconRef *outIconRef )
	OSErr  GetIconRefOwners(IconRef theIconRef , UInt16 *owners )
	IconRef  GetIconRefVariant(IconRef inIconRef , OSType inVariant , IconTransformType *outTransform )
	OSErr  GetIndexedCollectionItem(Collection c , SInt32 itemIndex , SInt32 *itemSize , void *itemData )
	OSErr  GetIndexedCollectionItemHdl(Collection aCollection , SInt32 itemIndex , Handle itemData )
	OSErr  GetIndexedCollectionItemInfo(Collection c , SInt32 itemIndex , CollectionTag *tag , SInt32 *id , SInt32 *itemSize , SInt32 *attributes )
	OSErr  GetIndexedCollectionTag(Collection c , SInt32 tagIndex , CollectionTag *tag )
	Handle  GetIndResource(ResType theType , ResourceIndex itemIndex )
	void  GetIndType(ResType *theType , ResourceIndex itemIndex )
	OSErr  GetIndVoice(SInt16 index , VoiceSpec *voice )
	int  getiopolicy_np(int , int )
	ssize_t  getline(char ** , size_t * , FILE * )
	int  getloadavg(double * , int )
	char *  getlogin()
	int  getlogin_r(char * , size_t )
	const char *  GetMacOSStatusCommentString(OSStatus err )
	const char *  GetMacOSStatusErrorString(OSStatus err )
	long  GetMaxResourceSize(Handle theResource )
	mode_t  getmode(const void * , mode_t )
	Handle  GetNamedResource(ResType theType , ConstStr255Param name )
	Collection  GetNewCollection(SInt16 collectionID )
	Handle  GetNextFOND(Handle fondHandle )
	OSErr  GetNextProcess(ProcessSerialNumber *PSN )
	OSErr  GetNextResourceFile(ResFileRefNum curRefNum , ResFileRefNum *nextRefNum )
	int  getopt(int , char *const * , const char * )
	int  getpagesize()
	char *  getpass(const char * )
	int  getpeereid(int , uid_t * , gid_t * )
	pid_t  getpgid(pid_t )
	pid_t  getpgrp()
	pid_t  getpid()
	pid_t  getppid()
	int  getpriority(int , id_t )
	OSStatus  GetProcessBundleLocation(const ProcessSerialNumber *psn , FSRef *location )
	OSStatus  GetProcessForPID(pid_t pid , ProcessSerialNumber *psn )
	OSErr  GetProcessInformation(const ProcessSerialNumber *PSN , ProcessInfoRec *info )
	OSStatus  GetProcessPID(const ProcessSerialNumber *psn , pid_t *pid )
	const char *  getprogname()
	Size  GetPtrSize(Ptr p )
	ResAttributes  GetResAttrs(Handle theResource )
	ResFileAttributes  GetResFileAttrs(ResFileRefNum refNum )
	void  GetResInfo(Handle theResource , ResID *theID , ResType *theType , unsigned char *name )
	Handle  GetResource(ResType theType , ResID theID )
	long  GetResourceSizeOnDisk(Handle theResource )
	int  getrlimit(int , struct rlimit * )
	int  getrusage(int , struct rusage * )
	char *  gets(char * )
	OSStatus  GetScriptInfoFromTextEncoding(TextEncoding iEncoding , ScriptCode *oTextScriptID , LangCode *oTextLanguageID )
	long  GetScriptManagerVariable(short selector )
	int  getsgroups_np(int * , unsigned char * )
	pid_t  getsid(pid_t )
	OSErr  GetSpeechInfo(SpeechChannel chan , OSType selector , void *speechInfo )
	OSErr  GetSpeechPitch(SpeechChannel chan , Fixed *pitch )
	OSErr  GetSpeechRate(SpeechChannel chan , Fixed *rate )
	int  getsubopt(char ** , char *const * , char ** )
	OSErr  GetTaggedCollectionItem(Collection c , CollectionTag tag , SInt32 whichItem , SInt32 *itemSize , void *itemData )
	OSErr  GetTaggedCollectionItemInfo(Collection c , CollectionTag tag , SInt32 whichItem , SInt32 *id , SInt32 *itemIndex , SInt32 *itemSize , SInt32 *attributes )
	TextEncodingBase  GetTextEncodingBase(TextEncoding encoding )
	TextEncodingFormat  GetTextEncodingFormat(TextEncoding encoding )
	OSStatus  GetTextEncodingFromScriptInfo(ScriptCode iTextScriptID , LangCode iTextLanguageID , RegionCode iTextRegionID , TextEncoding *oEncoding )
	OSStatus  GetTextEncodingName(TextEncoding iEncoding , TextEncodingNameSelector iNamePartSelector , RegionCode iPreferredRegion , TextEncoding iPreferredEncoding , ByteCount iOutputBufLen , ByteCount *oNameLength , RegionCode *oActualRegion , TextEncoding *oActualEncoding , TextPtr oEncodingName )
	TextEncodingVariant  GetTextEncodingVariant(TextEncoding encoding )
	OSErr  GetThreadCurrentTaskRef(ThreadTaskRef *threadTRef )
	OSErr  GetThreadState(ThreadID threadToGet , ThreadState *threadState )
	OSErr  GetThreadStateGivenTaskRef(ThreadTaskRef threadTRef , ThreadID threadToGet , ThreadState *threadState )
	OSErr  GetTopResourceFile(ResFileRefNum *refNum )
	uid_t  getuid()
	char *  getusershell()
	OSErr  GetVoiceDescription(const VoiceSpec *voice , VoiceDescription *info , long infoLength )
	OSErr  GetVoiceInfo(const VoiceSpec *voice , OSType selector , void *voiceInfo )
	int  getw(FILE * )
	char *  getwd(char * )
	int  getwgroups_np(int * , unsigned char * )
	void  glAccum(GLenum op , GLfloat value )
	void  glActiveStencilFaceEXT(GLenum face )
	void  glActiveTexture(GLenum texture )
	void  glActiveTextureARB(GLenum texture )
	void  glAlphaFunc(GLenum func , GLclampf ref )
	GLboolean  glAreTexturesResident(GLsizei n , const GLuint *textures , GLboolean *residences )
	void  glArrayElement(GLint i )
	void  glAttachObjectARB(GLhandleARB containerObj , GLhandleARB obj )
	void  glAttachShader(GLuint program , GLuint shader )
	void  glBegin(GLenum mode )
	void  glBeginConditionalRenderNV(GLuint id , GLenum mode )
	void  glBeginQuery(GLenum target , GLuint id )
	void  glBeginQueryARB(GLenum target , GLuint id )
	void  glBeginTransformFeedbackEXT(GLenum primitiveMode )
	void  glBindAttribLocation(GLuint program , GLuint index , const GLchar *name )
	void  glBindAttribLocationARB(GLhandleARB programObj , GLuint index , const GLcharARB *name )
	void  glBindBuffer(GLenum target , GLuint buffer )
	void  glBindBufferARB(GLenum target , GLuint buffer )
	void  glBindBufferBaseEXT(GLenum target , GLuint index , GLuint buffer )
	void  glBindBufferOffsetEXT(GLenum target , GLuint index , GLuint buffer , GLintptr offset )
	void  glBindBufferRangeEXT(GLenum target , GLuint index , GLuint buffer , GLintptr offset , GLsizeiptr size )
	void  glBindFragDataLocationEXT(GLuint program , GLuint colorNumber , const GLchar *name )
	void  glBindFramebuffer(GLenum target , GLuint framebuffer )
	void  glBindFramebufferEXT(GLenum target , GLuint framebuffer )
	void  glBindProgramARB(GLenum target , GLuint program )
	void  glBindRenderbuffer(GLenum target , GLuint renderbuffer )
	void  glBindRenderbufferEXT(GLenum target , GLuint renderbuffer )
	void  glBindTexture(GLenum target , GLuint texture )
	void  glBindVertexArrayAPPLE(GLuint id )
	void  glBitmap(GLsizei width , GLsizei height , GLfloat xorig , GLfloat yorig , GLfloat xmove , GLfloat ymove , const GLubyte *bitmap )
	void  glBlendColor(GLclampf red , GLclampf green , GLclampf blue , GLclampf alpha )
	void  glBlendColorEXT(GLclampf red , GLclampf green , GLclampf blue , GLclampf alpha )
	void  glBlendEquation(GLenum mode )
	void  glBlendEquationEXT(GLenum mode )
	void  glBlendEquationSeparate(GLenum modeRGB , GLenum modeAlpha )
	void  glBlendEquationSeparateATI(GLenum equationRGB , GLenum equationAlpha )
	void  glBlendEquationSeparateEXT(GLenum modeRGB , GLenum modeAlpha )
	void  glBlendFunc(GLenum sfactor , GLenum dfactor )
	void  glBlendFuncSeparate(GLenum srcRGB , GLenum dstRGB , GLenum srcAlpha , GLenum dstAlpha )
	void  glBlendFuncSeparateEXT(GLenum sfactorRGB , GLenum dfactorRGB , GLenum sfactorAlpha , GLenum dfactorAlpha )
	void  glBlitFramebuffer(GLint srcX0 , GLint srcY0 , GLint srcX1 , GLint srcY1 , GLint dstX0 , GLint dstY0 , GLint dstX1 , GLint dstY1 , GLbitfield mask , GLenum filter )
	void  glBlitFramebufferEXT(GLint srcX0 , GLint srcY0 , GLint srcX1 , GLint srcY1 , GLint dstX0 , GLint dstY0 , GLint dstX1 , GLint dstY1 , GLbitfield mask , GLenum filter )
	void  glBufferData(GLenum target , GLsizeiptr size , const GLvoid *data , GLenum usage )
	void  glBufferDataARB(GLenum target , GLsizeiptrARB size , const GLvoid *data , GLenum usage )
	void  glBufferParameteriAPPLE(GLenum target , GLenum pname , GLint param )
	void  glBufferSubData(GLenum target , GLintptr offset , GLsizeiptr size , const GLvoid *data )
	void  glBufferSubDataARB(GLenum target , GLintptrARB offset , GLsizeiptrARB size , const GLvoid *data )
	void  glCallList(GLuint list )
	void  glCallLists(GLsizei n , GLenum type , const GLvoid *lists )
	GLenum  glCheckFramebufferStatus(GLenum target )
	GLenum  glCheckFramebufferStatusEXT(GLenum target )
	void  glClampColorARB(GLenum target , GLenum clamp )
	void  glClear(GLbitfield mask )
	void  glClearAccum(GLfloat red , GLfloat green , GLfloat blue , GLfloat alpha )
	void  glClearColor(GLclampf red , GLclampf green , GLclampf blue , GLclampf alpha )
	void  glClearColorIiEXT(GLint r , GLint g , GLint b , GLint a )
	void  glClearColorIuiEXT(GLuint r , GLuint g , GLuint b , GLuint a )
	void  glClearDepth(GLclampd depth )
	void  glClearIndex(GLfloat c )
	void  glClearStencil(GLint s )
	void  glClientActiveTexture(GLenum texture )
	void  glClientActiveTextureARB(GLenum texture )
	GLenum  glClientWaitSync(GLsync sync , GLbitfield flags , GLuint64 timeout )
	void  glClipPlane(GLenum plane , const GLdouble *equation )
	void  glColor3b(GLbyte red , GLbyte green , GLbyte blue )
	void  glColor3bv(const GLbyte *v )
	void  glColor3d(GLdouble red , GLdouble green , GLdouble blue )
	void  glColor3dv(const GLdouble *v )
	void  glColor3f(GLfloat red , GLfloat green , GLfloat blue )
	void  glColor3fv(const GLfloat *v )
	void  glColor3i(GLint red , GLint green , GLint blue )
	void  glColor3iv(const GLint *v )
	void  glColor3s(GLshort red , GLshort green , GLshort blue )
	void  glColor3sv(const GLshort *v )
	void  glColor3ub(GLubyte red , GLubyte green , GLubyte blue )
	void  glColor3ubv(const GLubyte *v )
	void  glColor3ui(GLuint red , GLuint green , GLuint blue )
	void  glColor3uiv(const GLuint *v )
	void  glColor3us(GLushort red , GLushort green , GLushort blue )
	void  glColor3usv(const GLushort *v )
	void  glColor4b(GLbyte red , GLbyte green , GLbyte blue , GLbyte alpha )
	void  glColor4bv(const GLbyte *v )
	void  glColor4d(GLdouble red , GLdouble green , GLdouble blue , GLdouble alpha )
	void  glColor4dv(const GLdouble *v )
	void  glColor4f(GLfloat red , GLfloat green , GLfloat blue , GLfloat alpha )
	void  glColor4fv(const GLfloat *v )
	void  glColor4i(GLint red , GLint green , GLint blue , GLint alpha )
	void  glColor4iv(const GLint *v )
	void  glColor4s(GLshort red , GLshort green , GLshort blue , GLshort alpha )
	void  glColor4sv(const GLshort *v )
	void  glColor4ub(GLubyte red , GLubyte green , GLubyte blue , GLubyte alpha )
	void  glColor4ubv(const GLubyte *v )
	void  glColor4ui(GLuint red , GLuint green , GLuint blue , GLuint alpha )
	void  glColor4uiv(const GLuint *v )
	void  glColor4us(GLushort red , GLushort green , GLushort blue , GLushort alpha )
	void  glColor4usv(const GLushort *v )
	void  glColorMask(GLboolean red , GLboolean green , GLboolean blue , GLboolean alpha )
	void  glColorMaskIndexedEXT(GLuint index , GLboolean r , GLboolean g , GLboolean b , GLboolean a )
	void  glColorMaterial(GLenum face , GLenum mode )
	void  glColorPointer(GLint size , GLenum type , GLsizei stride , const GLvoid *pointer )
	void  glColorSubTable(GLenum target , GLsizei start , GLsizei count , GLenum format , GLenum type , const GLvoid *data )
	void  glColorTable(GLenum target , GLenum internalformat , GLsizei width , GLenum format , GLenum type , const GLvoid *table )
	void  glColorTableParameterfv(GLenum target , GLenum pname , const GLfloat *params )
	void  glColorTableParameteriv(GLenum target , GLenum pname , const GLint *params )
	void  glCompileShader(GLuint shader )
	void  glCompileShaderARB(GLhandleARB shaderObj )
	void  glCompressedTexImage1D(GLenum target , GLint level , GLenum internalformat , GLsizei width , GLint border , GLsizei imageSize , const GLvoid *data )
	void  glCompressedTexImage1DARB(GLenum target , GLint level , GLenum internalformat , GLsizei width , GLint border , GLsizei imageSize , const GLvoid *data )
	void  glCompressedTexImage2D(GLenum target , GLint level , GLenum internalformat , GLsizei width , GLsizei height , GLint border , GLsizei imageSize , const GLvoid *data )
	void  glCompressedTexImage2DARB(GLenum target , GLint level , GLenum internalformat , GLsizei width , GLsizei height , GLint border , GLsizei imageSize , const GLvoid *data )
	void  glCompressedTexImage3D(GLenum target , GLint level , GLenum internalformat , GLsizei width , GLsizei height , GLsizei depth , GLint border , GLsizei imageSize , const GLvoid *data )
	void  glCompressedTexImage3DARB(GLenum target , GLint level , GLenum internalformat , GLsizei width , GLsizei height , GLsizei depth , GLint border , GLsizei imageSize , const GLvoid *data )
	void  glCompressedTexSubImage1D(GLenum target , GLint level , GLint xoffset , GLsizei width , GLenum format , GLsizei imageSize , const GLvoid *data )
	void  glCompressedTexSubImage1DARB(GLenum target , GLint level , GLint xoffset , GLsizei width , GLenum format , GLsizei imageSize , const GLvoid *data )
	void  glCompressedTexSubImage2D(GLenum target , GLint level , GLint xoffset , GLint yoffset , GLsizei width , GLsizei height , GLenum format , GLsizei imageSize , const GLvoid *data )
	void  glCompressedTexSubImage2DARB(GLenum target , GLint level , GLint xoffset , GLint yoffset , GLsizei width , GLsizei height , GLenum format , GLsizei imageSize , const GLvoid *data )
	void  glCompressedTexSubImage3D(GLenum target , GLint level , GLint xoffset , GLint yoffset , GLint zoffset , GLsizei width , GLsizei height , GLsizei depth , GLenum format , GLsizei imageSize , const GLvoid *data )
	void  glCompressedTexSubImage3DARB(GLenum target , GLint level , GLint xoffset , GLint yoffset , GLint zoffset , GLsizei width , GLsizei height , GLsizei depth , GLenum format , GLsizei imageSize , const GLvoid *data )
	void  glConvolutionFilter1D(GLenum target , GLenum internalformat , GLsizei width , GLenum format , GLenum type , const GLvoid *image )
	void  glConvolutionFilter2D(GLenum target , GLenum internalformat , GLsizei width , GLsizei height , GLenum format , GLenum type , const GLvoid *image )
	void  glConvolutionParameterf(GLenum target , GLenum pname , GLfloat params )
	void  glConvolutionParameterfv(GLenum target , GLenum pname , const GLfloat *params )
	void  glConvolutionParameteri(GLenum target , GLenum pname , GLint params )
	void  glConvolutionParameteriv(GLenum target , GLenum pname , const GLint *params )
	void  glCopyColorSubTable(GLenum target , GLsizei start , GLint x , GLint y , GLsizei width )
	void  glCopyColorTable(GLenum target , GLenum internalformat , GLint x , GLint y , GLsizei width )
	void  glCopyConvolutionFilter1D(GLenum target , GLenum internalformat , GLint x , GLint y , GLsizei width )
	void  glCopyConvolutionFilter2D(GLenum target , GLenum internalformat , GLint x , GLint y , GLsizei width , GLsizei height )
	void  glCopyPixels(GLint x , GLint y , GLsizei width , GLsizei height , GLenum type )
	void  glCopyTexImage1D(GLenum target , GLint level , GLenum internalformat , GLint x , GLint y , GLsizei width , GLint border )
	void  glCopyTexImage2D(GLenum target , GLint level , GLenum internalformat , GLint x , GLint y , GLsizei width , GLsizei height , GLint border )
	void  glCopyTexSubImage1D(GLenum target , GLint level , GLint xoffset , GLint x , GLint y , GLsizei width )
	void  glCopyTexSubImage2D(GLenum target , GLint level , GLint xoffset , GLint yoffset , GLint x , GLint y , GLsizei width , GLsizei height )
	void  glCopyTexSubImage3D(GLenum target , GLint level , GLint xoffset , GLint yoffset , GLint zoffset , GLint x , GLint y , GLsizei width , GLsizei height )
	GLuint  glCreateProgram()
	GLhandleARB  glCreateProgramObjectARB()
	GLuint  glCreateShader(GLenum type )
	GLhandleARB  glCreateShaderObjectARB(GLenum shaderType )
	void  glCullFace(GLenum mode )
	void  glDeleteBuffers(GLsizei n , const GLuint *buffers )
	void  glDeleteBuffersARB(GLsizei n , const GLuint *buffers )
	void  glDeleteFencesAPPLE(GLsizei n , const GLuint *fences )
	void  glDeleteFramebuffers(GLsizei n , const GLuint *framebuffers )
	void  glDeleteFramebuffersEXT(GLsizei n , const GLuint *framebuffers )
	void  glDeleteLists(GLuint list , GLsizei range )
	void  glDeleteObjectARB(GLhandleARB obj )
	void  glDeleteProgram(GLuint program )
	void  glDeleteProgramsARB(GLsizei n , const GLuint *programs )
	void  glDeleteQueries(GLsizei n , const GLuint *ids )
	void  glDeleteQueriesARB(GLsizei n , const GLuint *ids )
	void  glDeleteRenderbuffers(GLsizei n , const GLuint *renderbuffers )
	void  glDeleteRenderbuffersEXT(GLsizei n , const GLuint *renderbuffers )
	void  glDeleteShader(GLuint shader )
	void  glDeleteSync(GLsync sync )
	void  glDeleteTextures(GLsizei n , const GLuint *textures )
	void  glDeleteVertexArraysAPPLE(GLsizei n , const GLuint *ids )
	void  glDepthBoundsEXT(GLclampd zmin , GLclampd zmax )
	void  glDepthFunc(GLenum func )
	void  glDepthMask(GLboolean flag )
	void  glDepthRange(GLclampd zNear , GLclampd zFar )
	void  glDetachObjectARB(GLhandleARB containerObj , GLhandleARB attachedObj )
	void  glDetachShader(GLuint program , GLuint shader )
	void  glDisable(GLenum cap )
	void  glDisableClientState(GLenum array )
	void  glDisableIndexedEXT(GLenum target , GLuint index )
	void  glDisableVertexAttribAPPLE(GLuint index , GLenum pname )
	void  glDisableVertexAttribArray(GLuint index )
	void  glDisableVertexAttribArrayARB(GLuint index )
	void  glDrawArrays(GLenum mode , GLint first , GLsizei count )
	void  glDrawArraysInstancedARB(GLenum mode , GLint first , GLsizei count , GLsizei primcount )
	void  glDrawBuffer(GLenum mode )
	void  glDrawBuffers(GLsizei n , const GLenum *bufs )
	void  glDrawBuffersARB(GLsizei n , const GLenum *bufs )
	void  glDrawElementArrayAPPLE(GLenum mode , GLint first , GLsizei count )
	void  glDrawElements(GLenum mode , GLsizei count , GLenum type , const GLvoid *indices )
	void  glDrawElementsBaseVertex(GLenum mode , GLsizei count , GLenum type , const GLvoid *indices , GLint base_vertex )
	void  glDrawElementsInstancedARB(GLenum mode , GLsizei count , GLenum type , const GLvoid *indices , GLsizei primcount )
	void  glDrawElementsInstancedBaseVertex(GLenum mode , GLsizei count , GLenum type , const GLvoid *indices , GLsizei primcount , GLint base_vertex )
	void  glDrawPixels(GLsizei width , GLsizei height , GLenum format , GLenum type , const GLvoid *pixels )
	void  glDrawRangeElementArrayAPPLE(GLenum mode , GLuint start , GLuint end , GLint first , GLsizei count )
	void  glDrawRangeElements(GLenum mode , GLuint start , GLuint end , GLsizei count , GLenum type , const GLvoid *indices )
	void  glDrawRangeElementsBaseVertex(GLenum mode , GLuint start , GLuint end , GLsizei count , GLenum type , const GLvoid *indices , GLint base_vertex )
	void  glDrawRangeElementsEXT(GLenum mode , GLuint start , GLuint end , GLsizei count , GLenum type , const GLvoid *indices )
	void  glEdgeFlag(GLboolean flag )
	void  glEdgeFlagPointer(GLsizei stride , const GLvoid *pointer )
	void  glEdgeFlagv(const GLboolean *flag )
	void  glElementPointerAPPLE(GLenum type , const GLvoid *pointer )
	void  glEnable(GLenum cap )
	void  glEnableClientState(GLenum array )
	void  glEnableIndexedEXT(GLenum target , GLuint index )
	void  glEnableVertexAttribAPPLE(GLuint index , GLenum pname )
	void  glEnableVertexAttribArray(GLuint index )
	void  glEnableVertexAttribArrayARB(GLuint index )
	void  glEnd()
	void  glEndConditionalRenderNV()
	void  glEndList()
	void  glEndQuery(GLenum target )
	void  glEndQueryARB(GLenum target )
	void  glEndTransformFeedbackEXT()
	void  glEvalCoord1d(GLdouble u )
	void  glEvalCoord1dv(const GLdouble *u )
	void  glEvalCoord1f(GLfloat u )
	void  glEvalCoord1fv(const GLfloat *u )
	void  glEvalCoord2d(GLdouble u , GLdouble v )
	void  glEvalCoord2dv(const GLdouble *u )
	void  glEvalCoord2f(GLfloat u , GLfloat v )
	void  glEvalCoord2fv(const GLfloat *u )
	void  glEvalMesh1(GLenum mode , GLint i1 , GLint i2 )
	void  glEvalMesh2(GLenum mode , GLint i1 , GLint i2 , GLint j1 , GLint j2 )
	void  glEvalPoint1(GLint i )
	void  glEvalPoint2(GLint i , GLint j )
	void  glFeedbackBuffer(GLsizei size , GLenum type , GLfloat *buffer )
	GLsync  glFenceSync(GLenum condition , GLbitfield flags )
	void  glFinish()
	void  glFinishFenceAPPLE(GLuint fence )
	void  glFinishObjectAPPLE(GLenum object , GLuint name )
	void  glFinishRenderAPPLE()
	void  glFlush()
	void  glFlushMappedBufferRangeAPPLE(GLenum target , GLintptr offset , GLsizeiptr size )
	void  glFlushRenderAPPLE()
	void  glFlushVertexArrayRangeAPPLE(GLsizei length , const GLvoid *pointer )
	void  glFogCoordd(GLdouble coord )
	void  glFogCoorddEXT(GLdouble coord )
	void  glFogCoorddv(const GLdouble *coord )
	void  glFogCoorddvEXT(const GLdouble *coord )
	void  glFogCoordf(GLfloat coord )
	void  glFogCoordfEXT(GLfloat coord )
	void  glFogCoordfv(const GLfloat *coord )
	void  glFogCoordfvEXT(const GLfloat *coord )
	void  glFogCoordPointer(GLenum type , GLsizei stride , const GLvoid *pointer )
	void  glFogCoordPointerEXT(GLenum type , GLsizei stride , const GLvoid *pointer )
	void  glFogf(GLenum pname , GLfloat param )
	void  glFogfv(GLenum pname , const GLfloat *params )
	void  glFogi(GLenum pname , GLint param )
	void  glFogiv(GLenum pname , const GLint *params )
	void  glFramebufferRenderbuffer(GLenum target , GLenum attachment , GLenum renderbuffertarget , GLuint renderbuffer )
	void  glFramebufferRenderbufferEXT(GLenum target , GLenum attachment , GLenum renderbuffertarget , GLuint renderbuffer )
	void  glFramebufferTexture1D(GLenum target , GLenum attachment , GLenum textarget , GLuint texture , GLint level )
	void  glFramebufferTexture1DEXT(GLenum target , GLenum attachment , GLenum textarget , GLuint texture , GLint level )
	void  glFramebufferTexture2D(GLenum target , GLenum attachment , GLenum textarget , GLuint texture , GLint level )
	void  glFramebufferTexture2DEXT(GLenum target , GLenum attachment , GLenum textarget , GLuint texture , GLint level )
	void  glFramebufferTexture3D(GLenum target , GLenum attachment , GLenum textarget , GLuint texture , GLint level , GLint zoffset )
	void  glFramebufferTexture3DEXT(GLenum target , GLenum attachment , GLenum textarget , GLuint texture , GLint level , GLint zoffset )
	void  glFramebufferTextureEXT(GLenum target , GLenum attachment , GLuint texture , GLint level )
	void  glFramebufferTextureFaceEXT(GLenum target , GLenum attachment , GLuint texture , GLint level , GLenum face )
	void  glFramebufferTextureLayer(GLenum target , GLenum attachment , GLuint texture , GLint level , GLint layer )
	void  glFramebufferTextureLayerEXT(GLenum target , GLenum attachment , GLuint texture , GLint level , GLint layer )
	void  glFrontFace(GLenum mode )
	void  glFrustum(GLdouble left , GLdouble right , GLdouble bottom , GLdouble top , GLdouble zNear , GLdouble zFar )
	void  glGenBuffers(GLsizei n , GLuint *buffers )
	void  glGenBuffersARB(GLsizei n , GLuint *buffers )
	void  glGenerateMipmap(GLenum target )
	void  glGenerateMipmapEXT(GLenum target )
	void  glGenFencesAPPLE(GLsizei n , GLuint *fences )
	void  glGenFramebuffers(GLsizei n , GLuint *framebuffers )
	void  glGenFramebuffersEXT(GLsizei n , GLuint *framebuffers )
	GLuint  glGenLists(GLsizei range )
	void  glGenProgramsARB(GLsizei n , GLuint *programs )
	void  glGenQueries(GLsizei n , GLuint *ids )
	void  glGenQueriesARB(GLsizei n , GLuint *ids )
	void  glGenRenderbuffers(GLsizei n , GLuint *renderbuffers )
	void  glGenRenderbuffersEXT(GLsizei n , GLuint *renderbuffers )
	void  glGenTextures(GLsizei n , GLuint *textures )
	void  glGenVertexArraysAPPLE(GLsizei n , GLuint *ids )
	void  glGetActiveAttrib(GLuint program , GLuint index , GLsizei bufSize , GLsizei *length , GLint *size , GLenum *type , GLchar *name )
	void  glGetActiveAttribARB(GLhandleARB programObj , GLuint index , GLsizei maxLength , GLsizei *length , GLint *size , GLenum *type , GLcharARB *name )
	void  glGetActiveUniform(GLuint program , GLuint index , GLsizei bufSize , GLsizei *length , GLint *size , GLenum *type , GLchar *name )
	void  glGetActiveUniformARB(GLhandleARB programObj , GLuint index , GLsizei maxLength , GLsizei *length , GLint *size , GLenum *type , GLcharARB *name )
	void  glGetAttachedObjectsARB(GLhandleARB containerObj , GLsizei maxCount , GLsizei *count , GLhandleARB *obj )
	void  glGetAttachedShaders(GLuint program , GLsizei maxCount , GLsizei *count , GLuint *shaders )
	GLint  glGetAttribLocation(GLuint program , const GLchar *name )
	GLint  glGetAttribLocationARB(GLhandleARB programObj , const GLcharARB *name )
	void  glGetBooleanIndexedvEXT(GLenum param , GLuint index , GLboolean *values )
	void  glGetBooleanv(GLenum pname , GLboolean *params )
	void  glGetBufferParameteriv(GLenum target , GLenum pname , GLint *params )
	void  glGetBufferParameterivARB(GLenum target , GLenum pname , GLint *params )
	void  glGetBufferPointerv(GLenum target , GLenum pname , GLvoid **params )
	void  glGetBufferPointervARB(GLenum target , GLenum pname , GLvoid **params )
	void  glGetBufferSubData(GLenum target , GLintptr offset , GLsizeiptr size , GLvoid *data )
	void  glGetBufferSubDataARB(GLenum target , GLintptrARB offset , GLsizeiptrARB size , GLvoid *data )
	void  glGetClipPlane(GLenum plane , GLdouble *equation )
	void  glGetColorTable(GLenum target , GLenum format , GLenum type , GLvoid *table )
	void  glGetColorTableParameterfv(GLenum target , GLenum pname , GLfloat *params )
	void  glGetColorTableParameteriv(GLenum target , GLenum pname , GLint *params )
	void  glGetCompressedTexImage(GLenum target , GLint lod , GLvoid *img )
	void  glGetCompressedTexImageARB(GLenum target , GLint level , GLvoid *data )
	void  glGetConvolutionFilter(GLenum target , GLenum format , GLenum type , GLvoid *image )
	void  glGetConvolutionParameterfv(GLenum target , GLenum pname , GLfloat *params )
	void  glGetConvolutionParameteriv(GLenum target , GLenum pname , GLint *params )
	void  glGetDoublev(GLenum pname , GLdouble *params )
	GLenum  glGetError()
	void  glGetFloatv(GLenum pname , GLfloat *params )
	GLint  glGetFragDataLocationEXT(GLuint program , const GLchar *name )
	void  glGetFramebufferAttachmentParameteriv(GLenum target , GLenum attachment , GLenum pname , GLint *params )
	void  glGetFramebufferAttachmentParameterivEXT(GLenum target , GLenum attachment , GLenum pname , GLint *params )
	GLhandleARB  glGetHandleARB(GLenum pname )
	void  glGetHistogram(GLenum target , GLboolean reset , GLenum format , GLenum type , GLvoid *values )
	void  glGetHistogramParameterfv(GLenum target , GLenum pname , GLfloat *params )
	void  glGetHistogramParameteriv(GLenum target , GLenum pname , GLint *params )
	void  glGetInfoLogARB(GLhandleARB obj , GLsizei maxLength , GLsizei *length , GLcharARB *infoLog )
	void  glGetInteger64v(GLenum pname , GLint64 *params )
	void  glGetIntegerIndexedvEXT(GLenum param , GLuint index , GLint *values )
	void  glGetIntegerv(GLenum pname , GLint *params )
	void  glGetLightfv(GLenum light , GLenum pname , GLfloat *params )
	void  glGetLightiv(GLenum light , GLenum pname , GLint *params )
	void  glGetMapdv(GLenum target , GLenum query , GLdouble *v )
	void  glGetMapfv(GLenum target , GLenum query , GLfloat *v )
	void  glGetMapiv(GLenum target , GLenum query , GLint *v )
	void  glGetMaterialfv(GLenum face , GLenum pname , GLfloat *params )
	void  glGetMaterialiv(GLenum face , GLenum pname , GLint *params )
	void  glGetMinmax(GLenum target , GLboolean reset , GLenum format , GLenum type , GLvoid *values )
	void  glGetMinmaxParameterfv(GLenum target , GLenum pname , GLfloat *params )
	void  glGetMinmaxParameteriv(GLenum target , GLenum pname , GLint *params )
	void  glGetObjectParameterfvARB(GLhandleARB obj , GLenum pname , GLfloat *params )
	void  glGetObjectParameterivAPPLE(GLenum objectType , GLuint name , GLenum pname , GLint *params )
	void  glGetObjectParameterivARB(GLhandleARB obj , GLenum pname , GLint *params )
	void  glGetPixelMapfv(GLenum map , GLfloat *values )
	void  glGetPixelMapuiv(GLenum map , GLuint *values )
	void  glGetPixelMapusv(GLenum map , GLushort *values )
	void  glGetPointerv(GLenum pname , GLvoid **params )
	void  glGetPolygonStipple(GLubyte *mask )
	void  glGetProgramEnvParameterdvARB(GLenum target , GLuint index , GLdouble *params )
	void  glGetProgramEnvParameterfvARB(GLenum target , GLuint index , GLfloat *params )
	void  glGetProgramInfoLog(GLuint program , GLsizei bufSize , GLsizei *length , GLchar *infoLog )
	void  glGetProgramiv(GLuint program , GLenum pname , GLint *params )
	void  glGetProgramivARB(GLenum target , GLenum pname , GLint *params )
	void  glGetProgramLocalParameterdvARB(GLenum target , GLuint index , GLdouble *params )
	void  glGetProgramLocalParameterfvARB(GLenum target , GLuint index , GLfloat *params )
	void  glGetProgramStringARB(GLenum target , GLenum pname , GLvoid *string )
	void  glGetQueryiv(GLenum target , GLenum pname , GLint *params )
	void  glGetQueryivARB(GLenum target , GLenum pname , GLint *params )
	void  glGetQueryObjecti64vEXT(GLuint id , GLenum pname , GLint64EXT *params )
	void  glGetQueryObjectiv(GLuint id , GLenum pname , GLint *params )
	void  glGetQueryObjectivARB(GLuint id , GLenum pname , GLint *params )
	void  glGetQueryObjectui64vEXT(GLuint id , GLenum pname , GLuint64EXT *params )
	void  glGetQueryObjectuiv(GLuint id , GLenum pname , GLuint *params )
	void  glGetQueryObjectuivARB(GLuint id , GLenum pname , GLuint *params )
	void  glGetRenderbufferParameteriv(GLenum target , GLenum pname , GLint *params )
	void  glGetRenderbufferParameterivEXT(GLenum target , GLenum pname , GLint *params )
	void  glGetSeparableFilter(GLenum target , GLenum format , GLenum type , GLvoid *row , GLvoid *column , GLvoid *span )
	void  glGetShaderInfoLog(GLuint shader , GLsizei bufSize , GLsizei *length , GLchar *infoLog )
	void  glGetShaderiv(GLuint shader , GLenum pname , GLint *params )
	void  glGetShaderSource(GLuint shader , GLsizei bufSize , GLsizei *length , GLchar *source )
	void  glGetShaderSourceARB(GLhandleARB obj , GLsizei maxLength , GLsizei *length , GLcharARB *source )
	const GLubyte *  glGetString(GLenum name )
	void  glGetSynciv(GLsync sync , GLenum pname , GLsizei bufSize , GLsizei *length , GLint *values )
	void  glGetTexEnvfv(GLenum target , GLenum pname , GLfloat *params )
	void  glGetTexEnviv(GLenum target , GLenum pname , GLint *params )
	void  glGetTexGendv(GLenum coord , GLenum pname , GLdouble *params )
	void  glGetTexGenfv(GLenum coord , GLenum pname , GLfloat *params )
	void  glGetTexGeniv(GLenum coord , GLenum pname , GLint *params )
	void  glGetTexImage(GLenum target , GLint level , GLenum format , GLenum type , GLvoid *pixels )
	void  glGetTexLevelParameterfv(GLenum target , GLint level , GLenum pname , GLfloat *params )
	void  glGetTexLevelParameteriv(GLenum target , GLint level , GLenum pname , GLint *params )
	void  glGetTexParameterfv(GLenum target , GLenum pname , GLfloat *params )
	void  glGetTexParameterIivEXT(GLenum target , GLenum pname , GLint *params )
	void  glGetTexParameterIuivEXT(GLenum target , GLenum pname , GLuint *params )
	void  glGetTexParameteriv(GLenum target , GLenum pname , GLint *params )
	void  glGetTexParameterPointervAPPLE(GLenum target , GLenum pname , GLvoid **params )
	void  glGetTransformFeedbackVaryingEXT(GLuint program , GLuint index , GLsizei bufSize , GLsizei *length , GLsizei *size , GLenum *type , GLchar *name )
	GLint  glGetUniformBufferSizeEXT(GLuint program , GLint location )
	void  glGetUniformfv(GLuint program , GLint location , GLfloat *params )
	void  glGetUniformfvARB(GLhandleARB programObj , GLint location , GLfloat *params )
	void  glGetUniformiv(GLuint program , GLint location , GLint *params )
	void  glGetUniformivARB(GLhandleARB programObj , GLint location , GLint *params )
	GLint  glGetUniformLocation(GLuint program , const GLchar *name )
	GLint  glGetUniformLocationARB(GLhandleARB programObj , const GLcharARB *name )
	GLintptr  glGetUniformOffsetEXT(GLuint program , GLint location )
	void  glGetUniformuivEXT(GLuint program , GLint location , GLuint *params )
	void  glGetVertexAttribdv(GLuint index , GLenum pname , GLdouble *params )
	void  glGetVertexAttribdvARB(GLuint index , GLenum pname , GLdouble *params )
	void  glGetVertexAttribfv(GLuint index , GLenum pname , GLfloat *params )
	void  glGetVertexAttribfvARB(GLuint index , GLenum pname , GLfloat *params )
	void  glGetVertexAttribIivEXT(GLuint index , GLenum pname , GLint *params )
	void  glGetVertexAttribIuivEXT(GLuint index , GLenum pname , GLuint *params )
	void  glGetVertexAttribiv(GLuint index , GLenum pname , GLint *params )
	void  glGetVertexAttribivARB(GLuint index , GLenum pname , GLint *params )
	void  glGetVertexAttribPointerv(GLuint index , GLenum pname , GLvoid **pointer )
	void  glGetVertexAttribPointervARB(GLuint index , GLenum pname , GLvoid **pointer )
	void  glHint(GLenum target , GLenum mode )
	void  glHistogram(GLenum target , GLsizei width , GLenum internalformat , GLboolean sink )
	void  glIndexd(GLdouble c )
	void  glIndexdv(const GLdouble *c )
	void  glIndexf(GLfloat c )
	void  glIndexfv(const GLfloat *c )
	void  glIndexi(GLint c )
	void  glIndexiv(const GLint *c )
	void  glIndexMask(GLuint mask )
	void  glIndexPointer(GLenum type , GLsizei stride , const GLvoid *pointer )
	void  glIndexs(GLshort c )
	void  glIndexsv(const GLshort *c )
	void  glIndexub(GLubyte c )
	void  glIndexubv(const GLubyte *c )
	void  glInitNames()
	void  glInterleavedArrays(GLenum format , GLsizei stride , const GLvoid *pointer )
	GLboolean  glIsBuffer(GLuint buffer )
	GLboolean  glIsBufferARB(GLuint buffer )
	GLboolean  glIsEnabled(GLenum cap )
	GLboolean  glIsEnabledIndexedEXT(GLenum target , GLuint index )
	GLboolean  glIsFenceAPPLE(GLuint fence )
	GLboolean  glIsFramebuffer(GLuint framebuffer )
	GLboolean  glIsFramebufferEXT(GLuint framebuffer )
	GLboolean  glIsList(GLuint list )
	GLboolean  glIsProgram(GLuint program )
	GLboolean  glIsProgramARB(GLuint program )
	GLboolean  glIsQuery(GLuint id )
	GLboolean  glIsQueryARB(GLuint id )
	GLboolean  glIsRenderbuffer(GLuint renderbuffer )
	GLboolean  glIsRenderbufferEXT(GLuint renderbuffer )
	GLboolean  glIsShader(GLuint shader )
	GLboolean  glIsSync(GLsync sync )
	GLboolean  glIsTexture(GLuint texture )
	GLboolean  glIsVertexArrayAPPLE(GLuint id )
	GLboolean  glIsVertexAttribEnabledAPPLE(GLuint index , GLenum pname )
	void  glLightf(GLenum light , GLenum pname , GLfloat param )
	void  glLightfv(GLenum light , GLenum pname , const GLfloat *params )
	void  glLighti(GLenum light , GLenum pname , GLint param )
	void  glLightiv(GLenum light , GLenum pname , const GLint *params )
	void  glLightModelf(GLenum pname , GLfloat param )
	void  glLightModelfv(GLenum pname , const GLfloat *params )
	void  glLightModeli(GLenum pname , GLint param )
	void  glLightModeliv(GLenum pname , const GLint *params )
	void  glLineStipple(GLint factor , GLushort pattern )
	void  glLineWidth(GLfloat width )
	void  glLinkProgram(GLuint program )
	void  glLinkProgramARB(GLhandleARB programObj )
	void  glListBase(GLuint base )
	void  glLoadIdentity()
	void  glLoadMatrixd(const GLdouble *m )
	void  glLoadMatrixf(const GLfloat *m )
	void  glLoadName(GLuint name )
	void  glLoadTransposeMatrixd(const GLdouble *m )
	void  glLoadTransposeMatrixdARB(const GLdouble *m )
	void  glLoadTransposeMatrixf(const GLfloat *m )
	void  glLoadTransposeMatrixfARB(const GLfloat *m )
	void  glLogicOp(GLenum opcode )
	void  glMap1d(GLenum target , GLdouble u1 , GLdouble u2 , GLint stride , GLint order , const GLdouble *points )
	void  glMap1f(GLenum target , GLfloat u1 , GLfloat u2 , GLint stride , GLint order , const GLfloat *points )
	void  glMap2d(GLenum target , GLdouble u1 , GLdouble u2 , GLint ustride , GLint uorder , GLdouble v1 , GLdouble v2 , GLint vstride , GLint vorder , const GLdouble *points )
	void  glMap2f(GLenum target , GLfloat u1 , GLfloat u2 , GLint ustride , GLint uorder , GLfloat v1 , GLfloat v2 , GLint vstride , GLint vorder , const GLfloat *points )
	GLvoid *  glMapBuffer(GLenum target , GLenum access )
	GLvoid *  glMapBufferARB(GLenum target , GLenum access )
	void  glMapGrid1d(GLint un , GLdouble u1 , GLdouble u2 )
	void  glMapGrid1f(GLint un , GLfloat u1 , GLfloat u2 )
	void  glMapGrid2d(GLint un , GLdouble u1 , GLdouble u2 , GLint vn , GLdouble v1 , GLdouble v2 )
	void  glMapGrid2f(GLint un , GLfloat u1 , GLfloat u2 , GLint vn , GLfloat v1 , GLfloat v2 )
	void  glMapVertexAttrib1dAPPLE(GLuint index , GLuint size , GLdouble u1 , GLdouble u2 , GLint stride , GLint order , const GLdouble *points )
	void  glMapVertexAttrib1fAPPLE(GLuint index , GLuint size , GLfloat u1 , GLfloat u2 , GLint stride , GLint order , const GLfloat *points )
	void  glMapVertexAttrib2dAPPLE(GLuint index , GLuint size , GLdouble u1 , GLdouble u2 , GLint ustride , GLint uorder , GLdouble v1 , GLdouble v2 , GLint vstride , GLint vorder , const GLdouble *points )
	void  glMapVertexAttrib2fAPPLE(GLuint index , GLuint size , GLfloat u1 , GLfloat u2 , GLint ustride , GLint uorder , GLfloat v1 , GLfloat v2 , GLint vstride , GLint vorder , const GLfloat *points )
	void  glMaterialf(GLenum face , GLenum pname , GLfloat param )
	void  glMaterialfv(GLenum face , GLenum pname , const GLfloat *params )
	void  glMateriali(GLenum face , GLenum pname , GLint param )
	void  glMaterialiv(GLenum face , GLenum pname , const GLint *params )
	void  glMatrixMode(GLenum mode )
	void  glMinmax(GLenum target , GLenum internalformat , GLboolean sink )
	void  glMultiDrawArrays(GLenum mode , const GLint *first , const GLsizei *count , GLsizei primcount )
	void  glMultiDrawArraysEXT(GLenum mode , const GLint *first , const GLsizei *count , GLsizei primcount )
	void  glMultiDrawElementArrayAPPLE(GLenum mode , const GLint *first , const GLsizei *count , GLsizei primcount )
	void  glMultiDrawElements(GLenum mode , const GLsizei *count , GLenum type , const GLvoid **indices , GLsizei primcount )
	void  glMultiDrawElementsBaseVertex(GLenum mode , const GLsizei *count , GLenum type , const GLvoid **indices , GLsizei primcount , const GLint *base_vertex )
	void  glMultiDrawElementsEXT(GLenum mode , const GLsizei *count , GLenum type , const GLvoid **indices , GLsizei primcount )
	void  glMultiDrawRangeElementArrayAPPLE(GLenum mode , GLuint start , GLuint end , const GLint *first , const GLsizei *count , GLsizei primcount )
	void  glMultiTexCoord1d(GLenum target , GLdouble s )
	void  glMultiTexCoord1dARB(GLenum target , GLdouble s )
	void  glMultiTexCoord1dv(GLenum target , const GLdouble *v )
	void  glMultiTexCoord1dvARB(GLenum target , const GLdouble *v )
	void  glMultiTexCoord1f(GLenum target , GLfloat s )
	void  glMultiTexCoord1fARB(GLenum target , GLfloat s )
	void  glMultiTexCoord1fv(GLenum target , const GLfloat *v )
	void  glMultiTexCoord1fvARB(GLenum target , const GLfloat *v )
	void  glMultiTexCoord1i(GLenum target , GLint s )
	void  glMultiTexCoord1iARB(GLenum target , GLint s )
	void  glMultiTexCoord1iv(GLenum target , const GLint *v )
	void  glMultiTexCoord1ivARB(GLenum target , const GLint *v )
	void  glMultiTexCoord1s(GLenum target , GLshort s )
	void  glMultiTexCoord1sARB(GLenum target , GLshort s )
	void  glMultiTexCoord1sv(GLenum target , const GLshort *v )
	void  glMultiTexCoord1svARB(GLenum target , const GLshort *v )
	void  glMultiTexCoord2d(GLenum target , GLdouble s , GLdouble t )
	void  glMultiTexCoord2dARB(GLenum target , GLdouble s , GLdouble t )
	void  glMultiTexCoord2dv(GLenum target , const GLdouble *v )
	void  glMultiTexCoord2dvARB(GLenum target , const GLdouble *v )
	void  glMultiTexCoord2f(GLenum target , GLfloat s , GLfloat t )
	void  glMultiTexCoord2fARB(GLenum target , GLfloat s , GLfloat t )
	void  glMultiTexCoord2fv(GLenum target , const GLfloat *v )
	void  glMultiTexCoord2fvARB(GLenum target , const GLfloat *v )
	void  glMultiTexCoord2i(GLenum target , GLint s , GLint t )
	void  glMultiTexCoord2iARB(GLenum target , GLint s , GLint t )
	void  glMultiTexCoord2iv(GLenum target , const GLint *v )
	void  glMultiTexCoord2ivARB(GLenum target , const GLint *v )
	void  glMultiTexCoord2s(GLenum target , GLshort s , GLshort t )
	void  glMultiTexCoord2sARB(GLenum target , GLshort s , GLshort t )
	void  glMultiTexCoord2sv(GLenum target , const GLshort *v )
	void  glMultiTexCoord2svARB(GLenum target , const GLshort *v )
	void  glMultiTexCoord3d(GLenum target , GLdouble s , GLdouble t , GLdouble r )
	void  glMultiTexCoord3dARB(GLenum target , GLdouble s , GLdouble t , GLdouble r )
	void  glMultiTexCoord3dv(GLenum target , const GLdouble *v )
	void  glMultiTexCoord3dvARB(GLenum target , const GLdouble *v )
	void  glMultiTexCoord3f(GLenum target , GLfloat s , GLfloat t , GLfloat r )
	void  glMultiTexCoord3fARB(GLenum target , GLfloat s , GLfloat t , GLfloat r )
	void  glMultiTexCoord3fv(GLenum target , const GLfloat *v )
	void  glMultiTexCoord3fvARB(GLenum target , const GLfloat *v )
	void  glMultiTexCoord3i(GLenum target , GLint s , GLint t , GLint r )
	void  glMultiTexCoord3iARB(GLenum target , GLint s , GLint t , GLint r )
	void  glMultiTexCoord3iv(GLenum target , const GLint *v )
	void  glMultiTexCoord3ivARB(GLenum target , const GLint *v )
	void  glMultiTexCoord3s(GLenum target , GLshort s , GLshort t , GLshort r )
	void  glMultiTexCoord3sARB(GLenum target , GLshort s , GLshort t , GLshort r )
	void  glMultiTexCoord3sv(GLenum target , const GLshort *v )
	void  glMultiTexCoord3svARB(GLenum target , const GLshort *v )
	void  glMultiTexCoord4d(GLenum target , GLdouble s , GLdouble t , GLdouble r , GLdouble q )
	void  glMultiTexCoord4dARB(GLenum target , GLdouble s , GLdouble t , GLdouble r , GLdouble q )
	void  glMultiTexCoord4dv(GLenum target , const GLdouble *v )
	void  glMultiTexCoord4dvARB(GLenum target , const GLdouble *v )
	void  glMultiTexCoord4f(GLenum target , GLfloat s , GLfloat t , GLfloat r , GLfloat q )
	void  glMultiTexCoord4fARB(GLenum target , GLfloat s , GLfloat t , GLfloat r , GLfloat q )
	void  glMultiTexCoord4fv(GLenum target , const GLfloat *v )
	void  glMultiTexCoord4fvARB(GLenum target , const GLfloat *v )
	void  glMultiTexCoord4i(GLenum target , GLint s , GLint t , GLint r , GLint q )
	void  glMultiTexCoord4iARB(GLenum target , GLint s , GLint t , GLint r , GLint q )
	void  glMultiTexCoord4iv(GLenum target , const GLint *v )
	void  glMultiTexCoord4ivARB(GLenum target , const GLint *v )
	void  glMultiTexCoord4s(GLenum target , GLshort s , GLshort t , GLshort r , GLshort q )
	void  glMultiTexCoord4sARB(GLenum target , GLshort s , GLshort t , GLshort r , GLshort q )
	void  glMultiTexCoord4sv(GLenum target , const GLshort *v )
	void  glMultiTexCoord4svARB(GLenum target , const GLshort *v )
	void  glMultMatrixd(const GLdouble *m )
	void  glMultMatrixf(const GLfloat *m )
	void  glMultTransposeMatrixd(const GLdouble *m )
	void  glMultTransposeMatrixdARB(const GLdouble *m )
	void  glMultTransposeMatrixf(const GLfloat *m )
	void  glMultTransposeMatrixfARB(const GLfloat *m )
	void  glNewList(GLuint list , GLenum mode )
	void  glNormal3b(GLbyte nx , GLbyte ny , GLbyte nz )
	void  glNormal3bv(const GLbyte *v )
	void  glNormal3d(GLdouble nx , GLdouble ny , GLdouble nz )
	void  glNormal3dv(const GLdouble *v )
	void  glNormal3f(GLfloat nx , GLfloat ny , GLfloat nz )
	void  glNormal3fv(const GLfloat *v )
	void  glNormal3i(GLint nx , GLint ny , GLint nz )
	void  glNormal3iv(const GLint *v )
	void  glNormal3s(GLshort nx , GLshort ny , GLshort nz )
	void  glNormal3sv(const GLshort *v )
	void  glNormalPointer(GLenum type , GLsizei stride , const GLvoid *pointer )
	GLenum  glObjectPurgeableAPPLE(GLenum objectType , GLuint name , GLenum option )
	GLenum  glObjectUnpurgeableAPPLE(GLenum objectType , GLuint name , GLenum option )
	void  glOrtho(GLdouble left , GLdouble right , GLdouble bottom , GLdouble top , GLdouble zNear , GLdouble zFar )
	void  glPassThrough(GLfloat token )
	void  glPixelMapfv(GLenum map , GLint mapsize , const GLfloat *values )
	void  glPixelMapuiv(GLenum map , GLint mapsize , const GLuint *values )
	void  glPixelMapusv(GLenum map , GLint mapsize , const GLushort *values )
	void  glPixelStoref(GLenum pname , GLfloat param )
	void  glPixelStorei(GLenum pname , GLint param )
	void  glPixelTransferf(GLenum pname , GLfloat param )
	void  glPixelTransferi(GLenum pname , GLint param )
	void  glPixelZoom(GLfloat xfactor , GLfloat yfactor )
	void  glPointParameterf(GLenum pname , GLfloat param )
	void  glPointParameterfARB(GLenum pname , GLfloat param )
	void  glPointParameterfv(GLenum pname , const GLfloat *params )
	void  glPointParameterfvARB(GLenum pname , const GLfloat *params )
	void  glPointParameteri(GLenum pname , GLint param )
	void  glPointParameteriNV(GLenum pname , GLint param )
	void  glPointParameteriv(GLenum pname , const GLint *params )
	void  glPointParameterivNV(GLenum pname , const GLint *params )
	void  glPointSize(GLfloat size )
	void  glPointSizePointerAPPLE(GLenum type , GLsizei stride , const GLvoid *pointer )
	void  glPolygonMode(GLenum face , GLenum mode )
	void  glPolygonOffset(GLfloat factor , GLfloat units )
	void  glPolygonStipple(const GLubyte *mask )
	void  glPopAttrib()
	void  glPopClientAttrib()
	void  glPopMatrix()
	void  glPopName()
	void  glPrioritizeTextures(GLsizei n , const GLuint *textures , const GLclampf *priorities )
	void  glProgramEnvParameter4dARB(GLenum target , GLuint index , GLdouble x , GLdouble y , GLdouble z , GLdouble w )
	void  glProgramEnvParameter4dvARB(GLenum target , GLuint index , const GLdouble *params )
	void  glProgramEnvParameter4fARB(GLenum target , GLuint index , GLfloat x , GLfloat y , GLfloat z , GLfloat w )
	void  glProgramEnvParameter4fvARB(GLenum target , GLuint index , const GLfloat *params )
	void  glProgramEnvParameters4fvEXT(GLenum target , GLuint index , GLsizei count , const GLfloat *params )
	void  glProgramLocalParameter4dARB(GLenum target , GLuint index , GLdouble x , GLdouble y , GLdouble z , GLdouble w )
	void  glProgramLocalParameter4dvARB(GLenum target , GLuint index , const GLdouble *params )
	void  glProgramLocalParameter4fARB(GLenum target , GLuint index , GLfloat x , GLfloat y , GLfloat z , GLfloat w )
	void  glProgramLocalParameter4fvARB(GLenum target , GLuint index , const GLfloat *params )
	void  glProgramLocalParameters4fvEXT(GLenum target , GLuint index , GLsizei count , const GLfloat *params )
	void  glProgramParameteriEXT(GLuint program , GLenum pname , GLint value )
	void  glProgramStringARB(GLenum target , GLenum format , GLsizei len , const GLvoid *string )
	void  glProvokingVertex(GLenum mode )
	void  glProvokingVertexEXT(GLenum mode )
	void  glPushAttrib(GLbitfield mask )
	void  glPushClientAttrib(GLbitfield mask )
	void  glPushMatrix()
	void  glPushName(GLuint name )
	void  glRasterPos2d(GLdouble x , GLdouble y )
	void  glRasterPos2dv(const GLdouble *v )
	void  glRasterPos2f(GLfloat x , GLfloat y )
	void  glRasterPos2fv(const GLfloat *v )
	void  glRasterPos2i(GLint x , GLint y )
	void  glRasterPos2iv(const GLint *v )
	void  glRasterPos2s(GLshort x , GLshort y )
	void  glRasterPos2sv(const GLshort *v )
	void  glRasterPos3d(GLdouble x , GLdouble y , GLdouble z )
	void  glRasterPos3dv(const GLdouble *v )
	void  glRasterPos3f(GLfloat x , GLfloat y , GLfloat z )
	void  glRasterPos3fv(const GLfloat *v )
	void  glRasterPos3i(GLint x , GLint y , GLint z )
	void  glRasterPos3iv(const GLint *v )
	void  glRasterPos3s(GLshort x , GLshort y , GLshort z )
	void  glRasterPos3sv(const GLshort *v )
	void  glRasterPos4d(GLdouble x , GLdouble y , GLdouble z , GLdouble w )
	void  glRasterPos4dv(const GLdouble *v )
	void  glRasterPos4f(GLfloat x , GLfloat y , GLfloat z , GLfloat w )
	void  glRasterPos4fv(const GLfloat *v )
	void  glRasterPos4i(GLint x , GLint y , GLint z , GLint w )
	void  glRasterPos4iv(const GLint *v )
	void  glRasterPos4s(GLshort x , GLshort y , GLshort z , GLshort w )
	void  glRasterPos4sv(const GLshort *v )
	void  glReadBuffer(GLenum mode )
	void  glReadPixels(GLint x , GLint y , GLsizei width , GLsizei height , GLenum format , GLenum type , GLvoid *pixels )
	void  glRectd(GLdouble x1 , GLdouble y1 , GLdouble x2 , GLdouble y2 )
	void  glRectdv(const GLdouble *v1 , const GLdouble *v2 )
	void  glRectf(GLfloat x1 , GLfloat y1 , GLfloat x2 , GLfloat y2 )
	void  glRectfv(const GLfloat *v1 , const GLfloat *v2 )
	void  glRecti(GLint x1 , GLint y1 , GLint x2 , GLint y2 )
	void  glRectiv(const GLint *v1 , const GLint *v2 )
	void  glRects(GLshort x1 , GLshort y1 , GLshort x2 , GLshort y2 )
	void  glRectsv(const GLshort *v1 , const GLshort *v2 )
	void  glRenderbufferStorage(GLenum target , GLenum internalformat , GLsizei width , GLsizei height )
	void  glRenderbufferStorageEXT(GLenum target , GLenum internalformat , GLsizei width , GLsizei height )
	void  glRenderbufferStorageMultisample(GLenum target , GLsizei samples , GLenum internalformat , GLsizei width , GLsizei height )
	void  glRenderbufferStorageMultisampleEXT(GLenum target , GLsizei samples , GLenum internalformat , GLsizei width , GLsizei height )
	GLint  glRenderMode(GLenum mode )
	void  glResetHistogram(GLenum target )
	void  glResetMinmax(GLenum target )
	void  glRotated(GLdouble angle , GLdouble x , GLdouble y , GLdouble z )
	void  glRotatef(GLfloat angle , GLfloat x , GLfloat y , GLfloat z )
	void  glSampleCoverage(GLclampf value , GLboolean invert )
	void  glSampleCoverageARB(GLclampf value , GLboolean invert )
	void  glScaled(GLdouble x , GLdouble y , GLdouble z )
	void  glScalef(GLfloat x , GLfloat y , GLfloat z )
	void  glScissor(GLint x , GLint y , GLsizei width , GLsizei height )
	void  glSecondaryColor3b(GLbyte red , GLbyte green , GLbyte blue )
	void  glSecondaryColor3bEXT(GLbyte red , GLbyte green , GLbyte blue )
	void  glSecondaryColor3bv(const GLbyte *v )
	void  glSecondaryColor3bvEXT(const GLbyte *v )
	void  glSecondaryColor3d(GLdouble red , GLdouble green , GLdouble blue )
	void  glSecondaryColor3dEXT(GLdouble red , GLdouble green , GLdouble blue )
	void  glSecondaryColor3dv(const GLdouble *v )
	void  glSecondaryColor3dvEXT(const GLdouble *v )
	void  glSecondaryColor3f(GLfloat red , GLfloat green , GLfloat blue )
	void  glSecondaryColor3fEXT(GLfloat red , GLfloat green , GLfloat blue )
	void  glSecondaryColor3fv(const GLfloat *v )
	void  glSecondaryColor3fvEXT(const GLfloat *v )
	void  glSecondaryColor3i(GLint red , GLint green , GLint blue )
	void  glSecondaryColor3iEXT(GLint red , GLint green , GLint blue )
	void  glSecondaryColor3iv(const GLint *v )
	void  glSecondaryColor3ivEXT(const GLint *v )
	void  glSecondaryColor3s(GLshort red , GLshort green , GLshort blue )
	void  glSecondaryColor3sEXT(GLshort red , GLshort green , GLshort blue )
	void  glSecondaryColor3sv(const GLshort *v )
	void  glSecondaryColor3svEXT(const GLshort *v )
	void  glSecondaryColor3ub(GLubyte red , GLubyte green , GLubyte blue )
	void  glSecondaryColor3ubEXT(GLubyte red , GLubyte green , GLubyte blue )
	void  glSecondaryColor3ubv(const GLubyte *v )
	void  glSecondaryColor3ubvEXT(const GLubyte *v )
	void  glSecondaryColor3ui(GLuint red , GLuint green , GLuint blue )
	void  glSecondaryColor3uiEXT(GLuint red , GLuint green , GLuint blue )
	void  glSecondaryColor3uiv(const GLuint *v )
	void  glSecondaryColor3uivEXT(const GLuint *v )
	void  glSecondaryColor3us(GLushort red , GLushort green , GLushort blue )
	void  glSecondaryColor3usEXT(GLushort red , GLushort green , GLushort blue )
	void  glSecondaryColor3usv(const GLushort *v )
	void  glSecondaryColor3usvEXT(const GLushort *v )
	void  glSecondaryColorPointer(GLint size , GLenum type , GLsizei stride , const GLvoid *pointer )
	void  glSecondaryColorPointerEXT(GLint size , GLenum type , GLsizei stride , const GLvoid *pointer )
	void  glSelectBuffer(GLsizei size , GLuint *buffer )
	void  glSeparableFilter2D(GLenum target , GLenum internalformat , GLsizei width , GLsizei height , GLenum format , GLenum type , const GLvoid *row , const GLvoid *column )
	void  glSetFenceAPPLE(GLuint fence )
	void  glShadeModel(GLenum mode )
	void  glShaderSource(GLuint shader , GLsizei count , const GLchar **string , const GLint *length )
	void  glShaderSourceARB(GLhandleARB shaderObj , GLsizei count , const GLcharARB **string , const GLint *length )
	void  glStencilFunc(GLenum func , GLint ref , GLuint mask )
	void  glStencilFuncSeparate(GLenum face , GLenum func , GLint ref , GLuint mask )
	void  glStencilFuncSeparateATI(GLenum frontfunc , GLenum backfunc , GLint ref , GLuint mask )
	void  glStencilMask(GLuint mask )
	void  glStencilMaskSeparate(GLenum face , GLuint mask )
	void  glStencilOp(GLenum fail , GLenum zfail , GLenum zpass )
	void  glStencilOpSeparate(GLenum face , GLenum fail , GLenum zfail , GLenum zpass )
	void  glStencilOpSeparateATI(GLenum face , GLenum sfail , GLenum dpfail , GLenum dppass )
	void  glSwapAPPLE()
	GLboolean  glTestFenceAPPLE(GLuint fence )
	GLboolean  glTestObjectAPPLE(GLenum object , GLuint name )
	void  glTexCoord1d(GLdouble s )
	void  glTexCoord1dv(const GLdouble *v )
	void  glTexCoord1f(GLfloat s )
	void  glTexCoord1fv(const GLfloat *v )
	void  glTexCoord1i(GLint s )
	void  glTexCoord1iv(const GLint *v )
	void  glTexCoord1s(GLshort s )
	void  glTexCoord1sv(const GLshort *v )
	void  glTexCoord2d(GLdouble s , GLdouble t )
	void  glTexCoord2dv(const GLdouble *v )
	void  glTexCoord2f(GLfloat s , GLfloat t )
	void  glTexCoord2fv(const GLfloat *v )
	void  glTexCoord2i(GLint s , GLint t )
	void  glTexCoord2iv(const GLint *v )
	void  glTexCoord2s(GLshort s , GLshort t )
	void  glTexCoord2sv(const GLshort *v )
	void  glTexCoord3d(GLdouble s , GLdouble t , GLdouble r )
	void  glTexCoord3dv(const GLdouble *v )
	void  glTexCoord3f(GLfloat s , GLfloat t , GLfloat r )
	void  glTexCoord3fv(const GLfloat *v )
	void  glTexCoord3i(GLint s , GLint t , GLint r )
	void  glTexCoord3iv(const GLint *v )
	void  glTexCoord3s(GLshort s , GLshort t , GLshort r )
	void  glTexCoord3sv(const GLshort *v )
	void  glTexCoord4d(GLdouble s , GLdouble t , GLdouble r , GLdouble q )
	void  glTexCoord4dv(const GLdouble *v )
	void  glTexCoord4f(GLfloat s , GLfloat t , GLfloat r , GLfloat q )
	void  glTexCoord4fv(const GLfloat *v )
	void  glTexCoord4i(GLint s , GLint t , GLint r , GLint q )
	void  glTexCoord4iv(const GLint *v )
	void  glTexCoord4s(GLshort s , GLshort t , GLshort r , GLshort q )
	void  glTexCoord4sv(const GLshort *v )
	void  glTexCoordPointer(GLint size , GLenum type , GLsizei stride , const GLvoid *pointer )
	void  glTexEnvf(GLenum target , GLenum pname , GLfloat param )
	void  glTexEnvfv(GLenum target , GLenum pname , const GLfloat *params )
	void  glTexEnvi(GLenum target , GLenum pname , GLint param )
	void  glTexEnviv(GLenum target , GLenum pname , const GLint *params )
	void  glTexGend(GLenum coord , GLenum pname , GLdouble param )
	void  glTexGendv(GLenum coord , GLenum pname , const GLdouble *params )
	void  glTexGenf(GLenum coord , GLenum pname , GLfloat param )
	void  glTexGenfv(GLenum coord , GLenum pname , const GLfloat *params )
	void  glTexGeni(GLenum coord , GLenum pname , GLint param )
	void  glTexGeniv(GLenum coord , GLenum pname , const GLint *params )
	void  glTexImage1D(GLenum target , GLint level , GLint internalformat , GLsizei width , GLint border , GLenum format , GLenum type , const GLvoid *pixels )
	void  glTexImage2D(GLenum target , GLint level , GLint internalformat , GLsizei width , GLsizei height , GLint border , GLenum format , GLenum type , const GLvoid *pixels )
	void  glTexImage3D(GLenum target , GLint level , GLint internalformat , GLsizei width , GLsizei height , GLsizei depth , GLint border , GLenum format , GLenum type , const GLvoid *pixels )
	void  glTexParameterf(GLenum target , GLenum pname , GLfloat param )
	void  glTexParameterfv(GLenum target , GLenum pname , const GLfloat *params )
	void  glTexParameteri(GLenum target , GLenum pname , GLint param )
	void  glTexParameterIivEXT(GLenum target , GLenum pname , GLint *params )
	void  glTexParameterIuivEXT(GLenum target , GLenum pname , GLuint *params )
	void  glTexParameteriv(GLenum target , GLenum pname , const GLint *params )
	void  glTexSubImage1D(GLenum target , GLint level , GLint xoffset , GLsizei width , GLenum format , GLenum type , const GLvoid *pixels )
	void  glTexSubImage2D(GLenum target , GLint level , GLint xoffset , GLint yoffset , GLsizei width , GLsizei height , GLenum format , GLenum type , const GLvoid *pixels )
	void  glTexSubImage3D(GLenum target , GLint level , GLint xoffset , GLint yoffset , GLint zoffset , GLsizei width , GLsizei height , GLsizei depth , GLenum format , GLenum type , const GLvoid *pixels )
	void  glTextureRangeAPPLE(GLenum target , GLsizei length , const GLvoid *pointer )
	void  glTransformFeedbackVaryingsEXT(GLuint program , GLsizei count , const GLchar **varyings , GLenum bufferMode )
	void  glTranslated(GLdouble x , GLdouble y , GLdouble z )
	void  glTranslatef(GLfloat x , GLfloat y , GLfloat z )
	void  glUniform1f(GLint location , GLfloat v0 )
	void  glUniform1fARB(GLint location , GLfloat v0 )
	void  glUniform1fv(GLint location , GLsizei count , const GLfloat *value )
	void  glUniform1fvARB(GLint location , GLsizei count , const GLfloat *value )
	void  glUniform1i(GLint location , GLint v0 )
	void  glUniform1iARB(GLint location , GLint v0 )
	void  glUniform1iv(GLint location , GLsizei count , const GLint *value )
	void  glUniform1ivARB(GLint location , GLsizei count , const GLint *value )
	void  glUniform1uiEXT(GLint location , GLuint v0 )
	void  glUniform1uivEXT(GLint location , GLsizei count , const GLuint *value )
	void  glUniform2f(GLint location , GLfloat v0 , GLfloat v1 )
	void  glUniform2fARB(GLint location , GLfloat v0 , GLfloat v1 )
	void  glUniform2fv(GLint location , GLsizei count , const GLfloat *value )
	void  glUniform2fvARB(GLint location , GLsizei count , const GLfloat *value )
	void  glUniform2i(GLint location , GLint v0 , GLint v1 )
	void  glUniform2iARB(GLint location , GLint v0 , GLint v1 )
	void  glUniform2iv(GLint location , GLsizei count , const GLint *value )
	void  glUniform2ivARB(GLint location , GLsizei count , const GLint *value )
	void  glUniform2uiEXT(GLint location , GLuint v0 , GLuint v1 )
	void  glUniform2uivEXT(GLint location , GLsizei count , const GLuint *value )
	void  glUniform3f(GLint location , GLfloat v0 , GLfloat v1 , GLfloat v2 )
	void  glUniform3fARB(GLint location , GLfloat v0 , GLfloat v1 , GLfloat v2 )
	void  glUniform3fv(GLint location , GLsizei count , const GLfloat *value )
	void  glUniform3fvARB(GLint location , GLsizei count , const GLfloat *value )
	void  glUniform3i(GLint location , GLint v0 , GLint v1 , GLint v2 )
	void  glUniform3iARB(GLint location , GLint v0 , GLint v1 , GLint v2 )
	void  glUniform3iv(GLint location , GLsizei count , const GLint *value )
	void  glUniform3ivARB(GLint location , GLsizei count , const GLint *value )
	void  glUniform3uiEXT(GLint location , GLuint v0 , GLuint v1 , GLuint v2 )
	void  glUniform3uivEXT(GLint location , GLsizei count , const GLuint *value )
	void  glUniform4f(GLint location , GLfloat v0 , GLfloat v1 , GLfloat v2 , GLfloat v3 )
	void  glUniform4fARB(GLint location , GLfloat v0 , GLfloat v1 , GLfloat v2 , GLfloat v3 )
	void  glUniform4fv(GLint location , GLsizei count , const GLfloat *value )
	void  glUniform4fvARB(GLint location , GLsizei count , const GLfloat *value )
	void  glUniform4i(GLint location , GLint v0 , GLint v1 , GLint v2 , GLint v3 )
	void  glUniform4iARB(GLint location , GLint v0 , GLint v1 , GLint v2 , GLint v3 )
	void  glUniform4iv(GLint location , GLsizei count , const GLint *value )
	void  glUniform4ivARB(GLint location , GLsizei count , const GLint *value )
	void  glUniform4uiEXT(GLint location , GLuint v0 , GLuint v1 , GLuint v2 , GLuint v3 )
	void  glUniform4uivEXT(GLint location , GLsizei count , const GLuint *value )
	void  glUniformBufferEXT(GLuint program , GLint location , GLuint buffer )
	void  glUniformMatrix2fv(GLint location , GLsizei count , GLboolean transpose , const GLfloat *value )
	void  glUniformMatrix2fvARB(GLint location , GLsizei count , GLboolean transpose , const GLfloat *value )
	void  glUniformMatrix2x3fv(GLint location , GLsizei count , GLboolean transpose , const GLfloat *value )
	void  glUniformMatrix2x4fv(GLint location , GLsizei count , GLboolean transpose , const GLfloat *value )
	void  glUniformMatrix3fv(GLint location , GLsizei count , GLboolean transpose , const GLfloat *value )
	void  glUniformMatrix3fvARB(GLint location , GLsizei count , GLboolean transpose , const GLfloat *value )
	void  glUniformMatrix3x2fv(GLint location , GLsizei count , GLboolean transpose , const GLfloat *value )
	void  glUniformMatrix3x4fv(GLint location , GLsizei count , GLboolean transpose , const GLfloat *value )
	void  glUniformMatrix4fv(GLint location , GLsizei count , GLboolean transpose , const GLfloat *value )
	void  glUniformMatrix4fvARB(GLint location , GLsizei count , GLboolean transpose , const GLfloat *value )
	void  glUniformMatrix4x2fv(GLint location , GLsizei count , GLboolean transpose , const GLfloat *value )
	void  glUniformMatrix4x3fv(GLint location , GLsizei count , GLboolean transpose , const GLfloat *value )
	GLboolean  glUnmapBuffer(GLenum target )
	GLboolean  glUnmapBufferARB(GLenum target )
	void  glUseProgram(GLuint program )
	void  glUseProgramObjectARB(GLhandleARB programObj )
	void  glValidateProgram(GLuint program )
	void  glValidateProgramARB(GLhandleARB programObj )
	void  glVertex2d(GLdouble x , GLdouble y )
	void  glVertex2dv(const GLdouble *v )
	void  glVertex2f(GLfloat x , GLfloat y )
	void  glVertex2fv(const GLfloat *v )
	void  glVertex2i(GLint x , GLint y )
	void  glVertex2iv(const GLint *v )
	void  glVertex2s(GLshort x , GLshort y )
	void  glVertex2sv(const GLshort *v )
	void  glVertex3d(GLdouble x , GLdouble y , GLdouble z )
	void  glVertex3dv(const GLdouble *v )
	void  glVertex3f(GLfloat x , GLfloat y , GLfloat z )
	void  glVertex3fv(const GLfloat *v )
	void  glVertex3i(GLint x , GLint y , GLint z )
	void  glVertex3iv(const GLint *v )
	void  glVertex3s(GLshort x , GLshort y , GLshort z )
	void  glVertex3sv(const GLshort *v )
	void  glVertex4d(GLdouble x , GLdouble y , GLdouble z , GLdouble w )
	void  glVertex4dv(const GLdouble *v )
	void  glVertex4f(GLfloat x , GLfloat y , GLfloat z , GLfloat w )
	void  glVertex4fv(const GLfloat *v )
	void  glVertex4i(GLint x , GLint y , GLint z , GLint w )
	void  glVertex4iv(const GLint *v )
	void  glVertex4s(GLshort x , GLshort y , GLshort z , GLshort w )
	void  glVertex4sv(const GLshort *v )
	void  glVertexArrayParameteriAPPLE(GLenum pname , GLint param )
	void  glVertexArrayRangeAPPLE(GLsizei length , const GLvoid *pointer )
	void  glVertexAttrib1d(GLuint index , GLdouble x )
	void  glVertexAttrib1dARB(GLuint index , GLdouble x )
	void  glVertexAttrib1dv(GLuint index , const GLdouble *v )
	void  glVertexAttrib1dvARB(GLuint index , const GLdouble *v )
	void  glVertexAttrib1f(GLuint index , GLfloat x )
	void  glVertexAttrib1fARB(GLuint index , GLfloat x )
	void  glVertexAttrib1fv(GLuint index , const GLfloat *v )
	void  glVertexAttrib1fvARB(GLuint index , const GLfloat *v )
	void  glVertexAttrib1s(GLuint index , GLshort x )
	void  glVertexAttrib1sARB(GLuint index , GLshort x )
	void  glVertexAttrib1sv(GLuint index , const GLshort *v )
	void  glVertexAttrib1svARB(GLuint index , const GLshort *v )
	void  glVertexAttrib2d(GLuint index , GLdouble x , GLdouble y )
	void  glVertexAttrib2dARB(GLuint index , GLdouble x , GLdouble y )
	void  glVertexAttrib2dv(GLuint index , const GLdouble *v )
	void  glVertexAttrib2dvARB(GLuint index , const GLdouble *v )
	void  glVertexAttrib2f(GLuint index , GLfloat x , GLfloat y )
	void  glVertexAttrib2fARB(GLuint index , GLfloat x , GLfloat y )
	void  glVertexAttrib2fv(GLuint index , const GLfloat *v )
	void  glVertexAttrib2fvARB(GLuint index , const GLfloat *v )
	void  glVertexAttrib2s(GLuint index , GLshort x , GLshort y )
	void  glVertexAttrib2sARB(GLuint index , GLshort x , GLshort y )
	void  glVertexAttrib2sv(GLuint index , const GLshort *v )
	void  glVertexAttrib2svARB(GLuint index , const GLshort *v )
	void  glVertexAttrib3d(GLuint index , GLdouble x , GLdouble y , GLdouble z )
	void  glVertexAttrib3dARB(GLuint index , GLdouble x , GLdouble y , GLdouble z )
	void  glVertexAttrib3dv(GLuint index , const GLdouble *v )
	void  glVertexAttrib3dvARB(GLuint index , const GLdouble *v )
	void  glVertexAttrib3f(GLuint index , GLfloat x , GLfloat y , GLfloat z )
	void  glVertexAttrib3fARB(GLuint index , GLfloat x , GLfloat y , GLfloat z )
	void  glVertexAttrib3fv(GLuint index , const GLfloat *v )
	void  glVertexAttrib3fvARB(GLuint index , const GLfloat *v )
	void  glVertexAttrib3s(GLuint index , GLshort x , GLshort y , GLshort z )
	void  glVertexAttrib3sARB(GLuint index , GLshort x , GLshort y , GLshort z )
	void  glVertexAttrib3sv(GLuint index , const GLshort *v )
	void  glVertexAttrib3svARB(GLuint index , const GLshort *v )
	void  glVertexAttrib4bv(GLuint index , const GLbyte *v )
	void  glVertexAttrib4bvARB(GLuint index , const GLbyte *v )
	void  glVertexAttrib4d(GLuint index , GLdouble x , GLdouble y , GLdouble z , GLdouble w )
	void  glVertexAttrib4dARB(GLuint index , GLdouble x , GLdouble y , GLdouble z , GLdouble w )
	void  glVertexAttrib4dv(GLuint index , const GLdouble *v )
	void  glVertexAttrib4dvARB(GLuint index , const GLdouble *v )
	void  glVertexAttrib4f(GLuint index , GLfloat x , GLfloat y , GLfloat z , GLfloat w )
	void  glVertexAttrib4fARB(GLuint index , GLfloat x , GLfloat y , GLfloat z , GLfloat w )
	void  glVertexAttrib4fv(GLuint index , const GLfloat *v )
	void  glVertexAttrib4fvARB(GLuint index , const GLfloat *v )
	void  glVertexAttrib4iv(GLuint index , const GLint *v )
	void  glVertexAttrib4ivARB(GLuint index , const GLint *v )
	void  glVertexAttrib4Nbv(GLuint index , const GLbyte *v )
	void  glVertexAttrib4NbvARB(GLuint index , const GLbyte *v )
	void  glVertexAttrib4Niv(GLuint index , const GLint *v )
	void  glVertexAttrib4NivARB(GLuint index , const GLint *v )
	void  glVertexAttrib4Nsv(GLuint index , const GLshort *v )
	void  glVertexAttrib4NsvARB(GLuint index , const GLshort *v )
	void  glVertexAttrib4Nub(GLuint index , GLubyte x , GLubyte y , GLubyte z , GLubyte w )
	void  glVertexAttrib4NubARB(GLuint index , GLubyte x , GLubyte y , GLubyte z , GLubyte w )
	void  glVertexAttrib4Nubv(GLuint index , const GLubyte *v )
	void  glVertexAttrib4NubvARB(GLuint index , const GLubyte *v )
	void  glVertexAttrib4Nuiv(GLuint index , const GLuint *v )
	void  glVertexAttrib4NuivARB(GLuint index , const GLuint *v )
	void  glVertexAttrib4Nusv(GLuint index , const GLushort *v )
	void  glVertexAttrib4NusvARB(GLuint index , const GLushort *v )
	void  glVertexAttrib4s(GLuint index , GLshort x , GLshort y , GLshort z , GLshort w )
	void  glVertexAttrib4sARB(GLuint index , GLshort x , GLshort y , GLshort z , GLshort w )
	void  glVertexAttrib4sv(GLuint index , const GLshort *v )
	void  glVertexAttrib4svARB(GLuint index , const GLshort *v )
	void  glVertexAttrib4ubv(GLuint index , const GLubyte *v )
	void  glVertexAttrib4ubvARB(GLuint index , const GLubyte *v )
	void  glVertexAttrib4uiv(GLuint index , const GLuint *v )
	void  glVertexAttrib4uivARB(GLuint index , const GLuint *v )
	void  glVertexAttrib4usv(GLuint index , const GLushort *v )
	void  glVertexAttrib4usvARB(GLuint index , const GLushort *v )
	void  glVertexAttribDivisorARB(GLuint index , GLuint divisor )
	void  glVertexAttribI1iEXT(GLuint index , GLint x )
	void  glVertexAttribI1ivEXT(GLuint index , const GLint *v )
	void  glVertexAttribI1uiEXT(GLuint index , GLuint x )
	void  glVertexAttribI1uivEXT(GLuint index , const GLuint *v )
	void  glVertexAttribI2iEXT(GLuint index , GLint x , GLint y )
	void  glVertexAttribI2ivEXT(GLuint index , const GLint *v )
	void  glVertexAttribI2uiEXT(GLuint index , GLuint x , GLuint y )
	void  glVertexAttribI2uivEXT(GLuint index , const GLuint *v )
	void  glVertexAttribI3iEXT(GLuint index , GLint x , GLint y , GLint z )
	void  glVertexAttribI3ivEXT(GLuint index , const GLint *v )
	void  glVertexAttribI3uiEXT(GLuint index , GLuint x , GLuint y , GLuint z )
	void  glVertexAttribI3uivEXT(GLuint index , const GLuint *v )
	void  glVertexAttribI4bvEXT(GLuint index , const GLbyte *v )
	void  glVertexAttribI4iEXT(GLuint index , GLint x , GLint y , GLint z , GLint w )
	void  glVertexAttribI4ivEXT(GLuint index , const GLint *v )
	void  glVertexAttribI4svEXT(GLuint index , const GLshort *v )
	void  glVertexAttribI4ubvEXT(GLuint index , const GLubyte *v )
	void  glVertexAttribI4uiEXT(GLuint index , GLuint x , GLuint y , GLuint z , GLuint w )
	void  glVertexAttribI4uivEXT(GLuint index , const GLuint *v )
	void  glVertexAttribI4usvEXT(GLuint index , const GLushort *v )
	void  glVertexAttribIPointerEXT(GLuint index , GLint size , GLenum type , GLsizei stride , const GLvoid *pointer )
	void  glVertexAttribPointer(GLuint index , GLint size , GLenum type , GLboolean normalized , GLsizei stride , const GLvoid *pointer )
	void  glVertexAttribPointerARB(GLuint index , GLint size , GLenum type , GLboolean normalized , GLsizei stride , const GLvoid *pointer )
	void  glVertexBlendARB(GLint count )
	void  glVertexPointer(GLint size , GLenum type , GLsizei stride , const GLvoid *pointer )
	void  glVertexPointSizefAPPLE(GLfloat size )
	void  glViewport(GLint x , GLint y , GLsizei width , GLsizei height )
	void  glWaitSync(GLsync sync , GLbitfield flags , GLuint64 timeout )
	void  glWeightbvARB(GLint size , const GLbyte *weights )
	void  glWeightdvARB(GLint size , const GLdouble *weights )
	void  glWeightfvARB(GLint size , const GLfloat *weights )
	void  glWeightivARB(GLint size , const GLint *weights )
	void  glWeightPointerARB(GLint size , GLenum type , GLsizei stride , const GLvoid *pointer )
	void  glWeightsvARB(GLint size , const GLshort *weights )
	void  glWeightubvARB(GLint size , const GLubyte *weights )
	void  glWeightuivARB(GLint size , const GLuint *weights )
	void  glWeightusvARB(GLint size , const GLushort *weights )
	void  glWindowPos2d(GLdouble x , GLdouble y )
	void  glWindowPos2dARB(GLdouble x , GLdouble y )
	void  glWindowPos2dv(const GLdouble *v )
	void  glWindowPos2dvARB(const GLdouble *p )
	void  glWindowPos2f(GLfloat x , GLfloat y )
	void  glWindowPos2fARB(GLfloat x , GLfloat y )
	void  glWindowPos2fv(const GLfloat *v )
	void  glWindowPos2fvARB(const GLfloat *p )
	void  glWindowPos2i(GLint x , GLint y )
	void  glWindowPos2iARB(GLint x , GLint y )
	void  glWindowPos2iv(const GLint *v )
	void  glWindowPos2ivARB(const GLint *p )
	void  glWindowPos2s(GLshort x , GLshort y )
	void  glWindowPos2sARB(GLshort x , GLshort y )
	void  glWindowPos2sv(const GLshort *v )
	void  glWindowPos2svARB(const GLshort *p )
	void  glWindowPos3d(GLdouble x , GLdouble y , GLdouble z )
	void  glWindowPos3dARB(GLdouble x , GLdouble y , GLdouble z )
	void  glWindowPos3dv(const GLdouble *v )
	void  glWindowPos3dvARB(const GLdouble *p )
	void  glWindowPos3f(GLfloat x , GLfloat y , GLfloat z )
	void  glWindowPos3fARB(GLfloat x , GLfloat y , GLfloat z )
	void  glWindowPos3fv(const GLfloat *v )
	void  glWindowPos3fvARB(const GLfloat *p )
	void  glWindowPos3i(GLint x , GLint y , GLint z )
	void  glWindowPos3iARB(GLint x , GLint y , GLint z )
	void  glWindowPos3iv(const GLint *v )
	void  glWindowPos3ivARB(const GLint *p )
	void  glWindowPos3s(GLshort x , GLshort y , GLshort z )
	void  glWindowPos3sARB(GLshort x , GLshort y , GLshort z )
	void  glWindowPos3sv(const GLshort *v )
	void  glWindowPos3svARB(const GLshort *p )
	struct tm *  gmtime(const time_t * )
	struct tm *  gmtime_r(const time_t * , struct tm * )
	int  grantpt(int )
	OSErr  HandAndHand(Handle hand1 , Handle hand2 )
	OSErr  HandToHand(Handle *theHndl )
	void  HClrRBit(Handle h )
	int  heapsort(void * , size_t , size_t , int (*)(const void *, const void *) )
	int  heapsort_b(void * , size_t , size_t , ^int(const void *, const void *) )
	SInt8  HGetState(Handle h )
	Boolean  HIShapeContainsPoint(HIShapeRef inShape , const CGPoint *inPoint )
	HIShapeRef  HIShapeCreateCopy(HIShapeRef inShape )
	HIShapeRef  HIShapeCreateDifference(HIShapeRef inShape1 , HIShapeRef inShape2 )
	HIShapeRef  HIShapeCreateEmpty()
	HIShapeRef  HIShapeCreateIntersection(HIShapeRef inShape1 , HIShapeRef inShape2 )
	HIMutableShapeRef  HIShapeCreateMutable()
	HIMutableShapeRef  HIShapeCreateMutableCopy(HIShapeRef inOrig )
	HIMutableShapeRef  HIShapeCreateMutableWithRect(const CGRect *inRect )
	HIShapeRef  HIShapeCreateUnion(HIShapeRef inShape1 , HIShapeRef inShape2 )
	HIShapeRef  HIShapeCreateWithQDRgn(RgnHandle inRgn )
	HIShapeRef  HIShapeCreateWithRect(const CGRect *inRect )
	HIShapeRef  HIShapeCreateXor(HIShapeRef inShape1 , HIShapeRef inShape2 )
	OSStatus  HIShapeDifference(HIShapeRef inShape1 , HIShapeRef inShape2 , HIMutableShapeRef outResult )
	OSStatus  HIShapeEnumerate(HIShapeRef inShape , OptionBits inOptions , HIShapeEnumerateProcPtr inProc , void *inRefcon )
	OSStatus  HIShapeGetAsQDRgn(HIShapeRef inShape , RgnHandle outRgn )
	CGRect *  HIShapeGetBounds(HIShapeRef inShape , CGRect *outRect )
	CFTypeID  HIShapeGetTypeID()
	OSStatus  HIShapeInset(HIMutableShapeRef inShape , CGFloat inDX , CGFloat inDY )
	OSStatus  HIShapeIntersect(HIShapeRef inShape1 , HIShapeRef inShape2 , HIMutableShapeRef outResult )
	Boolean  HIShapeIntersectsRect(HIShapeRef inShape , const CGRect *inRect )
	Boolean  HIShapeIsEmpty(HIShapeRef inShape )
	Boolean  HIShapeIsRectangular(HIShapeRef inShape )
	OSStatus  HIShapeOffset(HIMutableShapeRef inShape , CGFloat inDX , CGFloat inDY )
	OSStatus  HIShapeReplacePathInCGContext(HIShapeRef inShape , CGContextRef inContext )
	OSStatus  HIShapeSetEmpty(HIMutableShapeRef inShape )
	OSStatus  HIShapeSetWithShape(HIMutableShapeRef inDestShape , HIShapeRef inSrcShape )
	OSStatus  HIShapeUnion(HIShapeRef inShape1 , HIShapeRef inShape2 , HIMutableShapeRef outResult )
	OSStatus  HIShapeUnionWithRect(HIMutableShapeRef inShape , const CGRect *inRect )
	OSStatus  HIShapeXor(HIShapeRef inShape1 , HIShapeRef inShape2 , HIMutableShapeRef outResult )
	void  HLock(Handle h )
	void  HLockHi(Handle h )
	ResFileRefNum  HomeResFile(Handle theResource )
	kern_return_t  host_page_size(host_t , vm_size_t * )
	void  HSetRBit(Handle h )
	void  HSetState(Handle h , SInt8 flags )
	void  HUnlock(Handle h )
	double  hypot(double , double )
	float  hypotf(float , float )
	long double  hypotl(long double , long double )
	OSStatus  ICAddMapEntry(ICInstance inst , Handle entries , const ICMapEntry *entry )
	OSStatus  ICAddProfile(ICInstance inst , ICProfileID prototypeID , ICProfileID *newID )
	OSStatus  ICBegin(ICInstance inst , ICPerm perm )
	OSStatus  ICCountMapEntries(ICInstance inst , Handle entries , long *count )
	OSStatus  ICCountPref(ICInstance inst , long *count )
	OSStatus  ICCountProfiles(ICInstance inst , long *count )
	OSStatus  ICCreateGURLEvent(ICInstance inst , OSType helperCreator , Handle urlH , AppleEvent *theEvent )
	OSStatus  ICDeleteMapEntry(ICInstance inst , Handle entries , long pos )
	OSStatus  ICDeletePref(ICInstance inst , ConstStr255Param key )
	OSStatus  ICDeleteProfile(ICInstance inst , ICProfileID thisID )
	OSStatus  ICEditPreferences(ICInstance inst , ConstStr255Param key )
	OSStatus  ICEnd(ICInstance inst )
	OSStatus  ICFindPrefHandle(ICInstance inst , ConstStr255Param key , ICAttr *attr , Handle prefh )
	OSStatus  ICGetConfigName(ICInstance inst , Boolean longname , unsigned char *name )
	OSStatus  ICGetCurrentProfile(ICInstance inst , ICProfileID *currentID )
	OSStatus  ICGetDefaultPref(ICInstance inst , ConstStr255Param key , Handle prefH )
	OSStatus  ICGetIndMapEntry(ICInstance inst , Handle entries , long index , long *pos , ICMapEntry *entry )
	OSStatus  ICGetIndPref(ICInstance inst , long index , unsigned char *key )
	OSStatus  ICGetIndProfile(ICInstance inst , long index , ICProfileID *thisID )
	OSStatus  ICGetMapEntry(ICInstance inst , Handle entries , long pos , ICMapEntry *entry )
	OSStatus  ICGetPerm(ICInstance inst , ICPerm *perm )
	OSStatus  ICGetPref(ICInstance inst , ConstStr255Param key , ICAttr *attr , void *buf , long *size )
	OSStatus  ICGetPrefHandle(ICInstance inst , ConstStr255Param key , ICAttr *attr , Handle *prefh )
	OSStatus  ICGetProfileName(ICInstance inst , ICProfileID thisID , unsigned char *name )
	OSStatus  ICGetSeed(ICInstance inst , long *seed )
	OSStatus  ICGetVersion(ICInstance inst , long whichVersion , UInt32 *version )
	OSStatus  ICLaunchURL(ICInstance inst , ConstStr255Param hint , const void *data , long len , long *selStart , long *selEnd )
	OSStatus  ICMapEntriesFilename(ICInstance inst , Handle entries , ConstStr255Param filename , ICMapEntry *entry )
	OSStatus  ICMapEntriesTypeCreator(ICInstance inst , Handle entries , OSType fType , OSType fCreator , ConstStr255Param filename , ICMapEntry *entry )
	OSStatus  ICMapFilename(ICInstance inst , ConstStr255Param filename , ICMapEntry *entry )
	OSStatus  ICMapTypeCreator(ICInstance inst , OSType fType , OSType fCreator , ConstStr255Param filename , ICMapEntry *entry )
	Boolean  IconRefContainsCGPoint(const CGPoint *testPt , const CGRect *iconRect , IconAlignmentType align , IconServicesUsageFlags iconServicesUsageFlags , IconRef theIconRef )
	Boolean  IconRefIntersectsCGRect(const CGRect *testRect , const CGRect *iconRect , IconAlignmentType align , IconServicesUsageFlags iconServicesUsageFlags , IconRef theIconRef )
	HIShapeRef  IconRefToHIShape(const CGRect *iconRect , IconAlignmentType align , IconServicesUsageFlags iconServicesUsageFlags , IconRef theIconRef )
	OSErr  IconRefToIconFamily(IconRef theIconRef , IconSelectorValue whichIcons , IconFamilyHandle *iconFamily )
	OSStatus  ICParseURL(ICInstance inst , ConstStr255Param hint , const void *data , long len , long *selStart , long *selEnd , Handle url )
	OSStatus  ICSendGURLEvent(ICInstance inst , AppleEvent *theEvent )
	OSStatus  ICSetCurrentProfile(ICInstance inst , ICProfileID newID )
	OSStatus  ICSetMapEntry(ICInstance inst , Handle entries , long pos , const ICMapEntry *entry )
	OSStatus  ICSetPref(ICInstance inst , ConstStr255Param key , ICAttr attr , const void *buf , long size )
	OSStatus  ICSetPrefHandle(ICInstance inst , ConstStr255Param key , ICAttr attr , Handle prefh )
	OSStatus  ICSetProfileName(ICInstance inst , ICProfileID thisID , ConstStr255Param name )
	OSStatus  ICStart(ICInstance *inst , OSType signature )
	OSStatus  ICStop(ICInstance inst )
	OSErr  IdentifyFolder(FSVolumeRefNum vRefNum , SInt32 dirID , FolderType *foldType )
	int  ilogb(double )
	int  ilogbf(float )
	int  ilogbl(long double )
	intmax_t  imaxabs(intmax_t j )
	imaxdiv_t  imaxdiv(intmax_t numer , intmax_t denom )
	SInt32  IncrementAtomic(SInt32 *address )
	SInt16  IncrementAtomic16(SInt16 *address )
	SInt8  IncrementAtomic8(SInt8 *address )
	char *  index(const char * , int )
	int  initgroups(const char * , int )
	char *  initstate(unsigned int , char * , size_t )
	OSErr  InsertResourceFile(ResFileRefNum refNum , RsrcChainLocation where )
	void  InstallDebugAssertOutputHandler(DebugAssertOutputHandlerUPP handler )
	ExceptionHandlerTPP  InstallExceptionHandler(ExceptionHandlerTPP theHandler )
	OSErr  InstallTimeTask(QElemPtr tmTaskPtr )
	OSErr  InstallXTimeTask(QElemPtr tmTaskPtr )
	void  InsTime(QElemPtr tmTaskPtr )
	void  InsXTime(QElemPtr tmTaskPtr )
	OSErr  InvalidateFolderDescriptorCache(FSVolumeRefNum vRefNum , SInt32 dirID )
	OSErr  InvokeAECoerceDescUPP(const AEDesc *fromDesc , DescType toType , SRefCon handlerRefcon , AEDesc *toDesc , AECoerceDescUPP userUPP )
	OSErr  InvokeAECoercePtrUPP(DescType typeCode , const void *dataPtr , Size dataSize , DescType toType , SRefCon handlerRefcon , AEDesc *result , AECoercePtrUPP userUPP )
	void  InvokeAEDisposeExternalUPP(const void *dataPtr , Size dataLength , SRefCon refcon , AEDisposeExternalUPP userUPP )
	OSErr  InvokeAEEventHandlerUPP(const AppleEvent *theAppleEvent , AppleEvent *reply , SRefCon handlerRefcon , AEEventHandlerUPP userUPP )
	OSStatus  InvokeATSCubicClosePathUPP(void *callBackDataPtr , ATSCubicClosePathUPP userUPP )
	OSStatus  InvokeATSCubicCurveToUPP(const Float32Point *pt1 , const Float32Point *pt2 , const Float32Point *pt3 , void *callBackDataPtr , ATSCubicCurveToUPP userUPP )
	OSStatus  InvokeATSCubicLineToUPP(const Float32Point *pt , void *callBackDataPtr , ATSCubicLineToUPP userUPP )
	OSStatus  InvokeATSCubicMoveToUPP(const Float32Point *pt , void *callBackDataPtr , ATSCubicMoveToUPP userUPP )
	OSStatus  InvokeATSQuadraticClosePathUPP(void *callBackDataPtr , ATSQuadraticClosePathUPP userUPP )
	OSStatus  InvokeATSQuadraticCurveUPP(const Float32Point *pt1 , const Float32Point *controlPt , const Float32Point *pt2 , void *callBackDataPtr , ATSQuadraticCurveUPP userUPP )
	OSStatus  InvokeATSQuadraticLineUPP(const Float32Point *pt1 , const Float32Point *pt2 , void *callBackDataPtr , ATSQuadraticLineUPP userUPP )
	OSStatus  InvokeATSQuadraticNewPathUPP(void *callBackDataPtr , ATSQuadraticNewPathUPP userUPP )
	OSStatus  InvokeATSUDirectLayoutOperationOverrideUPP(ATSULayoutOperationSelector iCurrentOperation , ATSULineRef iLineRef , URefCon iRefCon , void *iOperationCallbackParameterPtr , ATSULayoutOperationCallbackStatus *oCallbackStatus , ATSUDirectLayoutOperationOverrideUPP userUPP )
	SInt32  InvokeAVLCompareItemsUPP(AVLTreePtr tree , const void *i1 , const void *i2 , AVLNodeType nd_typ , AVLCompareItemsUPP userUPP )
	void  InvokeAVLDisposeItemUPP(AVLTreePtr tree , const void *dataP , AVLDisposeItemUPP userUPP )
	ByteCount  InvokeAVLItemSizeUPP(AVLTreePtr tree , const void *itemPtr , AVLItemSizeUPP userUPP )
	OSErr  InvokeAVLWalkUPP(AVLTreePtr tree , const void *dataPtr , AVLVisitStage visitStage , AVLNodeType node , UInt32 level , SInt32 balance , void *refCon , AVLWalkUPP userUPP )
	Boolean  InvokeCMBitmapCallBackUPP(SInt32 progress , void *refCon , CMBitmapCallBackUPP userUPP )
	Boolean  InvokeCMConcatCallBackUPP(SInt32 progress , void *refCon , CMConcatCallBackUPP userUPP )
	OSErr  InvokeCMFlattenUPP(SInt32 command , long *size , void *data , void *refCon , CMFlattenUPP userUPP )
	OSErr  InvokeCMMIterateUPP(CMMInfo *iterateData , void *refCon , CMMIterateUPP userUPP )
	OSErr  InvokeCMProfileIterateUPP(CMProfileIterateData *iterateData , void *refCon , CMProfileIterateUPP userUPP )
	OSErr  InvokeCollectionExceptionUPP(Collection c , OSErr status , CollectionExceptionUPP userUPP )
	OSErr  InvokeCollectionFlattenUPP(SInt32 size , void *data , void *refCon , CollectionFlattenUPP userUPP )
	Boolean  InvokeColorComplementUPP(RGBColor *rgb , ColorComplementUPP userUPP )
	Boolean  InvokeColorSearchUPP(RGBColor *rgb , long *position , ColorSearchUPP userUPP )
	ComponentResult  InvokeComponentMPWorkFunctionUPP(void *globalRefCon , ComponentMPWorkFunctionHeaderRecordPtr header , ComponentMPWorkFunctionUPP userUPP )
	ComponentResult  InvokeComponentRoutineUPP(ComponentParameters *cp , Handle componentStorage , ComponentRoutineUPP userUPP )
	void  InvokeDebugAssertOutputHandlerUPP(OSType componentSignature , UInt32 options , const char *assertionString , const char *exceptionLabelString , const char *errorString , const char *fileName , long lineNumber , void *value , ConstStr255Param outputMsg , DebugAssertOutputHandlerUPP userUPP )
	void  InvokeDebugComponentCallbackUPP(SInt32 optionSelectorNum , UInt32 command , Boolean *optionSetting , DebugComponentCallbackUPP userUPP )
	void  InvokeDebuggerDisposeThreadUPP(ThreadID threadDeleted , DebuggerDisposeThreadUPP userUPP )
	void  InvokeDebuggerNewThreadUPP(ThreadID threadCreated , DebuggerNewThreadUPP userUPP )
	ThreadID  InvokeDebuggerThreadSchedulerUPP(SchedulerInfoRecPtr schedulerInfo , DebuggerThreadSchedulerUPP userUPP )
	void  InvokeDeferredTaskUPP(long dtParam , DeferredTaskUPP userUPP )
	void  InvokeDragGrayRgnUPP(DragGrayRgnUPP userUPP )
	OSStatus  InvokeExceptionHandlerUPP(ExceptionInformation *theException , ExceptionHandlerUPP userUPP )
	OSStatus  InvokeFMFontCallbackFilterUPP(FMFont iFont , void *iRefCon , FMFontCallbackFilterUPP userUPP )
	OSStatus  InvokeFMFontFamilyCallbackFilterUPP(FMFontFamily iFontFamily , void *iRefCon , FMFontFamilyCallbackFilterUPP userUPP )
	void  InvokeFNSubscriptionUPP(FNMessage message , OptionBits flags , void *refcon , FNSubscriptionRef subscription , FNSubscriptionUPP userUPP )
	OSStatus  InvokeFolderManagerNotificationUPP(OSType message , void *arg , void *userRefCon , FolderManagerNotificationUPP userUPP )
	void  InvokeFSVolumeEjectUPP(FSVolumeOperation volumeOp , void *clientData , OSStatus err , FSVolumeRefNum volumeRefNum , pid_t dissenter , FSVolumeEjectUPP userUPP )
	void  InvokeFSVolumeMountUPP(FSVolumeOperation volumeOp , void *clientData , OSStatus err , FSVolumeRefNum mountedVolumeRefNum , FSVolumeMountUPP userUPP )
	void  InvokeFSVolumeUnmountUPP(FSVolumeOperation volumeOp , void *clientData , OSStatus err , FSVolumeRefNum volumeRefNum , pid_t dissenter , FSVolumeUnmountUPP userUPP )
	OSErr  InvokeGetMissingComponentResourceUPP(Component c , OSType resType , SInt16 resID , void *refCon , Handle *resource , GetMissingComponentResourceUPP userUPP )
	OSErr  InvokeIconActionUPP(ResType theType , Handle *theIcon , void *yourDataPtr , IconActionUPP userUPP )
	Handle  InvokeIconGetterUPP(ResType theType , void *yourDataPtr , IconGetterUPP userUPP )
	Boolean  InvokeIndexToUCStringUPP(UInt32 index , void *listDataPtr , void *refcon , CFStringRef *outString , UCTypeSelectOptions *tsOptions , IndexToUCStringUPP userUPP )
	void  InvokeIOCompletionUPP(ParmBlkPtr paramBlock , IOCompletionUPP userUPP )
	OSStatus  InvokeKCCallbackUPP(KCEvent keychainEvent , KCCallbackInfo *info , void *userContext , KCCallbackUPP userUPP )
	OSErr  InvokeOSLAccessorUPP(DescType desiredClass , const AEDesc *container , DescType containerClass , DescType form , const AEDesc *selectionData , AEDesc *value , SRefCon accessorRefcon , OSLAccessorUPP userUPP )
	OSErr  InvokeOSLAdjustMarksUPP(long newStart , long newStop , const AEDesc *markToken , OSLAdjustMarksUPP userUPP )
	OSErr  InvokeOSLCompareUPP(DescType oper , const AEDesc *obj1 , const AEDesc *obj2 , Boolean *result , OSLCompareUPP userUPP )
	OSErr  InvokeOSLCountUPP(DescType desiredType , DescType containerClass , const AEDesc *container , long *result , OSLCountUPP userUPP )
	OSErr  InvokeOSLDisposeTokenUPP(AEDesc *unneededToken , OSLDisposeTokenUPP userUPP )
	OSErr  InvokeOSLGetErrDescUPP(AEDesc **appDescPtr , OSLGetErrDescUPP userUPP )
	OSErr  InvokeOSLGetMarkTokenUPP(const AEDesc *dContainerToken , DescType containerClass , AEDesc *result , OSLGetMarkTokenUPP userUPP )
	OSErr  InvokeOSLMarkUPP(const AEDesc *dToken , const AEDesc *markToken , long index , OSLMarkUPP userUPP )
	void  InvokeQDArcUPP(GrafVerb verb , const Rect *r , short startAngle , short arcAngle , QDArcUPP userUPP )
	void  InvokeQDBitsUPP(const BitMap *srcBits , const Rect *srcRect , const Rect *dstRect , short mode , RgnHandle maskRgn , QDBitsUPP userUPP )
	void  InvokeQDCommentUPP(short kind , short dataSize , Handle dataHandle , QDCommentUPP userUPP )
	void  InvokeQDGetPicUPP(void *dataPtr , short byteCount , QDGetPicUPP userUPP )
	void  InvokeQDJShieldCursorUPP(short left , short top , short right , short bottom , QDJShieldCursorUPP userUPP )
	void  InvokeQDLineUPP(Point newPt , QDLineUPP userUPP )
	void  InvokeQDOpcodeUPP(const Rect *fromRect , const Rect *toRect , UInt16 opcode , SInt16 version , QDOpcodeUPP userUPP )
	void  InvokeQDOvalUPP(GrafVerb verb , const Rect *r , QDOvalUPP userUPP )
	void  InvokeQDPolyUPP(GrafVerb verb , PolyHandle poly , QDPolyUPP userUPP )
	OSStatus  InvokeQDPrinterStatusUPP(PrinterStatusOpcode opcode , CGrafPtr currentPort , void *printerStatus , QDPrinterStatusUPP userUPP )
	void  InvokeQDPutPicUPP(const void *dataPtr , short byteCount , QDPutPicUPP userUPP )
	void  InvokeQDRectUPP(GrafVerb verb , const Rect *r , QDRectUPP userUPP )
	void  InvokeQDRgnUPP(GrafVerb verb , RgnHandle rgn , QDRgnUPP userUPP )
	void  InvokeQDRRectUPP(GrafVerb verb , const Rect *r , short ovalWidth , short ovalHeight , QDRRectUPP userUPP )
	OSStatus  InvokeQDStdGlyphsUPP(void *dataStream , ByteCount size , QDStdGlyphsUPP userUPP )
	void  InvokeQDTextUPP(short byteCount , const void *textBuf , Point numer , Point denom , QDTextUPP userUPP )
	short  InvokeQDTxMeasUPP(short byteCount , const void *textAddr , Point *numer , Point *denom , FontInfo *info , QDTxMeasUPP userUPP )
	Boolean  InvokeRedrawBackgroundUPP(ATSUTextLayout iLayout , UniCharArrayOffset iTextOffset , UniCharCount iTextLength , ATSTrapezoid *iUnhighlightArea , ItemCount iTrapezoidCount , RedrawBackgroundUPP userUPP )
	OSStatus  InvokeRegionToRectsUPP(UInt16 message , RgnHandle rgn , const Rect *rect , void *refCon , RegionToRectsUPP userUPP )
	void  InvokeResErrUPP(OSErr thErr , ResErrUPP userUPP )
	OSErr  InvokeSelectorFunctionUPP(OSType selector , SInt32 *response , SelectorFunctionUPP userUPP )
	long  InvokeSleepQUPP(long message , SleepQRecPtr qRecPtr , SleepQUPP userUPP )
	void  InvokeSpeechDoneUPP(SpeechChannel chan , SRefCon refCon , SpeechDoneUPP userUPP )
	void  InvokeSpeechErrorUPP(SpeechChannel chan , SRefCon refCon , OSErr theError , long bytePos , SpeechErrorUPP userUPP )
	void  InvokeSpeechPhonemeUPP(SpeechChannel chan , SRefCon refCon , SInt16 phonemeOpcode , SpeechPhonemeUPP userUPP )
	void  InvokeSpeechSyncUPP(SpeechChannel chan , SRefCon refCon , OSType syncMessage , SpeechSyncUPP userUPP )
	void  InvokeSpeechTextDoneUPP(SpeechChannel chan , SRefCon refCon , const void **nextBuf , unsigned long *byteLen , SInt32 *controlFlags , SpeechTextDoneUPP userUPP )
	void  InvokeSpeechWordUPP(SpeechChannel chan , SRefCon refCon , unsigned long wordPos , UInt16 wordLen , SpeechWordUPP userUPP )
	OSStatus  InvokeSystemSoundCompletionUPP(SystemSoundActionID actionID , void *userData , SystemSoundCompletionUPP userUPP )
	voidPtr  InvokeThreadEntryUPP(void *threadParam , ThreadEntryUPP userUPP )
	ThreadID  InvokeThreadSchedulerUPP(SchedulerInfoRecPtr schedulerInfo , ThreadSchedulerUPP userUPP )
	void  InvokeThreadSwitchUPP(ThreadID threadBeingSwitched , void *switchProcParam , ThreadSwitchUPP userUPP )
	void  InvokeThreadTerminationUPP(ThreadID threadTerminated , void *terminationProcParam , ThreadTerminationUPP userUPP )
	void  InvokeTimerUPP(TMTaskPtr tmTaskPtr , TimerUPP userUPP )
	OSStatus  InvokeUnicodeToTextFallbackUPP(UniChar *iSrcUniStr , ByteCount iSrcUniStrLen , ByteCount *oSrcConvLen , TextPtr oDestStr , ByteCount iDestStrLen , ByteCount *oDestConvLen , LogicalAddress iInfoPtr , ConstUnicodeMappingPtr iUnicodeMappingPtr , UnicodeToTextFallbackUPP userUPP )
	CFMutableDictionaryRef  IOBSDNameMatching(mach_port_t masterPort , uint32_t options , const char *bsdName )
	kern_return_t  IOCatalogueGetData(mach_port_t masterPort , uint32_t flag , char **buffer , uint32_t *size )
	kern_return_t  IOCatalogueModuleLoaded(mach_port_t masterPort , char *name )
	kern_return_t  IOCatalogueReset(mach_port_t masterPort , uint32_t flag )
	kern_return_t  IOCatalogueSendData(mach_port_t masterPort , uint32_t flag , const char *buffer , uint32_t size )
	kern_return_t  IOCatalogueTerminate(mach_port_t masterPort , uint32_t flag , char *description )
	kern_return_t  IOConnectAddClient(io_connect_t connect , io_connect_t client )
	kern_return_t  IOConnectAddRef(io_connect_t connect )
	kern_return_t  IOConnectCallAsyncMethod(mach_port_t connection , uint32_t selector , mach_port_t wake_port , uint64_t *reference , uint32_t referenceCnt , const uint64_t *input , uint32_t inputCnt , const void *inputStruct , size_t inputStructCnt , uint64_t *output , uint32_t *outputCnt , void *outputStruct , size_t *outputStructCnt )
	kern_return_t  IOConnectCallAsyncScalarMethod(mach_port_t connection , uint32_t selector , mach_port_t wake_port , uint64_t *reference , uint32_t referenceCnt , const uint64_t *input , uint32_t inputCnt , uint64_t *output , uint32_t *outputCnt )
	kern_return_t  IOConnectCallAsyncStructMethod(mach_port_t connection , uint32_t selector , mach_port_t wake_port , uint64_t *reference , uint32_t referenceCnt , const void *inputStruct , size_t inputStructCnt , void *outputStruct , size_t *outputStructCnt )
	kern_return_t  IOConnectCallMethod(mach_port_t connection , uint32_t selector , const uint64_t *input , uint32_t inputCnt , const void *inputStruct , size_t inputStructCnt , uint64_t *output , uint32_t *outputCnt , void *outputStruct , size_t *outputStructCnt )
	kern_return_t  IOConnectCallScalarMethod(mach_port_t connection , uint32_t selector , const uint64_t *input , uint32_t inputCnt , uint64_t *output , uint32_t *outputCnt )
	kern_return_t  IOConnectCallStructMethod(mach_port_t connection , uint32_t selector , const void *inputStruct , size_t inputStructCnt , void *outputStruct , size_t *outputStructCnt )
	kern_return_t  IOConnectGetService(io_connect_t connect , io_service_t *service )
	kern_return_t  IOConnectMapMemory(io_connect_t connect , uint32_t memoryType , task_port_t intoTask , mach_vm_address_t *atAddress , mach_vm_size_t *ofSize , IOOptionBits options )
	kern_return_t  IOConnectMapMemory64(io_connect_t connect , uint32_t memoryType , task_port_t intoTask , mach_vm_address_t *atAddress , mach_vm_size_t *ofSize , IOOptionBits options )
	kern_return_t  IOConnectRelease(io_connect_t connect )
	kern_return_t  IOConnectSetCFProperties(io_connect_t connect , CFTypeRef properties )
	kern_return_t  IOConnectSetCFProperty(io_connect_t connect , CFStringRef propertyName , CFTypeRef property )
	kern_return_t  IOConnectSetNotificationPort(io_connect_t connect , uint32_t type , mach_port_t port , uintptr_t reference )
	kern_return_t  IOConnectTrap0(io_connect_t connect , uint32_t index )
	kern_return_t  IOConnectTrap1(io_connect_t connect , uint32_t index , uintptr_t p1 )
	kern_return_t  IOConnectTrap2(io_connect_t connect , uint32_t index , uintptr_t p1 , uintptr_t p2 )
	kern_return_t  IOConnectTrap3(io_connect_t connect , uint32_t index , uintptr_t p1 , uintptr_t p2 , uintptr_t p3 )
	kern_return_t  IOConnectTrap4(io_connect_t connect , uint32_t index , uintptr_t p1 , uintptr_t p2 , uintptr_t p3 , uintptr_t p4 )
	kern_return_t  IOConnectTrap5(io_connect_t connect , uint32_t index , uintptr_t p1 , uintptr_t p2 , uintptr_t p3 , uintptr_t p4 , uintptr_t p5 )
	kern_return_t  IOConnectTrap6(io_connect_t connect , uint32_t index , uintptr_t p1 , uintptr_t p2 , uintptr_t p3 , uintptr_t p4 , uintptr_t p5 , uintptr_t p6 )
	kern_return_t  IOConnectUnmapMemory(io_connect_t connect , uint32_t memoryType , task_port_t fromTask , mach_vm_address_t atAddress )
	kern_return_t  IOConnectUnmapMemory64(io_connect_t connect , uint32_t memoryType , task_port_t fromTask , mach_vm_address_t atAddress )
	kern_return_t  IOCreateReceivePort(uint32_t msgType , mach_port_t *recvPort )
	void  IODispatchCalloutFromMessage(void *unused , mach_msg_header_t *msg , void *reference )
	boolean_t  IOIteratorIsValid(io_iterator_t iterator )
	io_object_t  IOIteratorNext(io_iterator_t iterator )
	void  IOIteratorReset(io_iterator_t iterator )
	kern_return_t  IOKitGetBusyState(mach_port_t masterPort , uint32_t *busyState )
	kern_return_t  IOKitWaitQuiet(mach_port_t masterPort , mach_timespec_t *waitTime )
	kern_return_t  IOMasterPort(mach_port_t bootstrapPort , mach_port_t *masterPort )
	IONotificationPortRef  IONotificationPortCreate(mach_port_t masterPort )
	void  IONotificationPortDestroy(IONotificationPortRef notify )
	mach_port_t  IONotificationPortGetMachPort(IONotificationPortRef notify )
	CFRunLoopSourceRef  IONotificationPortGetRunLoopSource(IONotificationPortRef notify )
	void  IONotificationPortSetDispatchQueue(IONotificationPortRef notify , dispatch_queue_t queue )
	boolean_t  IOObjectConformsTo(io_object_t object , const char *className )
	CFStringRef  IOObjectCopyBundleIdentifierForClass(CFStringRef classname )
	CFStringRef  IOObjectCopyClass(io_object_t object )
	CFStringRef  IOObjectCopySuperclassForClass(CFStringRef classname )
	kern_return_t  IOObjectGetClass(io_object_t object , char *className )
	uint32_t  IOObjectGetKernelRetainCount(io_object_t object )
	uint32_t  IOObjectGetRetainCount(io_object_t object )
	uint32_t  IOObjectGetUserRetainCount(io_object_t object )
	boolean_t  IOObjectIsEqualTo(io_object_t object , io_object_t anObject )
	kern_return_t  IOObjectRelease(io_object_t object )
	kern_return_t  IOObjectRetain(io_object_t object )
	CFMutableDictionaryRef  IOOpenFirmwarePathMatching(mach_port_t masterPort , uint32_t options , const char *path )
	kern_return_t  IORegistryCreateIterator(mach_port_t masterPort , const char *plane , IOOptionBits options , io_iterator_t *iterator )
	kern_return_t  IORegistryEntryCreateCFProperties(io_registry_entry_t entry , CFMutableDictionaryRef *properties , CFAllocatorRef allocator , IOOptionBits options )
	CFTypeRef  IORegistryEntryCreateCFProperty(io_registry_entry_t entry , CFStringRef key , CFAllocatorRef allocator , IOOptionBits options )
	kern_return_t  IORegistryEntryCreateIterator(io_registry_entry_t entry , const char *plane , IOOptionBits options , io_iterator_t *iterator )
	io_registry_entry_t  IORegistryEntryFromPath(mach_port_t masterPort , const char *path )
	kern_return_t  IORegistryEntryGetChildEntry(io_registry_entry_t entry , const char *plane , io_registry_entry_t *child )
	kern_return_t  IORegistryEntryGetChildIterator(io_registry_entry_t entry , const char *plane , io_iterator_t *iterator )
	kern_return_t  IORegistryEntryGetLocationInPlane(io_registry_entry_t entry , const char *plane , char *location )
	kern_return_t  IORegistryEntryGetName(io_registry_entry_t entry , char *name )
	kern_return_t  IORegistryEntryGetNameInPlane(io_registry_entry_t entry , const char *plane , char *name )
	kern_return_t  IORegistryEntryGetParentEntry(io_registry_entry_t entry , const char *plane , io_registry_entry_t *parent )
	kern_return_t  IORegistryEntryGetParentIterator(io_registry_entry_t entry , const char *plane , io_iterator_t *iterator )
	kern_return_t  IORegistryEntryGetPath(io_registry_entry_t entry , const char *plane , char *path )
	kern_return_t  IORegistryEntryGetProperty(io_registry_entry_t entry , const char *propertyName , char *buffer , uint32_t *size )
	kern_return_t  IORegistryEntryGetRegistryEntryID(io_registry_entry_t entry , uint64_t *entryID )
	CFMutableDictionaryRef  IORegistryEntryIDMatching(uint64_t entryID )
	boolean_t  IORegistryEntryInPlane(io_registry_entry_t entry , const char *plane )
	CFTypeRef  IORegistryEntrySearchCFProperty(io_registry_entry_t entry , const char *plane , CFStringRef key , CFAllocatorRef allocator , IOOptionBits options )
	kern_return_t  IORegistryEntrySetCFProperties(io_registry_entry_t entry , CFTypeRef properties )
	kern_return_t  IORegistryEntrySetCFProperty(io_registry_entry_t entry , CFStringRef propertyName , CFTypeRef property )
	io_registry_entry_t  IORegistryGetRootEntry(mach_port_t masterPort )
	kern_return_t  IORegistryIteratorEnterEntry(io_iterator_t iterator )
	kern_return_t  IORegistryIteratorExitEntry(io_iterator_t iterator )
	kern_return_t  IOServiceAddInterestNotification(IONotificationPortRef notifyPort , io_service_t service , const char *interestType , IOServiceInterestCallback callback , void *refCon , io_object_t *notification )
	kern_return_t  IOServiceAddMatchingNotification(IONotificationPortRef notifyPort , const char *notificationType , CFDictionaryRef matching , IOServiceMatchingCallback callback , void *refCon , io_iterator_t *notification )
	kern_return_t  IOServiceAddNotification(mach_port_t masterPort , const char *notificationType , CFDictionaryRef matching , mach_port_t wakePort , uintptr_t reference , io_iterator_t *notification )
	kern_return_t  IOServiceClose(io_connect_t connect )
	kern_return_t  IOServiceGetBusyState(io_service_t service , uint32_t *busyState )
	io_service_t  IOServiceGetMatchingService(mach_port_t masterPort , CFDictionaryRef matching )
	kern_return_t  IOServiceGetMatchingServices(mach_port_t masterPort , CFDictionaryRef matching , io_iterator_t *existing )
	CFMutableDictionaryRef  IOServiceMatching(const char *name )
	kern_return_t  IOServiceMatchPropertyTable(io_service_t service , CFDictionaryRef matching , boolean_t *matches )
	CFMutableDictionaryRef  IOServiceNameMatching(const char *name )
	kern_return_t  IOServiceOFPathToBSDName(mach_port_t masterPort , const char *openFirmwarePath , char *bsdName )
	kern_return_t  IOServiceOpen(io_service_t service , task_port_t owningTask , uint32_t type , io_connect_t *connect )
	kern_return_t  IOServiceRequestProbe(io_service_t service , uint32_t options )
	kern_return_t  IOServiceWaitQuiet(io_service_t service , mach_timespec_t *waitTime )
	size_t  IOSurfaceAlignProperty(CFStringRef property , size_t value )
	CFTypeRef  IOSurfaceCopyValue(IOSurfaceRef buffer , CFStringRef key )
	IOSurfaceRef  IOSurfaceCreate(CFDictionaryRef properties )
	mach_port_t  IOSurfaceCreateMachPort(IOSurfaceRef buffer )
	xpc_object_t  IOSurfaceCreateXPCObject(IOSurfaceRef aSurface )
	void  IOSurfaceDecrementUseCount(IOSurfaceRef buffer )
	size_t  IOSurfaceGetAllocSize(IOSurfaceRef buffer )
	void *  IOSurfaceGetBaseAddress(IOSurfaceRef buffer )
	void *  IOSurfaceGetBaseAddressOfPlane(IOSurfaceRef buffer , size_t planeIndex )
	size_t  IOSurfaceGetBytesPerElement(IOSurfaceRef buffer )
	size_t  IOSurfaceGetBytesPerElementOfPlane(IOSurfaceRef buffer , size_t planeIndex )
	size_t  IOSurfaceGetBytesPerRow(IOSurfaceRef buffer )
	size_t  IOSurfaceGetBytesPerRowOfPlane(IOSurfaceRef buffer , size_t planeIndex )
	size_t  IOSurfaceGetElementHeight(IOSurfaceRef buffer )
	size_t  IOSurfaceGetElementHeightOfPlane(IOSurfaceRef buffer , size_t planeIndex )
	size_t  IOSurfaceGetElementWidth(IOSurfaceRef buffer )
	size_t  IOSurfaceGetElementWidthOfPlane(IOSurfaceRef buffer , size_t planeIndex )
	size_t  IOSurfaceGetHeight(IOSurfaceRef buffer )
	size_t  IOSurfaceGetHeightOfPlane(IOSurfaceRef buffer , size_t planeIndex )
	IOSurfaceID  IOSurfaceGetID(IOSurfaceRef buffer )
	OSType  IOSurfaceGetPixelFormat(IOSurfaceRef buffer )
	size_t  IOSurfaceGetPlaneCount(IOSurfaceRef buffer )
	size_t  IOSurfaceGetPropertyAlignment(CFStringRef property )
	size_t  IOSurfaceGetPropertyMaximum(CFStringRef property )
	uint32_t  IOSurfaceGetSeed(IOSurfaceRef buffer )
	CFTypeID  IOSurfaceGetTypeID()
	int32_t  IOSurfaceGetUseCount(IOSurfaceRef buffer )
	size_t  IOSurfaceGetWidth(IOSurfaceRef buffer )
	size_t  IOSurfaceGetWidthOfPlane(IOSurfaceRef buffer , size_t planeIndex )
	void  IOSurfaceIncrementUseCount(IOSurfaceRef buffer )
	Boolean  IOSurfaceIsInUse(IOSurfaceRef buffer )
	IOReturn  IOSurfaceLock(IOSurfaceRef buffer , uint32_t options , uint32_t *seed )
	IOSurfaceRef  IOSurfaceLookup(IOSurfaceID csid )
	IOSurfaceRef  IOSurfaceLookupFromMachPort(mach_port_t port )
	IOSurfaceRef  IOSurfaceLookupFromXPCObject(xpc_object_t xobj )
	void  IOSurfaceRemoveValue(IOSurfaceRef buffer , CFStringRef key )
	void  IOSurfaceSetValue(IOSurfaceRef buffer , CFStringRef key , CFTypeRef value )
	IOReturn  IOSurfaceUnlock(IOSurfaceRef buffer , uint32_t options , uint32_t *seed )
	int  iruserok(unsigned long , int , const char * , const char * )
	int  iruserok_sa(const void * , int , int , const char * , const char * )
	int  isalnum(int _c )
	int  isalpha(int _c )
	int  isascii(int _c )
	int  isatty(int )
	int  isblank(int _c )
	int  iscntrl(int _c )
	Boolean  IsDataAvailableInIconRef(OSType inIconKind , IconRef inIconRef )
	int  isdigit(int _c )
	int  isgraph(int _c )
	Boolean  IsHandleValid(Handle h )
	Boolean  IsHeapValid()
	int  ishexnumber(int _c )
	OSErr  IsIconRefComposite(IconRef compositeIconRef , IconRef *backgroundIconRef , IconRef *foregroundIconRef )
	Boolean  IsIconRefMaskEmpty(IconRef iconRef )
	int  isideogram(int _c )
	int  islower(int _c )
	Boolean  IsMetric()
	int  isnumber(int _c )
	int  isphonogram(int _c )
	Boolean  IsPointerValid(Ptr p )
	int  isprint(int _c )
	Boolean  IsProcessVisible(const ProcessSerialNumber *psn )
	int  ispunct(int _c )
	int  isrune(int _c )
	int  issetugid()
	int  isspace(int _c )
	int  isspecial(int _c )
	int  isupper(int _c )
	Boolean  IsValidIconRef(IconRef theIconRef )
	int  isxdigit(int _c )
	double  j0(double )
	double  j1(double )
	double  jn(int , double )
	long  jrand48(unsigned short * )
	OSStatus  KCAddCallback(KCCallbackUPP callbackProc , KCEventMask eventMask , void *userContext )
	OSStatus  KCCopyItem(KCItemRef item , KCRef destKeychain , KCItemRef *copy )
	UInt16  KCCountKeychains()
	OSStatus  KCDeleteItem(KCItemRef item )
	OSStatus  KCFindAppleSharePassword(AFPServerSignature *serverSignature , ConstStringPtr serverAddress , ConstStringPtr serverName , ConstStringPtr volumeName , ConstStringPtr accountName , UInt32 maxLength , void *passwordData , UInt32 *actualLength , KCItemRef *item )
	OSStatus  kcfindapplesharepassword(AFPServerSignature *serverSignature , const char *serverAddress , const char *serverName , const char *volumeName , const char *accountName , UInt32 maxLength , void *passwordData , UInt32 *actualLength , KCItemRef *item )
	OSStatus  KCFindFirstItem(KCRef keychain , const KCAttributeList *attrList , KCSearchRef *search , KCItemRef *item )
	OSStatus  KCFindGenericPassword(ConstStringPtr serviceName , ConstStringPtr accountName , UInt32 maxLength , void *passwordData , UInt32 *actualLength , KCItemRef *item )
	OSStatus  kcfindgenericpassword(const char *serviceName , const char *accountName , UInt32 maxLength , void *passwordData , UInt32 *actualLength , KCItemRef *item )
	OSStatus  KCFindInternetPassword(ConstStringPtr serverName , ConstStringPtr securityDomain , ConstStringPtr accountName , UInt16 port , OSType protocol , OSType authType , UInt32 maxLength , void *passwordData , UInt32 *actualLength , KCItemRef *item )
	OSStatus  kcfindinternetpassword(const char *serverName , const char *securityDomain , const char *accountName , UInt16 port , OSType protocol , OSType authType , UInt32 maxLength , void *passwordData , UInt32 *actualLength , KCItemRef *item )
	OSStatus  KCFindInternetPasswordWithPath(ConstStringPtr serverName , ConstStringPtr securityDomain , ConstStringPtr accountName , ConstStringPtr path , UInt16 port , OSType protocol , OSType authType , UInt32 maxLength , void *passwordData , UInt32 *actualLength , KCItemRef *item )
	OSStatus  kcfindinternetpasswordwithpath(const char *serverName , const char *securityDomain , const char *accountName , const char *path , UInt16 port , OSType protocol , OSType authType , UInt32 maxLength , void *passwordData , UInt32 *actualLength , KCItemRef *item )
	OSStatus  KCFindNextItem(KCSearchRef search , KCItemRef *item )
	OSStatus  KCGetAttribute(KCItemRef item , KCAttribute *attr , UInt32 *actualLength )
	OSStatus  KCGetData(KCItemRef item , UInt32 maxLength , void *data , UInt32 *actualLength )
	OSStatus  KCGetDefaultKeychain(KCRef *keychain )
	OSStatus  KCGetIndKeychain(UInt16 index , KCRef *keychain )
	OSStatus  KCGetKeychain(KCItemRef item , KCRef *keychain )
	OSStatus  KCGetKeychainManagerVersion(UInt32 *returnVers )
	OSStatus  KCGetKeychainName(KCRef keychain , StringPtr keychainName )
	OSStatus  kcgetkeychainname(KCRef keychain , char *keychainName )
	OSStatus  KCGetStatus(KCRef keychain , UInt32 *keychainStatus )
	Boolean  KCIsInteractionAllowed()
	OSStatus  KCLock(KCRef keychain )
	OSStatus  KCMakeAliasFromKCRef(KCRef keychain , AliasHandle *keychainAlias )
	OSStatus  KCMakeKCRefFromAlias(AliasHandle keychainAlias , KCRef *keychain )
	OSStatus  KCMakeKCRefFromFSRef(FSRef *keychainFSRef , KCRef *keychain )
	OSStatus  KCNewItem(KCItemClass itemClass , OSType itemCreator , UInt32 length , const void *data , KCItemRef *item )
	OSStatus  KCReleaseItem(KCItemRef *item )
	OSStatus  KCReleaseKeychain(KCRef *keychain )
	OSStatus  KCReleaseSearch(KCSearchRef *search )
	OSStatus  KCRemoveCallback(KCCallbackUPP callbackProc )
	OSStatus  KCSetAttribute(KCItemRef item , KCAttribute *attr )
	OSStatus  KCSetData(KCItemRef item , UInt32 length , const void *data )
	OSStatus  KCSetDefaultKeychain(KCRef keychain )
	OSStatus  KCSetInteractionAllowed(Boolean state )
	OSStatus  KCUpdateItem(KCItemRef item )
	Boolean  KeychainManagerAvailable()
	int  kill(pid_t , int )
	int  killpg(pid_t , int )
	OSErr  KillProcess(const ProcessSerialNumber *inProcess )
	char *  l64a(long )
	long  labs(long )
	Boolean  LALanguageAnalysisAvailable()
	OSErr  LaunchApplication(LaunchPBPtr LaunchParams )
	int  lchown(const char * , uid_t , gid_t )
	void  lcong48(unsigned short * )
	double  ldexp(double , int )
	float  ldexpf(float , int )
	long double  ldexpl(long double , int )
	ldiv_t  ldiv(long , long )
	void  ldtox80(const long double *x , extended80 *x80 )
	double  lgamma(double )
	float  lgammaf(float )
	long double  lgammal(long double )
	int  link(const char * , const char * )
	long long  llabs(long long )
	lldiv_t  lldiv(long long , long long )
	long long  llrint(double )
	long long  llrintf(float )
	long long  llrintl(long double )
	long long  llround(double )
	long long  llroundf(float )
	long long  llroundl(long double )
	SInt16  LMGetApFontID()
	SInt16  LMGetBootDrive()
	Ptr  LMGetIntlSpec()
	SInt16  LMGetMemErr()
	SInt16  LMGetResErr()
	UInt8  LMGetResLoad()
	SInt16  LMGetSysFontSize()
	SInt16  LMGetSysMap()
	UInt8  LMGetTmpResLoad()
	void  LMSetApFontID(SInt16 value )
	void  LMSetBootDrive(SInt16 value )
	void  LMSetIntlSpec(Ptr value )
	void  LMSetMemErr(SInt16 value )
	void  LMSetResErr(SInt16 value )
	void  LMSetResLoad(UInt8 value )
	void  LMSetSysFontFam(SInt16 value )
	void  LMSetSysFontSize(SInt16 value )
	void  LMSetSysMap(SInt16 value )
	void  LMSetTmpResLoad(UInt8 value )
	void  LoadResource(Handle theResource )
	struct lconv *  localeconv()
	OSStatus  LocaleCountNames(LocaleRef locale , LocaleOperationVariant opVariant , LocaleNameMask nameMask , ItemCount *nameCount )
	OSStatus  LocaleGetIndName(LocaleRef locale , LocaleOperationVariant opVariant , LocaleNameMask nameMask , ItemCount nameIndex , UniCharCount maxNameLen , UniCharCount *actualNameLen , UniChar *displayName , LocaleRef *displayLocale )
	OSStatus  LocaleGetName(LocaleRef locale , LocaleOperationVariant opVariant , LocaleNameMask nameMask , LocaleRef displayLocale , UniCharCount maxNameLen , UniCharCount *actualNameLen , UniChar *displayName )
	OSStatus  LocaleOperationCountLocales(LocaleOperationClass opClass , ItemCount *localeCount )
	OSStatus  LocaleOperationCountNames(LocaleOperationClass opClass , ItemCount *nameCount )
	OSStatus  LocaleOperationGetIndName(LocaleOperationClass opClass , ItemCount nameIndex , UniCharCount maxNameLen , UniCharCount *actualNameLen , UniChar *displayName , LocaleRef *displayLocale )
	OSStatus  LocaleOperationGetLocales(LocaleOperationClass opClass , ItemCount maxLocaleCount , ItemCount *actualLocaleCount , LocaleAndVariant *localeVariantList )
	OSStatus  LocaleOperationGetName(LocaleOperationClass opClass , LocaleRef displayLocale , UniCharCount maxNameLen , UniCharCount *actualNameLen , UniChar *displayName )
	OSStatus  LocaleRefFromLangOrRegionCode(LangCode lang , RegionCode region , LocaleRef *locale )
	OSStatus  LocaleRefFromLocaleString(const char *localeString , LocaleRef *locale )
	OSStatus  LocaleRefGetPartString(LocaleRef locale , LocalePartMask partMask , ByteCount maxStringLen , char *partString )
	OSStatus  LocaleStringToLangAndRegionCodes(const char *localeString , LangCode *lang , RegionCode *region )
	struct tm *  localtime(const time_t * )
	struct tm *  localtime_r(const time_t * , struct tm * )
	int  lockf(int , int , off_t )
	double  log(double )
	double  log10(double )
	float  log10f(float )
	long double  log10l(long double )
	double  log1p(double )
	float  log1pf(float )
	long double  log1pl(long double )
	double  log2(double )
	float  log2f(float )
	long double  log2l(long double )
	double  logb(double )
	float  logbf(float )
	long double  logbl(long double )
	float  logf(float )
	long double  logl(long double )
	Fixed  Long2Fix(SInt32 x )
	SInt64  LongDoubleToSInt64(long double value )
	UInt64  LongDoubleToUInt64(long double value )
	void  longjmp(int * , int )
	void  longjmperror()
	long  lrand48()
	long  lrint(double )
	long  lrintf(float )
	long  lrintl(long double )
	long  lround(double )
	long  lroundf(float )
	long  lroundl(long double )
	OSStatus  LSCanRefAcceptItem(const FSRef *inItemFSRef , const FSRef *inTargetRef , LSRolesMask inRoleMask , LSAcceptanceFlags inFlags , Boolean *outAcceptsItem )
	OSStatus  LSCanURLAcceptURL(CFURLRef inItemURL , CFURLRef inTargetURL , LSRolesMask inRoleMask , LSAcceptanceFlags inFlags , Boolean *outAcceptsItem )
	CFArrayRef  LSCopyAllHandlersForURLScheme(CFStringRef inURLScheme )
	CFArrayRef  LSCopyAllRoleHandlersForContentType(CFStringRef inContentType , LSRolesMask inRole )
	OSStatus  LSCopyApplicationForMIMEType(CFStringRef inMIMEType , LSRolesMask inRoleMask , CFURLRef *outAppURL )
	CFArrayRef  LSCopyApplicationURLsForURL(CFURLRef inURL , LSRolesMask inRoleMask )
	CFStringRef  LSCopyDefaultHandlerForURLScheme(CFStringRef inURLScheme )
	CFStringRef  LSCopyDefaultRoleHandlerForContentType(CFStringRef inContentType , LSRolesMask inRole )
	OSStatus  LSCopyDisplayNameForRef(const FSRef *inRef , CFStringRef *outDisplayName )
	OSStatus  LSCopyDisplayNameForURL(CFURLRef inURL , CFStringRef *outDisplayName )
	OSStatus  LSCopyItemAttribute(const FSRef *inItem , LSRolesMask inRoles , CFStringRef inAttributeName , CFTypeRef *outValue )
	OSStatus  LSCopyItemAttributes(const FSRef *inItem , LSRolesMask inRoles , CFArrayRef inAttributeNames , CFDictionaryRef *outValues )
	OSStatus  LSCopyItemInfoForRef(const FSRef *inItemRef , LSRequestedInfo inWhichInfo , LSItemInfoRecord *outItemInfo )
	OSStatus  LSCopyItemInfoForURL(CFURLRef inURL , LSRequestedInfo inWhichInfo , LSItemInfoRecord *outItemInfo )
	OSStatus  LSCopyKindStringForMIMEType(CFStringRef inMIMEType , CFStringRef *outKindString )
	OSStatus  LSCopyKindStringForRef(const FSRef *inFSRef , CFStringRef *outKindString )
	OSStatus  LSCopyKindStringForTypeInfo(OSType inType , OSType inCreator , CFStringRef inExtension , CFStringRef *outKindString )
	OSStatus  LSCopyKindStringForURL(CFURLRef inURL , CFStringRef *outKindString )
	off_t  lseek(int , off_t , int )
	OSStatus  LSFindApplicationForInfo(OSType inCreator , CFStringRef inBundleID , CFStringRef inName , FSRef *outAppRef , CFURLRef *outAppURL )
	OSStatus  LSGetApplicationForInfo(OSType inType , OSType inCreator , CFStringRef inExtension , LSRolesMask inRoleMask , FSRef *outAppRef , CFURLRef *outAppURL )
	OSStatus  LSGetApplicationForItem(const FSRef *inItemRef , LSRolesMask inRoleMask , FSRef *outAppRef , CFURLRef *outAppURL )
	OSStatus  LSGetApplicationForURL(CFURLRef inURL , LSRolesMask inRoleMask , FSRef *outAppRef , CFURLRef *outAppURL )
	OSStatus  LSGetExtensionInfo(UniCharCount inNameLen , const UniChar *inNameBuffer , UniCharCount *outExtStartIndex )
	LSHandlerOptions  LSGetHandlerOptionsForContentType(CFStringRef inContentType )
	OSStatus  LSInit(LSInitializeFlags inFlags )
	OSStatus  LSOpenApplication(const LSApplicationParameters *appParams , ProcessSerialNumber *outPSN )
	OSStatus  LSOpenCFURLRef(CFURLRef inURL , CFURLRef *outLaunchedURL )
	OSStatus  LSOpenFromRefSpec(const LSLaunchFSRefSpec *inLaunchSpec , FSRef *outLaunchedRef )
	OSStatus  LSOpenFromURLSpec(const LSLaunchURLSpec *inLaunchSpec , CFURLRef *outLaunchedURL )
	OSStatus  LSOpenFSRef(const FSRef *inRef , FSRef *outLaunchedRef )
	OSStatus  LSOpenItemsWithRole(const FSRef *inItems , CFIndex inItemCount , LSRolesMask inRole , const AEKeyDesc *inAEParam , const LSApplicationParameters *inAppParams , ProcessSerialNumber *outPSNs , CFIndex inMaxPSNCount )
	OSStatus  LSOpenURLsWithRole(CFArrayRef inURLs , LSRolesMask inRole , const AEKeyDesc *inAEParam , const LSApplicationParameters *inAppParams , ProcessSerialNumber *outPSNs , CFIndex inMaxPSNCount )
	OSStatus  LSRegisterFSRef(const FSRef *inRef , Boolean inUpdate )
	OSStatus  LSRegisterURL(CFURLRef inURL , Boolean inUpdate )
	OSStatus  LSSetDefaultHandlerForURLScheme(CFStringRef inURLScheme , CFStringRef inHandlerBundleID )
	OSStatus  LSSetDefaultRoleHandlerForContentType(CFStringRef inContentType , LSRolesMask inRole , CFStringRef inHandlerBundleID )
	OSStatus  LSSetExtensionHiddenForRef(const FSRef *inRef , Boolean inHide )
	OSStatus  LSSetExtensionHiddenForURL(CFURLRef inURL , Boolean inHide )
	OSStatus  LSSetHandlerOptionsForContentType(CFStringRef inContentType , LSHandlerOptions inOptions )
	OSStatus  LSSetItemAttribute(const FSRef *inItem , LSRolesMask inRoles , CFStringRef inAttributeName , CFTypeRef inValue )
	void  LSSharedFileListAddObserver(LSSharedFileListRef inList , CFRunLoopRef inRunloop , CFStringRef inRunloopMode , LSSharedFileListChangedProcPtr callback , void *context )
	CFTypeRef  LSSharedFileListCopyProperty(LSSharedFileListRef inList , CFStringRef inPropertyName )
	CFArrayRef  LSSharedFileListCopySnapshot(LSSharedFileListRef inList , UInt32 *outSnapshotSeed )
	LSSharedFileListRef  LSSharedFileListCreate(CFAllocatorRef inAllocator , CFStringRef inListType , CFTypeRef listOptions )
	UInt32  LSSharedFileListGetSeedValue(LSSharedFileListRef inList )
	CFTypeID  LSSharedFileListGetTypeID()
	LSSharedFileListItemRef  LSSharedFileListInsertItemFSRef(LSSharedFileListRef inList , LSSharedFileListItemRef insertAfterThisItem , CFStringRef inDisplayName , IconRef inIconRef , const FSRef *inFSRef , CFDictionaryRef inPropertiesToSet , CFArrayRef inPropertiesToClear )
	LSSharedFileListItemRef  LSSharedFileListInsertItemURL(LSSharedFileListRef inList , LSSharedFileListItemRef insertAfterThisItem , CFStringRef inDisplayName , IconRef inIconRef , CFURLRef inURL , CFDictionaryRef inPropertiesToSet , CFArrayRef inPropertiesToClear )
	CFStringRef  LSSharedFileListItemCopyDisplayName(LSSharedFileListItemRef inItem )
	IconRef  LSSharedFileListItemCopyIconRef(LSSharedFileListItemRef inItem )
	CFTypeRef  LSSharedFileListItemCopyProperty(LSSharedFileListItemRef inItem , CFStringRef inPropertyName )
	UInt32  LSSharedFileListItemGetID(LSSharedFileListItemRef inItem )
	CFTypeID  LSSharedFileListItemGetTypeID()
	OSStatus  LSSharedFileListItemMove(LSSharedFileListRef inList , LSSharedFileListItemRef inItem , LSSharedFileListItemRef inMoveAfterItem )
	OSStatus  LSSharedFileListItemRemove(LSSharedFileListRef inList , LSSharedFileListItemRef inItem )
	OSStatus  LSSharedFileListItemResolve(LSSharedFileListItemRef inItem , UInt32 inFlags , CFURLRef *outURL , FSRef *outRef )
	OSStatus  LSSharedFileListItemSetProperty(LSSharedFileListItemRef inItem , CFStringRef inPropertyName , CFTypeRef inPropertyData )
	OSStatus  LSSharedFileListRemoveAllItems(LSSharedFileListRef inList )
	void  LSSharedFileListRemoveObserver(LSSharedFileListRef inList , CFRunLoopRef inRunloop , CFStringRef inRunloopMode , LSSharedFileListChangedProcPtr callback , void *context )
	OSStatus  LSSharedFileListSetAuthorization(LSSharedFileListRef inList , AuthorizationRef inAuthorization )
	OSStatus  LSSharedFileListSetProperty(LSSharedFileListRef inList , CFStringRef inPropertyName , CFTypeRef inPropertyData )
	OSStatus  LSTerm()
	mach_port_t  mach_host_self()
	mach_msg_return_t  mach_msg(mach_msg_header_t *msg , mach_msg_option_t option , mach_msg_size_t send_size , mach_msg_size_t rcv_size , mach_port_name_t rcv_name , mach_msg_timeout_t timeout , mach_port_name_t notify )
	mach_msg_return_t  mach_msg_overwrite(mach_msg_header_t *msg , mach_msg_option_t option , mach_msg_size_t send_size , mach_msg_size_t rcv_size , mach_port_name_t rcv_name , mach_msg_timeout_t timeout , mach_port_name_t notify , mach_msg_header_t *rcv_msg , mach_msg_size_t rcv_limit )
	mach_port_t  mach_thread_self()
	kern_return_t  macx_backing_store_recovery(int pid )
	kern_return_t  macx_backing_store_suspend(boolean_t suspend )
	kern_return_t  macx_swapoff(uint64_t filename , int flags )
	kern_return_t  macx_swapon(uint64_t filename , int flags , int size , int priority )
	kern_return_t  macx_triggers(int hi_water , int low_water , int flags , mach_port_t alert_port )
	int  madvise(void * , size_t , int )
	int  main(int argc , const char **argv )
	__int32_t  major(__uint32_t _x )
	dev_t  makedev(__uint32_t _major , __uint32_t _minor )
	OSErr  MakeVoiceSpec(OSType creator , OSType id , VoiceSpec *voice )
	void *  malloc(size_t )
	short  MaximumProcessorSpeed()
	int  mblen(const char * , size_t )
	size_t  mbstowcs(wchar_t * , const char * , size_t )
	int  mbtowc(wchar_t * , const char * , size_t )
	CFArrayRef  MDCopyLabelKinds()
	CFArrayRef  MDCopyLabelsMatchingExpression(CFStringRef simpleQueryString )
	CFArrayRef  MDCopyLabelsWithKind(CFStringRef kind )
	MDLabelRef  MDCopyLabelWithUUID(CFUUIDRef labelUUID )
	CFTypeRef  MDItemCopyAttribute(MDItemRef item , CFStringRef name )
	CFDictionaryRef  MDItemCopyAttributeList(MDItemRef item, ... )
	CFArrayRef  MDItemCopyAttributeNames(MDItemRef item )
	CFDictionaryRef  MDItemCopyAttributes(MDItemRef item , CFArrayRef names )
	CFArrayRef  MDItemCopyLabels(MDItemRef item )
	MDItemRef  MDItemCreate(CFAllocatorRef allocator , CFStringRef path )
	MDItemRef  MDItemCreateWithURL(CFAllocatorRef allocator , CFURLRef url )
	CFTypeID  MDItemGetTypeID()
	Boolean  MDItemRemoveLabel(MDItemRef item , MDLabelRef label )
	CFArrayRef  MDItemsCopyAttributes(CFArrayRef items , CFArrayRef names )
	CFArrayRef  MDItemsCreateWithURLs(CFAllocatorRef allocator , CFArrayRef urls )
	Boolean  MDItemSetLabel(MDItemRef item , MDLabelRef label )
	CFTypeRef  MDLabelCopyAttribute(MDLabelRef label , CFStringRef name )
	CFStringRef  MDLabelCopyAttributeName(MDLabelRef label )
	MDLabelRef  MDLabelCreate(CFAllocatorRef allocator , CFStringRef displayName , CFStringRef kind , MDLabelDomain domain )
	Boolean  MDLabelDelete(MDLabelRef label )
	CFTypeID  MDLabelGetTypeID()
	Boolean  MDLabelSetAttributes(MDLabelRef label , CFDictionaryRef attrs )
	CFStringRef  MDQueryCopyQueryString(MDQueryRef query )
	CFArrayRef  MDQueryCopySortingAttributes(MDQueryRef query )
	CFArrayRef  MDQueryCopyValueListAttributes(MDQueryRef query )
	CFArrayRef  MDQueryCopyValuesOfAttribute(MDQueryRef query , CFStringRef name )
	MDQueryRef  MDQueryCreate(CFAllocatorRef allocator , CFStringRef queryString , CFArrayRef valueListAttrs , CFArrayRef sortingAttrs )
	MDQueryRef  MDQueryCreateForItems(CFAllocatorRef allocator , CFStringRef queryString , CFArrayRef valueListAttrs , CFArrayRef sortingAttrs , CFArrayRef items )
	MDQueryRef  MDQueryCreateSubset(CFAllocatorRef allocator , MDQueryRef query , CFStringRef queryString , CFArrayRef valueListAttrs , CFArrayRef sortingAttrs )
	void  MDQueryDisableUpdates(MDQueryRef query )
	void  MDQueryEnableUpdates(MDQueryRef query )
	Boolean  MDQueryExecute(MDQueryRef query , CFOptionFlags optionFlags )
	void *  MDQueryGetAttributeValueOfResultAtIndex(MDQueryRef query , CFStringRef name , CFIndex idx )
	MDQueryBatchingParams  MDQueryGetBatchingParameters(MDQueryRef query )
	CFIndex  MDQueryGetCountOfResultsWithAttributeValue(MDQueryRef query , CFStringRef name , CFTypeRef value )
	CFIndex  MDQueryGetIndexOfResult(MDQueryRef query , const void *result )
	const void *  MDQueryGetResultAtIndex(MDQueryRef query , CFIndex idx )
	CFIndex  MDQueryGetResultCount(MDQueryRef query )
	uint32_t  MDQueryGetSortOptionFlagsForAttribute(MDQueryRef query , CFStringRef fieldName )
	CFTypeID  MDQueryGetTypeID()
	Boolean  MDQueryIsGatheringComplete(MDQueryRef query )
	void  MDQuerySetBatchingParameters(MDQueryRef query , MDQueryBatchingParams params )
	void  MDQuerySetCreateResultFunction(MDQueryRef query , MDQueryCreateResultFunction func , void *context , const CFArrayCallBacks *cb )
	void  MDQuerySetCreateValueFunction(MDQueryRef query , MDQueryCreateValueFunction func , void *context , const CFArrayCallBacks *cb )
	void  MDQuerySetDispatchQueue(MDQueryRef query , dispatch_queue_t queue )
	void  MDQuerySetMaxCount(MDQueryRef query , CFIndex size )
	void  MDQuerySetSearchScope(MDQueryRef query , CFArrayRef scopeDirectories , OptionBits scopeOptions )
	void  MDQuerySetSortComparator(MDQueryRef query , MDQuerySortComparatorFunction comparator , void *context )
	void  MDQuerySetSortComparatorBlock(MDQueryRef query , ^CFComparisonResult(const CFTypeRef *attrs1, const CFTypeRef *attrs2)comparator )
	Boolean  MDQuerySetSortOptionFlagsForAttribute(MDQueryRef query , CFStringRef fieldName , uint32_t flags )
	Boolean  MDQuerySetSortOrder(MDQueryRef query , CFArrayRef sortingAttrs )
	void  MDQueryStop(MDQueryRef query )
	CSSM_RETURN  MDS_Initialize(const CSSM_GUID *pCallerGuid , const CSSM_MEMORY_FUNCS *pMemoryFunctions , MDS_FUNCS_PTR pDlFunctions , MDS_HANDLE *hMds )
	CSSM_RETURN  MDS_Install(MDS_HANDLE MdsHandle )
	CSSM_RETURN  MDS_Terminate(MDS_HANDLE MdsHandle )
	CSSM_RETURN  MDS_Uninstall(MDS_HANDLE MdsHandle )
	CFArrayRef  MDSchemaCopyAllAttributes()
	CFDictionaryRef  MDSchemaCopyAttributesForContentType(CFStringRef contentTypeUTI )
	CFStringRef  MDSchemaCopyDisplayDescriptionForAttribute(CFStringRef name )
	CFStringRef  MDSchemaCopyDisplayNameForAttribute(CFStringRef name )
	CFDictionaryRef  MDSchemaCopyMetaAttributesForAttribute(CFStringRef name )
	void *  memccpy(void * , const void * , int , size_t )
	void *  memchr(const void * , int , size_t )
	int  memcmp(const void * , const void * , size_t )
	void *  memcpy(void * , const void * , size_t )
	OSErr  MemError()
	void *  memmem(const void * , size_t , const void * , size_t )
	void *  memmove(void * , const void * , size_t )
	void *  memset(void * , int , size_t )
	void  memset_pattern16(void * , const void * , size_t )
	void  memset_pattern4(void * , const void * , size_t )
	void  memset_pattern8(void * , const void * , size_t )
	int  mergesort(void * , size_t , size_t , int (*)(const void *, const void *) )
	int  mergesort_b(void * , size_t , size_t , ^int(const void *, const void *) )
	void  Microseconds(UnsignedWide *microTickCount )
	int  mincore(const void * , size_t , char * )
	int  minherit(void * , size_t , int )
	short  MinimumProcessorSpeed()
	__int32_t  minor(__uint32_t _x )
	char *  mkdtemp(char * )
	int  mknod(const char * , mode_t , dev_t )
	int  mkpath_np(const char *path , mode_t omode )
	int  mkstemp(char * )
	int  mkstemps(char * , int )
	char *  mktemp(char * )
	time_t  mktime(struct tm * )
	int  mlock(const void * , size_t )
	int  mlockall(int )
	void *  mmap(void * , size_t , int , int , int , off_t )
	double  modf(double , double * )
	float  modff(float , float * )
	long double  modfl(long double , long double * )
	CSSM_RETURN  ModuleManagerAuthenticate(CSSM_KEY_HIERARCHY KeyHierarchy , const CSSM_GUID *CssmGuid , const CSSM_GUID *AppGuid , CSSM_MANAGER_REGISTRATION_INFO_PTR FunctionTable )
	LogicalAddress  MPAllocate(ByteCount size )
	LogicalAddress  MPAllocateAligned(ByteCount size , UInt8 alignment , OptionBits options )
	OSStatus  MPAllocateTaskStorageIndex(TaskStorageIndex *taskIndex )
	OSStatus  MPArmTimer(MPTimerID timerID , AbsoluteTime *expirationTime , OptionBits options )
	void  MPBlockClear(LogicalAddress address , ByteCount size )
	void  MPBlockCopy(LogicalAddress source , LogicalAddress destination , ByteCount size )
	OSStatus  MPCancelTimer(MPTimerID timerID , AbsoluteTime *timeRemaining )
	OSStatus  MPCauseNotification(MPNotificationID notificationID )
	OSStatus  MPCreateCriticalRegion(MPCriticalRegionID *criticalRegion )
	OSStatus  MPCreateEvent(MPEventID *event )
	OSStatus  MPCreateNotification(MPNotificationID *notificationID )
	OSStatus  MPCreateQueue(MPQueueID *queue )
	OSStatus  MPCreateSemaphore(MPSemaphoreCount maximumValue , MPSemaphoreCount initialValue , MPSemaphoreID *semaphore )
	OSStatus  MPCreateTask(TaskProc entryPoint , void *parameter , ByteCount stackSize , MPQueueID notifyQueue , void *terminationParameter1 , void *terminationParameter2 , MPTaskOptions options , MPTaskID *task )
	OSStatus  MPCreateTimer(MPTimerID *timerID )
	MPTaskID  MPCurrentTaskID()
	OSStatus  MPDeallocateTaskStorageIndex(TaskStorageIndex taskIndex )
	OSStatus  MPDelayUntil(AbsoluteTime *expirationTime )
	OSStatus  MPDeleteCriticalRegion(MPCriticalRegionID criticalRegion )
	OSStatus  MPDeleteEvent(MPEventID event )
	OSStatus  MPDeleteNotification(MPNotificationID notificationID )
	OSStatus  MPDeleteQueue(MPQueueID queue )
	OSStatus  MPDeleteSemaphore(MPSemaphoreID semaphore )
	OSStatus  MPDeleteTimer(MPTimerID timerID )
	OSStatus  MPDisposeTaskException(MPTaskID task , OptionBits action )
	OSStatus  MPEnterCriticalRegion(MPCriticalRegionID criticalRegion , Duration timeout )
	void  MPExit(OSStatus status )
	OSStatus  MPExitCriticalRegion(MPCriticalRegionID criticalRegion )
	OSStatus  MPExtractTaskState(MPTaskID task , MPTaskStateKind kind , void *info )
	void  MPFree(LogicalAddress object )
	ByteCount  MPGetAllocatedBlockSize(LogicalAddress object )
	OSStatus  MPGetNextCpuID(MPCoherenceID owningCoherenceID , MPCpuID *cpuID )
	OSStatus  MPGetNextTaskID(MPProcessID owningProcessID , MPTaskID *taskID )
	TaskStorageValue  MPGetTaskStorageValue(TaskStorageIndex taskIndex )
	OSStatus  MPModifyNotification(MPNotificationID notificationID , MPOpaqueID anID , void *notifyParam1 , void *notifyParam2 , void *notifyParam3 )
	OSStatus  MPModifyNotificationParameters(MPNotificationID notificationID , MPOpaqueIDClass kind , void *notifyParam1 , void *notifyParam2 , void *notifyParam3 )
	OSStatus  MPNotifyQueue(MPQueueID queue , void *param1 , void *param2 , void *param3 )
	ItemCount  MPProcessors()
	ItemCount  MPProcessorsScheduled()
	OSStatus  MPRegisterDebugger(MPQueueID queue , MPDebuggerLevel level )
	void *  MPRemoteCall(MPRemoteProcedure remoteProc , void *parameter , MPRemoteContext context )
	void *  MPRemoteCallCFM(MPRemoteProcedure remoteProc , void *parameter , MPRemoteContext context )
	int  mprotect(void * , size_t , int )
	OSStatus  MPSetEvent(MPEventID event , MPEventFlags flags )
	OSStatus  MPSetExceptionHandler(MPTaskID task , MPQueueID exceptionQ )
	OSStatus  MPSetQueueReserve(MPQueueID queue , ItemCount count )
	OSStatus  MPSetTaskState(MPTaskID task , MPTaskStateKind kind , void *info )
	OSStatus  MPSetTaskStorageValue(TaskStorageIndex taskIndex , TaskStorageValue value )
	OSStatus  MPSetTaskType(MPTaskID task , OSType taskType )
	OSStatus  MPSetTaskWeight(MPTaskID task , MPTaskWeight weight )
	OSStatus  MPSetTimerNotify(MPTimerID timerID , MPOpaqueID anID , void *notifyParam1 , void *notifyParam2 , void *notifyParam3 )
	OSStatus  MPSignalSemaphore(MPSemaphoreID semaphore )
	Boolean  MPTaskIsPreemptive(MPTaskID taskID )
	OSStatus  MPTerminateTask(MPTaskID task , OSStatus terminationStatus )
	OSStatus  MPThrowException(MPTaskID task , MPExceptionKind kind )
	OSStatus  MPUnregisterDebugger(MPQueueID queue )
	OSStatus  MPWaitForEvent(MPEventID event , MPEventFlags *flags , Duration timeout )
	OSStatus  MPWaitOnQueue(MPQueueID queue , void **param1 , void **param2 , void **param3 , Duration timeout )
	OSStatus  MPWaitOnSemaphore(MPSemaphoreID semaphore , Duration timeout )
	void  MPYield()
	long  mrand48()
	int  msync(void * , size_t , int )
	long  Munger(Handle h , long offset , const void *ptr1 , long len1 , const void *ptr2 , long len2 )
	int  munlock(const void * , size_t )
	int  munlockall()
	int  munmap(void * , size_t )
	double  nan(const char * )
	float  nanf(const char * )
	long double  nanl(const char * )
	AbsoluteTime  NanosecondsToAbsolute(Nanoseconds nanoseconds )
	Duration  NanosecondsToDuration(Nanoseconds theNanoseconds )
	int  nanosleep(const struct timespec * , struct timespec * )
	CMError  NCMGetProfileLocation(CMProfileRef prof , CMProfileLocation *theProfile , UInt32 *locationSize )
	CMError  NCWConcatColorWorld(CMWorldRef *cw , NCMConcatProfileSet *profileSet , CMConcatCallBackUPP proc , void *refCon )
	CMError  NCWNewColorWorld(CMWorldRef *cw , CMProfileRef src , CMProfileRef dst )
	CMError  NCWNewLinkProfile(CMProfileRef *prof , const CMProfileLocation *targetLocation , NCMConcatProfileSet *profileSet , CMConcatCallBackUPP proc , void *refCon )
	double  nearbyint(double )
	float  nearbyintf(float )
	long double  nearbyintl(long double )
	OSStatus  NearestMacTextEncodings(TextEncoding generalEncoding , TextEncoding *bestMacEncoding , TextEncoding *alternateMacEncoding )
	AECoerceDescUPP  NewAECoerceDescUPP(AECoerceDescProcPtr userRoutine )
	AECoercePtrUPP  NewAECoercePtrUPP(AECoercePtrProcPtr userRoutine )
	AEDisposeExternalUPP  NewAEDisposeExternalUPP(AEDisposeExternalProcPtr userRoutine )
	AEEventHandlerUPP  NewAEEventHandlerUPP(AEEventHandlerProcPtr userRoutine )
	ATSCubicClosePathUPP  NewATSCubicClosePathUPP(ATSCubicClosePathProcPtr userRoutine )
	ATSCubicCurveToUPP  NewATSCubicCurveToUPP(ATSCubicCurveToProcPtr userRoutine )
	ATSCubicLineToUPP  NewATSCubicLineToUPP(ATSCubicLineToProcPtr userRoutine )
	ATSCubicMoveToUPP  NewATSCubicMoveToUPP(ATSCubicMoveToProcPtr userRoutine )
	ATSQuadraticClosePathUPP  NewATSQuadraticClosePathUPP(ATSQuadraticClosePathProcPtr userRoutine )
	ATSQuadraticCurveUPP  NewATSQuadraticCurveUPP(ATSQuadraticCurveProcPtr userRoutine )
	ATSQuadraticLineUPP  NewATSQuadraticLineUPP(ATSQuadraticLineProcPtr userRoutine )
	ATSQuadraticNewPathUPP  NewATSQuadraticNewPathUPP(ATSQuadraticNewPathProcPtr userRoutine )
	ATSUDirectLayoutOperationOverrideUPP  NewATSUDirectLayoutOperationOverrideUPP(ATSUDirectLayoutOperationOverrideProcPtr userRoutine )
	AVLCompareItemsUPP  NewAVLCompareItemsUPP(AVLCompareItemsProcPtr userRoutine )
	AVLDisposeItemUPP  NewAVLDisposeItemUPP(AVLDisposeItemProcPtr userRoutine )
	AVLItemSizeUPP  NewAVLItemSizeUPP(AVLItemSizeProcPtr userRoutine )
	AVLWalkUPP  NewAVLWalkUPP(AVLWalkProcPtr userRoutine )
	CMBitmapCallBackUPP  NewCMBitmapCallBackUPP(CMBitmapCallBackProcPtr userRoutine )
	CMConcatCallBackUPP  NewCMConcatCallBackUPP(CMConcatCallBackProcPtr userRoutine )
	CMFlattenUPP  NewCMFlattenUPP(CMFlattenProcPtr userRoutine )
	CMMIterateUPP  NewCMMIterateUPP(CMMIterateProcPtr userRoutine )
	CMProfileIterateUPP  NewCMProfileIterateUPP(CMProfileIterateProcPtr userRoutine )
	Collection  NewCollection()
	CollectionExceptionUPP  NewCollectionExceptionUPP(CollectionExceptionProcPtr userRoutine )
	CollectionFlattenUPP  NewCollectionFlattenUPP(CollectionFlattenProcPtr userRoutine )
	ColorComplementUPP  NewColorComplementUPP(ColorComplementProcPtr userRoutine )
	ColorSearchUPP  NewColorSearchUPP(ColorSearchProcPtr userRoutine )
	ComponentFunctionUPP  NewComponentFunctionUPP(ProcPtr userRoutine , ProcInfoType procInfo )
	ComponentMPWorkFunctionUPP  NewComponentMPWorkFunctionUPP(ComponentMPWorkFunctionProcPtr userRoutine )
	ComponentRoutineUPP  NewComponentRoutineUPP(ComponentRoutineProcPtr userRoutine )
	DebugAssertOutputHandlerUPP  NewDebugAssertOutputHandlerUPP(DebugAssertOutputHandlerProcPtr userRoutine )
	OSStatus  NewDebugComponent(OSType componentSignature , ConstStr255Param componentName , DebugComponentCallbackUPP componentCallback )
	DebugComponentCallbackUPP  NewDebugComponentCallbackUPP(DebugComponentCallbackProcPtr userRoutine )
	DebuggerDisposeThreadUPP  NewDebuggerDisposeThreadUPP(DebuggerDisposeThreadProcPtr userRoutine )
	DebuggerNewThreadUPP  NewDebuggerNewThreadUPP(DebuggerNewThreadProcPtr userRoutine )
	DebuggerThreadSchedulerUPP  NewDebuggerThreadSchedulerUPP(DebuggerThreadSchedulerProcPtr userRoutine )
	OSStatus  NewDebugOption(OSType componentSignature , SInt32 optionSelectorNum , ConstStr255Param optionName )
	DeferredTaskUPP  NewDeferredTaskUPP(DeferredTaskProcPtr userRoutine )
	DragGrayRgnUPP  NewDragGrayRgnUPP(DragGrayRgnProcPtr userRoutine )
	Handle  NewEmptyHandle()
	ExceptionHandlerUPP  NewExceptionHandlerUPP(ExceptionHandlerProcPtr userRoutine )
	FMFontCallbackFilterUPP  NewFMFontCallbackFilterUPP(FMFontCallbackFilterProcPtr userRoutine )
	FMFontFamilyCallbackFilterUPP  NewFMFontFamilyCallbackFilterUPP(FMFontFamilyCallbackFilterProcPtr userRoutine )
	FNSubscriptionUPP  NewFNSubscriptionUPP(FNSubscriptionProcPtr userRoutine )
	FolderManagerNotificationUPP  NewFolderManagerNotificationUPP(FolderManagerNotificationProcPtr userRoutine )
	FSVolumeEjectUPP  NewFSVolumeEjectUPP(FSVolumeEjectProcPtr userRoutine )
	FSVolumeMountUPP  NewFSVolumeMountUPP(FSVolumeMountProcPtr userRoutine )
	FSVolumeUnmountUPP  NewFSVolumeUnmountUPP(FSVolumeUnmountProcPtr userRoutine )
	OSErr  NewGestaltValue(OSType selector , SInt32 newValue )
	GetMissingComponentResourceUPP  NewGetMissingComponentResourceUPP(GetMissingComponentResourceProcPtr userRoutine )
	Handle  NewHandle(Size byteCount )
	Handle  NewHandleClear(Size byteCount )
	IconActionUPP  NewIconActionUPP(IconActionProcPtr userRoutine )
	IconGetterUPP  NewIconGetterUPP(IconGetterProcPtr userRoutine )
	IndexToUCStringUPP  NewIndexToUCStringUPP(IndexToUCStringProcPtr userRoutine )
	IOCompletionUPP  NewIOCompletionUPP(IOCompletionProcPtr userRoutine )
	KCCallbackUPP  NewKCCallbackUPP(KCCallbackProcPtr userRoutine )
	OSLAccessorUPP  NewOSLAccessorUPP(OSLAccessorProcPtr userRoutine )
	OSLAdjustMarksUPP  NewOSLAdjustMarksUPP(OSLAdjustMarksProcPtr userRoutine )
	OSLCompareUPP  NewOSLCompareUPP(OSLCompareProcPtr userRoutine )
	OSLCountUPP  NewOSLCountUPP(OSLCountProcPtr userRoutine )
	OSLDisposeTokenUPP  NewOSLDisposeTokenUPP(OSLDisposeTokenProcPtr userRoutine )
	OSLGetErrDescUPP  NewOSLGetErrDescUPP(OSLGetErrDescProcPtr userRoutine )
	OSLGetMarkTokenUPP  NewOSLGetMarkTokenUPP(OSLGetMarkTokenProcPtr userRoutine )
	OSLMarkUPP  NewOSLMarkUPP(OSLMarkProcPtr userRoutine )
	Ptr  NewPtr(Size byteCount )
	Ptr  NewPtrClear(Size byteCount )
	QDArcUPP  NewQDArcUPP(QDArcProcPtr userRoutine )
	QDBitsUPP  NewQDBitsUPP(QDBitsProcPtr userRoutine )
	QDCommentUPP  NewQDCommentUPP(QDCommentProcPtr userRoutine )
	QDGetPicUPP  NewQDGetPicUPP(QDGetPicProcPtr userRoutine )
	QDJShieldCursorUPP  NewQDJShieldCursorUPP(QDJShieldCursorProcPtr userRoutine )
	QDLineUPP  NewQDLineUPP(QDLineProcPtr userRoutine )
	QDOpcodeUPP  NewQDOpcodeUPP(QDOpcodeProcPtr userRoutine )
	QDOvalUPP  NewQDOvalUPP(QDOvalProcPtr userRoutine )
	QDPolyUPP  NewQDPolyUPP(QDPolyProcPtr userRoutine )
	QDPrinterStatusUPP  NewQDPrinterStatusUPP(QDPrinterStatusProcPtr userRoutine )
	QDPutPicUPP  NewQDPutPicUPP(QDPutPicProcPtr userRoutine )
	QDRectUPP  NewQDRectUPP(QDRectProcPtr userRoutine )
	QDRgnUPP  NewQDRgnUPP(QDRgnProcPtr userRoutine )
	QDRRectUPP  NewQDRRectUPP(QDRRectProcPtr userRoutine )
	QDStdGlyphsUPP  NewQDStdGlyphsUPP(QDStdGlyphsProcPtr userRoutine )
	QDTextUPP  NewQDTextUPP(QDTextProcPtr userRoutine )
	QDTxMeasUPP  NewQDTxMeasUPP(QDTxMeasProcPtr userRoutine )
	RedrawBackgroundUPP  NewRedrawBackgroundUPP(RedrawBackgroundProcPtr userRoutine )
	RegionToRectsUPP  NewRegionToRectsUPP(RegionToRectsProcPtr userRoutine )
	ResErrUPP  NewResErrUPP(ResErrProcPtr userRoutine )
	SelectorFunctionUPP  NewSelectorFunctionUPP(SelectorFunctionProcPtr userRoutine )
	SleepQUPP  NewSleepQUPP(SleepQProcPtr userRoutine )
	OSErr  NewSpeechChannel(VoiceSpec *voice , SpeechChannel *chan )
	SpeechDoneUPP  NewSpeechDoneUPP(SpeechDoneProcPtr userRoutine )
	SpeechErrorUPP  NewSpeechErrorUPP(SpeechErrorProcPtr userRoutine )
	SpeechPhonemeUPP  NewSpeechPhonemeUPP(SpeechPhonemeProcPtr userRoutine )
	SpeechSyncUPP  NewSpeechSyncUPP(SpeechSyncProcPtr userRoutine )
	SpeechTextDoneUPP  NewSpeechTextDoneUPP(SpeechTextDoneProcPtr userRoutine )
	SpeechWordUPP  NewSpeechWordUPP(SpeechWordProcPtr userRoutine )
	SystemSoundCompletionUPP  NewSystemSoundCompletionUPP(SystemSoundCompletionProcPtr userRoutine )
	OSErr  NewThread(ThreadStyle threadStyle , ThreadEntryTPP threadEntry , void *threadParam , Size stackSize , ThreadOptions options , void **threadResult , ThreadID *threadMade )
	ThreadEntryUPP  NewThreadEntryUPP(ThreadEntryProcPtr userRoutine )
	ThreadSchedulerUPP  NewThreadSchedulerUPP(ThreadSchedulerProcPtr userRoutine )
	ThreadSwitchUPP  NewThreadSwitchUPP(ThreadSwitchProcPtr userRoutine )
	ThreadTerminationUPP  NewThreadTerminationUPP(ThreadTerminationProcPtr userRoutine )
	TimerUPP  NewTimerUPP(TimerProcPtr userRoutine )
	UnicodeToTextFallbackUPP  NewUnicodeToTextFallbackUPP(UnicodeToTextFallbackProcPtr userRoutine )
	double  nextafter(double , double )
	float  nextafterf(float , float )
	long double  nextafterl(long double , long double )
	double  nexttoward(double , long double )
	float  nexttowardf(float , long double )
	long double  nexttowardl(long double , long double )
	int  nfssvc(int , void * )
	int  nice(int )
	long  nrand48(unsigned short * )
	NSString *  NSAccessibilityActionDescription(NSString *action )
	void  NSAccessibilityPostNotification(id element , NSString *notification )
	void  NSAccessibilityRaiseBadArgumentException(id element , NSString *attribute , id value )
	NSString *  NSAccessibilityRoleDescription(NSString *role , NSString *subrole )
	NSString *  NSAccessibilityRoleDescriptionForUIElement(id element )
	id  NSAccessibilityUnignoredAncestor(id element )
	NSArray *  NSAccessibilityUnignoredChildren(NSArray *originalChildren )
	NSArray *  NSAccessibilityUnignoredChildrenForOnlyChild(id originalChild )
	id  NSAccessibilityUnignoredDescendant(id element )
	NSArray *  NSAllHashTableObjects(NSHashTable *table )
	NSArray *  NSAllMapTableKeys(NSMapTable *table )
	NSArray *  NSAllMapTableValues(NSMapTable *table )
	void *  NSAllocateCollectable(NSUInteger size , NSUInteger options )
	void *  NSAllocateMemoryPages(NSUInteger bytes )
	id  NSAllocateObject(Class aClass , NSUInteger extraBytes , NSZone *zone )
	BOOL  NSApplicationLoad()
	int  NSApplicationMain(int argc , const char **argv )
	const NSWindowDepth *  NSAvailableWindowDepths()
	void  NSBeep()
	void  NSBeginAlertSheet(NSString *title , NSString *defaultButton , NSString *alternateButton , NSString *otherButton , NSWindow *docWindow , id modalDelegate , SEL didEndSelector , SEL didDismissSelector , void *contextInfo , NSString *msgFormat, ... )
	void  NSBeginCriticalAlertSheet(NSString *title , NSString *defaultButton , NSString *alternateButton , NSString *otherButton , NSWindow *docWindow , id modalDelegate , SEL didEndSelector , SEL didDismissSelector , void *contextInfo , NSString *msgFormat, ... )
	void  NSBeginInformationalAlertSheet(NSString *title , NSString *defaultButton , NSString *alternateButton , NSString *otherButton , NSWindow *docWindow , id modalDelegate , SEL didEndSelector , SEL didDismissSelector , void *contextInfo , NSString *msgFormat, ... )
	NSWindowDepth  NSBestDepth(NSString *colorSpace , NSInteger bps , NSInteger bpp , BOOL planar , BOOL *exactMatch )
	NSInteger  NSBitsPerPixelFromDepth(NSWindowDepth depth )
	NSInteger  NSBitsPerSampleFromDepth(NSWindowDepth depth )
	Class  NSClassFromString(NSString *aClassName )
	NSString *  NSColorSpaceFromDepth(NSWindowDepth depth )
	BOOL  NSCompareHashTables(NSHashTable *table1 , NSHashTable *table2 )
	BOOL  NSCompareMapTables(NSMapTable *table1 , NSMapTable *table2 )
	BOOL  NSContainsRect(NSRect aRect , NSRect bRect )
	NSInteger  NSConvertGlyphsToPackedGlyphs(NSGlyph *glBuf , NSInteger count , NSMultibyteGlyphPacking packing , char *packedGlyphs )
	NSSwappedDouble  NSConvertHostDoubleToSwapped(double x )
	NSSwappedFloat  NSConvertHostFloatToSwapped(float x )
	double  NSConvertSwappedDoubleToHost(NSSwappedDouble x )
	float  NSConvertSwappedFloatToHost(NSSwappedFloat x )
	void  NSCopyBits(NSInteger srcGState , NSRect srcRect , NSPoint destPoint )
	NSHashTable *  NSCopyHashTableWithZone(NSHashTable *table , NSZone *zone )
	NSMapTable *  NSCopyMapTableWithZone(NSMapTable *table , NSZone *zone )
	void  NSCopyMemoryPages(const void *source , void *dest , NSUInteger bytes )
	id  NSCopyObject(id object , NSUInteger extraBytes , NSZone *zone )
	NSUInteger  NSCountHashTable(NSHashTable *table )
	NSUInteger  NSCountMapTable(NSMapTable *table )
	void  NSCountWindows(NSInteger *count )
	void  NSCountWindowsForContext(NSInteger context , NSInteger *count )
	NSString *  NSCreateFileContentsPboardType(NSString *fileType )
	NSString *  NSCreateFilenamePboardType(NSString *fileType )
	NSHashTable *  NSCreateHashTable(NSHashTableCallBacks callBacks , NSUInteger capacity )
	NSHashTable *  NSCreateHashTableWithZone(NSHashTableCallBacks callBacks , NSUInteger capacity , NSZone *zone )
	NSMapTable *  NSCreateMapTable(NSMapTableKeyCallBacks keyCallBacks , NSMapTableValueCallBacks valueCallBacks , NSUInteger capacity )
	NSMapTable *  NSCreateMapTableWithZone(NSMapTableKeyCallBacks keyCallBacks , NSMapTableValueCallBacks valueCallBacks , NSUInteger capacity , NSZone *zone )
	NSZone *  NSCreateZone(NSUInteger startSize , NSUInteger granularity , BOOL canFree )
	void  NSDeallocateMemoryPages(void *ptr , NSUInteger bytes )
	void  NSDeallocateObject(id object )
	NSCalculationError  NSDecimalAdd(NSDecimal *result , const NSDecimal *leftOperand , const NSDecimal *rightOperand , NSRoundingMode roundingMode )
	void  NSDecimalCompact(NSDecimal *number )
	NSComparisonResult  NSDecimalCompare(const NSDecimal *leftOperand , const NSDecimal *rightOperand )
	void  NSDecimalCopy(NSDecimal *destination , const NSDecimal *source )
	NSCalculationError  NSDecimalDivide(NSDecimal *result , const NSDecimal *leftOperand , const NSDecimal *rightOperand , NSRoundingMode roundingMode )
	BOOL  NSDecimalIsNotANumber(const NSDecimal *dcm )
	NSCalculationError  NSDecimalMultiply(NSDecimal *result , const NSDecimal *leftOperand , const NSDecimal *rightOperand , NSRoundingMode roundingMode )
	NSCalculationError  NSDecimalMultiplyByPowerOf10(NSDecimal *result , const NSDecimal *number , short power , NSRoundingMode roundingMode )
	NSCalculationError  NSDecimalNormalize(NSDecimal *number1 , NSDecimal *number2 , NSRoundingMode roundingMode )
	NSCalculationError  NSDecimalPower(NSDecimal *result , const NSDecimal *number , NSUInteger power , NSRoundingMode roundingMode )
	void  NSDecimalRound(NSDecimal *result , const NSDecimal *number , NSInteger scale , NSRoundingMode roundingMode )
	NSString *  NSDecimalString(const NSDecimal *dcm , id locale )
	NSCalculationError  NSDecimalSubtract(NSDecimal *result , const NSDecimal *leftOperand , const NSDecimal *rightOperand , NSRoundingMode roundingMode )
	BOOL  NSDecrementExtraRefCountWasZero(id object )
	NSZone *  NSDefaultMallocZone()
	void  NSDisableScreenUpdates()
	void  NSDivideRect(NSRect inRect , NSRect *slice , NSRect *rem , CGFloat amount , NSRectEdge edge )
	void  NSDottedFrameRect(NSRect aRect )
	void  NSDrawBitmap(NSRect rect , NSInteger width , NSInteger height , NSInteger bps , NSInteger spp , NSInteger bpp , NSInteger bpr , BOOL isPlanar , BOOL hasAlpha , NSString *colorSpaceName , const unsigned char *const *data )
	void  NSDrawButton(NSRect aRect , NSRect clipRect )
	NSRect  NSDrawColorTiledRects(NSRect boundsRect , NSRect clipRect , const NSRectEdge *sides , NSColor **colors , NSInteger count )
	void  NSDrawDarkBezel(NSRect aRect , NSRect clipRect )
	void  NSDrawGrayBezel(NSRect aRect , NSRect clipRect )
	void  NSDrawGroove(NSRect aRect , NSRect clipRect )
	void  NSDrawLightBezel(NSRect aRect , NSRect clipRect )
	void  NSDrawNinePartImage(NSRect frame , NSImage *topLeftCorner , NSImage *topEdgeFill , NSImage *topRightCorner , NSImage *leftEdgeFill , NSImage *centerFill , NSImage *rightEdgeFill , NSImage *bottomLeftCorner , NSImage *bottomEdgeFill , NSImage *bottomRightCorner , NSCompositingOperation op , CGFloat alphaFraction , BOOL flipped )
	void  NSDrawThreePartImage(NSRect frame , NSImage *startCap , NSImage *centerFill , NSImage *endCap , BOOL vertical , NSCompositingOperation op , CGFloat alphaFraction , BOOL flipped )
	NSRect  NSDrawTiledRects(NSRect boundsRect , NSRect clipRect , const NSRectEdge *sides , const CGFloat *grays , NSInteger count )
	void  NSDrawWhiteBezel(NSRect aRect , NSRect clipRect )
	void  NSDrawWindowBackground(NSRect aRect )
	NSEdgeInsets  NSEdgeInsetsMake(CGFloat top , CGFloat left , CGFloat bottom , CGFloat right )
	void  NSEnableScreenUpdates()
	void  NSEndHashTableEnumeration(NSHashEnumerator *enumerator )
	void  NSEndMapTableEnumeration(NSMapEnumerator *enumerator )
	NSHashEnumerator  NSEnumerateHashTable(NSHashTable *table )
	NSMapEnumerator  NSEnumerateMapTable(NSMapTable *table )
	BOOL  NSEqualPoints(NSPoint aPoint , NSPoint bPoint )
	BOOL  NSEqualRanges(NSRange range1 , NSRange range2 )
	BOOL  NSEqualRects(NSRect aRect , NSRect bRect )
	BOOL  NSEqualSizes(NSSize aSize , NSSize bSize )
	void  NSEraseRect(NSRect aRect )
	NSUInteger  NSEventMaskFromType(NSEventType type )
	NSUInteger  NSExtraRefCount(id object )
	NSString *  NSFileTypeForHFSTypeCode(OSType hfsFileTypeCode )
	void  NSFrameRect(NSRect aRect )
	void  NSFrameRectWithWidth(NSRect aRect , CGFloat frameWidth )
	void  NSFrameRectWithWidthUsingOperation(NSRect aRect , CGFloat frameWidth , NSCompositingOperation op )
	void  NSFreeHashTable(NSHashTable *table )
	void  NSFreeMapTable(NSMapTable *table )
	NSString *  NSFullUserName()
	id  NSGetAlertPanel(NSString *title , NSString *msgFormat , NSString *defaultButton , NSString *alternateButton , NSString *otherButton, ... )
	id  NSGetCriticalAlertPanel(NSString *title , NSString *msgFormat , NSString *defaultButton , NSString *alternateButton , NSString *otherButton, ... )
	NSString *  NSGetFileType(NSString *pboardType )
	NSArray *  NSGetFileTypes(NSArray *pboardTypes )
	id  NSGetInformationalAlertPanel(NSString *title , NSString *msgFormat , NSString *defaultButton , NSString *alternateButton , NSString *otherButton, ... )
	const char *  NSGetSizeAndAlignment(const char *typePtr , NSUInteger *sizep , NSUInteger *alignp )
	NSUncaughtExceptionHandler *  NSGetUncaughtExceptionHandler()
	NSInteger  NSGetWindowServerMemory(NSInteger context , NSInteger *virtualMemory , NSInteger *windowBackingMemory , NSString **windowDumpString )
	void *  NSHashGet(NSHashTable *table , const void *pointer )
	void  NSHashInsert(NSHashTable *table , const void *pointer )
	void *  NSHashInsertIfAbsent(NSHashTable *table , const void *pointer )
	void  NSHashInsertKnownAbsent(NSHashTable *table , const void *pointer )
	void  NSHashRemove(NSHashTable *table , const void *pointer )
	CGFloat  NSHeight(NSRect aRect )
	OSType  NSHFSTypeCodeFromFileType(NSString *fileTypeString )
	NSString *  NSHFSTypeOfFile(NSString *fullFilePath )
	void  NSHighlightRect(NSRect aRect )
	NSString *  NSHomeDirectory()
	NSString *  NSHomeDirectoryForUser(NSString *userName )
	long  NSHostByteOrder()
	void  NSIncrementExtraRefCount(id object )
	NSRect  NSInsetRect(NSRect aRect , CGFloat dX , CGFloat dY )
	NSRect  NSIntegralRect(NSRect aRect )
	NSRect  NSIntegralRectWithOptions(NSRect aRect , NSAlignmentOptions opts )
	NSInterfaceStyle  NSInterfaceStyleForKey(NSString *key , NSResponder *responder )
	NSRange  NSIntersectionRange(NSRange range1 , NSRange range2 )
	NSRect  NSIntersectionRect(NSRect aRect , NSRect bRect )
	BOOL  NSIntersectsRect(NSRect aRect , NSRect bRect )
	BOOL  NSIsControllerMarker(id object )
	BOOL  NSIsEmptyRect(NSRect aRect )
	BOOL  NSLocationInRange(NSUInteger loc , NSRange range )
	void  NSLog(NSString *format, ... )
	NSUInteger  NSLogPageSize()
	void  NSLogv(NSString *format , __va_list_tag *args )
	id  NSMakeCollectable(CFTypeRef cf )
	NSPoint  NSMakePoint(CGFloat x , CGFloat y )
	NSRange  NSMakeRange(NSUInteger loc , NSUInteger len )
	NSRect  NSMakeRect(CGFloat x , CGFloat y , CGFloat w , CGFloat h )
	NSSize  NSMakeSize(CGFloat w , CGFloat h )
	void *  NSMapGet(NSMapTable *table , const void *key )
	void  NSMapInsert(NSMapTable *table , const void *key , const void *value )
	void *  NSMapInsertIfAbsent(NSMapTable *table , const void *key , const void *value )
	void  NSMapInsertKnownAbsent(NSMapTable *table , const void *key , const void *value )
	BOOL  NSMapMember(NSMapTable *table , const void *key , void **originalKey , void **value )
	void  NSMapRemove(NSMapTable *table , const void *key )
	NSUInteger  NSMaxRange(NSRange range )
	CGFloat  NSMaxX(NSRect aRect )
	CGFloat  NSMaxY(NSRect aRect )
	CGFloat  NSMidX(NSRect aRect )
	CGFloat  NSMidY(NSRect aRect )
	CGFloat  NSMinX(NSRect aRect )
	CGFloat  NSMinY(NSRect aRect )
	BOOL  NSMouseInRect(NSPoint aPoint , NSRect aRect , BOOL flipped )
	void *  NSNextHashEnumeratorItem(NSHashEnumerator *enumerator )
	BOOL  NSNextMapEnumeratorPair(NSMapEnumerator *enumerator , void **key , void **value )
	NSInteger  NSNumberOfColorComponents(NSString *colorSpaceName )
	NSRect  NSOffsetRect(NSRect aRect , CGFloat dX , CGFloat dY )
	void  NSOpenGLGetOption(NSOpenGLGlobalOption pname , GLint *param )
	void  NSOpenGLGetVersion(GLint *major , GLint *minor )
	void  NSOpenGLSetOption(NSOpenGLGlobalOption pname , GLint param )
	NSString *  NSOpenStepRootDirectory()
	NSUInteger  NSPageSize()
	BOOL  NSPerformService(NSString *itemName , NSPasteboard *pboard )
	BOOL  NSPlanarFromDepth(NSWindowDepth depth )
	NSPoint  NSPointFromCGPoint(CGPoint cgpoint )
	NSPoint  NSPointFromString(NSString *aString )
	BOOL  NSPointInRect(NSPoint aPoint , NSRect aRect )
	CGPoint  NSPointToCGPoint(NSPoint nspoint )
	Protocol *  NSProtocolFromString(NSString *namestr )
	NSRange  NSRangeFromString(NSString *aString )
	NSColor *  NSReadPixel(NSPoint passedPoint )
	void *  NSReallocateCollectable(void *ptr , NSUInteger size , NSUInteger options )
	NSUInteger  NSRealMemoryAvailable()
	void  NSRectClip(NSRect aRect )
	void  NSRectClipList(const NSRect *rects , NSInteger count )
	void  NSRectFill(NSRect aRect )
	void  NSRectFillList(const NSRect *rects , NSInteger count )
	void  NSRectFillListUsingOperation(const NSRect *rects , NSInteger count , NSCompositingOperation op )
	void  NSRectFillListWithColors(const NSRect *rects , NSColor *const *colors , NSInteger num )
	void  NSRectFillListWithColorsUsingOperation(const NSRect *rects , NSColor *const *colors , NSInteger num , NSCompositingOperation op )
	void  NSRectFillListWithGrays(const NSRect *rects , const CGFloat *grays , NSInteger num )
	void  NSRectFillUsingOperation(NSRect aRect , NSCompositingOperation op )
	NSRect  NSRectFromCGRect(CGRect cgrect )
	NSRect  NSRectFromString(NSString *aString )
	CGRect  NSRectToCGRect(NSRect nsrect )
	void  NSRecycleZone(NSZone *zone )
	void  NSRegisterServicesProvider(id provider , NSString *name )
	void  NSReleaseAlertPanel(id panel )
	void  NSResetHashTable(NSHashTable *table )
	void  NSResetMapTable(NSMapTable *table )
	NSUInteger  NSRoundDownToMultipleOfPageSize(NSUInteger bytes )
	NSUInteger  NSRoundUpToMultipleOfPageSize(NSUInteger bytes )
	NSInteger  NSRunAlertPanel(NSString *title , NSString *msgFormat , NSString *defaultButton , NSString *alternateButton , NSString *otherButton, ... )
	NSInteger  NSRunAlertPanelRelativeToWindow(NSString *title , NSString *msgFormat , NSString *defaultButton , NSString *alternateButton , NSString *otherButton , NSWindow *docWindow, ... )
	NSInteger  NSRunCriticalAlertPanel(NSString *title , NSString *msgFormat , NSString *defaultButton , NSString *alternateButton , NSString *otherButton, ... )
	NSInteger  NSRunCriticalAlertPanelRelativeToWindow(NSString *title , NSString *msgFormat , NSString *defaultButton , NSString *alternateButton , NSString *otherButton , NSWindow *docWindow, ... )
	NSInteger  NSRunInformationalAlertPanel(NSString *title , NSString *msgFormat , NSString *defaultButton , NSString *alternateButton , NSString *otherButton, ... )
	NSInteger  NSRunInformationalAlertPanelRelativeToWindow(NSString *title , NSString *msgFormat , NSString *defaultButton , NSString *alternateButton , NSString *otherButton , NSWindow *docWindow, ... )
	NSArray *  NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory , NSSearchPathDomainMask domainMask , BOOL expandTilde )
	SEL  NSSelectorFromString(NSString *aSelectorName )
	void  NSSetFocusRingStyle(NSFocusRingPlacement placement )
	NSInteger  NSSetShowsServicesMenuItem(NSString *itemName , BOOL enabled )
	void  NSSetUncaughtExceptionHandler(NSUncaughtExceptionHandler * )
	void  NSSetZoneName(NSZone *zone , NSString *name )
	BOOL  NSShouldRetainWithZone(id anObject , NSZone *requestedZone )
	void  NSShowAnimationEffect(NSAnimationEffect animationEffect , NSPoint centerLocation , NSSize size , id animationDelegate , SEL didEndSelector , void *contextInfo )
	BOOL  NSShowsServicesMenuItem(NSString *itemName )
	NSSize  NSSizeFromCGSize(CGSize cgsize )
	NSSize  NSSizeFromString(NSString *aString )
	CGSize  NSSizeToCGSize(NSSize nssize )
	NSString *  NSStringFromClass(Class aClass )
	NSString *  NSStringFromHashTable(NSHashTable *table )
	NSString *  NSStringFromMapTable(NSMapTable *table )
	NSString *  NSStringFromPoint(NSPoint aPoint )
	NSString *  NSStringFromProtocol(Protocol *proto )
	NSString *  NSStringFromRange(NSRange range )
	NSString *  NSStringFromRect(NSRect aRect )
	NSString *  NSStringFromSelector(SEL aSelector )
	NSString *  NSStringFromSize(NSSize aSize )
	double  NSSwapBigDoubleToHost(NSSwappedDouble x )
	float  NSSwapBigFloatToHost(NSSwappedFloat x )
	unsigned int  NSSwapBigIntToHost(unsigned int x )
	unsigned long long  NSSwapBigLongLongToHost(unsigned long long x )
	unsigned long  NSSwapBigLongToHost(unsigned long x )
	unsigned short  NSSwapBigShortToHost(unsigned short x )
	NSSwappedDouble  NSSwapDouble(NSSwappedDouble x )
	NSSwappedFloat  NSSwapFloat(NSSwappedFloat x )
	NSSwappedDouble  NSSwapHostDoubleToBig(double x )
	NSSwappedDouble  NSSwapHostDoubleToLittle(double x )
	NSSwappedFloat  NSSwapHostFloatToBig(float x )
	NSSwappedFloat  NSSwapHostFloatToLittle(float x )
	unsigned int  NSSwapHostIntToBig(unsigned int x )
	unsigned int  NSSwapHostIntToLittle(unsigned int x )
	unsigned long long  NSSwapHostLongLongToBig(unsigned long long x )
	unsigned long long  NSSwapHostLongLongToLittle(unsigned long long x )
	unsigned long  NSSwapHostLongToBig(unsigned long x )
	unsigned long  NSSwapHostLongToLittle(unsigned long x )
	unsigned short  NSSwapHostShortToBig(unsigned short x )
	unsigned short  NSSwapHostShortToLittle(unsigned short x )
	unsigned int  NSSwapInt(unsigned int inv )
	double  NSSwapLittleDoubleToHost(NSSwappedDouble x )
	float  NSSwapLittleFloatToHost(NSSwappedFloat x )
	unsigned int  NSSwapLittleIntToHost(unsigned int x )
	unsigned long long  NSSwapLittleLongLongToHost(unsigned long long x )
	unsigned long  NSSwapLittleLongToHost(unsigned long x )
	unsigned short  NSSwapLittleShortToHost(unsigned short x )
	unsigned long  NSSwapLong(unsigned long inv )
	unsigned long long  NSSwapLongLong(unsigned long long inv )
	unsigned short  NSSwapShort(unsigned short inv )
	NSString *  NSTemporaryDirectory()
	NSRange  NSUnionRange(NSRange range1 , NSRange range2 )
	NSRect  NSUnionRect(NSRect aRect , NSRect bRect )
	void  NSUnregisterServicesProvider(NSString *name )
	void  NSUpdateDynamicServices()
	NSString *  NSUserName()
	CGFloat  NSWidth(NSRect aRect )
	void  NSWindowList(NSInteger size , NSInteger *list )
	void  NSWindowListForContext(NSInteger context , NSInteger size , NSInteger *list )
	void *  NSZoneCalloc(NSZone *zone , NSUInteger numElems , NSUInteger byteSize )
	void  NSZoneFree(NSZone *zone , void *ptr )
	NSZone *  NSZoneFromPointer(void *ptr )
	void *  NSZoneMalloc(NSZone *zone , NSUInteger size )
	NSString *  NSZoneName(NSZone *zone )
	void *  NSZoneRealloc(NSZone *zone , void *ptr , NSUInteger size )
	void  num2dec(const decform *f , double_t x , decimal *d )
	void  num2decl(const decform *f , long double x , decimal *d )
	void  numtostring(long theNum , char *theString )
	NSObject *  NXReadNSObjectFromCoder(NSCoder *decoder )
	const char *  object_getClassName(id obj )
	void *  object_getIndexedIvars(id obj )
	int  open(const char * , int, ... )
	int  open_dprotected_np(const char * , int , int , int, ... )
	OSErr  OpenAComponent(Component aComponent , ComponentInstance *ci )
	OSErr  OpenAComponentResFile(Component aComponent , ResFileRefNum *resRef )
	OSErr  OpenADefaultComponent(OSType componentType , OSType componentSubType , ComponentInstance *ci )
	ComponentInstance  OpenComponent(Component aComponent )
	ResFileRefNum  OpenComponentResFile(Component aComponent )
	ComponentInstance  OpenDefaultComponent(OSType componentType , OSType componentSubType )
	int  openx_np(const char * , int , filesec_t )
	int32_t  OSAtomicAdd32(int32_t __theAmount , volatile int32_t *__theValue )
	int32_t  OSAtomicAdd32Barrier(int32_t __theAmount , volatile int32_t *__theValue )
	int64_t  OSAtomicAdd64(int64_t __theAmount , volatile int64_t *__theValue )
	int64_t  OSAtomicAdd64Barrier(int64_t __theAmount , volatile int64_t *__theValue )
	int32_t  OSAtomicAnd32(uint32_t __theMask , volatile uint32_t *__theValue )
	int32_t  OSAtomicAnd32Barrier(uint32_t __theMask , volatile uint32_t *__theValue )
	int32_t  OSAtomicAnd32Orig(uint32_t __theMask , volatile uint32_t *__theValue )
	int32_t  OSAtomicAnd32OrigBarrier(uint32_t __theMask , volatile uint32_t *__theValue )
	bool  OSAtomicCompareAndSwap32(int32_t __oldValue , int32_t __newValue , volatile int32_t *__theValue )
	bool  OSAtomicCompareAndSwap32Barrier(int32_t __oldValue , int32_t __newValue , volatile int32_t *__theValue )
	bool  OSAtomicCompareAndSwap64(int64_t __oldValue , int64_t __newValue , volatile int64_t *__theValue )
	bool  OSAtomicCompareAndSwap64Barrier(int64_t __oldValue , int64_t __newValue , volatile int64_t *__theValue )
	bool  OSAtomicCompareAndSwapInt(int __oldValue , int __newValue , volatile int *__theValue )
	bool  OSAtomicCompareAndSwapIntBarrier(int __oldValue , int __newValue , volatile int *__theValue )
	bool  OSAtomicCompareAndSwapLong(long __oldValue , long __newValue , volatile long *__theValue )
	bool  OSAtomicCompareAndSwapLongBarrier(long __oldValue , long __newValue , volatile long *__theValue )
	bool  OSAtomicCompareAndSwapPtr(void *__oldValue , void *__newValue , void *volatile *__theValue )
	bool  OSAtomicCompareAndSwapPtrBarrier(void *__oldValue , void *__newValue , void *volatile *__theValue )
	int32_t  OSAtomicDecrement32(volatile int32_t *__theValue )
	int32_t  OSAtomicDecrement32Barrier(volatile int32_t *__theValue )
	int64_t  OSAtomicDecrement64(volatile int64_t *__theValue )
	int64_t  OSAtomicDecrement64Barrier(volatile int64_t *__theValue )
	void *  OSAtomicDequeue(OSQueueHead *__list , size_t __offset )
	void  OSAtomicEnqueue(OSQueueHead *__list , void *__new , size_t __offset )
	void *  OSAtomicFifoDequeue(OSFifoQueueHead *__list , size_t __offset )
	void  OSAtomicFifoEnqueue(OSFifoQueueHead *__list , void *__new , size_t __offset )
	int32_t  OSAtomicIncrement32(volatile int32_t *__theValue )
	int32_t  OSAtomicIncrement32Barrier(volatile int32_t *__theValue )
	int64_t  OSAtomicIncrement64(volatile int64_t *__theValue )
	int64_t  OSAtomicIncrement64Barrier(volatile int64_t *__theValue )
	int32_t  OSAtomicOr32(uint32_t __theMask , volatile uint32_t *__theValue )
	int32_t  OSAtomicOr32Barrier(uint32_t __theMask , volatile uint32_t *__theValue )
	int32_t  OSAtomicOr32Orig(uint32_t __theMask , volatile uint32_t *__theValue )
	int32_t  OSAtomicOr32OrigBarrier(uint32_t __theMask , volatile uint32_t *__theValue )
	bool  OSAtomicTestAndClear(uint32_t __n , volatile void *__theAddress )
	bool  OSAtomicTestAndClearBarrier(uint32_t __n , volatile void *__theAddress )
	bool  OSAtomicTestAndSet(uint32_t __n , volatile void *__theAddress )
	bool  OSAtomicTestAndSetBarrier(uint32_t __n , volatile void *__theAddress )
	int32_t  OSAtomicXor32(uint32_t __theMask , volatile uint32_t *__theValue )
	int32_t  OSAtomicXor32Barrier(uint32_t __theMask , volatile uint32_t *__theValue )
	int32_t  OSAtomicXor32Orig(uint32_t __theMask , volatile uint32_t *__theValue )
	int32_t  OSAtomicXor32OrigBarrier(uint32_t __theMask , volatile uint32_t *__theValue )
	kern_return_t  OSGetNotificationFromMessage(mach_msg_header_t *msg , uint32_t index , uint32_t *type , uintptr_t *reference , void **content , vm_size_t *size )
	int32_t  OSHostByteOrder()
	void  OSMemoryBarrier()
	uint16_t  OSReadSwapInt16(const volatile void *base , uintptr_t byteOffset )
	uint32_t  OSReadSwapInt32(const volatile void *base , uintptr_t byteOffset )
	uint64_t  OSReadSwapInt64(const volatile void *base , uintptr_t byteOffset )
	void  OSSpinLockLock(volatile OSSpinLock *__lock )
	bool  OSSpinLockTry(volatile OSSpinLock *__lock )
	void  OSSpinLockUnlock(volatile OSSpinLock *__lock )
	void  OSWriteSwapInt16(volatile void *base , uintptr_t byteOffset , uint16_t data )
	void  OSWriteSwapInt32(volatile void *base , uintptr_t byteOffset , uint32_t data )
	void  OSWriteSwapInt64(volatile void *base , uintptr_t byteOffset , uint64_t data )
	OSErr  OverrideIconRef(IconRef oldIconRef , IconRef newIconRef )
	OSStatus  PasteboardClear(PasteboardRef inPasteboard )
	OSStatus  PasteboardCopyItemFlavorData(PasteboardRef inPasteboard , PasteboardItemID inItem , CFStringRef inFlavorType , CFDataRef *outData )
	OSStatus  PasteboardCopyItemFlavors(PasteboardRef inPasteboard , PasteboardItemID inItem , CFArrayRef *outFlavorTypes )
	OSStatus  PasteboardCopyName(PasteboardRef inPasteboard , CFStringRef *outName )
	OSStatus  PasteboardCopyPasteLocation(PasteboardRef inPasteboard , CFURLRef *outPasteLocation )
	OSStatus  PasteboardCreate(CFStringRef inName , PasteboardRef *outPasteboard )
	OSStatus  PasteboardGetItemCount(PasteboardRef inPasteboard , ItemCount *outItemCount )
	OSStatus  PasteboardGetItemFlavorFlags(PasteboardRef inPasteboard , PasteboardItemID inItem , CFStringRef inFlavorType , PasteboardFlavorFlags *outFlags )
	OSStatus  PasteboardGetItemIdentifier(PasteboardRef inPasteboard , CFIndex inIndex , PasteboardItemID *outItem )
	CFTypeID  PasteboardGetTypeID()
	OSStatus  PasteboardPutItemFlavor(PasteboardRef inPasteboard , PasteboardItemID inItem , CFStringRef inFlavorType , CFDataRef inData , PasteboardFlavorFlags inFlags )
	OSStatus  PasteboardResolvePromises(PasteboardRef inPasteboard )
	OSStatus  PasteboardSetPasteLocation(PasteboardRef inPasteboard , CFURLRef inPasteLocation )
	OSStatus  PasteboardSetPromiseKeeper(PasteboardRef inPasteboard , PasteboardPromiseKeeperProcPtr inPromiseKeeper , void *inContext )
	PasteboardSyncFlags  PasteboardSynchronize(PasteboardRef inPasteboard )
	long  pathconf(const char * , int )
	int  pause()
	OSErr  PauseSpeechAt(SpeechChannel chan , SInt32 whereToPause )
	void  PBAllocateForkAsync(FSForkIOParam *paramBlock )
	OSErr  PBAllocateForkSync(FSForkIOParam *paramBlock )
	void  PBCatalogSearchAsync(FSCatalogBulkParam *paramBlock )
	OSErr  PBCatalogSearchSync(FSCatalogBulkParam *paramBlock )
	void  PBCloseForkAsync(FSForkIOParam *paramBlock )
	OSErr  PBCloseForkSync(FSForkIOParam *paramBlock )
	void  PBCloseIteratorAsync(FSCatalogBulkParam *paramBlock )
	OSErr  PBCloseIteratorSync(FSCatalogBulkParam *paramBlock )
	void  PBCompareFSRefsAsync(FSRefParam *paramBlock )
	OSErr  PBCompareFSRefsSync(FSRefParam *paramBlock )
	void  PBCreateDirectoryUnicodeAsync(FSRefParam *paramBlock )
	OSErr  PBCreateDirectoryUnicodeSync(FSRefParam *paramBlock )
	void  PBCreateFileAndOpenForkUnicodeAsync(FSRefForkIOParamPtr paramBlock )
	OSStatus  PBCreateFileAndOpenForkUnicodeSync(FSRefForkIOParamPtr paramBlock )
	void  PBCreateFileUnicodeAsync(FSRefParam *paramBlock )
	OSErr  PBCreateFileUnicodeSync(FSRefParam *paramBlock )
	void  PBCreateForkAsync(FSForkIOParam *paramBlock )
	OSErr  PBCreateForkSync(FSForkIOParam *paramBlock )
	void  PBDeleteForkAsync(FSForkIOParam *paramBlock )
	OSErr  PBDeleteForkSync(FSForkIOParam *paramBlock )
	void  PBDeleteObjectAsync(FSRefParam *paramBlock )
	OSErr  PBDeleteObjectSync(FSRefParam *paramBlock )
	void  PBExchangeObjectsAsync(FSRefParam *paramBlock )
	OSErr  PBExchangeObjectsSync(FSRefParam *paramBlock )
	void  PBFlushForkAsync(FSForkIOParam *paramBlock )
	OSErr  PBFlushForkSync(FSForkIOParam *paramBlock )
	OSStatus  PBFlushVolumeAsync(FSRefParamPtr paramBlock )
	OSStatus  PBFlushVolumeSync(FSRefParamPtr paramBlock )
	OSStatus  PBFSCopyFileAsync(FSRefParamPtr paramBlock )
	OSStatus  PBFSCopyFileSync(FSRefParamPtr paramBlock )
	OSStatus  PBFSResolveNodeIDAsync(FSRefParamPtr paramBlock )
	OSStatus  PBFSResolveNodeIDSync(FSRefParamPtr paramBlock )
	void  PBGetCatalogInfoAsync(FSRefParam *paramBlock )
	void  PBGetCatalogInfoBulkAsync(FSCatalogBulkParam *paramBlock )
	OSErr  PBGetCatalogInfoBulkSync(FSCatalogBulkParam *paramBlock )
	OSErr  PBGetCatalogInfoSync(FSRefParam *paramBlock )
	void  PBGetForkCBInfoAsync(FSForkCBInfoParam *paramBlock )
	OSErr  PBGetForkCBInfoSync(FSForkCBInfoParam *paramBlock )
	void  PBGetForkPositionAsync(FSForkIOParam *paramBlock )
	OSErr  PBGetForkPositionSync(FSForkIOParam *paramBlock )
	void  PBGetForkSizeAsync(FSForkIOParam *paramBlock )
	OSErr  PBGetForkSizeSync(FSForkIOParam *paramBlock )
	void  PBGetVolumeInfoAsync(FSVolumeInfoParam *paramBlock )
	OSErr  PBGetVolumeInfoSync(FSVolumeInfoParam *paramBlock )
	void  PBIterateForksAsync(FSForkIOParam *paramBlock )
	OSErr  PBIterateForksSync(FSForkIOParam *paramBlock )
	void  PBMakeFSRefUnicodeAsync(FSRefParam *paramBlock )
	OSErr  PBMakeFSRefUnicodeSync(FSRefParam *paramBlock )
	void  PBMoveObjectAsync(FSRefParam *paramBlock )
	OSErr  PBMoveObjectSync(FSRefParam *paramBlock )
	void  PBOpenForkAsync(FSForkIOParam *paramBlock )
	OSErr  PBOpenForkSync(FSForkIOParam *paramBlock )
	void  PBOpenIteratorAsync(FSCatalogBulkParam *paramBlock )
	OSErr  PBOpenIteratorSync(FSCatalogBulkParam *paramBlock )
	void  PBReadForkAsync(FSForkIOParam *paramBlock )
	OSErr  PBReadForkSync(FSForkIOParam *paramBlock )
	void  PBRenameUnicodeAsync(FSRefParam *paramBlock )
	OSErr  PBRenameUnicodeSync(FSRefParam *paramBlock )
	void  PBSetCatalogInfoAsync(FSRefParam *paramBlock )
	OSErr  PBSetCatalogInfoSync(FSRefParam *paramBlock )
	void  PBSetForkPositionAsync(FSForkIOParam *paramBlock )
	OSErr  PBSetForkPositionSync(FSForkIOParam *paramBlock )
	void  PBSetForkSizeAsync(FSForkIOParam *paramBlock )
	OSErr  PBSetForkSizeSync(FSForkIOParam *paramBlock )
	void  PBSetVolumeInfoAsync(FSVolumeInfoParam *paramBlock )
	OSErr  PBSetVolumeInfoSync(FSVolumeInfoParam *paramBlock )
	void  PBUnlinkObjectAsync(FSRefParam *paramBlock )
	OSErr  PBUnlinkObjectSync(FSRefParam *paramBlock )
	void  PBWriteForkAsync(FSForkIOParam *paramBlock )
	OSErr  PBWriteForkSync(FSForkIOParam *paramBlock )
	OSStatus  PBXLockRangeAsync(FSRangeLockParamPtr paramBlock )
	OSStatus  PBXLockRangeSync(FSRangeLockParamPtr paramBlock )
	OSStatus  PBXUnlockRangeAsync(FSRangeLockParamPtr paramBlock )
	OSStatus  PBXUnlockRangeSync(FSRangeLockParamPtr paramBlock )
	int  pclose(FILE * )
	void  perror(const char * )
	kern_return_t  pid_for_task(mach_port_name_t t , int *x )
	int  pipe(int * )
	OSStatus  PlotIconRefInContext(CGContextRef inContext , const CGRect *inRect , IconAlignmentType inAlign , IconTransformType inTransform , const RGBColor *inLabelColor , PlotIconRefFlags inFlags , IconRef inIconRef )
	short  PLpos(ConstStr255Param str1 , ConstStr255Param searchStr )
	StringPtr  PLstrcat(StringPtr str , ConstStr255Param append )
	Ptr  PLstrchr(ConstStr255Param str1 , short ch1 )
	short  PLstrcmp(ConstStr255Param str1 , ConstStr255Param str2 )
	StringPtr  PLstrcpy(StringPtr dest , ConstStr255Param source )
	short  PLstrlen(ConstStr255Param str )
	StringPtr  PLstrncat(StringPtr str1 , ConstStr255Param append , short num )
	short  PLstrncmp(ConstStr255Param str1 , ConstStr255Param str2 , short num )
	StringPtr  PLstrncpy(StringPtr dest , ConstStr255Param source , short num )
	Ptr  PLstrpbrk(ConstStr255Param str1 , ConstStr255Param charSet )
	Ptr  PLstrrchr(ConstStr255Param str1 , short ch1 )
	short  PLstrspn(ConstStr255Param str1 , ConstStr255Param charSet )
	Ptr  PLstrstr(ConstStr255Param str1 , ConstStr255Param searchStr )
	CGImageRef  PMCGImageCreateWithEPSDataProvider(CGDataProviderRef epsDataProvider , CGImageRef epsPreview )
	OSStatus  PMCopyAvailablePPDs(PMPPDDomain domain , CFArrayRef *ppds )
	OSStatus  PMCopyLocalizedPPD(CFURLRef ppd , CFURLRef *localizedPPD )
	OSStatus  PMCopyPageFormat(PMPageFormat formatSrc , PMPageFormat formatDest )
	OSStatus  PMCopyPPDData(CFURLRef ppd , CFDataRef *data )
	OSStatus  PMCopyPrintSettings(PMPrintSettings settingSrc , PMPrintSettings settingDest )
	OSStatus  PMCreateGenericPrinter(PMPrinter *printer )
	OSStatus  PMCreatePageFormat(PMPageFormat *pageFormat )
	OSStatus  PMCreatePageFormatWithPMPaper(PMPageFormat *pageFormat , PMPaper paper )
	OSStatus  PMCreatePrintSettings(PMPrintSettings *printSettings )
	OSStatus  PMCreateSession(PMPrintSession *printSession )
	OSStatus  PMFlattenPageFormatToCFData(PMPageFormat pageFormat , CFDataRef *flatFormat )
	OSStatus  PMFlattenPageFormatToURL(PMPageFormat pageFormat , CFURLRef flattenFileURL )
	OSStatus  PMFlattenPrintSettingsToCFData(PMPrintSettings printSettings , CFDataRef *flatSetting )
	OSStatus  PMFlattenPrintSettingsToURL(PMPrintSettings printSettings , CFURLRef flattenFileURL )
	OSStatus  PMGetAdjustedPageRect(PMPageFormat pageFormat , PMRect *pageRect )
	OSStatus  PMGetAdjustedPaperRect(PMPageFormat pageFormat , PMRect *paperRect )
	OSStatus  PMGetCollate(PMPrintSettings printSettings , Boolean *collate )
	OSStatus  PMGetCopies(PMPrintSettings printSettings , UInt32 *copies )
	OSStatus  PMGetDuplex(PMPrintSettings printSettings , PMDuplexMode *duplexSetting )
	OSStatus  PMGetFirstPage(PMPrintSettings printSettings , UInt32 *first )
	OSStatus  PMGetLastPage(PMPrintSettings printSettings , UInt32 *last )
	OSStatus  PMGetOrientation(PMPageFormat pageFormat , PMOrientation *orientation )
	OSStatus  PMGetPageFormatExtendedData(PMPageFormat pageFormat , OSType dataID , UInt32 *size , void *extendedData )
	OSStatus  PMGetPageFormatPaper(PMPageFormat format , PMPaper *paper )
	OSStatus  PMGetPageRange(PMPrintSettings printSettings , UInt32 *minPage , UInt32 *maxPage )
	OSStatus  PMGetPrintSettingsExtendedData(PMPrintSettings printSettings , OSType dataID , UInt32 *size , void *extendedData )
	OSStatus  PMGetScale(PMPageFormat pageFormat , double *scale )
	OSStatus  PMGetUnadjustedPageRect(PMPageFormat pageFormat , PMRect *pageRect )
	OSStatus  PMGetUnadjustedPaperRect(PMPageFormat pageFormat , PMRect *paperRect )
	OSStatus  PMPageFormatCreateDataRepresentation(PMPageFormat pageFormat , CFDataRef *data , PMDataFormat format )
	OSStatus  PMPageFormatCreateWithDataRepresentation(CFDataRef data , PMPageFormat *pageFormat )
	OSStatus  PMPageFormatGetPrinterID(PMPageFormat pageFormat , CFStringRef *printerID )
	OSStatus  PMPaperCreateCustom(PMPrinter printer , CFStringRef id , CFStringRef name , double width , double height , const PMPaperMargins *margins , PMPaper *paperP )
	OSStatus  PMPaperCreateLocalizedName(PMPaper paper , PMPrinter printer , CFStringRef *paperName )
	OSStatus  PMPaperGetHeight(PMPaper paper , double *paperHeight )
	OSStatus  PMPaperGetID(PMPaper paper , CFStringRef *paperID )
	OSStatus  PMPaperGetMargins(PMPaper paper , PMPaperMargins *paperMargins )
	OSStatus  PMPaperGetName(PMPaper paper , CFStringRef *paperName )
	OSStatus  PMPaperGetPPDPaperName(PMPaper paper , CFStringRef *paperName )
	OSStatus  PMPaperGetPrinterID(PMPaper paper , CFStringRef *printerID )
	OSStatus  PMPaperGetWidth(PMPaper paper , double *paperWidth )
	Boolean  PMPaperIsCustom(PMPaper paper )
	OSStatus  PMPresetCopyName(PMPreset preset , CFStringRef *name )
	OSStatus  PMPresetCreatePrintSettings(PMPreset preset , PMPrintSession session , PMPrintSettings *printSettings )
	OSStatus  PMPresetGetAttributes(PMPreset preset , CFDictionaryRef *attributes )
	OSStatus  PMPrinterCopyDescriptionURL(PMPrinter printer , CFStringRef descriptionType , CFURLRef *fileURL )
	OSStatus  PMPrinterCopyDeviceURI(PMPrinter printer , CFURLRef *deviceURI )
	OSStatus  PMPrinterCopyHostName(PMPrinter printer , CFStringRef *hostNameP )
	OSStatus  PMPrinterCopyPresets(PMPrinter printer , CFArrayRef *presetList )
	OSStatus  PMPrinterCopyState(PMPrinter printer , CFDictionaryRef *stateDict )
	PMPrinter  PMPrinterCreateFromPrinterID(CFStringRef printerID )
	OSStatus  PMPrinterCreatePaperInfoListForMenu(PMPrinter printer , PMPageFormat pageFormat , CFArrayRef *paperInfoList )
	OSStatus  PMPrinterGetCommInfo(PMPrinter printer , Boolean *supportsControlCharRangeP , Boolean *supportsEightBitP )
	OSStatus  PMPrinterGetDriverCreator(PMPrinter printer , OSType *creator )
	OSStatus  PMPrinterGetDriverReleaseInfo(PMPrinter printer , VersRec *release )
	CFStringRef  PMPrinterGetID(PMPrinter printer )
	OSStatus  PMPrinterGetIndexedPrinterResolution(PMPrinter printer , UInt32 index , PMResolution *resolutionP )
	OSStatus  PMPrinterGetLanguageInfo(PMPrinter printer , PMLanguageInfo *info )
	CFStringRef  PMPrinterGetLocation(PMPrinter printer )
	OSStatus  PMPrinterGetMakeAndModelName(PMPrinter printer , CFStringRef *makeAndModel )
	OSStatus  PMPrinterGetMimeTypes(PMPrinter printer , PMPrintSettings settings , CFArrayRef *mimeTypes )
	CFStringRef  PMPrinterGetName(PMPrinter printer )
	OSStatus  PMPrinterGetOutputResolution(PMPrinter printer , PMPrintSettings printSettings , PMResolution *resolutionP )
	OSStatus  PMPrinterGetPaperList(PMPrinter printer , CFArrayRef *paperList )
	OSStatus  PMPrinterGetPrinterResolutionCount(PMPrinter printer , UInt32 *countP )
	OSStatus  PMPrinterGetState(PMPrinter printer , PMPrinterState *state )
	Boolean  PMPrinterIsDefault(PMPrinter printer )
	Boolean  PMPrinterIsFavorite(PMPrinter printer )
	Boolean  PMPrinterIsPostScriptCapable(PMPrinter printer )
	OSStatus  PMPrinterIsPostScriptPrinter(PMPrinter printer , Boolean *isPSPrinter )
	OSStatus  PMPrinterIsRemote(PMPrinter printer , Boolean *isRemoteP )
	OSStatus  PMPrinterPrintWithFile(PMPrinter printer , PMPrintSettings settings , PMPageFormat format , CFStringRef mimeType , CFURLRef fileURL )
	OSStatus  PMPrinterPrintWithProvider(PMPrinter printer , PMPrintSettings settings , PMPageFormat format , CFStringRef mimeType , CGDataProviderRef provider )
	OSStatus  PMPrinterSendCommand(PMPrinter printer , CFStringRef commandString , CFStringRef jobTitle , CFDictionaryRef options )
	OSStatus  PMPrinterSetDefault(PMPrinter printer )
	OSStatus  PMPrinterSetOutputResolution(PMPrinter printer , PMPrintSettings printSettings , const PMResolution *resolutionP )
	OSStatus  PMPrinterWritePostScriptToURL(PMPrinter printer , PMPrintSettings settings , PMPageFormat format , CFStringRef mimeType , CFURLRef sourceFileURL , CFURLRef destinationFileURL )
	OSStatus  PMPrintSettingsCopyAsDictionary(PMPrintSettings printSettings , CFDictionaryRef *settingsDictionary )
	OSStatus  PMPrintSettingsCopyKeys(PMPrintSettings printSettings , CFArrayRef *settingsKeys )
	OSStatus  PMPrintSettingsCreateDataRepresentation(PMPrintSettings printSettings , CFDataRef *data , PMDataFormat format )
	OSStatus  PMPrintSettingsCreateWithDataRepresentation(CFDataRef data , PMPrintSettings *printSettings )
	OSStatus  PMPrintSettingsGetJobName(PMPrintSettings printSettings , CFStringRef *name )
	OSStatus  PMPrintSettingsGetValue(PMPrintSettings printSettings , CFStringRef key , CFTypeRef *value )
	OSStatus  PMPrintSettingsSetJobName(PMPrintSettings printSettings , CFStringRef name )
	OSStatus  PMPrintSettingsSetValue(PMPrintSettings printSettings , CFStringRef key , CFTypeRef value , Boolean locked )
	OSStatus  PMPrintSettingsToOptions(PMPrintSettings settings , char **options )
	OSStatus  PMPrintSettingsToOptionsWithPrinterAndPageFormat(PMPrintSettings settings , PMPrinter printer , PMPageFormat pageFormat , char **options )
	OSStatus  PMRelease(PMObject object )
	OSStatus  PMRetain(PMObject object )
	OSStatus  PMServerCreatePrinterList(PMServer server , CFArrayRef *printerList )
	OSStatus  PMServerLaunchPrinterBrowser(PMServer server , CFDictionaryRef options )
	OSStatus  PMSessionBeginCGDocumentNoDialog(PMPrintSession printSession , PMPrintSettings printSettings , PMPageFormat pageFormat )
	OSStatus  PMSessionBeginPageNoDialog(PMPrintSession printSession , PMPageFormat pageFormat , const PMRect *pageFrame )
	OSStatus  PMSessionCopyDestinationFormat(PMPrintSession printSession , PMPrintSettings printSettings , CFStringRef *destFormatP )
	OSStatus  PMSessionCopyDestinationLocation(PMPrintSession printSession , PMPrintSettings printSettings , CFURLRef *destLocationP )
	OSStatus  PMSessionCopyOutputFormatList(PMPrintSession printSession , PMDestinationType destType , CFArrayRef *documentFormatP )
	OSStatus  PMSessionCreatePageFormatList(PMPrintSession printSession , PMPrinter printer , CFArrayRef *pageFormatList )
	OSStatus  PMSessionCreatePrinterList(PMPrintSession printSession , CFArrayRef *printerList , CFIndex *currentIndex , PMPrinter *currentPrinter )
	OSStatus  PMSessionDefaultPageFormat(PMPrintSession printSession , PMPageFormat pageFormat )
	OSStatus  PMSessionDefaultPrintSettings(PMPrintSession printSession , PMPrintSettings printSettings )
	OSStatus  PMSessionEndDocumentNoDialog(PMPrintSession printSession )
	OSStatus  PMSessionEndPageNoDialog(PMPrintSession printSession )
	OSStatus  PMSessionError(PMPrintSession printSession )
	OSStatus  PMSessionGetCGGraphicsContext(PMPrintSession printSession , CGContextRef *context )
	OSStatus  PMSessionGetCurrentPrinter(PMPrintSession printSession , PMPrinter *currentPrinter )
	OSStatus  PMSessionGetDataFromSession(PMPrintSession printSession , CFStringRef key , CFTypeRef *data )
	OSStatus  PMSessionGetDestinationType(PMPrintSession printSession , PMPrintSettings printSettings , PMDestinationType *destTypeP )
	OSStatus  PMSessionSetCurrentPMPrinter(PMPrintSession session , PMPrinter printer )
	OSStatus  PMSessionSetDataInSession(PMPrintSession printSession , CFStringRef key , CFTypeRef data )
	OSStatus  PMSessionSetDestination(PMPrintSession printSession , PMPrintSettings printSettings , PMDestinationType destType , CFStringRef destFormat , CFURLRef destLocation )
	OSStatus  PMSessionSetError(PMPrintSession printSession , OSStatus printError )
	OSStatus  PMSessionValidatePageFormat(PMPrintSession printSession , PMPageFormat pageFormat , Boolean *result )
	OSStatus  PMSessionValidatePrintSettings(PMPrintSession printSession , PMPrintSettings printSettings , Boolean *result )
	OSStatus  PMSetCollate(PMPrintSettings printSettings , Boolean collate )
	OSStatus  PMSetCopies(PMPrintSettings printSettings , UInt32 copies , Boolean lock )
	OSStatus  PMSetDuplex(PMPrintSettings printSettings , PMDuplexMode duplexSetting )
	OSStatus  PMSetFirstPage(PMPrintSettings printSettings , UInt32 first , Boolean lock )
	OSStatus  PMSetLastPage(PMPrintSettings printSettings , UInt32 last , Boolean lock )
	OSStatus  PMSetOrientation(PMPageFormat pageFormat , PMOrientation orientation , Boolean lock )
	OSStatus  PMSetPageFormatExtendedData(PMPageFormat pageFormat , OSType dataID , UInt32 size , void *extendedData )
	OSStatus  PMSetPageRange(PMPrintSettings printSettings , UInt32 minPage , UInt32 maxPage )
	OSStatus  PMSetPrintSettingsExtendedData(PMPrintSettings printSettings , OSType dataID , UInt32 size , void *extendedData )
	OSStatus  PMSetScale(PMPageFormat pageFormat , double scale )
	OSStatus  PMUnflattenPageFormatWithCFData(CFDataRef flattenCFData , PMPageFormat *pageFormat )
	OSStatus  PMUnflattenPageFormatWithURL(CFURLRef flattenFileURL , PMPageFormat *pageFormat )
	OSStatus  PMUnflattenPrintSettingsWithCFData(CFDataRef flattenCFData , PMPrintSettings *printSettings )
	OSStatus  PMUnflattenPrintSettingsWithURL(CFURLRef flattenFileURL , PMPrintSettings *printSettings )
	OSStatus  PMWorkflowCopyItems(CFArrayRef *workflowItems )
	OSStatus  PMWorkflowSubmitPDFWithOptions(CFURLRef workflowItem , CFStringRef title , const char *options , CFURLRef pdfFile )
	OSStatus  PMWorkflowSubmitPDFWithSettings(CFURLRef workflowItem , PMPrintSettings settings , CFURLRef pdfFile )
	FILE *  popen(const char * , const char * )
	time_t  posix2time(time_t )
	int  posix_madvise(void * , size_t , int )
	int  posix_memalign(void **memptr , size_t alignment , size_t size )
	int  posix_openpt(int )
	double  pow(double , double )
	float  powf(float , float )
	long double  powl(long double , long double )
	ssize_t  pread(int , void * , size_t , off_t )
	void  PrimeTime(QElemPtr tmTaskPtr , long count )
	OSErr  PrimeTimeTask(QElemPtr tmTaskPtr , long count )
	int  printf(const char *, ... )
	CFDictionaryRef  ProcessInformationCopyDictionary(const ProcessSerialNumber *PSN , UInt32 infoToReturn )
	int  profil(char * , size_t , unsigned long , unsigned int )
	int  pselect(int , fd_set * , fd_set * , fd_set * , const struct timespec * , const sigset_t * )
	void  psignal(unsigned int , const char * )
	void  psort(void * , size_t , size_t , int (*)(const void *, const void *) )
	void  psort_b(void * , size_t , size_t , ^int(const void *, const void *) )
	void  psort_r(void * , size_t , size_t , void * , int (*)(void *, const void *, const void *) )
	int  pthread_getugid_np(uid_t * , gid_t * )
	int  pthread_kill(pthread_t , int )
	int  pthread_setugid_np(uid_t , gid_t )
	int  pthread_sigmask(int , const sigset_t * , sigset_t * )
	OSErr  PtrAndHand(const void *ptr1 , Handle hand2 , long size )
	OSErr  PtrToHand(const void *srcPtr , Handle *dstHndl , long size )
	OSErr  PtrToXHand(const void *srcPtr , Handle dstHndl , long size )
	char *  ptsname(int )
	void  PurgeCollection(Collection c , SInt32 whichAttributes , SInt32 matchingAttributes )
	void  PurgeCollectionTag(Collection c , CollectionTag tag )
	int  putc(int , FILE * )
	int  putc_unlocked(int , FILE * )
	int  putchar(int )
	int  putchar_unlocked(int )
	int  putenv(char * )
	int  puts(const char * )
	int  putw(int , FILE * )
	ssize_t  pwrite(int , const void * , size_t , off_t )
	void  qsort(void * , size_t , size_t , int (*)(const void *, const void *) )
	void  qsort_b(void * , size_t , size_t , ^int(const void *, const void *) )
	void  qsort_r(void * , size_t , size_t , void * , int (*)(void *, const void *, const void *) )
	OSStatus  QueryUnicodeMappings(OptionBits iFilter , ConstUnicodeMappingPtr iFindMapping , ItemCount iMaxCount , ItemCount *oActualCount , UnicodeMapping *oReturnedMappings )
	int  radixsort(const unsigned char ** , int , const unsigned char * , unsigned int )
	int  raise(int )
	int  rand()
	int  rand_r(unsigned int * )
	long  random()
	double_t  randomx(double_t *x )
	int  rcmd(char ** , int , const char * , const char * , const char * , int * )
	int  rcmd_af(char ** , int , const char * , const char * , const char * , int * , int )
	ssize_t  read(int , void * , size_t )
	OSStatus  ReadIconFromFSRef(const FSRef *ref , IconFamilyHandle *iconFamily )
	ssize_t  readlink(const char * , char * , size_t )
	void  ReadLocation(MachineLocation *loc )
	void  ReadPartialResource(Handle theResource , long offset , void *buffer , long count )
	void *  realloc(void * , size_t )
	void  ReallocateHandle(Handle h , Size byteCount )
	void *  reallocf(void * , size_t )
	char *  realpath(const char * , char * )
	int  reboot(int )
	Handle  RecoverHandle(Ptr p )
	Component  RegisterComponent(ComponentDescription *cd , ComponentRoutineUPP componentEntryPoint , SInt16 global , Handle componentName , Handle componentInfo , Handle componentIcon )
	OSErr  RegisterComponentFileRef(const FSRef *ref , SInt16 global )
	OSErr  RegisterComponentFileRefEntries(const FSRef *ref , SInt16 global , const ComponentDescription *toRegister , UInt32 registerCount )
	Component  RegisterComponentResource(ComponentResourceHandle cr , SInt16 global )
	SInt32  RegisterComponentResourceFile(SInt16 resRefNum , SInt16 global )
	OSStatus  RegisterIconRefFromFSRef(OSType creator , OSType iconType , const FSRef *iconFile , IconRef *theIconRef )
	OSErr  RegisterIconRefFromIconFamily(OSType creator , OSType iconType , IconFamilyHandle iconFamily , IconRef *theIconRef )
	relop  relation(double_t x , double_t y )
	relop  relationl(long double x , long double y )
	OSStatus  ReleaseCollection(Collection c )
	OSErr  ReleaseFolder(FSVolumeRefNum vRefNum , OSType folderType )
	OSErr  ReleaseIconRef(IconRef theIconRef )
	void  ReleaseResource(Handle theResource )
	double  remainder(double , double )
	float  remainderf(float , float )
	long double  remainderl(long double , long double )
	int  remove(const char * )
	OSErr  RemoveCollectionItem(Collection c , CollectionTag tag , SInt32 id )
	OSErr  RemoveFolderDescriptor(FolderType foldType )
	OSErr  RemoveIconRefOverride(IconRef theIconRef )
	OSErr  RemoveIndexedCollectionItem(Collection c , SInt32 itemIndex )
	void  RemoveResource(Handle theResource )
	OSErr  RemoveTimeTask(QElemPtr tmTaskPtr )
	double  remquo(double , double , int * )
	float  remquof(float , float , int * )
	long double  remquol(long double , long double , int * )
	int  rename(const char * , const char * )
	OSErr  ReplaceGestaltValue(OSType selector , SInt32 replacementValue )
	OSErr  ReplaceIndexedCollectionItem(Collection c , SInt32 itemIndex , SInt32 itemSize , const void *itemData )
	OSErr  ReplaceIndexedCollectionItemHdl(Collection aCollection , SInt32 itemIndex , Handle itemData )
	OSErr  ResError()
	OSStatus  ResetTextToUnicodeInfo(TextToUnicodeInfo ioTextToUnicodeInfo )
	OSStatus  ResetUnicodeToTextInfo(UnicodeToTextInfo ioUnicodeToTextInfo )
	OSStatus  ResetUnicodeToTextRunInfo(UnicodeToTextRunInfo ioUnicodeToTextRunInfo )
	Component  ResolveComponentAlias(Component aComponent )
	TextEncoding  ResolveDefaultTextEncoding(TextEncoding encoding )
	OSStatus  RetainCollection(Collection c )
	OSStatus  RevertTextEncodingToScriptInfo(TextEncoding iEncoding , ScriptCode *oTextScriptID , LangCode *oTextLanguageID , unsigned char *oTextFontname )
	int  revoke(const char * )
	void  rewind(FILE * )
	char *  rindex(const char * , int )
	double  rint(double )
	float  rintf(float )
	long double  rintl(long double )
	long  rinttol(double )
	int  rmdir(const char * )
	void  RmvTime(QElemPtr tmTaskPtr )
	double  round(double )
	float  roundf(float )
	long double  roundl(long double )
	long  roundtol(double )
	int  rresvport(int * )
	int  rresvport_af(int * , int )
	int  ruserok(const char * , int , const char * , const char * )
	SInt32  S32Set(SInt64 value )
	SInt64  S64Add(SInt64 left , SInt64 right )
	Boolean  S64And(SInt64 left , SInt64 right )
	SInt64  S64BitwiseAnd(SInt64 left , SInt64 right )
	SInt64  S64BitwiseEor(SInt64 left , SInt64 right )
	SInt64  S64BitwiseNot(SInt64 value )
	SInt64  S64BitwiseOr(SInt64 left , SInt64 right )
	SInt32  S64Compare(SInt64 left , SInt64 right )
	SInt64  S64Div(SInt64 dividend , SInt64 divisor )
	SInt64  S64Divide(SInt64 dividend , SInt64 divisor , SInt64 *remainder )
	Boolean  S64Eor(SInt64 left , SInt64 right )
	SInt64  S64Max()
	SInt64  S64Min()
	SInt64  S64Mod(SInt64 dividend , SInt64 divisor )
	SInt64  S64Multiply(SInt64 left , SInt64 right )
	SInt64  S64Negate(SInt64 value )
	Boolean  S64Not(SInt64 value )
	Boolean  S64Or(SInt64 left , SInt64 right )
	SInt64  S64Set(SInt32 value )
	SInt64  S64SetU(UInt32 value )
	SInt64  S64ShiftLeft(SInt64 value , UInt32 shift )
	SInt64  S64ShiftRight(SInt64 value , UInt32 shift )
	SInt64  S64Subtract(SInt64 left , SInt64 right )
	OSErr  SameProcess(const ProcessSerialNumber *PSN1 , const ProcessSerialNumber *PSN2 , Boolean *result )
	void *  sbrk(int )
	double  scalb(double , double )
	double  scalbln(double , long )
	float  scalblnf(float , long )
	long double  scalblnl(long double , long )
	double  scalbn(double , int )
	float  scalbnf(float , int )
	long double  scalbnl(long double , int )
	int  scanf(const char *, ... )
	int  searchfs(const char * , struct fssearchblock * , unsigned long * , unsigned int , unsigned int , struct searchstate * )
	OSStatus  SecAccessCopyACLList(SecAccessRef accessRef , CFArrayRef *aclList )
	CFArrayRef  SecAccessCopyMatchingACLList(SecAccessRef accessRef , CFTypeRef authorizationTag )
	OSStatus  SecAccessCopyOwnerAndACL(SecAccessRef accessRef , uid_t *userId , gid_t *groupId , SecAccessOwnerType *ownerType , CFArrayRef *aclList )
	OSStatus  SecAccessCopySelectedACLList(SecAccessRef accessRef , CSSM_ACL_AUTHORIZATION_TAG action , CFArrayRef *aclList )
	OSStatus  SecAccessCreate(CFStringRef descriptor , CFArrayRef trustedlist , SecAccessRef *accessRef )
	OSStatus  SecAccessCreateFromOwnerAndACL(const CSSM_ACL_OWNER_PROTOTYPE *owner , uint32 aclCount , const CSSM_ACL_ENTRY_INFO *acls , SecAccessRef *accessRef )
	SecAccessRef  SecAccessCreateWithOwnerAndACL(uid_t userId , gid_t groupId , SecAccessOwnerType ownerType , CFArrayRef acls , CFErrorRef *error )
	OSStatus  SecAccessGetOwnerAndACL(SecAccessRef accessRef , CSSM_ACL_OWNER_PROTOTYPE_PTR *owner , uint32 *aclCount , CSSM_ACL_ENTRY_INFO_PTR *acls )
	CFTypeID  SecAccessGetTypeID()
	CFArrayRef  SecACLCopyAuthorizations(SecACLRef acl )
	OSStatus  SecACLCopyContents(SecACLRef acl , CFArrayRef *applicationList , CFStringRef *description , SecKeychainPromptSelector *promptSelector )
	OSStatus  SecACLCopySimpleContents(SecACLRef acl , CFArrayRef *applicationList , CFStringRef *description , CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR *promptSelector )
	OSStatus  SecACLCreateFromSimpleContents(SecAccessRef access , CFArrayRef applicationList , CFStringRef description , const CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR *promptSelector , SecACLRef *newAcl )
	OSStatus  SecACLCreateWithSimpleContents(SecAccessRef access , CFArrayRef applicationList , CFStringRef description , SecKeychainPromptSelector promptSelector , SecACLRef *newAcl )
	OSStatus  SecACLGetAuthorizations(SecACLRef acl , CSSM_ACL_AUTHORIZATION_TAG *tags , uint32 *tagCount )
	CFTypeID  SecACLGetTypeID()
	OSStatus  SecACLRemove(SecACLRef aclRef )
	OSStatus  SecACLSetAuthorizations(SecACLRef acl , CSSM_ACL_AUTHORIZATION_TAG *tags , uint32 tagCount )
	OSStatus  SecACLSetContents(SecACLRef acl , CFArrayRef applicationList , CFStringRef description , SecKeychainPromptSelector promptSelector )
	OSStatus  SecACLSetSimpleContents(SecACLRef acl , CFArrayRef applicationList , CFStringRef description , const CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR *promptSelector )
	OSStatus  SecACLUpdateAuthorizations(SecACLRef acl , CFArrayRef authorizations )
	OSStatus  SecCertificateAddToKeychain(SecCertificateRef certificate , SecKeychainRef keychain )
	OSStatus  SecCertificateCopyCommonName(SecCertificateRef certificate , CFStringRef *commonName )
	CFDataRef  SecCertificateCopyData(SecCertificateRef certificate )
	OSStatus  SecCertificateCopyEmailAddresses(SecCertificateRef certificate , CFArrayRef *emailAddresses )
	CFStringRef  SecCertificateCopyLongDescription(CFAllocatorRef alloc , SecCertificateRef certificate , CFErrorRef *error )
	CFDataRef  SecCertificateCopyNormalizedIssuerContent(SecCertificateRef certificate , CFErrorRef *error )
	CFDataRef  SecCertificateCopyNormalizedSubjectContent(SecCertificateRef certificate , CFErrorRef *error )
	OSStatus  SecCertificateCopyPreference(CFStringRef name , uint32 keyUsage , SecCertificateRef *certificate )
	SecCertificateRef  SecCertificateCopyPreferred(CFStringRef name , CFArrayRef keyUsage )
	OSStatus  SecCertificateCopyPublicKey(SecCertificateRef certificate , SecKeyRef *key )
	CFDataRef  SecCertificateCopySerialNumber(SecCertificateRef certificate , CFErrorRef *error )
	CFStringRef  SecCertificateCopyShortDescription(CFAllocatorRef alloc , SecCertificateRef certificate , CFErrorRef *error )
	CFStringRef  SecCertificateCopySubjectSummary(SecCertificateRef certificate )
	CFDictionaryRef  SecCertificateCopyValues(SecCertificateRef certificate , CFArrayRef keys , CFErrorRef *error )
	OSStatus  SecCertificateCreateFromData(const CSSM_DATA *data , CSSM_CERT_TYPE type , CSSM_CERT_ENCODING encoding , SecCertificateRef *certificate )
	SecCertificateRef  SecCertificateCreateWithData(CFAllocatorRef allocator , CFDataRef data )
	OSStatus  SecCertificateGetAlgorithmID(SecCertificateRef certificate , const CSSM_X509_ALGORITHM_IDENTIFIER **algid )
	OSStatus  SecCertificateGetCLHandle(SecCertificateRef certificate , CSSM_CL_HANDLE *clHandle )
	OSStatus  SecCertificateGetData(SecCertificateRef certificate , CSSM_DATA_PTR data )
	OSStatus  SecCertificateGetIssuer(SecCertificateRef certificate , const CSSM_X509_NAME **issuer )
	OSStatus  SecCertificateGetSubject(SecCertificateRef certificate , const CSSM_X509_NAME **subject )
	OSStatus  SecCertificateGetType(SecCertificateRef certificate , CSSM_CERT_TYPE *certificateType )
	CFTypeID  SecCertificateGetTypeID()
	OSStatus  SecCertificateSetPreference(SecCertificateRef certificate , CFStringRef name , uint32 keyUsage , CFDateRef date )
	OSStatus  SecCertificateSetPreferred(SecCertificateRef certificate , CFStringRef name , CFArrayRef keyUsage )
	OSStatus  SecCodeCheckValidity(SecCodeRef code , SecCSFlags flags , SecRequirementRef requirement )
	OSStatus  SecCodeCheckValidityWithErrors(SecCodeRef code , SecCSFlags flags , SecRequirementRef requirement , CFErrorRef *errors )
	OSStatus  SecCodeCopyDesignatedRequirement(SecStaticCodeRef code , SecCSFlags flags , SecRequirementRef *requirement )
	OSStatus  SecCodeCopyGuestWithAttributes(SecCodeRef host , CFDictionaryRef attributes , SecCSFlags flags , SecCodeRef *guest )
	OSStatus  SecCodeCopyHost(SecCodeRef guest , SecCSFlags flags , SecCodeRef *host )
	OSStatus  SecCodeCopyPath(SecStaticCodeRef staticCode , SecCSFlags flags , CFURLRef *path )
	OSStatus  SecCodeCopySelf(SecCSFlags flags , SecCodeRef *self )
	OSStatus  SecCodeCopySigningInformation(SecStaticCodeRef code , SecCSFlags flags , CFDictionaryRef *information )
	OSStatus  SecCodeCopyStaticCode(SecCodeRef code , SecCSFlags flags , SecStaticCodeRef *staticCode )
	CFTypeID  SecCodeGetTypeID()
	OSStatus  SecCodeMapMemory(SecStaticCodeRef code , SecCSFlags flags )
	CFStringRef  SecCopyErrorMessageString(OSStatus status , void *reserved )
	SecTransformRef  SecDecodeTransformCreate(CFTypeRef DecodeType , CFErrorRef *error )
	SecTransformRef  SecDecryptTransformCreate(SecKeyRef keyRef , CFErrorRef *error )
	CFTypeID  SecDecryptTransformGetTypeID()
	SecTransformRef  SecDigestTransformCreate(CFTypeRef digestType , CFIndex digestLength , CFErrorRef *error )
	CFTypeID  SecDigestTransformGetTypeID()
	SecTransformRef  SecEncodeTransformCreate(CFTypeRef encodeType , CFErrorRef *error )
	SecTransformRef  SecEncryptTransformCreate(SecKeyRef keyRef , CFErrorRef *error )
	CFTypeID  SecEncryptTransformGetTypeID()
	CFTypeID  SecGroupTransformGetTypeID()
	OSStatus  SecHostCreateGuest(SecGuestRef host , uint32_t status , CFURLRef path , CFDictionaryRef attributes , SecCSFlags flags , SecGuestRef *newGuest )
	OSStatus  SecHostRemoveGuest(SecGuestRef host , SecGuestRef guest , SecCSFlags flags )
	OSStatus  SecHostSelectedGuest(SecCSFlags flags , SecGuestRef *guestRef )
	OSStatus  SecHostSelectGuest(SecGuestRef guestRef , SecCSFlags flags )
	OSStatus  SecHostSetGuestStatus(SecGuestRef guestRef , uint32_t status , CFDictionaryRef attributes , SecCSFlags flags )
	OSStatus  SecHostSetHostingPort(mach_port_t hostingPort , SecCSFlags flags )
	OSStatus  SecIdentityCopyCertificate(SecIdentityRef identityRef , SecCertificateRef *certificateRef )
	OSStatus  SecIdentityCopyPreference(CFStringRef name , CSSM_KEYUSE keyUsage , CFArrayRef validIssuers , SecIdentityRef *identity )
	SecIdentityRef  SecIdentityCopyPreferred(CFStringRef name , CFArrayRef keyUsage , CFArrayRef validIssuers )
	OSStatus  SecIdentityCopyPrivateKey(SecIdentityRef identityRef , SecKeyRef *privateKeyRef )
	OSStatus  SecIdentityCopySystemIdentity(CFStringRef domain , SecIdentityRef *idRef , CFStringRef *actualDomain )
	OSStatus  SecIdentityCreateWithCertificate(CFTypeRef keychainOrArray , SecCertificateRef certificateRef , SecIdentityRef *identityRef )
	CFTypeID  SecIdentityGetTypeID()
	OSStatus  SecIdentitySearchCopyNext(SecIdentitySearchRef searchRef , SecIdentityRef *identity )
	OSStatus  SecIdentitySearchCreate(CFTypeRef keychainOrArray , CSSM_KEYUSE keyUsage , SecIdentitySearchRef *searchRef )
	CFTypeID  SecIdentitySearchGetTypeID()
	OSStatus  SecIdentitySetPreference(SecIdentityRef identity , CFStringRef name , CSSM_KEYUSE keyUsage )
	OSStatus  SecIdentitySetPreferred(SecIdentityRef identity , CFStringRef name , CFArrayRef keyUsage )
	OSStatus  SecIdentitySetSystemIdentity(CFStringRef domain , SecIdentityRef idRef )
	OSStatus  SecItemAdd(CFDictionaryRef attributes , CFTypeRef *result )
	OSStatus  SecItemCopyMatching(CFDictionaryRef query , CFTypeRef *result )
	OSStatus  SecItemDelete(CFDictionaryRef query )
	OSStatus  SecItemExport(CFTypeRef secItemOrArray , SecExternalFormat outputFormat , SecItemImportExportFlags flags , const SecItemImportExportKeyParameters *keyParams , CFDataRef *exportedData )
	OSStatus  SecItemImport(CFDataRef importedData , CFStringRef fileNameOrExtension , SecExternalFormat *inputFormat , SecExternalItemType *itemType , SecItemImportExportFlags flags , const SecItemImportExportKeyParameters *keyParams , SecKeychainRef importKeychain , CFArrayRef *outItems )
	OSStatus  SecItemUpdate(CFDictionaryRef query , CFDictionaryRef attributesToUpdate )
	OSStatus  SecKeychainAddCallback(SecKeychainCallback callbackFunction , SecKeychainEventMask eventMask , void *userContext )
	OSStatus  SecKeychainAddGenericPassword(SecKeychainRef keychain , UInt32 serviceNameLength , const char *serviceName , UInt32 accountNameLength , const char *accountName , UInt32 passwordLength , const void *passwordData , SecKeychainItemRef *itemRef )
	OSStatus  SecKeychainAddInternetPassword(SecKeychainRef keychain , UInt32 serverNameLength , const char *serverName , UInt32 securityDomainLength , const char *securityDomain , UInt32 accountNameLength , const char *accountName , UInt32 pathLength , const char *path , UInt16 port , SecProtocolType protocol , SecAuthenticationType authenticationType , UInt32 passwordLength , const void *passwordData , SecKeychainItemRef *itemRef )
	OSStatus  SecKeychainAttributeInfoForItemID(SecKeychainRef keychain , UInt32 itemID , SecKeychainAttributeInfo **info )
	OSStatus  SecKeychainCopyAccess(SecKeychainRef keychain , SecAccessRef *access )
	OSStatus  SecKeychainCopyDefault(SecKeychainRef *keychain )
	OSStatus  SecKeychainCopyDomainDefault(SecPreferencesDomain domain , SecKeychainRef *keychain )
	OSStatus  SecKeychainCopyDomainSearchList(SecPreferencesDomain domain , CFArrayRef *searchList )
	OSStatus  SecKeychainCopySearchList(CFArrayRef *searchList )
	OSStatus  SecKeychainCopySettings(SecKeychainRef keychain , SecKeychainSettings *outSettings )
	OSStatus  SecKeychainCreate(const char *pathName , UInt32 passwordLength , const void *password , Boolean promptUser , SecAccessRef initialAccess , SecKeychainRef *keychain )
	OSStatus  SecKeychainDelete(SecKeychainRef keychainOrArray )
	OSStatus  SecKeychainFindGenericPassword(CFTypeRef keychainOrArray , UInt32 serviceNameLength , const char *serviceName , UInt32 accountNameLength , const char *accountName , UInt32 *passwordLength , void **passwordData , SecKeychainItemRef *itemRef )
	OSStatus  SecKeychainFindInternetPassword(CFTypeRef keychainOrArray , UInt32 serverNameLength , const char *serverName , UInt32 securityDomainLength , const char *securityDomain , UInt32 accountNameLength , const char *accountName , UInt32 pathLength , const char *path , UInt16 port , SecProtocolType protocol , SecAuthenticationType authenticationType , UInt32 *passwordLength , void **passwordData , SecKeychainItemRef *itemRef )
	OSStatus  SecKeychainFreeAttributeInfo(SecKeychainAttributeInfo *info )
	OSStatus  SecKeychainGetCSPHandle(SecKeychainRef keychain , CSSM_CSP_HANDLE *cspHandle )
	OSStatus  SecKeychainGetDLDBHandle(SecKeychainRef keychain , CSSM_DL_DB_HANDLE *dldbHandle )
	OSStatus  SecKeychainGetPath(SecKeychainRef keychain , UInt32 *ioPathLength , char *pathName )
	OSStatus  SecKeychainGetPreferenceDomain(SecPreferencesDomain *domain )
	OSStatus  SecKeychainGetStatus(SecKeychainRef keychain , SecKeychainStatus *keychainStatus )
	CFTypeID  SecKeychainGetTypeID()
	OSStatus  SecKeychainGetUserInteractionAllowed(Boolean *state )
	OSStatus  SecKeychainGetVersion(UInt32 *returnVers )
	OSStatus  SecKeychainItemCopyAccess(SecKeychainItemRef itemRef , SecAccessRef *access )
	OSStatus  SecKeychainItemCopyAttributesAndData(SecKeychainItemRef itemRef , SecKeychainAttributeInfo *info , SecItemClass *itemClass , SecKeychainAttributeList **attrList , UInt32 *length , void **outData )
	OSStatus  SecKeychainItemCopyContent(SecKeychainItemRef itemRef , SecItemClass *itemClass , SecKeychainAttributeList *attrList , UInt32 *length , void **outData )
	OSStatus  SecKeychainItemCopyFromPersistentReference(CFDataRef persistentItemRef , SecKeychainItemRef *itemRef )
	OSStatus  SecKeychainItemCopyKeychain(SecKeychainItemRef itemRef , SecKeychainRef *keychainRef )
	OSStatus  SecKeychainItemCreateCopy(SecKeychainItemRef itemRef , SecKeychainRef destKeychainRef , SecAccessRef initialAccess , SecKeychainItemRef *itemCopy )
	OSStatus  SecKeychainItemCreateFromContent(SecItemClass itemClass , SecKeychainAttributeList *attrList , UInt32 length , const void *data , SecKeychainRef keychainRef , SecAccessRef initialAccess , SecKeychainItemRef *itemRef )
	OSStatus  SecKeychainItemCreatePersistentReference(SecKeychainItemRef itemRef , CFDataRef *persistentItemRef )
	OSStatus  SecKeychainItemDelete(SecKeychainItemRef itemRef )
	OSStatus  SecKeychainItemExport(CFTypeRef keychainItemOrArray , SecExternalFormat outputFormat , SecItemImportExportFlags flags , const SecKeyImportExportParameters *keyParams , CFDataRef *exportedData )
	OSStatus  SecKeychainItemFreeAttributesAndData(SecKeychainAttributeList *attrList , void *data )
	OSStatus  SecKeychainItemFreeContent(SecKeychainAttributeList *attrList , void *data )
	OSStatus  SecKeychainItemGetDLDBHandle(SecKeychainItemRef keyItemRef , CSSM_DL_DB_HANDLE *dldbHandle )
	CFTypeID  SecKeychainItemGetTypeID()
	OSStatus  SecKeychainItemGetUniqueRecordID(SecKeychainItemRef itemRef , const CSSM_DB_UNIQUE_RECORD **uniqueRecordID )
	OSStatus  SecKeychainItemImport(CFDataRef importedData , CFStringRef fileNameOrExtension , SecExternalFormat *inputFormat , SecExternalItemType *itemType , SecItemImportExportFlags flags , const SecKeyImportExportParameters *keyParams , SecKeychainRef importKeychain , CFArrayRef *outItems )
	OSStatus  SecKeychainItemModifyAttributesAndData(SecKeychainItemRef itemRef , const SecKeychainAttributeList *attrList , UInt32 length , const void *data )
	OSStatus  SecKeychainItemModifyContent(SecKeychainItemRef itemRef , const SecKeychainAttributeList *attrList , UInt32 length , const void *data )
	OSStatus  SecKeychainItemSetAccess(SecKeychainItemRef itemRef , SecAccessRef access )
	OSStatus  SecKeychainLock(SecKeychainRef keychain )
	OSStatus  SecKeychainLockAll()
	OSStatus  SecKeychainOpen(const char *pathName , SecKeychainRef *keychain )
	OSStatus  SecKeychainRemoveCallback(SecKeychainCallback callbackFunction )
	OSStatus  SecKeychainSearchCopyNext(SecKeychainSearchRef searchRef , SecKeychainItemRef *itemRef )
	OSStatus  SecKeychainSearchCreateFromAttributes(CFTypeRef keychainOrArray , SecItemClass itemClass , const SecKeychainAttributeList *attrList , SecKeychainSearchRef *searchRef )
	CFTypeID  SecKeychainSearchGetTypeID()
	OSStatus  SecKeychainSetAccess(SecKeychainRef keychain , SecAccessRef access )
	OSStatus  SecKeychainSetDefault(SecKeychainRef keychain )
	OSStatus  SecKeychainSetDomainDefault(SecPreferencesDomain domain , SecKeychainRef keychain )
	OSStatus  SecKeychainSetDomainSearchList(SecPreferencesDomain domain , CFArrayRef searchList )
	OSStatus  SecKeychainSetPreferenceDomain(SecPreferencesDomain domain )
	OSStatus  SecKeychainSetSearchList(CFArrayRef searchList )
	OSStatus  SecKeychainSetSettings(SecKeychainRef keychain , const SecKeychainSettings *newSettings )
	OSStatus  SecKeychainSetUserInteractionAllowed(Boolean state )
	OSStatus  SecKeychainUnlock(SecKeychainRef keychain , UInt32 passwordLength , const void *password , Boolean usePassword )
	SecKeyRef  SecKeyCreateFromData(CFDictionaryRef parameters , CFDataRef keyData , CFErrorRef *error )
	OSStatus  SecKeyCreatePair(SecKeychainRef keychainRef , CSSM_ALGORITHMS algorithm , uint32 keySizeInBits , CSSM_CC_HANDLE contextHandle , CSSM_KEYUSE publicKeyUsage , uint32 publicKeyAttr , CSSM_KEYUSE privateKeyUsage , uint32 privateKeyAttr , SecAccessRef initialAccess , SecKeyRef *publicKey , SecKeyRef *privateKey )
	SecKeyRef  SecKeyDeriveFromPassword(CFStringRef password , CFDictionaryRef parameters , CFErrorRef *error )
	OSStatus  SecKeyGenerate(SecKeychainRef keychainRef , CSSM_ALGORITHMS algorithm , uint32 keySizeInBits , CSSM_CC_HANDLE contextHandle , CSSM_KEYUSE keyUsage , uint32 keyAttr , SecAccessRef initialAccess , SecKeyRef *keyRef )
	OSStatus  SecKeyGeneratePair(CFDictionaryRef parameters , SecKeyRef *publicKey , SecKeyRef *privateKey )
	void  SecKeyGeneratePairAsync(CFDictionaryRef parameters , dispatch_queue_t deliveryQueue , ^(SecKeyRef publicKey, SecKeyRef privateKey, CFErrorRef error)result )
	SecKeyRef  SecKeyGenerateSymmetric(CFDictionaryRef parameters , CFErrorRef *error )
	size_t  SecKeyGetBlockSize(SecKeyRef key )
	OSStatus  SecKeyGetCredentials(SecKeyRef keyRef , CSSM_ACL_AUTHORIZATION_TAG operation , SecCredentialType credentialType , const CSSM_ACCESS_CREDENTIALS **outCredentials )
	OSStatus  SecKeyGetCSPHandle(SecKeyRef keyRef , CSSM_CSP_HANDLE *cspHandle )
	OSStatus  SecKeyGetCSSMKey(SecKeyRef key , const CSSM_KEY **cssmKey )
	CFTypeID  SecKeyGetTypeID()
	SecKeyRef  SecKeyUnwrapSymmetric(CFDataRef *keyToUnwrap , SecKeyRef unwrappingKey , CFDictionaryRef parameters , CFErrorRef *error )
	CFDataRef  SecKeyWrapSymmetric(SecKeyRef keyToWrap , SecKeyRef wrappingKey , CFDictionaryRef parameters , CFErrorRef *error )
	OSStatus  SecPKCS12Import(CFDataRef pkcs12_data , CFDictionaryRef options , CFArrayRef *items )
	CFDictionaryRef  SecPolicyCopyProperties(SecPolicyRef policyRef )
	SecPolicyRef  SecPolicyCreateBasicX509()
	SecPolicyRef  SecPolicyCreateSSL(Boolean server , CFStringRef hostname )
	SecPolicyRef  SecPolicyCreateWithOID(CFTypeRef policyOID )
	OSStatus  SecPolicyGetOID(SecPolicyRef policyRef , CSSM_OID *oid )
	OSStatus  SecPolicyGetTPHandle(SecPolicyRef policyRef , CSSM_TP_HANDLE *tpHandle )
	CFTypeID  SecPolicyGetTypeID()
	OSStatus  SecPolicyGetValue(SecPolicyRef policyRef , CSSM_DATA *value )
	OSStatus  SecPolicySearchCopyNext(SecPolicySearchRef searchRef , SecPolicyRef *policyRef )
	OSStatus  SecPolicySearchCreate(CSSM_CERT_TYPE certType , const CSSM_OID *policyOID , const CSSM_DATA *value , SecPolicySearchRef *searchRef )
	CFTypeID  SecPolicySearchGetTypeID()
	OSStatus  SecPolicySetProperties(SecPolicyRef policyRef , CFDictionaryRef properties )
	OSStatus  SecPolicySetValue(SecPolicyRef policyRef , const CSSM_DATA *value )
	OSStatus  SecRequirementCopyData(SecRequirementRef requirement , SecCSFlags flags , CFDataRef *data )
	OSStatus  SecRequirementCopyString(SecRequirementRef requirement , SecCSFlags flags , CFStringRef *text )
	OSStatus  SecRequirementCreateWithData(CFDataRef data , SecCSFlags flags , SecRequirementRef *requirement )
	OSStatus  SecRequirementCreateWithString(CFStringRef text , SecCSFlags flags , SecRequirementRef *requirement )
	OSStatus  SecRequirementCreateWithStringAndErrors(CFStringRef text , SecCSFlags flags , CFErrorRef *errors , SecRequirementRef *requirement )
	CFTypeID  SecRequirementGetTypeID()
	SecTransformRef  SecSignTransformCreate(SecKeyRef key , CFErrorRef *error )
	OSStatus  SecStaticCodeCheckValidity(SecStaticCodeRef staticCode , SecCSFlags flags , SecRequirementRef requirement )
	OSStatus  SecStaticCodeCheckValidityWithErrors(SecStaticCodeRef staticCode , SecCSFlags flags , SecRequirementRef requirement , CFErrorRef *errors )
	OSStatus  SecStaticCodeCreateWithPath(CFURLRef path , SecCSFlags flags , SecStaticCodeRef *staticCode )
	OSStatus  SecStaticCodeCreateWithPathAndAttributes(CFURLRef path , SecCSFlags flags , CFDictionaryRef attributes , SecStaticCodeRef *staticCode )
	CFTypeID  SecStaticCodeGetTypeID()
	CFTypeRef  SecTaskCopyValueForEntitlement(SecTaskRef task , CFStringRef entitlement , CFErrorRef *error )
	CFDictionaryRef  SecTaskCopyValuesForEntitlements(SecTaskRef task , CFArrayRef entitlements , CFErrorRef *error )
	SecTaskRef  SecTaskCreateFromSelf(CFAllocatorRef allocator )
	SecTaskRef  SecTaskCreateWithAuditToken(CFAllocatorRef allocator , audit_token_t token )
	CFTypeID  SecTaskGetTypeID()
	CFTypeRef  SecTranformCustomGetAttribute(SecTransformImplementationRef ref , SecTransformStringOrAttributeRef attribute , SecTransformMetaAttributeType type )
	SecGroupTransformRef  SecTransformConnectTransforms(SecTransformRef sourceTransformRef , CFStringRef sourceAttributeName , SecTransformRef destinationTransformRef , CFStringRef destinationAttributeName , SecGroupTransformRef group , CFErrorRef *error )
	CFDictionaryRef  SecTransformCopyExternalRepresentation(SecTransformRef transformRef )
	SecTransformRef  SecTransformCreate(CFStringRef name , CFErrorRef *error )
	SecTransformRef  SecTransformCreateFromExternalRepresentation(CFDictionaryRef dictionary , CFErrorRef *error )
	SecGroupTransformRef  SecTransformCreateGroupTransform()
	SecTransformRef  SecTransformCreateReadTransformWithReadStream(CFReadStreamRef inputStream )
	CFTypeRef  SecTransformCustomGetAttribute(SecTransformImplementationRef ref , SecTransformStringOrAttributeRef attribute , SecTransformMetaAttributeType type )
	CFTypeRef  SecTransformCustomSetAttribute(SecTransformImplementationRef ref , SecTransformStringOrAttributeRef attribute , SecTransformMetaAttributeType type , CFTypeRef value )
	CFTypeRef  SecTransformExecute(SecTransformRef transformRef , CFErrorRef *errorRef )
	void  SecTransformExecuteAsync(SecTransformRef transformRef , dispatch_queue_t deliveryQueue , ^(CFTypeRef message, CFErrorRef error, Boolean isFinal)deliveryBlock )
	SecTransformRef  SecTransformFindByName(SecGroupTransformRef transform , CFStringRef name )
	CFTypeRef  SecTransformGetAttribute(SecTransformRef transformRef , CFStringRef key )
	CFTypeID  SecTransformGetTypeID()
	CFTypeRef  SecTransformNoData()
	CFTypeRef  SecTransformPushbackAttribute(SecTransformImplementationRef ref , SecTransformStringOrAttributeRef attribute , CFTypeRef value )
	Boolean  SecTransformRegister(CFStringRef uniqueName , SecTransformCreateFP createTransformFunction , CFErrorRef *error )
	Boolean  SecTransformSetAttribute(SecTransformRef transformRef , CFStringRef key , CFTypeRef value , CFErrorRef *error )
	CFErrorRef  SecTransformSetAttributeAction(SecTransformImplementationRef ref , CFStringRef action , SecTransformStringOrAttributeRef attribute , ^CFTypeRef(SecTransformAttributeRef attribute, CFTypeRef value)newAction )
	CFErrorRef  SecTransformSetDataAction(SecTransformImplementationRef ref , CFStringRef action , ^CFTypeRef(CFTypeRef data)newAction )
	CFErrorRef  SecTransformSetTransformAction(SecTransformImplementationRef ref , CFStringRef action , ^CFTypeRef(void)newAction )
	OSStatus  SecTrustCopyAnchorCertificates(CFArrayRef *anchors )
	OSStatus  SecTrustCopyCustomAnchorCertificates(SecTrustRef trust , CFArrayRef *anchors )
	OSStatus  SecTrustCopyPolicies(SecTrustRef trust , CFArrayRef *policies )
	CFArrayRef  SecTrustCopyProperties(SecTrustRef trust )
	SecKeyRef  SecTrustCopyPublicKey(SecTrustRef trust )
	OSStatus  SecTrustCreateWithCertificates(CFArrayRef certificates , CFTypeRef policies , SecTrustRef *trustRef )
	OSStatus  SecTrustedApplicationCopyData(SecTrustedApplicationRef appRef , CFDataRef *data )
	OSStatus  SecTrustedApplicationCreateFromPath(const char *path , SecTrustedApplicationRef *app )
	CFTypeID  SecTrustedApplicationGetTypeID()
	OSStatus  SecTrustedApplicationSetData(SecTrustedApplicationRef appRef , CFDataRef data )
	OSStatus  SecTrustEvaluate(SecTrustRef trust , SecTrustResultType *result )
	OSStatus  SecTrustEvaluateAsync(SecTrustRef trust , dispatch_queue_t queue , ^(SecTrustRef trustRef, SecTrustResultType trustResult)result )
	SecCertificateRef  SecTrustGetCertificateAtIndex(SecTrustRef trust , CFIndex ix )
	CFIndex  SecTrustGetCertificateCount(SecTrustRef trust )
	OSStatus  SecTrustGetCssmResult(SecTrustRef trust , CSSM_TP_VERIFY_CONTEXT_RESULT_PTR *result )
	OSStatus  SecTrustGetCssmResultCode(SecTrustRef trust , OSStatus *resultCode )
	OSStatus  SecTrustGetResult(SecTrustRef trustRef , SecTrustResultType *result , CFArrayRef *certChain , CSSM_TP_APPLE_EVIDENCE_INFO **statusChain )
	OSStatus  SecTrustGetTPHandle(SecTrustRef trust , CSSM_TP_HANDLE *handle )
	OSStatus  SecTrustGetTrustResult(SecTrustRef trustRef , SecTrustResultType *result )
	CFTypeID  SecTrustGetTypeID()
	CFAbsoluteTime  SecTrustGetVerifyTime(SecTrustRef trust )
	OSStatus  SecTrustSetAnchorCertificates(SecTrustRef trust , CFArrayRef anchorCertificates )
	OSStatus  SecTrustSetAnchorCertificatesOnly(SecTrustRef trust , Boolean anchorCertificatesOnly )
	OSStatus  SecTrustSetKeychains(SecTrustRef trust , CFTypeRef keychainOrArray )
	OSStatus  SecTrustSetOptions(SecTrustRef trustRef , SecTrustOptionFlags options )
	OSStatus  SecTrustSetParameters(SecTrustRef trustRef , CSSM_TP_ACTION action , CFDataRef actionData )
	OSStatus  SecTrustSetPolicies(SecTrustRef trust , CFTypeRef policies )
	OSStatus  SecTrustSettingsCopyCertificates(SecTrustSettingsDomain domain , CFArrayRef *certArray )
	OSStatus  SecTrustSettingsCopyModificationDate(SecCertificateRef certRef , SecTrustSettingsDomain domain , CFDateRef *modificationDate )
	OSStatus  SecTrustSettingsCopyTrustSettings(SecCertificateRef certRef , SecTrustSettingsDomain domain , CFArrayRef *trustSettings )
	OSStatus  SecTrustSettingsCreateExternalRepresentation(SecTrustSettingsDomain domain , CFDataRef *trustSettings )
	OSStatus  SecTrustSettingsImportExternalRepresentation(SecTrustSettingsDomain domain , CFDataRef trustSettings )
	OSStatus  SecTrustSettingsRemoveTrustSettings(SecCertificateRef certRef , SecTrustSettingsDomain domain )
	OSStatus  SecTrustSettingsSetTrustSettings(SecCertificateRef certRef , SecTrustSettingsDomain domain , CFTypeRef trustSettingsDictOrArray )
	OSStatus  SecTrustSetVerifyDate(SecTrustRef trust , CFDateRef verifyDate )
	SecTransformRef  SecVerifyTransformCreate(SecKeyRef key , CFDataRef signature , CFErrorRef *error )
	unsigned short *  seed48(unsigned short * )
	const char *  sel_getName(SEL sel )
	SEL  sel_getUid(const char *str )
	BOOL  sel_isMapped(SEL sel )
	SEL  sel_registerName(const char *str )
	int  select(int , fd_set * , fd_set * , fd_set * , struct timeval * )
	void  SetAliasUserType(AliasHandle alias , OSType userType )
	void  SetAliasUserTypeWithPtr(AliasPtr alias , OSType userType )
	int  setattrlist(const char * , void * , void * , size_t , unsigned int )
	int  setaudit(const struct auditinfo * )
	int  setaudit_addr(const struct auditinfo_addr * , int )
	int  setauid(const au_id_t * )
	void  setbuf(FILE * , char * )
	void  setbuffer(FILE * , char * , int )
	void  SetCollectionDefaultAttributes(Collection c , SInt32 whichAttributes , SInt32 newAttributes )
	void  SetCollectionExceptionProc(Collection c , CollectionExceptionUPP exceptionProc )
	OSErr  SetCollectionItemInfo(Collection c , CollectionTag tag , SInt32 id , SInt32 whichAttributes , SInt32 newAttributes )
	void  SetComponentInstanceError(ComponentInstance aComponentInstance , OSErr theError )
	void  SetComponentInstanceStorage(ComponentInstance aComponentInstance , Handle theStorage )
	void  SetComponentRefcon(Component aComponent , long theRefcon )
	OSErr  SetCustomIconsEnabled(SInt16 vRefNum , Boolean enableCustomIcons )
	OSErr  SetDebuggerNotificationProcs(DebuggerNewThreadTPP notifyNewThread , DebuggerDisposeThreadTPP notifyDisposeThread , DebuggerThreadSchedulerTPP notifyThreadScheduler )
	OSStatus  SetDebugOptionValue(OSType componentSignature , SInt32 optionSelectorNum , Boolean newOptionSetting )
	OSErr  SetDefaultComponent(Component aComponent , SInt16 flags )
	int  setdomainname(const char * , int )
	int  setegid(gid_t )
	int  setenv(const char * , const char * , int )
	int  seteuid(uid_t )
	OSStatus  SetFallbackUnicodeToText(UnicodeToTextInfo iUnicodeToTextInfo , UnicodeToTextFallbackUPP iFallback , OptionBits iControlFlags , LogicalAddress iInfoPtr )
	OSStatus  SetFallbackUnicodeToTextRun(UnicodeToTextRunInfo iUnicodeToTextRunInfo , UnicodeToTextFallbackUPP iFallback , OptionBits iControlFlags , LogicalAddress iInfoPtr )
	OSErr  SetFrontProcess(const ProcessSerialNumber *PSN )
	OSStatus  SetFrontProcessWithOptions(const ProcessSerialNumber *inProcess , OptionBits inOptions )
	OSErr  SetGestaltValue(OSType selector , SInt32 newValue )
	int  setgid(gid_t )
	int  setgroups(int , const gid_t * )
	void  SetHandleSize(Handle h , Size newSize )
	void  sethostid(long )
	int  sethostname(const char * , int )
	OSErr  SetIconFamilyData(IconFamilyHandle iconFamily , OSType iconType , Handle h )
	OSErr  SetIndexedCollectionItemInfo(Collection c , SInt32 itemIndex , SInt32 whichAttributes , SInt32 newAttributes )
	int  setiopolicy_np(int , int , int )
	int  setjmp(int * )
	void  setkey(const char * )
	int  setlinebuf(FILE * )
	char *  setlocale(int , const char * )
	int  setlogin(const char * )
	void *  setmode(const char * )
	int  setpgid(pid_t , pid_t )
	pid_t  setpgrp()
	int  setpriority(int , id_t , int )
	void  setprogname(const char * )
	void  SetPtrSize(Ptr p , Size newSize )
	int  setregid(gid_t , gid_t )
	void  SetResAttrs(Handle theResource , ResAttributes attrs )
	void  SetResFileAttrs(ResFileRefNum refNum , ResFileAttributes attrs )
	void  SetResInfo(Handle theResource , ResID theID , ConstStr255Param name )
	void  SetResLoad(Boolean load )
	void  SetResourceSize(Handle theResource , long newSize )
	void  SetResPurge(Boolean install )
	int  setreuid(uid_t , uid_t )
	int  setrgid(gid_t )
	int  setrlimit(int , const struct rlimit * )
	int  setruid(uid_t )
	OSErr  SetScriptManagerVariable(short selector , long param )
	int  setsgroups_np(int , const unsigned char * )
	pid_t  setsid()
	OSErr  SetSpeechInfo(SpeechChannel chan , OSType selector , const void *speechInfo )
	OSErr  SetSpeechPitch(SpeechChannel chan , Fixed pitch )
	OSErr  SetSpeechProperty(SpeechChannel chan , CFStringRef property , CFTypeRef object )
	OSErr  SetSpeechRate(SpeechChannel chan , Fixed rate )
	char *  setstate(const char * )
	OSErr  SetThreadReadyGivenTaskRef(ThreadTaskRef threadTRef , ThreadID threadToSet )
	OSErr  SetThreadScheduler(ThreadSchedulerTPP threadScheduler )
	OSErr  SetThreadState(ThreadID threadToSet , ThreadState newState , ThreadID suggestedThread )
	OSErr  SetThreadStateEndCritical(ThreadID threadToSet , ThreadState newState , ThreadID suggestedThread )
	OSErr  SetThreadSwitcher(ThreadID thread , ThreadSwitchTPP threadSwitcher , void *switchProcParam , Boolean inOrOut )
	OSErr  SetThreadTerminator(ThreadID thread , ThreadTerminationTPP threadTerminator , void *terminationProcParam )
	int  setuid(uid_t )
	void  setusershell()
	int  setvbuf(FILE * , char * , int , size_t )
	int  setwgroups_np(int , const unsigned char * )
	int  shm_open(const char * , int, ... )
	int  shm_unlink(const char * )
	OSErr  ShowHideProcess(const ProcessSerialNumber *psn , Boolean visible )
	int  sigaction(int , const struct sigaction * , struct sigaction * )
	int  sigaddset(sigset_t * , int )
	int  sigaltstack(const stack_t * , stack_t * )
	int  sigblock(int )
	int  sigdelset(sigset_t * , int )
	int  sigemptyset(sigset_t * )
	int  sigfillset(sigset_t * )
	int  sighold(int )
	int  sigignore(int )
	int  siginterrupt(int , int )
	int  sigismember(const sigset_t * , int )
	void  siglongjmp(int * , int )
	void (*)(int)  signal(int , void (*)(int) )
	double  significand(double )
	int  sigpause(int )
	int  sigpending(sigset_t * )
	int  sigprocmask(int , const sigset_t * , sigset_t * )
	int  sigrelse(int )
	void (*)(int)  sigset(int , void (*)(int) )
	int  sigsetjmp(int * , int )
	int  sigsetmask(int )
	int  sigsuspend(const sigset_t * )
	int  sigvec(int , struct sigvec * , struct sigvec * )
	int  sigwait(const sigset_t * , int * )
	double  sin(double )
	float  sinf(float )
	double  sinh(double )
	float  sinhf(float )
	long double  sinhl(long double )
	long double  sinl(long double )
	long double  SInt64ToLongDouble(SInt64 value )
	UInt64  SInt64ToUInt64(SInt64 value )
	wide  SInt64ToWide(SInt64 s )
	CFURLRef  SKDocumentCopyURL(SKDocumentRef inDocument )
	SKDocumentRef  SKDocumentCreate(CFStringRef inScheme , SKDocumentRef inParent , CFStringRef inName )
	SKDocumentRef  SKDocumentCreateWithURL(CFURLRef inURL )
	CFStringRef  SKDocumentGetName(SKDocumentRef inDocument )
	SKDocumentRef  SKDocumentGetParent(SKDocumentRef inDocument )
	CFStringRef  SKDocumentGetSchemeName(SKDocumentRef inDocument )
	CFTypeID  SKDocumentGetTypeID()
	Boolean  SKIndexAddDocument(SKIndexRef inIndex , SKDocumentRef inDocument , CFStringRef inMIMETypeHint , Boolean inCanReplace )
	Boolean  SKIndexAddDocumentWithText(SKIndexRef inIndex , SKDocumentRef inDocument , CFStringRef inDocumentText , Boolean inCanReplace )
	void  SKIndexClose(SKIndexRef inIndex )
	Boolean  SKIndexCompact(SKIndexRef inIndex )
	SKDocumentRef  SKIndexCopyDocumentForDocumentID(SKIndexRef inIndex , SKDocumentID inDocumentID )
	CFArrayRef  SKIndexCopyDocumentIDArrayForTermID(SKIndexRef inIndex , CFIndex inTermID )
	CFDictionaryRef  SKIndexCopyDocumentProperties(SKIndexRef inIndex , SKDocumentRef inDocument )
	void  SKIndexCopyDocumentRefsForDocumentIDs(SKIndexRef inIndex , CFIndex inCount , SKDocumentID *inDocumentIDsArray , SKDocumentRef *outDocumentRefsArray )
	void  SKIndexCopyDocumentURLsForDocumentIDs(SKIndexRef inIndex , CFIndex inCount , SKDocumentID *inDocumentIDsArray , CFURLRef *outDocumentURLsArray )
	void  SKIndexCopyInfoForDocumentIDs(SKIndexRef inIndex , CFIndex inCount , SKDocumentID *inDocumentIDsArray , CFStringRef *outNamesArray , SKDocumentID *outParentIDsArray )
	CFArrayRef  SKIndexCopyTermIDArrayForDocumentID(SKIndexRef inIndex , SKDocumentID inDocumentID )
	CFStringRef  SKIndexCopyTermStringForTermID(SKIndexRef inIndex , CFIndex inTermID )
	SKIndexRef  SKIndexCreateWithMutableData(CFMutableDataRef inData , CFStringRef inIndexName , SKIndexType inIndexType , CFDictionaryRef inAnalysisProperties )
	SKIndexRef  SKIndexCreateWithURL(CFURLRef inURL , CFStringRef inIndexName , SKIndexType inIndexType , CFDictionaryRef inAnalysisProperties )
	SKDocumentRef  SKIndexDocumentIteratorCopyNext(SKIndexDocumentIteratorRef inIterator )
	SKIndexDocumentIteratorRef  SKIndexDocumentIteratorCreate(SKIndexRef inIndex , SKDocumentRef inParentDocument )
	CFTypeID  SKIndexDocumentIteratorGetTypeID()
	Boolean  SKIndexFlush(SKIndexRef inIndex )
	CFDictionaryRef  SKIndexGetAnalysisProperties(SKIndexRef inIndex )
	CFIndex  SKIndexGetDocumentCount(SKIndexRef inIndex )
	SKDocumentID  SKIndexGetDocumentID(SKIndexRef inIndex , SKDocumentRef inDocument )
	SKDocumentIndexState  SKIndexGetDocumentState(SKIndexRef inIndex , SKDocumentRef inDocument )
	CFIndex  SKIndexGetDocumentTermCount(SKIndexRef inIndex , SKDocumentID inDocumentID )
	CFIndex  SKIndexGetDocumentTermFrequency(SKIndexRef inIndex , SKDocumentID inDocumentID , CFIndex inTermID )
	SKIndexType  SKIndexGetIndexType(SKIndexRef inIndex )
	CFIndex  SKIndexGetMaximumBytesBeforeFlush(SKIndexRef inIndex )
	SKDocumentID  SKIndexGetMaximumDocumentID(SKIndexRef inIndex )
	CFIndex  SKIndexGetMaximumTermID(SKIndexRef inIndex )
	CFIndex  SKIndexGetTermDocumentCount(SKIndexRef inIndex , CFIndex inTermID )
	CFIndex  SKIndexGetTermIDForTermString(SKIndexRef inIndex , CFStringRef inTermString )
	CFTypeID  SKIndexGetTypeID()
	Boolean  SKIndexMoveDocument(SKIndexRef inIndex , SKDocumentRef inDocument , SKDocumentRef inNewParent )
	SKIndexRef  SKIndexOpenWithData(CFDataRef inData , CFStringRef inIndexName )
	SKIndexRef  SKIndexOpenWithMutableData(CFMutableDataRef inData , CFStringRef inIndexName )
	SKIndexRef  SKIndexOpenWithURL(CFURLRef inURL , CFStringRef inIndexName , Boolean inWriteAccess )
	Boolean  SKIndexRemoveDocument(SKIndexRef inIndex , SKDocumentRef inDocument )
	Boolean  SKIndexRenameDocument(SKIndexRef inIndex , SKDocumentRef inDocument , CFStringRef inNewName )
	void  SKIndexSetDocumentProperties(SKIndexRef inIndex , SKDocumentRef inDocument , CFDictionaryRef inProperties )
	void  SKIndexSetMaximumBytesBeforeFlush(SKIndexRef inIndex , CFIndex inBytesForUpdate )
	void  SKLoadDefaultExtractorPlugIns()
	void  SKSearchCancel(SKSearchRef inSearch )
	SKSearchRef  SKSearchCreate(SKIndexRef inIndex , CFStringRef inQuery , SKSearchOptions inSearchOptions )
	Boolean  SKSearchFindMatches(SKSearchRef inSearch , CFIndex inMaximumCount , SKDocumentID *outDocumentIDsArray , float *outScoresArray , CFTimeInterval maximumTime , CFIndex *outFoundCount )
	CFTypeID  SKSearchGetTypeID()
	CFArrayRef  SKSearchGroupCopyIndexes(SKSearchGroupRef inSearchGroup )
	SKSearchGroupRef  SKSearchGroupCreate(CFArrayRef inArrayOfInIndexes )
	CFTypeID  SKSearchGroupGetTypeID()
	CFArrayRef  SKSearchResultsCopyMatchingTerms(SKSearchResultsRef inSearchResults , CFIndex inItem )
	SKSearchResultsRef  SKSearchResultsCreateWithDocuments(SKSearchGroupRef inSearchGroup , CFArrayRef inExampleDocuments , CFIndex inMaxFoundDocuments , void *inContext , SKSearchResultsFilterCallBack inFilterCallBack )
	SKSearchResultsRef  SKSearchResultsCreateWithQuery(SKSearchGroupRef inSearchGroup , CFStringRef inQuery , SKSearchType inSearchType , CFIndex inMaxFoundDocuments , void *inContext , SKSearchResultsFilterCallBack inFilterCallBack )
	CFIndex  SKSearchResultsGetCount(SKSearchResultsRef inSearchResults )
	CFIndex  SKSearchResultsGetInfoInRange(SKSearchResultsRef inSearchResults , CFRange inRange , SKDocumentRef *outDocumentsArray , SKIndexRef *outIndexesArray , float *outScoresArray )
	CFTypeID  SKSearchResultsGetTypeID()
	CFStringRef  SKSummaryCopyParagraphAtIndex(SKSummaryRef summary , CFIndex i )
	CFStringRef  SKSummaryCopyParagraphSummaryString(SKSummaryRef summary , CFIndex numParagraphs )
	CFStringRef  SKSummaryCopySentenceAtIndex(SKSummaryRef summary , CFIndex i )
	CFStringRef  SKSummaryCopySentenceSummaryString(SKSummaryRef summary , CFIndex numSentences )
	SKSummaryRef  SKSummaryCreateWithString(CFStringRef inString )
	CFIndex  SKSummaryGetParagraphCount(SKSummaryRef summary )
	CFIndex  SKSummaryGetParagraphSummaryInfo(SKSummaryRef summary , CFIndex numParagraphsInSummary , CFIndex *outRankOrderOfParagraphs , CFIndex *outParagraphIndexOfParagraphs )
	CFIndex  SKSummaryGetSentenceCount(SKSummaryRef summary )
	CFIndex  SKSummaryGetSentenceSummaryInfo(SKSummaryRef summary , CFIndex numSentencesInSummary , CFIndex *outRankOrderOfSentences , CFIndex *outSentenceIndexOfSentences , CFIndex *outParagraphIndexOfSentences )
	CFTypeID  SKSummaryGetTypeID()
	unsigned int  sleep(unsigned int )
	void  SleepQInstall(SleepQRecPtr qRecPtr )
	void  SleepQRemove(SleepQRecPtr qRecPtr )
	int  snprintf(char * , size_t , const char *, ... )
	OSErr  SpeakBuffer(SpeechChannel chan , const void *textBuf , unsigned long textBytes , SInt32 controlFlags )
	OSErr  SpeakCFString(SpeechChannel chan , CFStringRef aString , CFDictionaryRef options )
	OSErr  SpeakString(ConstStr255Param textToBeSpoken )
	OSErr  SpeakText(SpeechChannel chan , const void *textBuf , unsigned long textBytes )
	SInt16  SpeechBusy()
	SInt16  SpeechBusySystemWide()
	NumVersion  SpeechManagerVersion()
	OSErr  SpeechSynthesisRegisterModuleURL(CFURLRef url )
	OSErr  SpeechSynthesisUnregisterModuleURL(CFURLRef url )
	int  sprintf(char * , const char *, ... )
	double  sqrt(double )
	float  sqrtf(float )
	long double  sqrtl(long double )
	int  sradixsort(const unsigned char ** , int , const unsigned char * , unsigned int )
	void  srand(unsigned int )
	void  srand48(long )
	void  sranddev()
	void  srandom(unsigned int )
	void  srandomdev()
	int  sscanf(const char * , const char *, ... )
	OSStatus  SSLAddDistinguishedName(SSLContextRef context , const void *derDN , size_t derDNLen )
	OSStatus  SSLClose(SSLContextRef context )
	CFTypeID  SSLContextGetTypeID()
	OSStatus  SSLCopyCertificateAuthorities(SSLContextRef context , CFArrayRef *certificates )
	OSStatus  SSLCopyDistinguishedNames(SSLContextRef context , CFArrayRef *names )
	OSStatus  SSLCopyPeerCertificates(SSLContextRef context , CFArrayRef *certs )
	OSStatus  SSLCopyPeerTrust(SSLContextRef context , SecTrustRef *trust )
	OSStatus  SSLCopyTrustedRoots(SSLContextRef context , CFArrayRef *trustedRoots )
	SSLContextRef  SSLCreateContext(CFAllocatorRef alloc , SSLProtocolSide protocolSide , SSLConnectionType connectionType )
	OSStatus  SSLDisposeContext(SSLContextRef context )
	OSStatus  SSLGetAllowsAnyRoot(SSLContextRef context , Boolean *anyRoot )
	OSStatus  SSLGetAllowsExpiredCerts(SSLContextRef context , Boolean *allowsExpired )
	OSStatus  SSLGetAllowsExpiredRoots(SSLContextRef context , Boolean *allowsExpired )
	OSStatus  SSLGetBufferedReadSize(SSLContextRef context , size_t *bufSize )
	OSStatus  SSLGetClientCertificateState(SSLContextRef context , SSLClientCertificateState *clientState )
	OSStatus  SSLGetConnection(SSLContextRef context , SSLConnectionRef *connection )
	OSStatus  SSLGetDatagramWriteSize(SSLContextRef dtlsContext , size_t *bufSize )
	OSStatus  SSLGetDiffieHellmanParams(SSLContextRef context , const void **dhParams , size_t *dhParamsLen )
	OSStatus  SSLGetEnableCertVerify(SSLContextRef context , Boolean *enableVerify )
	OSStatus  SSLGetEnabledCiphers(SSLContextRef context , SSLCipherSuite *ciphers , size_t *numCiphers )
	OSStatus  SSLGetMaxDatagramRecordSize(SSLContextRef dtlsContext , size_t *maxSize )
	OSStatus  SSLGetNegotiatedCipher(SSLContextRef context , SSLCipherSuite *cipherSuite )
	OSStatus  SSLGetNegotiatedProtocolVersion(SSLContextRef context , SSLProtocol *protocol )
	OSStatus  SSLGetNumberEnabledCiphers(SSLContextRef context , size_t *numCiphers )
	OSStatus  SSLGetNumberSupportedCiphers(SSLContextRef context , size_t *numCiphers )
	OSStatus  SSLGetPeerDomainName(SSLContextRef context , char *peerName , size_t *peerNameLen )
	OSStatus  SSLGetPeerDomainNameLength(SSLContextRef context , size_t *peerNameLen )
	OSStatus  SSLGetPeerID(SSLContextRef context , const void **peerID , size_t *peerIDLen )
	OSStatus  SSLGetProtocolVersion(SSLContextRef context , SSLProtocol *protocol )
	OSStatus  SSLGetProtocolVersionEnabled(SSLContextRef context , SSLProtocol protocol , Boolean *enable )
	OSStatus  SSLGetProtocolVersionMax(SSLContextRef context , SSLProtocol *maxVersion )
	OSStatus  SSLGetProtocolVersionMin(SSLContextRef context , SSLProtocol *minVersion )
	OSStatus  SSLGetRsaBlinding(SSLContextRef context , Boolean *blinding )
	OSStatus  SSLGetSessionOption(SSLContextRef context , SSLSessionOption option , Boolean *value )
	OSStatus  SSLGetSessionState(SSLContextRef context , SSLSessionState *state )
	OSStatus  SSLGetSupportedCiphers(SSLContextRef context , SSLCipherSuite *ciphers , size_t *numCiphers )
	OSStatus  SSLHandshake(SSLContextRef context )
	OSStatus  SSLNewContext(Boolean isServer , SSLContextRef *contextPtr )
	OSStatus  SSLRead(SSLContextRef context , void *data , size_t dataLength , size_t *processed )
	OSStatus  SSLSetAllowsAnyRoot(SSLContextRef context , Boolean anyRoot )
	OSStatus  SSLSetAllowsExpiredCerts(SSLContextRef context , Boolean allowsExpired )
	OSStatus  SSLSetAllowsExpiredRoots(SSLContextRef context , Boolean allowsExpired )
	OSStatus  SSLSetCertificate(SSLContextRef context , CFArrayRef certRefs )
	OSStatus  SSLSetCertificateAuthorities(SSLContextRef context , CFTypeRef certificateOrArray , Boolean replaceExisting )
	OSStatus  SSLSetClientSideAuthenticate(SSLContextRef context , SSLAuthenticate auth )
	OSStatus  SSLSetConnection(SSLContextRef context , SSLConnectionRef connection )
	OSStatus  SSLSetDatagramHelloCookie(SSLContextRef dtlsContext , const void *cookie , size_t cookieLen )
	OSStatus  SSLSetDiffieHellmanParams(SSLContextRef context , const void *dhParams , size_t dhParamsLen )
	OSStatus  SSLSetEnableCertVerify(SSLContextRef context , Boolean enableVerify )
	OSStatus  SSLSetEnabledCiphers(SSLContextRef context , const SSLCipherSuite *ciphers , size_t numCiphers )
	OSStatus  SSLSetEncryptionCertificate(SSLContextRef context , CFArrayRef certRefs )
	OSStatus  SSLSetIOFuncs(SSLContextRef context , SSLReadFunc readFunc , SSLWriteFunc writeFunc )
	OSStatus  SSLSetMaxDatagramRecordSize(SSLContextRef dtlsContext , size_t maxSize )
	OSStatus  SSLSetPeerDomainName(SSLContextRef context , const char *peerName , size_t peerNameLen )
	OSStatus  SSLSetPeerID(SSLContextRef context , const void *peerID , size_t peerIDLen )
	OSStatus  SSLSetProtocolVersion(SSLContextRef context , SSLProtocol version )
	OSStatus  SSLSetProtocolVersionEnabled(SSLContextRef context , SSLProtocol protocol , Boolean enable )
	OSStatus  SSLSetProtocolVersionMax(SSLContextRef context , SSLProtocol maxVersion )
	OSStatus  SSLSetProtocolVersionMin(SSLContextRef context , SSLProtocol minVersion )
	OSStatus  SSLSetRsaBlinding(SSLContextRef context , Boolean blinding )
	OSStatus  SSLSetSessionOption(SSLContextRef context , SSLSessionOption option , Boolean value )
	OSStatus  SSLSetTrustedRoots(SSLContextRef context , CFArrayRef trustedRoots , Boolean replaceExisting )
	OSStatus  SSLWrite(SSLContextRef context , const void *data , size_t dataLength , size_t *processed )
	OSErr  StopSpeech(SpeechChannel chan )
	OSErr  StopSpeechAt(SpeechChannel chan , SInt32 whereToStop )
	char *  stpcpy(char * , const char * )
	char *  stpncpy(char * , const char * , size_t )
	void  str2dec(const char *s , short *ix , decimal *d , short *vp )
	int  strcasecmp(const char * , const char * )
	char *  strcasestr(const char * , const char * )
	char *  strcat(char * , const char * )
	char *  strchr(const char * , int )
	int  strcmp(const char * , const char * )
	int  strcoll(const char * , const char * )
	char *  strcpy(char * , const char * )
	size_t  strcspn(const char * , const char * )
	char *  strdup(const char * )
	char *  strerror(int )
	int  strerror_r(int , char * , size_t )
	size_t  strftime(char * , size_t , const char * , const struct tm * )
	size_t  strlcat(char * , const char * , size_t )
	size_t  strlcpy(char * , const char * , size_t )
	size_t  strlen(const char * )
	unsigned char  StrLength(ConstStr255Param string )
	void  strmode(int , char * )
	int  strncasecmp(const char * , const char * , size_t )
	char *  strncat(char * , const char * , size_t )
	int  strncmp(const char * , const char * , size_t )
	char *  strncpy(char * , const char * , size_t )
	char *  strndup(const char * , size_t )
	size_t  strnlen(const char * , size_t )
	char *  strnstr(const char * , const char * , size_t )
	char *  strpbrk(const char * , const char * )
	char *  strptime(const char * , const char * , struct tm * )
	char *  strrchr(const char * , int )
	char *  strsep(char ** , const char * )
	char *  strsignal(int sig )
	size_t  strspn(const char * , const char * )
	char *  strstr(const char * , const char * )
	double  strtod(const char * , char ** )
	float  strtof(const char * , char ** )
	int  strtofflags(char ** , unsigned long * , unsigned long * )
	intmax_t  strtoimax(const char *nptr , char **endptr , int base )
	char *  strtok(char * , const char * )
	char *  strtok_r(char * , const char * , char ** )
	long  strtol(const char * , char ** , int )
	long double  strtold(const char * , char ** )
	long long  strtoll(const char * , char ** , int )
	long long  strtoq(const char * , char ** , int )
	unsigned long  strtoul(const char * , char ** , int )
	unsigned long long  strtoull(const char * , char ** , int )
	uintmax_t  strtoumax(const char *nptr , char **endptr , int base )
	unsigned long long  strtouq(const char * , char ** , int )
	size_t  strxfrm(char * , const char * , size_t )
	AbsoluteTime  SubAbsoluteFromAbsolute(AbsoluteTime leftAbsoluteTime , AbsoluteTime rightAbsoluteTime )
	AbsoluteTime  SubDurationFromAbsolute(Duration duration , AbsoluteTime absoluteTime )
	AbsoluteTime  SubNanosecondsFromAbsolute(Nanoseconds nanoseconds , AbsoluteTime absoluteTime )
	void  swab(const void * , void * , ssize_t )
	int  swapon(const char * )
	boolean_t  swtch()
	boolean_t  swtch_pri(int pri )
	int  symlink(const char * , const char * )
	void  sync()
	int  sync_volume_np(const char * , int )
	void  SysBreak()
	void  SysBreakFunc(ConstStr255Param debuggerMsg )
	void  SysBreakStr(ConstStr255Param debuggerMsg )
	int  syscall(int, ... )
	long  sysconf(int )
	void  SysError(short errorCode )
	int  system(const char * )
	OSStatus  SystemSoundGetActionID(const FSRef *userFile , SystemSoundActionID *outAction )
	void  SystemSoundPlay(SystemSoundActionID inAction )
	OSStatus  SystemSoundRemoveActionID(SystemSoundActionID inAction )
	void  SystemSoundRemoveCompletionRoutine(SystemSoundActionID inAction )
	OSStatus  SystemSoundSetCompletionRoutine(SystemSoundActionID inAction , CFRunLoopRef inRunLoop , CFStringRef inRunLoopMode , SystemSoundCompletionUPP inCompletionRoutine , void *inUserData )
	double  tan(double )
	float  tanf(float )
	double  tanh(double )
	float  tanhf(float )
	long double  tanhl(long double )
	long double  tanl(long double )
	kern_return_t  task_for_pid(mach_port_name_t target_tport , int pid , mach_port_name_t *t )
	kern_return_t  task_name_for_pid(mach_port_name_t target_tport , int pid , mach_port_name_t *tn )
	mach_port_name_t  task_self_trap()
	UInt32  TaskLevel()
	pid_t  tcgetpgrp(int )
	int  tcsetpgrp(int , pid_t )
	OSStatus  TECClearConverterContextInfo(TECObjectRef encodingConverter )
	OSStatus  TECClearSnifferContextInfo(TECSnifferObjectRef encodingSniffer )
	OSStatus  TECConvertText(TECObjectRef encodingConverter , ConstTextPtr inputBuffer , ByteCount inputBufferLength , ByteCount *actualInputLength , TextPtr outputBuffer , ByteCount outputBufferLength , ByteCount *actualOutputLength )
	OSStatus  TECConvertTextToMultipleEncodings(TECObjectRef encodingConverter , ConstTextPtr inputBuffer , ByteCount inputBufferLength , ByteCount *actualInputLength , TextPtr outputBuffer , ByteCount outputBufferLength , ByteCount *actualOutputLength , TextEncodingRun *outEncodingsBuffer , ItemCount maxOutEncodingRuns , ItemCount *actualOutEncodingRuns )
	OSStatus  TECCopyTextEncodingInternetNameAndMIB(TextEncoding textEncoding , TECInternetNameUsageMask usage , CFStringRef *encodingNamePtr , SInt32 *mibEnumPtr )
	OSStatus  TECCountAvailableSniffers(ItemCount *numberOfEncodings )
	OSStatus  TECCountAvailableTextEncodings(ItemCount *numberEncodings )
	OSStatus  TECCountDestinationTextEncodings(TextEncoding inputEncoding , ItemCount *numberOfEncodings )
	OSStatus  TECCountDirectTextEncodingConversions(ItemCount *numberOfEncodings )
	OSStatus  TECCountMailTextEncodings(RegionCode locale , ItemCount *numberEncodings )
	OSStatus  TECCountSubTextEncodings(TextEncoding inputEncoding , ItemCount *numberOfEncodings )
	OSStatus  TECCountWebTextEncodings(RegionCode locale , ItemCount *numberEncodings )
	OSStatus  TECCreateConverter(TECObjectRef *newEncodingConverter , TextEncoding inputEncoding , TextEncoding outputEncoding )
	OSStatus  TECCreateConverterFromPath(TECObjectRef *newEncodingConverter , const TextEncoding *inPath , ItemCount inEncodings )
	OSStatus  TECCreateOneToManyConverter(TECObjectRef *newEncodingConverter , TextEncoding inputEncoding , ItemCount numOutputEncodings , const TextEncoding *outputEncodings )
	OSStatus  TECCreateSniffer(TECSnifferObjectRef *encodingSniffer , const TextEncoding *testEncodings , ItemCount numTextEncodings )
	OSStatus  TECDisposeConverter(TECObjectRef newEncodingConverter )
	OSStatus  TECDisposeSniffer(TECSnifferObjectRef encodingSniffer )
	OSStatus  TECFlushMultipleEncodings(TECObjectRef encodingConverter , TextPtr outputBuffer , ByteCount outputBufferLength , ByteCount *actualOutputLength , TextEncodingRun *outEncodingsBuffer , ItemCount maxOutEncodingRuns , ItemCount *actualOutEncodingRuns )
	OSStatus  TECFlushText(TECObjectRef encodingConverter , TextPtr outputBuffer , ByteCount outputBufferLength , ByteCount *actualOutputLength )
	OSStatus  TECGetAvailableSniffers(TextEncoding *availableSniffers , ItemCount maxAvailableSniffers , ItemCount *actualAvailableSniffers )
	OSStatus  TECGetAvailableTextEncodings(TextEncoding *availableEncodings , ItemCount maxAvailableEncodings , ItemCount *actualAvailableEncodings )
	OSStatus  TECGetDestinationTextEncodings(TextEncoding inputEncoding , TextEncoding *destinationEncodings , ItemCount maxDestinationEncodings , ItemCount *actualDestinationEncodings )
	OSStatus  TECGetDirectTextEncodingConversions(TECConversionInfo *availableConversions , ItemCount maxAvailableConversions , ItemCount *actualAvailableConversions )
	OSStatus  TECGetEncodingList(TECObjectRef encodingConverter , ItemCount *numEncodings , Handle *encodingList )
	OSStatus  TECGetInfo(TECInfoHandle *tecInfo )
	OSStatus  TECGetMailTextEncodings(RegionCode locale , TextEncoding *availableEncodings , ItemCount maxAvailableEncodings , ItemCount *actualAvailableEncodings )
	OSStatus  TECGetSubTextEncodings(TextEncoding inputEncoding , TextEncoding *subEncodings , ItemCount maxSubEncodings , ItemCount *actualSubEncodings )
	OSStatus  TECGetTextEncodingFromInternetName(TextEncoding *textEncoding , ConstStr255Param encodingName )
	OSStatus  TECGetTextEncodingFromInternetNameOrMIB(TextEncoding *textEncodingPtr , TECInternetNameUsageMask usage , CFStringRef encodingName , SInt32 mibEnum )
	OSStatus  TECGetTextEncodingInternetName(TextEncoding textEncoding , unsigned char *encodingName )
	OSStatus  TECGetWebTextEncodings(RegionCode locale , TextEncoding *availableEncodings , ItemCount maxAvailableEncodings , ItemCount *actualAvailableEncodings )
	OSStatus  TECSetBasicOptions(TECObjectRef encodingConverter , OptionBits controlFlags )
	OSStatus  TECSniffTextEncoding(TECSnifferObjectRef encodingSniffer , ConstTextPtr inputBuffer , ByteCount inputBufferLength , TextEncoding *testEncodings , ItemCount numTextEncodings , ItemCount *numErrsArray , ItemCount maxErrs , ItemCount *numFeaturesArray , ItemCount maxFeatures )
	char *  tempnam(const char * , const char * )
	Handle  TempNewHandle(Size logicalSize , OSErr *resultCode )
	Boolean  TestAndClear(UInt32 bit , UInt8 *address )
	Boolean  TestAndSet(UInt32 bit , UInt8 *address )
	OSErr  TextToPhonemes(SpeechChannel chan , const void *textBuf , unsigned long textBytes , Handle phonemeBuf , long *phonemeBytes )
	double  tgamma(double )
	float  tgammaf(float )
	long double  tgammal(long double )
	kern_return_t  thread_switch(mach_port_name_t thread_name , int option , mach_msg_timeout_t option_time )
	OSErr  ThreadBeginCritical()
	OSErr  ThreadCurrentStackSpace(ThreadID thread , ByteCount *freeStack )
	OSErr  ThreadEndCritical()
	UInt32  TickCount()
	time_t  time(time_t * )
	time_t  time2posix(time_t )
	time_t  timegm(struct tm *const )
	time_t  timelocal(struct tm *const )
	FILE *  tmpfile()
	char *  tmpnam(char * )
	int  toascii(int _c )
	int  tolower(int _c )
	int  toupper(int _c )
	OSStatus  TransformProcessType(const ProcessSerialNumber *psn , ProcessApplicationTransformState transformState )
	OSStatus  TranslationCopyDestinationType(TranslationRef inTranslation , CFStringRef *outDestinationType )
	OSStatus  TranslationCopySourceType(TranslationRef inTranslation , CFStringRef *outSourceType )
	OSStatus  TranslationCreate(CFStringRef inSourceType , CFStringRef inDestinationType , TranslationFlags inTranslationFlags , TranslationRef *outTranslation )
	OSStatus  TranslationCreateWithSourceArray(CFArrayRef inSourceTypes , TranslationFlags inTranslationFlags , CFArrayRef *outDestinationTypes , CFDictionaryRef *outTranslations )
	OSStatus  TranslationGetTranslationFlags(TranslationRef inTranslation , TranslationFlags *outTranslationFlags )
	CFTypeID  TranslationGetTypeID()
	OSStatus  TranslationPerformForData(TranslationRef inTranslation , CFDataRef inSourceData , CFDataRef *outDestinationData )
	OSStatus  TranslationPerformForFile(TranslationRef inTranslation , const FSRef *inSourceFile , const FSRef *inDestinationDirectory , CFStringRef inDestinationName , FSRef *outTranslatedFile )
	OSStatus  TranslationPerformForURL(TranslationRef inTranslation , CFURLRef inSourceURL , CFURLRef inDestinationURL , CFURLRef *outTranslatedURL )
	double  trunc(double )
	int  truncate(const char * , off_t )
	OSStatus  TruncateForTextToUnicode(ConstTextToUnicodeInfo iTextToUnicodeInfo , ByteCount iSourceLen , ConstLogicalAddress iSourceStr , ByteCount iMaxLen , ByteCount *oTruncatedLen )
	OSStatus  TruncateForUnicodeToText(ConstUnicodeToTextInfo iUnicodeToTextInfo , ByteCount iSourceLen , const UniChar *iSourceStr , OptionBits iControlFlags , ByteCount iMaxLen , ByteCount *oTruncatedLen )
	float  truncf(float )
	long double  truncl(long double )
	char *  ttyname(int )
	int  ttyname_r(int , char * , size_t )
	int  ttyslot()
	void  tzset()
	void  tzsetwall()
	UInt32  U32SetU(UInt64 value )
	UInt64  U64Add(UInt64 left , UInt64 right )
	Boolean  U64And(UInt64 left , UInt64 right )
	UInt64  U64BitwiseAnd(UInt64 left , UInt64 right )
	UInt64  U64BitwiseEor(UInt64 left , UInt64 right )
	UInt64  U64BitwiseNot(UInt64 value )
	UInt64  U64BitwiseOr(UInt64 left , UInt64 right )
	SInt32  U64Compare(UInt64 left , UInt64 right )
	UInt64  U64Div(UInt64 dividend , UInt64 divisor )
	UInt64  U64Divide(UInt64 dividend , UInt64 divisor , UInt64 *remainder )
	Boolean  U64Eor(UInt64 left , UInt64 right )
	UInt64  U64Max()
	UInt64  U64Mod(UInt64 dividend , UInt64 divisor )
	UInt64  U64Multiply(UInt64 left , UInt64 right )
	Boolean  U64Not(UInt64 value )
	Boolean  U64Or(UInt64 left , UInt64 right )
	UInt64  U64Set(SInt32 value )
	UInt64  U64SetU(UInt32 value )
	UInt64  U64ShiftLeft(UInt64 value , UInt32 shift )
	UInt64  U64ShiftRight(UInt64 value , UInt32 shift )
	UInt64  U64Subtract(UInt64 left , UInt64 right )
	useconds_t  ualarm(useconds_t , useconds_t )
	OSStatus  UAZoomChangeFocus(const CGRect *inRect , const CGRect *inHighlightRect , UAZoomChangeFocusType inType )
	Boolean  UAZoomEnabled()
	OSStatus  UCCompareCollationKeys(const UCCollationValue *key1Ptr , ItemCount key1Length , const UCCollationValue *key2Ptr , ItemCount key2Length , Boolean *equivalent , SInt32 *order )
	OSStatus  UCCompareText(CollatorRef collatorRef , const UniChar *text1Ptr , UniCharCount text1Length , const UniChar *text2Ptr , UniCharCount text2Length , Boolean *equivalent , SInt32 *order )
	OSStatus  UCCompareTextDefault(UCCollateOptions options , const UniChar *text1Ptr , UniCharCount text1Length , const UniChar *text2Ptr , UniCharCount text2Length , Boolean *equivalent , SInt32 *order )
	OSStatus  UCCompareTextNoLocale(UCCollateOptions options , const UniChar *text1Ptr , UniCharCount text1Length , const UniChar *text2Ptr , UniCharCount text2Length , Boolean *equivalent , SInt32 *order )
	OSStatus  UCConvertCFAbsoluteTimeToLongDateTime(CFAbsoluteTime iCFTime , LongDateTime *oLongDate )
	OSStatus  UCConvertCFAbsoluteTimeToSeconds(CFAbsoluteTime iCFTime , UInt32 *oSeconds )
	OSStatus  UCConvertCFAbsoluteTimeToUTCDateTime(CFAbsoluteTime iCFTime , UTCDateTime *oUTCDate )
	OSStatus  UCConvertLongDateTimeToCFAbsoluteTime(LongDateTime iLongTime , CFAbsoluteTime *oCFTime )
	OSStatus  UCConvertSecondsToCFAbsoluteTime(UInt32 iSeconds , CFAbsoluteTime *oCFTime )
	OSStatus  UCConvertUTCDateTimeToCFAbsoluteTime(const UTCDateTime *iUTCDate , CFAbsoluteTime *oCFTime )
	OSStatus  UCCreateCollator(LocaleRef locale , LocaleOperationVariant opVariant , UCCollateOptions options , CollatorRef *collatorRef )
	OSStatus  UCCreateTextBreakLocator(LocaleRef locale , LocaleOperationVariant opVariant , UCTextBreakType breakTypes , TextBreakLocatorRef *breakRef )
	OSStatus  UCDisposeCollator(CollatorRef *collatorRef )
	OSStatus  UCDisposeTextBreakLocator(TextBreakLocatorRef *breakRef )
	OSStatus  UCFindTextBreak(TextBreakLocatorRef breakRef , UCTextBreakType breakType , UCTextBreakOptions options , const UniChar *textPtr , UniCharCount textLength , UniCharArrayOffset startOffset , UniCharArrayOffset *breakOffset )
	OSStatus  UCGetCharProperty(const UniChar *charPtr , UniCharCount textLength , UCCharPropertyType propType , UCCharPropertyValue *propValue )
	OSStatus  UCGetCollationKey(CollatorRef collatorRef , const UniChar *textPtr , UniCharCount textLength , ItemCount maxKeySize , ItemCount *actualKeySize , UCCollationValue *collationKey )
	UnicodeScalarValue  UCGetUnicodeScalarValueForSurrogatePair(UniChar surrogateHigh , UniChar surrogateLow )
	Boolean  UCIsSurrogateHighCharacter(UniChar character )
	Boolean  UCIsSurrogateLowCharacter(UniChar character )
	OSStatus  UCKeyTranslate(const UCKeyboardLayout *keyLayoutPtr , UInt16 virtualKeyCode , UInt16 keyAction , UInt32 modifierKeyState , UInt32 keyboardType , OptionBits keyTranslateOptions , UInt32 *deadKeyState , UniCharCount maxStringLength , UniCharCount *actualStringLength , UniChar *unicodeString )
	OSStatus  UCTypeSelectAddKeyToSelector(UCTypeSelectRef inRef , CFStringRef inText , double inEventTime , Boolean *updateFlag )
	OSStatus  UCTypeSelectCompare(UCTypeSelectRef ref , CFStringRef inText , UCTypeSelectCompareResult *result )
	OSStatus  UCTypeSelectCreateSelector(LocaleRef locale , LocaleOperationVariant opVariant , UCCollateOptions options , UCTypeSelectRef *newSelector )
	OSStatus  UCTypeSelectFindItem(UCTypeSelectRef ref , UInt32 listSize , void *listDataPtr , void *refcon , IndexToUCStringUPP userUPP , UInt32 *closestItem )
	OSStatus  UCTypeSelectFlushSelectorData(UCTypeSelectRef ref )
	OSStatus  UCTypeSelectReleaseSelector(UCTypeSelectRef *ref )
	OSStatus  UCTypeSelectWalkList(UCTypeSelectRef ref , CFStringRef currSelect , UCTSWalkDirection direction , UInt32 listSize , void *listDataPtr , void *refcon , IndexToUCStringUPP userUPP , UInt32 *closestItem )
	Boolean  UCTypeSelectWouldResetBuffer(UCTypeSelectRef inRef , CFStringRef inText , double inEventTime )
	long double  UInt64ToLongDouble(UInt64 value )
	SInt64  UInt64ToSInt64(UInt64 value )
	UnsignedWide  UInt64ToUnsignedWide(UInt64 u )
	OSErr  UncaptureComponent(Component aComponent )
	int  undelete(const char * )
	OSErr  UnflattenCollection(Collection c , CollectionFlattenUPP flattenProc , void *refCon )
	OSErr  UnflattenCollectionFromHdl(Collection aCollection , Handle flattened )
	int  ungetc(int , FILE * )
	ResID  Unique1ID(ResType theType )
	ResID  UniqueID(ResType theType )
	int  unlink(const char * )
	int  unlockpt(int )
	OSErr  UnregisterComponent(Component aComponent )
	OSErr  UnregisterIconRef(OSType creator , OSType iconType )
	int  unsetenv(const char * )
	UnsignedFixed  UnsignedFixedMulDiv(UnsignedFixed value , UnsignedFixed multiplier , UnsignedFixed divisor )
	UInt64  UnsignedWideToUInt64(UnsignedWide uw )
	int  unwhiteout(const char * )
	OSErr  UpdateIconRef(IconRef theIconRef )
	void  UpdateResFile(ResFileRefNum refNum )
	OSErr  UpdateSystemActivity(UInt8 activity )
	OSStatus  UpgradeScriptInfoToTextEncoding(ScriptCode iTextScriptID , LangCode iTextLanguageID , RegionCode iRegionID , ConstStr255Param iTextFontname , TextEncoding *oEncoding )
	AbsoluteTime  UpTime()
	OSErr  UseDictionary(SpeechChannel chan , Handle dictionary )
	void  UseResFile(ResFileRefNum refNum )
	OSErr  UseSpeechDictionary(SpeechChannel chan , CFDictionaryRef speechDictionary )
	int  usleep(useconds_t )
	CFStringRef  UTCreateStringForOSType(OSType inOSType )
	OSType  UTGetOSTypeFromString(CFStringRef inString )
	Boolean  UTTypeConformsTo(CFStringRef inUTI , CFStringRef inConformsToUTI )
	CFDictionaryRef  UTTypeCopyDeclaration(CFStringRef inUTI )
	CFURLRef  UTTypeCopyDeclaringBundleURL(CFStringRef inUTI )
	CFStringRef  UTTypeCopyDescription(CFStringRef inUTI )
	CFStringRef  UTTypeCopyPreferredTagWithClass(CFStringRef inUTI , CFStringRef inTagClass )
	CFArrayRef  UTTypeCreateAllIdentifiersForTag(CFStringRef inTagClass , CFStringRef inTag , CFStringRef inConformingToUTI )
	CFStringRef  UTTypeCreatePreferredIdentifierForTag(CFStringRef inTagClass , CFStringRef inTag , CFStringRef inConformingToUTI )
	Boolean  UTTypeEqual(CFStringRef inUTI1 , CFStringRef inUTI2 )
	void  uuid_clear(unsigned char *uu )
	int  uuid_compare(const unsigned char *uu1 , const unsigned char *uu2 )
	void  uuid_copy(unsigned char *dst , const unsigned char *src )
	void  uuid_generate(unsigned char *out )
	void  uuid_generate_random(unsigned char *out )
	void  uuid_generate_time(unsigned char *out )
	int  uuid_is_null(const unsigned char *uu )
	int  uuid_parse(const char *in , unsigned char *uu )
	void  uuid_unparse(const unsigned char *uu , char *out )
	void  uuid_unparse_lower(const unsigned char *uu , char *out )
	void  uuid_unparse_upper(const unsigned char *uu , char *out )
	OSStatus  vAEBuildAppleEvent(AEEventClass theClass , AEEventID theID , DescType addressType , const void *addressData , Size addressLength , SInt16 returnID , SInt32 transactionID , AppleEvent *resultEvt , AEBuildError *error , const char *paramsFmt , __va_list_tag *args )
	OSStatus  vAEBuildDesc(AEDesc *dst , AEBuildError *error , const char *src , __va_list_tag *args )
	OSStatus  vAEBuildParameters(AppleEvent *event , AEBuildError *error , const char *format , __va_list_tag *args )
	void *  valloc(size_t )
	int  vasprintf(char ** , const char * , __va_list_tag * )
	int  vdprintf(int , const char * , __va_list_tag * )
	pid_t  vfork()
	int  vfprintf(FILE * , const char * , __va_list_tag * )
	int  vfscanf(FILE * , const char * , __va_list_tag * )
	int  vprintf(const char * , __va_list_tag * )
	int  vscanf(const char * , __va_list_tag * )
	int  vsnprintf(char * , size_t , const char * , __va_list_tag * )
	int  vsprintf(char * , const char * , __va_list_tag * )
	int  vsscanf(const char * , const char * , __va_list_tag * )
	pid_t  wait(int * )
	pid_t  wait3(int * , int , struct rusage * )
	pid_t  wait4(pid_t , int * , int , struct rusage * )
	int  waitid(idtype_t , id_t , siginfo_t * , int )
	pid_t  waitpid(pid_t , int * , int )
	OSErr  WakeUpProcess(const ProcessSerialNumber *PSN )
	intmax_t  wcstoimax(const wchar_t *nptr , wchar_t **endptr , int base )
	size_t  wcstombs(char * , const wchar_t * , size_t )
	uintmax_t  wcstoumax(const wchar_t *nptr , wchar_t **endptr , int base )
	int  wctomb(char * , wchar_t )
	wide *  WideAdd(wide *target , const wide *source )
	wide *  WideBitShift(wide *target , SInt32 shift )
	short  WideCompare(const wide *target , const wide *source )
	SInt32  WideDivide(const wide *dividend , SInt32 divisor , SInt32 *remainder )
	wide *  WideMultiply(SInt32 multiplicand , SInt32 multiplier , wide *target )
	wide *  WideNegate(wide *target )
	wide *  WideShift(wide *target , SInt32 shift )
	UInt32  WideSquareRoot(const wide *source )
	wide *  WideSubtract(wide *target , const wide *source )
	SInt64  WideToSInt64(wide w )
	wide *  WideWideDivide(wide *dividend , SInt32 divisor , SInt32 *remainder )
	ssize_t  write(int , const void * , size_t )
	void  WritePartialResource(Handle theResource , long offset , const void *buffer , long count )
	void  WriteResource(Handle theResource )
	CFTypeID  WSGetCFTypeIDFromWSTypeID(WSTypeID typeID )
	WSTypeID  WSGetWSTypeIDFromCFType(CFTypeRef ref )
	void  WSMethodInvocationAddDeserializationOverride(WSMethodInvocationRef invocation , CFStringRef typeNamespace , CFStringRef typeName , WSMethodInvocationDeserializationProcPtr deserializationProc , WSClientContext *context )
	void  WSMethodInvocationAddSerializationOverride(WSMethodInvocationRef invocation , CFTypeID objType , WSMethodInvocationSerializationProcPtr serializationProc , WSClientContext *context )
	CFDictionaryRef  WSMethodInvocationCopyParameters(WSMethodInvocationRef invocation , CFArrayRef *parameterOrder )
	CFTypeRef  WSMethodInvocationCopyProperty(WSMethodInvocationRef invocation , CFStringRef propertyName )
	CFDataRef  WSMethodInvocationCopySerialization(WSMethodInvocationRef invocation )
	WSMethodInvocationRef  WSMethodInvocationCreate(CFURLRef url , CFStringRef methodName , CFStringRef protocol )
	WSMethodInvocationRef  WSMethodInvocationCreateFromSerialization(CFDataRef contract )
	CFTypeID  WSMethodInvocationGetTypeID()
	CFDictionaryRef  WSMethodInvocationInvoke(WSMethodInvocationRef invocation )
	void  WSMethodInvocationScheduleWithRunLoop(WSMethodInvocationRef invocation , CFRunLoopRef runLoop , CFStringRef runLoopMode )
	void  WSMethodInvocationSetCallBack(WSMethodInvocationRef invocation , WSMethodInvocationCallBackProcPtr clientCB , WSClientContext *context )
	void  WSMethodInvocationSetParameters(WSMethodInvocationRef invocation , CFDictionaryRef parameters , CFArrayRef parameterOrder )
	void  WSMethodInvocationSetProperty(WSMethodInvocationRef invocation , CFStringRef propertyName , CFTypeRef propertyValue )
	void  WSMethodInvocationUnscheduleFromRunLoop(WSMethodInvocationRef invocation , CFRunLoopRef runLoop , CFStringRef runLoopMode )
	Boolean  WSMethodResultIsFault(CFDictionaryRef methodResult )
	CFDataRef  WSProtocolHandlerCopyFaultDocument(WSProtocolHandlerRef ref , CFDictionaryRef methodContext , CFDictionaryRef faultDict )
	CFTypeRef  WSProtocolHandlerCopyProperty(WSProtocolHandlerRef ref , CFStringRef propertyName )
	CFDictionaryRef  WSProtocolHandlerCopyReplyDictionary(WSProtocolHandlerRef ref , CFStringRef methodName , CFDataRef data )
	CFDataRef  WSProtocolHandlerCopyReplyDocument(WSProtocolHandlerRef ref , CFDictionaryRef methodContext , CFTypeRef resultValue )
	CFDictionaryRef  WSProtocolHandlerCopyRequestDictionary(WSProtocolHandlerRef ref , CFDataRef data )
	CFDataRef  WSProtocolHandlerCopyRequestDocument(WSProtocolHandlerRef ref , CFStringRef methodName , CFDictionaryRef methodParams , CFArrayRef methodParamOrder , CFDictionaryRef methodExtras )
	WSProtocolHandlerRef  WSProtocolHandlerCreate(CFAllocatorRef allocator , CFStringRef protocol )
	CFTypeID  WSProtocolHandlerGetTypeID()
	void  WSProtocolHandlerSetDeserializationOverride(WSProtocolHandlerRef protocol , CFStringRef typeNamespace , CFStringRef typeName , WSProtocolHandlerDeserializationProcPtr deserializationProc , WSClientContext *context )
	void  WSProtocolHandlerSetProperty(WSProtocolHandlerRef ref , CFStringRef propertyName , CFTypeRef propertyValue )
	void  WSProtocolHandlerSetSerializationOverride(WSProtocolHandlerRef protocol , CFTypeID objType , WSProtocolHandlerSerializationProcPtr serializationProc , WSClientContext *context )
	Fixed  X2Fix(double x )
	Fract  X2Frac(double x )
	double  x80tod(const extended80 *x80 )
	void  x80told(const extended80 *x80 , long double *x )
	void  xpc_array_append_value(xpc_object_t xarray , xpc_object_t value )
	bool  xpc_array_apply(xpc_object_t xarray , ^bool(size_t index, xpc_object_t value)applier )
	xpc_object_t  xpc_array_create(const xpc_object_t *objects , size_t count )
	xpc_connection_t  xpc_array_create_connection(xpc_object_t xarray , size_t index )
	int  xpc_array_dup_fd(xpc_object_t xarray , size_t index )
	bool  xpc_array_get_bool(xpc_object_t xarray , size_t index )
	size_t  xpc_array_get_count(xpc_object_t xarray )
	const void *  xpc_array_get_data(xpc_object_t xarray , size_t index , size_t *length )
	int64_t  xpc_array_get_date(xpc_object_t xarray , size_t index )
	double  xpc_array_get_double(xpc_object_t xarray , size_t index )
	int64_t  xpc_array_get_int64(xpc_object_t xarray , size_t index )
	const char *  xpc_array_get_string(xpc_object_t xarray , size_t index )
	uint64_t  xpc_array_get_uint64(xpc_object_t xarray , size_t index )
	const uint8_t *  xpc_array_get_uuid(xpc_object_t xarray , size_t index )
	xpc_object_t  xpc_array_get_value(xpc_object_t xarray , size_t index )
	void  xpc_array_set_bool(xpc_object_t xarray , size_t index , bool value )
	void  xpc_array_set_connection(xpc_object_t xarray , size_t index , xpc_connection_t connection )
	void  xpc_array_set_data(xpc_object_t xarray , size_t index , const void *bytes , size_t length )
	void  xpc_array_set_date(xpc_object_t xarray , size_t index , int64_t value )
	void  xpc_array_set_double(xpc_object_t xarray , size_t index , double value )
	void  xpc_array_set_fd(xpc_object_t xarray , size_t index , int fd )
	void  xpc_array_set_int64(xpc_object_t xarray , size_t index , int64_t value )
	void  xpc_array_set_string(xpc_object_t xarray , size_t index , const char *string )
	void  xpc_array_set_uint64(xpc_object_t xarray , size_t index , uint64_t value )
	void  xpc_array_set_uuid(xpc_object_t xarray , size_t index , const unsigned char *uuid )
	void  xpc_array_set_value(xpc_object_t xarray , size_t index , xpc_object_t value )
	xpc_object_t  xpc_bool_create(bool value )
	bool  xpc_bool_get_value(xpc_object_t xbool )
	void  xpc_connection_cancel(xpc_connection_t connection )
	xpc_connection_t  xpc_connection_create(const char *name , dispatch_queue_t targetq )
	xpc_connection_t  xpc_connection_create_from_endpoint(xpc_endpoint_t endpoint )
	xpc_connection_t  xpc_connection_create_mach_service(const char *name , dispatch_queue_t targetq , uint64_t flags )
	au_asid_t  xpc_connection_get_asid(xpc_connection_t connection )
	void *  xpc_connection_get_context(xpc_connection_t connection )
	gid_t  xpc_connection_get_egid(xpc_connection_t connection )
	uid_t  xpc_connection_get_euid(xpc_connection_t connection )
	const char *  xpc_connection_get_name(xpc_connection_t connection )
	pid_t  xpc_connection_get_pid(xpc_connection_t connection )
	void  xpc_connection_resume(xpc_connection_t connection )
	void  xpc_connection_send_barrier(xpc_connection_t connection , ^(void)barrier )
	void  xpc_connection_send_message(xpc_connection_t connection , xpc_object_t message )
	void  xpc_connection_send_message_with_reply(xpc_connection_t connection , xpc_object_t message , dispatch_queue_t replyq , ^(xpc_object_t object)handler )
	xpc_object_t  xpc_connection_send_message_with_reply_sync(xpc_connection_t connection , xpc_object_t message )
	void  xpc_connection_set_context(xpc_connection_t connection , void *context )
	void  xpc_connection_set_event_handler(xpc_connection_t connection , ^(xpc_object_t object)handler )
	void  xpc_connection_set_finalizer_f(xpc_connection_t connection , xpc_finalizer_t finalizer )
	void  xpc_connection_set_target_queue(xpc_connection_t connection , dispatch_queue_t targetq )
	void  xpc_connection_suspend(xpc_connection_t connection )
	xpc_object_t  xpc_copy(xpc_object_t object )
	char *  xpc_copy_description(xpc_object_t object )
	xpc_object_t  xpc_data_create(const void *bytes , size_t length )
	xpc_object_t  xpc_data_create_with_dispatch_data(dispatch_data_t ddata )
	size_t  xpc_data_get_bytes(xpc_object_t xdata , void *buffer , size_t off , size_t length )
	const void *  xpc_data_get_bytes_ptr(xpc_object_t xdata )
	size_t  xpc_data_get_length(xpc_object_t xdata )
	xpc_object_t  xpc_date_create(int64_t interval )
	xpc_object_t  xpc_date_create_from_current()
	int64_t  xpc_date_get_value(xpc_object_t xdate )
	const char *  xpc_debugger_api_misuse_info()
	bool  xpc_dictionary_apply(xpc_object_t xdict , ^bool(const char *key, xpc_object_t value)applier )
	xpc_object_t  xpc_dictionary_create(const char *const *keys , const xpc_object_t *values , size_t count )
	xpc_connection_t  xpc_dictionary_create_connection(xpc_object_t xdict , const char *key )
	xpc_object_t  xpc_dictionary_create_reply(xpc_object_t original )
	int  xpc_dictionary_dup_fd(xpc_object_t xdict , const char *key )
	bool  xpc_dictionary_get_bool(xpc_object_t xdict , const char *key )
	size_t  xpc_dictionary_get_count(xpc_object_t xdict )
	const void *  xpc_dictionary_get_data(xpc_object_t xdict , const char *key , size_t *length )
	int64_t  xpc_dictionary_get_date(xpc_object_t xdict , const char *key )
	double  xpc_dictionary_get_double(xpc_object_t xdict , const char *key )
	int64_t  xpc_dictionary_get_int64(xpc_object_t xdict , const char *key )
	xpc_connection_t  xpc_dictionary_get_remote_connection(xpc_object_t xdict )
	const char *  xpc_dictionary_get_string(xpc_object_t xdict , const char *key )
	uint64_t  xpc_dictionary_get_uint64(xpc_object_t xdict , const char *key )
	const uint8_t *  xpc_dictionary_get_uuid(xpc_object_t xdict , const char *key )
	xpc_object_t  xpc_dictionary_get_value(xpc_object_t xdict , const char *key )
	void  xpc_dictionary_set_bool(xpc_object_t xdict , const char *key , bool value )
	void  xpc_dictionary_set_connection(xpc_object_t xdict , const char *key , xpc_connection_t connection )
	void  xpc_dictionary_set_data(xpc_object_t xdict , const char *key , const void *bytes , size_t length )
	void  xpc_dictionary_set_date(xpc_object_t xdict , const char *key , int64_t value )
	void  xpc_dictionary_set_double(xpc_object_t xdict , const char *key , double value )
	void  xpc_dictionary_set_fd(xpc_object_t xdict , const char *key , int fd )
	void  xpc_dictionary_set_int64(xpc_object_t xdict , const char *key , int64_t value )
	void  xpc_dictionary_set_string(xpc_object_t xdict , const char *key , const char *string )
	void  xpc_dictionary_set_uint64(xpc_object_t xdict , const char *key , uint64_t value )
	void  xpc_dictionary_set_uuid(xpc_object_t xdict , const char *key , const unsigned char *uuid )
	void  xpc_dictionary_set_value(xpc_object_t xdict , const char *key , xpc_object_t value )
	xpc_object_t  xpc_double_create(double value )
	double  xpc_double_get_value(xpc_object_t xdouble )
	xpc_endpoint_t  xpc_endpoint_create(xpc_connection_t connection )
	bool  xpc_equal(xpc_object_t object1 , xpc_object_t object2 )
	xpc_object_t  xpc_fd_create(int fd )
	int  xpc_fd_dup(xpc_object_t xfd )
	xpc_type_t  xpc_get_type(xpc_object_t object )
	size_t  xpc_hash(xpc_object_t object )
	xpc_object_t  xpc_int64_create(int64_t value )
	int64_t  xpc_int64_get_value(xpc_object_t xint )
	void  xpc_main(xpc_connection_handler_t handler )
	xpc_object_t  xpc_null_create()
	void  xpc_release(xpc_object_t object )
	xpc_object_t  xpc_retain(xpc_object_t object )
	void  xpc_set_event_stream_handler(const char *stream , dispatch_queue_t targetq , ^(xpc_object_t object)handler )
	xpc_object_t  xpc_shmem_create(void *region , size_t length )
	size_t  xpc_shmem_map(xpc_object_t xshmem , void **region )
	xpc_object_t  xpc_string_create(const char *string )
	xpc_object_t  xpc_string_create_with_format(const char *fmt, ... )
	xpc_object_t  xpc_string_create_with_format_and_arguments(const char *fmt , __va_list_tag *ap )
	size_t  xpc_string_get_length(xpc_object_t xstring )
	const char *  xpc_string_get_string_ptr(xpc_object_t xstring )
	void  xpc_transaction_begin()
	void  xpc_transaction_end()
	xpc_object_t  xpc_uint64_create(uint64_t value )
	uint64_t  xpc_uint64_get_value(xpc_object_t xuint )
	xpc_object_t  xpc_uuid_create(const unsigned char *uuid )
	const uint8_t *  xpc_uuid_get_bytes(xpc_object_t xuuid )
	double  y0(double )
	double  y1(double )
	OSErr  YieldToAnyThread()
	OSErr  YieldToThread(ThreadID suggestedThread )
	double  yn(int , double )
	FILE *  zopen(const char * , const char * , int )
